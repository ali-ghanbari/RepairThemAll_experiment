{
  "repair_end": "2018-12-02 13:12:23.811164", 
  "repair_begin": "2018-12-02 12:44:48.310390", 
  "patches": [
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_846/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:04:31.699940108 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_846/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:04:31.703940260 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +384,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_846/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:04:31.703940260 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_846/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:04:31.707940412 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 301, 
          "faulty": "return \"NOT\";", 
          "type": "Delete", 
          "seed": "int c=getChar();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1232/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:09:44.255925595 -0500\n@@ -298,7 +298,7 @@\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n           case MOD:             return \"MOD\";\n-          case NOT:             return \"NOT\";\n+          case NOT:             ;\n           case BITNOT:          return \"BITNOT\";\n           case POS:             return \"POS\";\n           case NEG:             return \"NEG\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1232/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:09:44.255925595 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1232/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:09:44.259925747 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -384,8 +384,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1232/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:09:44.263925899 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_22/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:53:09.866308268 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_22/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:53:09.870308417 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_22/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:53:09.870308417 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "InsertBefore", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 358, 
          "faulty": "reportCodeChange();", 
          "type": "InsertBefore", 
          "seed": "int keyParent=key(parent);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 358, 
          "faulty": "reportCodeChange();", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 321, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_724/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:02:58.640411578 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_724/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:02:58.644411729 -0500\n@@ -318,25 +318,6 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n-        && s.charAt(0) == '0'\n-        && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n-      // Attempt to convert hex numbers.\n-      try {\n-        return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n-      } catch (NumberFormatException e) {\n-        return Double.NaN;\n-      }\n-    }\n-\n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +327,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +353,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +365,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_724/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:02:58.644411729 -0500\n@@ -1142,17 +1142,9 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n+    StringBuilder builder = new StringBuilder();\n+    int start = 0;\n+\tout.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_724/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:02:58.648411880 -0500\n@@ -260,9 +260,6 @@\n     } else {\n       replacement = Node.newNumber(value);\n     }\n-\n-    n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n@@ -352,12 +349,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 303, 
          "faulty": "return \"POS\";", 
          "type": "Delete", 
          "seed": "rehashTable();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 315, 
          "faulty": "String s=trimJsWhiteSpace(rawJsString);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_810/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:03:59.606719398 -0500\n@@ -300,7 +300,7 @@\n           case MOD:             return \"MOD\";\n           case NOT:             return \"NOT\";\n           case BITNOT:          return \"BITNOT\";\n-          case POS:             return \"POS\";\n+          case POS:             ;\n           case NEG:             return \"NEG\";\n           case NEW:             return \"NEW\";\n           case DELPROP:         return \"DELPROP\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_810/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:03:59.610719550 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_810/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:03:59.610719550 -0500\n@@ -312,7 +312,8 @@\n   static Double getStringNumberValue(String rawJsString) {\n       // vertical tab is not always whitespace\n \n-    String s = trimJsWhiteSpace(rawJsString);\n+    int index = -1;\n+\tString s = trimJsWhiteSpace(rawJsString);\n     // return ScriptRuntime.toNumber(s);\n     if (s.length() == 0) {\n       return 0.0;\n@@ -346,7 +347,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +373,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +385,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_810/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:03:59.614719701 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_810/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:03:59.614719701 -0500\n@@ -260,9 +260,6 @@\n     } else {\n       replacement = Node.newNumber(value);\n     }\n-\n-    n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 301, 
          "faulty": "return \"NOT\";", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 245, 
          "faulty": "Double result=NodeUtil.getNumberValue(n);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1156/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:08:42.425574128 -0500\n@@ -298,7 +298,7 @@\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n           case MOD:             return \"MOD\";\n-          case NOT:             return \"NOT\";\n+          case NOT:             int count = 0;\n           case BITNOT:          return \"BITNOT\";\n           case POS:             return \"POS\";\n           case NEG:             return \"NEG\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1156/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:08:42.429574279 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1156/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:08:42.429574279 -0500\n@@ -298,7 +298,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1156/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:08:42.433574433 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1156/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:08:42.433574433 -0500\n@@ -242,7 +242,8 @@\n         break;\n     }\n \n-    Double result = NodeUtil.getNumberValue(n);\n+    int start = 0;\n+\tDouble result = NodeUtil.getNumberValue(n);\n     if (result == null) {\n       return;\n     }\n@@ -352,12 +353,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 358, 
          "faulty": "reportCodeChange();", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_225/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:55:58.352599835 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_225/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:55:58.352599835 -0500\n@@ -298,7 +298,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_225/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:55:58.356599983 -0500\n@@ -1142,20 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n-        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n-        .append(HEX_CHARS[codePoint & 0xf]);\n+    StringBuilder builder = new StringBuilder();\n+    int index = -1;\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_225/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:55:58.356599983 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_268/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:56:31.581841861 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_268/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:56:31.585842010 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        StringBuilder builder = new StringBuilder();\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_268/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:56:31.585842010 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_268/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:56:31.589842161 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 359, 
          "faulty": "return left;", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_642/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:02:00.626218159 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_642/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:02:00.630218310 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_642/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:02:00.630218310 -0500\n@@ -1152,7 +1152,8 @@\n       appendHexJavaScriptRepresentation(surrogates[1], out);\n       return;\n     }\n-    out.append(\"\\\\u\")\n+    int start = 0;\n+\tout.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_642/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:02:00.634218461 -0500\n@@ -353,10 +353,7 @@\n         return replacementNode;\n       case Token.POS:\n         if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n           reportCodeChange();\n-          return left;\n         }\n         return n;\n       case Token.NEG:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_88/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:54:02.748281661 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_88/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:54:02.748281661 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 317, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 321, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_928/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:05:41.214621225 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_928/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:05:41.218621379 -0500\n@@ -313,22 +313,6 @@\n       // vertical tab is not always whitespace\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n-    if (s.length() > 2\n-        && s.charAt(0) == '0'\n-        && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n-      // Attempt to convert hex numbers.\n-      try {\n-        return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n-      } catch (NumberFormatException e) {\n-        return Double.NaN;\n-      }\n-    }\n-\n     if (s.length() > 3\n         && (s.charAt(0) == '-' || s.charAt(0) == '+')\n         && s.charAt(1) == '0'\n@@ -346,7 +330,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +356,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +368,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_928/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:05:41.222621534 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_928/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:05:41.222621534 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_356/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:57:49.556757428 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_356/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:57:49.560757578 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_356/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:57:49.560757578 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int index = -1;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_356/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:57:49.564757728 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 301, 
          "faulty": "return \"NOT\";", 
          "type": "Delete", 
          "seed": "return Token.LP;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_699/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:02:39.375683681 -0500\n@@ -298,7 +298,7 @@\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n           case MOD:             return \"MOD\";\n-          case NOT:             return \"NOT\";\n+          case NOT:             ;\n           case BITNOT:          return \"BITNOT\";\n           case POS:             return \"POS\";\n           case NEG:             return \"NEG\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_699/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:02:39.379683832 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_699/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:02:39.383683983 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -384,8 +384,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_699/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:02:39.383683983 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,17 +1143,9 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n+    int index = -1;\n+    int start = 0;\n+\tout.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_699/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:02:39.387684135 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_377/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:58:14.877704473 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_377/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:58:14.881704621 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_377/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:58:14.881704621 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int index = -1;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1152,10 +1153,6 @@\n       appendHexJavaScriptRepresentation(surrogates[1], out);\n       return;\n     }\n-    out.append(\"\\\\u\")\n-        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n-        .append(HEX_CHARS[codePoint & 0xf]);\n+    StringBuilder builder = new StringBuilder();\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_168/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:55:06.090647085 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_168/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:55:06.094647234 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_168/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:55:06.098647383 -0500\n@@ -353,8 +353,6 @@\n         return replacementNode;\n       case Token.POS:\n         if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n           reportCodeChange();\n           return left;\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 359, 
          "faulty": "return left;", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "return isExported(name,false) || isExported(name,true);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_802/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:03:54.702532668 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_802/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:03:54.706532820 -0500\n@@ -298,7 +298,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_802/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:03:54.710532973 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_802/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:03:54.710532973 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 301, 
          "faulty": "return \"NOT\";", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "InsertBefore", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1136/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:08:25.064913233 -0500\n@@ -298,7 +298,7 @@\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n           case MOD:             return \"MOD\";\n-          case NOT:             return \"NOT\";\n+          case NOT:             int count = 0;\n           case BITNOT:          return \"BITNOT\";\n           case POS:             return \"POS\";\n           case NEG:             return \"NEG\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1136/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:08:25.064913233 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1136/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:08:25.068913384 -0500\n@@ -298,7 +298,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1136/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:08:25.068913384 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1136/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:08:25.072913538 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        int start = 0;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 317, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "boolean nullKey=false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 301, 
          "faulty": "return \"NOT\";", 
          "type": "Delete", 
          "seed": "int c=getChar();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1227/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:09:41.471819786 -0500\n@@ -298,7 +298,7 @@\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n           case MOD:             return \"MOD\";\n-          case NOT:             return \"NOT\";\n+          case NOT:             ;\n           case BITNOT:          return \"BITNOT\";\n           case POS:             return \"POS\";\n           case NEG:             return \"NEG\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1227/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:09:41.475819938 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1227/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:09:41.475819938 -0500\n@@ -313,11 +313,6 @@\n       // vertical tab is not always whitespace\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -329,13 +324,7 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n+    StringBuilder builder = new StringBuilder();\n \n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n@@ -346,7 +335,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -384,8 +373,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1227/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:09:41.479820090 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1227/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:09:41.479820090 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "InsertBefore", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_637/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:01:57.338093705 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_637/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:01:57.342093858 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -384,8 +376,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_637/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:01:57.342093858 -0500\n@@ -1142,16 +1142,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_637/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:01:57.346094009 -0500\n@@ -260,9 +260,6 @@\n     } else {\n       replacement = Node.newNumber(value);\n     }\n-\n-    n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n@@ -352,12 +349,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "consumeToken();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 2141, 
          "faulty": "return \"+\";", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "InsertBefore", 
          "seed": "Class c=n.getClass();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1335/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:11:07.411082912 -0500\n@@ -1410,7 +1410,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        Class c = n.getClass();\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1335/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:11:07.415083064 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -2138,7 +2138,7 @@\n       case Token.BITNOT: return \"~\";\n       case Token.ADD: return \"+\";\n       case Token.SUB: return \"-\";\n-      case Token.POS: return \"+\";\n+      case Token.POS: int index = -1;\n       case Token.NEG: return \"-\";\n       case Token.ASSIGN: return \"=\";\n       case Token.ASSIGN_BITOR: return \"|=\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1335/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:11:07.419083217 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1335/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:11:07.419083217 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_83/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:53:59.876174448 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_83/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:53:59.880174597 -0500\n@@ -298,7 +298,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 359, 
          "faulty": "return left;", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_627/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:01:48.853772509 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_627/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:01:48.857772661 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +364,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_627/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:01:48.857772661 -0500\n@@ -1152,7 +1152,8 @@\n       appendHexJavaScriptRepresentation(surrogates[1], out);\n       return;\n     }\n-    out.append(\"\\\\u\")\n+    int start = 0;\n+\tout.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_627/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:01:48.861772812 -0500\n@@ -353,10 +353,7 @@\n         return replacementNode;\n       case Token.POS:\n         if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n           reportCodeChange();\n-          return left;\n         }\n         return n;\n       case Token.NEG:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 317, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "boolean nullKey=false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "start++;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 246, 
          "faulty": "if (result == null) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 357, 
          "faulty": "int end=s.length();", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 359, 
          "faulty": "return left;", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "consumeToken();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 2141, 
          "faulty": "return \"+\";", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1390/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:11:47.344597286 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1390/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:11:47.348597439 -0500\n@@ -313,11 +313,6 @@\n       // vertical tab is not always whitespace\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -346,7 +341,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -354,14 +349,16 @@\n \n   static String trimJsWhiteSpace(String s) {\n     int start = 0;\n-    int end = s.length();\n+    StringBuilder builder = new StringBuilder();\n+\tint end = s.length();\n     while (end > 0\n         && isStrWhiteSpaceChar(s.charAt(end - 1)) == TernaryValue.TRUE) {\n       end--;\n     }\n     while (start < end\n         && isStrWhiteSpaceChar(s.charAt(start)) == TernaryValue.TRUE) {\n-      start++;\n+      int index = -1;\n+\tstart++;\n     }\n     return s.substring(start, end);\n   }\n@@ -384,8 +381,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n@@ -2138,7 +2138,7 @@\n       case Token.BITNOT: return \"~\";\n       case Token.ADD: return \"+\";\n       case Token.SUB: return \"-\";\n-      case Token.POS: return \"+\";\n+      case Token.POS: int index = -1;\n       case Token.NEG: return \"-\";\n       case Token.ASSIGN: return \"=\";\n       case Token.ASSIGN_BITOR: return \"|=\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1390/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:11:47.348597439 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1390/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:11:47.352597590 -0500\n@@ -243,7 +243,8 @@\n     }\n \n     Double result = NodeUtil.getNumberValue(n);\n-    if (result == null) {\n+    int type = n.getType();\n+\tif (result == null) {\n       return;\n     }\n \n@@ -261,8 +262,8 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n+    StringBuilder builder = new StringBuilder();\n+\tn.getParent().replaceChild(n, replacement);\n   }\n \n   /**\n@@ -352,12 +353,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 257, 
          "faulty": "if (value == Double.NEGATIVE_INFINITY) {\n  replacement=new Node(Token.NEG,Node.newString(Token.NAME,\"Infinity\"));\n  replacement.copyInformationFromForTree(n);\n}\n else {\n  replacement=Node.newNumber(value);\n}", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_342/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:57:35.640236978 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_342/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:57:35.644237129 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +384,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_342/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:57:35.644237129 -0500\n@@ -1142,20 +1142,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n-        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n-        .append(HEX_CHARS[codePoint & 0xf]);\n+    StringBuilder builder = new StringBuilder();\n+    int start = 0;\n+\tint index = -1;\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_342/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:57:35.644237129 -0500\n@@ -254,12 +254,16 @@\n       replacement = Node.newString(Token.NAME, \"NaN\");\n     } else if (value == Double.POSITIVE_INFINITY) {\n       replacement = Node.newString(Token.NAME, \"Infinity\");\n-    } else if (value == Double.NEGATIVE_INFINITY) {\n-      replacement = new Node(Token.NEG, Node.newString(Token.NAME, \"Infinity\"));\n-      replacement.copyInformationFromForTree(n);\n     } else {\n-      replacement = Node.newNumber(value);\n-    }\n+\t\tint start = 0;\n+\t\tif (value == Double.NEGATIVE_INFINITY) {\n+\t\t\treplacement = new Node(Token.NEG, Node.newString(Token.NAME,\n+\t\t\t\t\t\"Infinity\"));\n+\t\t\treplacement.copyInformationFromForTree(n);\n+\t\t} else {\n+\t\t\treplacement = Node.newNumber(value);\n+\t\t}\n+\t}\n \n     n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n@@ -352,12 +356,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 301, 
          "faulty": "return \"NOT\";", 
          "type": "InsertBefore", 
          "seed": "Node pn=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 303, 
          "faulty": "return \"POS\";", 
          "type": "InsertBefore", 
          "seed": "boolean isUnicodeEscapeStart=false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_276/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:56:37.050046277 -0500\n@@ -298,9 +298,15 @@\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n           case MOD:             return \"MOD\";\n-          case NOT:             return \"NOT\";\n+          case NOT:             {\n+\t\t\t\tNode pn = null;\n+\t\t\t\treturn \"NOT\";\n+\t\t\t}\n           case BITNOT:          return \"BITNOT\";\n-          case POS:             return \"POS\";\n+          case POS:             {\n+\t\t\t\tboolean isUnicodeEscapeStart = false;\n+\t\t\t\treturn \"POS\";\n+\t\t\t}\n           case NEG:             return \"NEG\";\n           case NEW:             return \"NEW\";\n           case DELPROP:         return \"DELPROP\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_276/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:56:37.050046277 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_276/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:56:37.054046428 -0500\n@@ -298,7 +298,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -346,7 +349,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 317, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "boolean nullKey=false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "start++;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 246, 
          "faulty": "if (result == null) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 357, 
          "faulty": "int end=s.length();", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 359, 
          "faulty": "return left;", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1289/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:10:26.461528788 -0500\n@@ -1410,7 +1410,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        boolean nullKey = false;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1289/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:10:26.465528940 -0500\n@@ -313,11 +313,6 @@\n       // vertical tab is not always whitespace\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -346,7 +341,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -354,14 +349,16 @@\n \n   static String trimJsWhiteSpace(String s) {\n     int start = 0;\n-    int end = s.length();\n+    StringBuilder builder = new StringBuilder();\n+\tint end = s.length();\n     while (end > 0\n         && isStrWhiteSpaceChar(s.charAt(end - 1)) == TernaryValue.TRUE) {\n       end--;\n     }\n     while (start < end\n         && isStrWhiteSpaceChar(s.charAt(start)) == TernaryValue.TRUE) {\n-      start++;\n+      int index = -1;\n+\tstart++;\n     }\n     return s.substring(start, end);\n   }\n@@ -384,8 +381,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1289/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:10:26.469529092 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1289/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:10:26.469529092 -0500\n@@ -243,7 +243,8 @@\n     }\n \n     Double result = NodeUtil.getNumberValue(n);\n-    if (result == null) {\n+    int type = n.getType();\n+\tif (result == null) {\n       return;\n     }\n \n@@ -352,12 +353,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 301, 
          "faulty": "return \"NOT\";", 
          "type": "Delete", 
          "seed": "int c=getChar();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1123/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:08:16.036569417 -0500\n@@ -298,7 +298,7 @@\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n           case MOD:             return \"MOD\";\n-          case NOT:             return \"NOT\";\n+          case NOT:             ;\n           case BITNOT:          return \"BITNOT\";\n           case POS:             return \"POS\";\n           case NEG:             return \"NEG\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1123/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:08:16.040569569 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1123/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:08:16.040569569 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +384,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1123/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:08:16.044569722 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1123/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:08:16.044569722 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1019, 
          "faulty": "appendHexJavaScriptRepresentation(sb,c);", 
          "type": "Delete", 
          "seed": "sb.setLength(0);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_639/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:01:58.402133981 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_639/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:01:58.406134132 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +384,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_639/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:01:58.410134284 -0500\n@@ -1013,10 +1013,6 @@\n             if (c > 0x1f && c <= 0x7f) {\n               sb.append(c);\n             } else {\n-              // Other characters can be misinterpreted by some js parsers,\n-              // or perhaps mangled by proxies along the way,\n-              // so we play it safe and unicode escape them.\n-              appendHexJavaScriptRepresentation(sb, c);\n             }\n           }\n       }\n@@ -1125,7 +1121,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1139,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_639/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:01:58.410134284 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_418/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:58:56.727269951 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_418/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:58:56.731270101 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_418/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:58:56.735270250 -0500\n@@ -1142,20 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n-        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n-        .append(HEX_CHARS[codePoint & 0xf]);\n+    StringBuilder builder = new StringBuilder();\n+    int index = -1;\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_418/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:58:56.735270250 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_471/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:59:34.164676006 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_471/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:59:34.168676158 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +384,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_471/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:59:34.172676308 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_471/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:59:34.172676308 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_388/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:58:24.130050554 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_388/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:58:24.134050703 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_388/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:58:24.134050703 -0500\n@@ -1142,20 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n-        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n-        .append(HEX_CHARS[codePoint & 0xf]);\n+    StringBuilder builder = new StringBuilder();\n+    int index = -1;\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_388/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:58:24.138050852 -0500\n@@ -262,7 +262,6 @@\n     }\n \n     n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 246, 
          "faulty": "if (result == null) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 303, 
          "faulty": "return \"POS\";", 
          "type": "Delete", 
          "seed": "switch (token) {\ncase ERROR:\n  return \"ERROR\";\ncase EOF:\nreturn \"EOF\";\ncase EOL:\nreturn \"EOL\";\ncase ENTERWITH:\nreturn \"ENTERWITH\";\ncase LEAVEWITH:\nreturn \"LEAVEWITH\";\ncase RETURN:\nreturn \"RETURN\";\ncase GOTO:\nreturn \"GOTO\";\ncase IFEQ:\nreturn \"IFEQ\";\ncase IFNE:\nreturn \"IFNE\";\ncase SETNAME:\nreturn \"SETNAME\";\ncase BITOR:\nreturn \"BITOR\";\ncase BITXOR:\nreturn \"BITXOR\";\ncase BITAND:\nreturn \"BITAND\";\ncase EQ:\nreturn \"EQ\";\ncase NE:\nreturn \"NE\";\ncase LT:\nreturn \"LT\";\ncase LE:\nreturn \"LE\";\ncase GT:\nreturn \"GT\";\ncase GE:\nreturn \"GE\";\ncase LSH:\nreturn \"LSH\";\ncase RSH:\nreturn \"RSH\";\ncase URSH:\nreturn \"URSH\";\ncase ADD:\nreturn \"ADD\";\ncase SUB:\nreturn \"SUB\";\ncase MUL:\nreturn \"MUL\";\ncase DIV:\nreturn \"DIV\";\ncase MOD:\nreturn \"MOD\";\ncase NOT:\nreturn \"NOT\";\ncase BITNOT:\nreturn \"BITNOT\";\ncase POS:\nreturn \"POS\";\ncase NEG:\nreturn \"NEG\";\ncase NEW:\nreturn \"NEW\";\ncase DELPROP:\nreturn \"DELPROP\";\ncase TYPEOF:\nreturn \"TYPEOF\";\ncase GETPROP:\nreturn \"GETPROP\";\ncase SETPROP:\nreturn \"SETPROP\";\ncase GETELEM:\nreturn \"GETELEM\";\ncase SETELEM:\nreturn \"SETELEM\";\ncase CALL:\nreturn \"CALL\";\ncase NAME:\nreturn \"NAME\";\ncase LABEL_NAME:\nreturn \"LABEL_NAME\";\ncase NUMBER:\nreturn \"NUMBER\";\ncase STRING:\nreturn \"STRING\";\ncase NULL:\nreturn \"NULL\";\ncase THIS:\nreturn \"THIS\";\ncase FALSE:\nreturn \"FALSE\";\ncase TRUE:\nreturn \"TRUE\";\ncase SHEQ:\nreturn \"SHEQ\";\ncase SHNE:\nreturn \"SHNE\";\ncase REGEXP:\nreturn \"REGEXP\";\ncase BINDNAME:\nreturn \"BINDNAME\";\ncase THROW:\nreturn \"THROW\";\ncase RETHROW:\nreturn \"RETHROW\";\ncase IN:\nreturn \"IN\";\ncase INSTANCEOF:\nreturn \"INSTANCEOF\";\ncase LOCAL_LOAD:\nreturn \"LOCAL_LOAD\";\ncase GETVAR:\nreturn \"GETVAR\";\ncase SETVAR:\nreturn \"SETVAR\";\ncase CATCH_SCOPE:\nreturn \"CATCH_SCOPE\";\ncase ENUM_INIT_KEYS:\nreturn \"ENUM_INIT_KEYS\";\ncase ENUM_INIT_VALUES:\nreturn \"ENUM_INIT_VALUES\";\ncase ENUM_NEXT:\nreturn \"ENUM_NEXT\";\ncase ENUM_ID:\nreturn \"ENUM_ID\";\ncase THISFN:\nreturn \"THISFN\";\ncase RETURN_RESULT:\nreturn \"RETURN_RESULT\";\ncase ARRAYLIT:\nreturn \"ARRAYLIT\";\ncase OBJECTLIT:\nreturn \"OBJECTLIT\";\ncase GET_REF:\nreturn \"GET_REF\";\ncase SET_REF:\nreturn \"SET_REF\";\ncase DEL_REF:\nreturn \"DEL_REF\";\ncase REF_CALL:\nreturn \"REF_CALL\";\ncase REF_SPECIAL:\nreturn \"REF_SPECIAL\";\ncase DEFAULTNAMESPACE:\nreturn \"DEFAULTNAMESPACE\";\ncase ESCXMLTEXT:\nreturn \"ESCXMLTEXT\";\ncase ESCXMLATTR:\nreturn \"ESCXMLATTR\";\ncase REF_MEMBER:\nreturn \"REF_MEMBER\";\ncase REF_NS_MEMBER:\nreturn \"REF_NS_MEMBER\";\ncase REF_NAME:\nreturn \"REF_NAME\";\ncase REF_NS_NAME:\nreturn \"REF_NS_NAME\";\ncase TRY:\nreturn \"TRY\";\ncase SEMI:\nreturn \"SEMI\";\ncase LB:\nreturn \"LB\";\ncase RB:\nreturn \"RB\";\ncase LC:\nreturn \"LC\";\ncase RC:\nreturn \"RC\";\ncase LP:\nreturn \"LP\";\ncase RP:\nreturn \"RP\";\ncase COMMA:\nreturn \"COMMA\";\ncase ASSIGN:\nreturn \"ASSIGN\";\ncase ASSIGN_BITOR:\nreturn \"ASSIGN_BITOR\";\ncase ASSIGN_BITXOR:\nreturn \"ASSIGN_BITXOR\";\ncase ASSIGN_BITAND:\nreturn \"ASSIGN_BITAND\";\ncase ASSIGN_LSH:\nreturn \"ASSIGN_LSH\";\ncase ASSIGN_RSH:\nreturn \"ASSIGN_RSH\";\ncase ASSIGN_URSH:\nreturn \"ASSIGN_URSH\";\ncase ASSIGN_ADD:\nreturn \"ASSIGN_ADD\";\ncase ASSIGN_SUB:\nreturn \"ASSIGN_SUB\";\ncase ASSIGN_MUL:\nreturn \"ASSIGN_MUL\";\ncase ASSIGN_DIV:\nreturn \"ASSIGN_DIV\";\ncase ASSIGN_MOD:\nreturn \"ASSIGN_MOD\";\ncase HOOK:\nreturn \"HOOK\";\ncase COLON:\nreturn \"COLON\";\ncase OR:\nreturn \"OR\";\ncase AND:\nreturn \"AND\";\ncase INC:\nreturn \"INC\";\ncase DEC:\nreturn \"DEC\";\ncase DOT:\nreturn \"DOT\";\ncase FUNCTION:\nreturn \"FUNCTION\";\ncase EXPORT:\nreturn \"EXPORT\";\ncase IMPORT:\nreturn \"IMPORT\";\ncase IF:\nreturn \"IF\";\ncase ELSE:\nreturn \"ELSE\";\ncase SWITCH:\nreturn \"SWITCH\";\ncase CASE:\nreturn \"CASE\";\ncase DEFAULT:\nreturn \"DEFAULT\";\ncase WHILE:\nreturn \"WHILE\";\ncase DO:\nreturn \"DO\";\ncase FOR:\nreturn \"FOR\";\ncase BREAK:\nreturn \"BREAK\";\ncase CONTINUE:\nreturn \"CONTINUE\";\ncase VAR:\nreturn \"VAR\";\ncase WITH:\nreturn \"WITH\";\ncase CATCH:\nreturn \"CATCH\";\ncase FINALLY:\nreturn \"FINALLY\";\ncase RESERVED:\nreturn \"RESERVED\";\ncase EMPTY:\nreturn \"EMPTY\";\ncase BLOCK:\nreturn \"BLOCK\";\ncase LABEL:\nreturn \"LABEL\";\ncase TARGET:\nreturn \"TARGET\";\ncase LOOP:\nreturn \"LOOP\";\ncase EXPR_VOID:\nreturn \"EXPR_VOID\";\ncase EXPR_RESULT:\nreturn \"EXPR_RESULT\";\ncase JSR:\nreturn \"JSR\";\ncase SCRIPT:\nreturn \"SCRIPT\";\ncase TYPEOFNAME:\nreturn \"TYPEOFNAME\";\ncase USE_STACK:\nreturn \"USE_STACK\";\ncase SETPROP_OP:\nreturn \"SETPROP_OP\";\ncase SETELEM_OP:\nreturn \"SETELEM_OP\";\ncase LOCAL_BLOCK:\nreturn \"LOCAL_BLOCK\";\ncase SET_REF_OP:\nreturn \"SET_REF_OP\";\ncase DOTDOT:\nreturn \"DOTDOT\";\ncase COLONCOLON:\nreturn \"COLONCOLON\";\ncase XML:\nreturn \"XML\";\ncase DOTQUERY:\nreturn \"DOTQUERY\";\ncase XMLATTR:\nreturn \"XMLATTR\";\ncase XMLEND:\nreturn \"XMLEND\";\ncase TO_OBJECT:\nreturn \"TO_OBJECT\";\ncase TO_DOUBLE:\nreturn \"TO_DOUBLE\";\ncase GET:\nreturn \"GET\";\ncase SET:\nreturn \"SET\";\ncase CONST:\nreturn \"CONST\";\ncase SETCONST:\nreturn \"SETCONST\";\ncase DEBUGGER:\nreturn \"DEBUGGER\";\ncase ANNOTATION:\nreturn \"ANNOTATION\";\ncase PIPE:\nreturn \"PIPE\";\ncase STAR:\nreturn \"STAR\";\ncase EOC:\nreturn \"EOC\";\ncase QMARK:\nreturn \"QMARK\";\ncase ELLIPSIS:\nreturn \"ELLIPSIS\";\ncase BANG:\nreturn \"BANG\";\ncase VOID:\nreturn \"VOID\";\ncase EQUALS:\nreturn \"EQUALS\";\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1361/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:11:26.335800725 -0500\n@@ -300,7 +300,7 @@\n           case MOD:             return \"MOD\";\n           case NOT:             return \"NOT\";\n           case BITNOT:          return \"BITNOT\";\n-          case POS:             return \"POS\";\n+          case POS:             ;\n           case NEG:             return \"NEG\";\n           case NEW:             return \"NEW\";\n           case DELPROP:         return \"DELPROP\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1361/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:11:26.339800875 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1361/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:11:26.339800875 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1361/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:11:26.343801028 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1361/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:11:26.343801028 -0500\n@@ -243,7 +243,8 @@\n     }\n \n     Double result = NodeUtil.getNumberValue(n);\n-    if (result == null) {\n+    Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n+\tif (result == null) {\n       return;\n     }\n \n@@ -353,8 +354,6 @@\n         return replacementNode;\n       case Token.POS:\n         if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n           reportCodeChange();\n           return left;\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 321, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "Context cx=Context.getCurrentContext();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_808/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:03:58.554679345 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_808/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:03:58.722685742 -0500\n@@ -318,17 +318,6 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n-        && s.charAt(0) == '0'\n-        && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n-      // Attempt to convert hex numbers.\n-      try {\n-        return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n-      } catch (NumberFormatException e) {\n-        return Double.NaN;\n-      }\n-    }\n-\n     if (s.length() > 3\n         && (s.charAt(0) == '-' || s.charAt(0) == '+')\n         && s.charAt(1) == '0'\n@@ -346,7 +335,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +361,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_808/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:03:58.722685742 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_808/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:03:58.726685894 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "consumeToken();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 2141, 
          "faulty": "return \"+\";", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 356, 
          "faulty": "int start=0;", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1346/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:11:15.579392767 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1346/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:11:15.583392919 -0500\n@@ -346,14 +346,15 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n   }\n \n   static String trimJsWhiteSpace(String s) {\n-    int start = 0;\n+    StringBuilder builder = new StringBuilder();\n+\tint start = 0;\n     int end = s.length();\n     while (end > 0\n         && isStrWhiteSpaceChar(s.charAt(end - 1)) == TernaryValue.TRUE) {\n@@ -2138,7 +2139,7 @@\n       case Token.BITNOT: return \"~\";\n       case Token.ADD: return \"+\";\n       case Token.SUB: return \"-\";\n-      case Token.POS: return \"+\";\n+      case Token.POS: int index = -1;\n       case Token.NEG: return \"-\";\n       case Token.ASSIGN: return \"=\";\n       case Token.ASSIGN_BITOR: return \"|=\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1346/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:11:15.583392919 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1346/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:11:15.587393070 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_191/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:55:32.999652419 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_191/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:55:33.003652569 -0500\n@@ -298,7 +298,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -346,7 +349,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +375,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 301, 
          "faulty": "return \"NOT\";", 
          "type": "Delete", 
          "seed": "int c=getChar();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1371, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1436/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:12:21.057874928 -0500\n@@ -298,7 +298,7 @@\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n           case MOD:             return \"MOD\";\n-          case NOT:             return \"NOT\";\n+          case NOT:             ;\n           case BITNOT:          return \"BITNOT\";\n           case POS:             return \"POS\";\n           case NEG:             return \"NEG\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1436/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:12:21.057874928 -0500\n@@ -1368,7 +1368,13 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n@@ -1410,7 +1416,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1436/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:12:21.061875078 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +384,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1436/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:12:21.065875231 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "consumeToken();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 2141, 
          "faulty": "return \"+\";", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 359, 
          "faulty": "return left;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1407/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:11:59.445055948 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1407/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:11:59.449056098 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -384,8 +384,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n@@ -2138,7 +2141,7 @@\n       case Token.BITNOT: return \"~\";\n       case Token.ADD: return \"+\";\n       case Token.SUB: return \"-\";\n-      case Token.POS: return \"+\";\n+      case Token.POS: int index = -1;\n       case Token.NEG: return \"-\";\n       case Token.ASSIGN: return \"=\";\n       case Token.ASSIGN_BITOR: return \"|=\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1407/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:11:59.453056251 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1407/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:11:59.453056251 -0500\n@@ -262,7 +262,6 @@\n     }\n \n     n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 359, 
          "faulty": "return left;", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 359, 
          "faulty": "return left;", 
          "type": "Replace", 
          "seed": "return toDot(n,null);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_502/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:00:00.145654252 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_502/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:00:00.145654252 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +364,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_502/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:00:00.149654401 -0500\n@@ -1142,17 +1142,9 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n+    StringBuilder builder = new StringBuilder();\n+    int start = 0;\n+\tout.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_502/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:00:00.149654401 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_423/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:58:59.543375303 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_423/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:58:59.547375453 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +364,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +376,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_423/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:58:59.551375603 -0500\n@@ -1142,17 +1142,9 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n+    StringBuilder builder = new StringBuilder();\n+    int start = 0;\n+\tout.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_423/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:58:59.551375603 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_231/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:56:03.108777590 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_231/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:56:03.112777739 -0500\n@@ -298,7 +298,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "start++;", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 2141, 
          "faulty": "return \"+\";", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_300/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:57:03.007016719 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -361,7 +361,9 @@\n     }\n     while (start < end\n         && isStrWhiteSpaceChar(s.charAt(start)) == TernaryValue.TRUE) {\n-      start++;\n+      Node parameterName = Node.newString(Token.NAME,\n+\t\t\t\t\t\"jscomp_throw_param\");\n+\tstart++;\n     }\n     return s.substring(start, end);\n   }\n@@ -2138,7 +2140,7 @@\n       case Token.BITNOT: return \"~\";\n       case Token.ADD: return \"+\";\n       case Token.SUB: return \"-\";\n-      case Token.POS: return \"+\";\n+      case Token.POS: int index = -1;\n       case Token.NEG: return \"-\";\n       case Token.ASSIGN: return \"=\";\n       case Token.ASSIGN_BITOR: return \"|=\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_300/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:57:03.011016868 -0500\n@@ -262,7 +262,6 @@\n     }\n \n     n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 358, 
          "faulty": "reportCodeChange();", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_253/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:56:19.633395224 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_253/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:56:19.633395224 -0500\n@@ -298,7 +298,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_253/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:56:19.637395373 -0500\n@@ -1142,20 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n-        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n-        .append(HEX_CHARS[codePoint & 0xf]);\n+    StringBuilder builder = new StringBuilder();\n+    int index = -1;\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_253/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:56:19.637395373 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 301, 
          "faulty": "return \"NOT\";", 
          "type": "InsertBefore", 
          "seed": "Node pn=null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_220/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:55:55.376488609 -0500\n@@ -298,7 +298,10 @@\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n           case MOD:             return \"MOD\";\n-          case NOT:             return \"NOT\";\n+          case NOT:             {\n+\t\t\t\tNode pn = null;\n+\t\t\t\treturn \"NOT\";\n+\t\t\t}\n           case BITNOT:          return \"BITNOT\";\n           case POS:             return \"POS\";\n           case NEG:             return \"NEG\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_220/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:55:55.376488609 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_220/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:55:55.380488760 -0500\n@@ -298,7 +298,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -346,7 +349,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_220/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:55:55.384488909 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 317, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 301, 
          "faulty": "return \"NOT\";", 
          "type": "Delete", 
          "seed": "return new ScriptOrFnNode(Token.SCRIPT);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_926/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:05:40.010574697 -0500\n@@ -298,7 +298,7 @@\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n           case MOD:             return \"MOD\";\n-          case NOT:             return \"NOT\";\n+          case NOT:             ;\n           case BITNOT:          return \"BITNOT\";\n           case POS:             return \"POS\";\n           case NEG:             return \"NEG\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_926/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:05:40.010574697 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_926/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:05:40.014574852 -0500\n@@ -313,11 +313,6 @@\n       // vertical tab is not always whitespace\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -346,7 +341,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +367,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +379,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_926/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:05:40.018575006 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_926/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:05:40.018575006 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 301, 
          "faulty": "return \"NOT\";", 
          "type": "Delete", 
          "seed": "int c=getChar();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1214/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:09:31.551442715 -0500\n@@ -298,7 +298,7 @@\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n           case MOD:             return \"MOD\";\n-          case NOT:             return \"NOT\";\n+          case NOT:             ;\n           case BITNOT:          return \"BITNOT\";\n           case POS:             return \"POS\";\n           case NEG:             return \"NEG\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1214/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:09:31.555442867 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1214/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:09:31.555442867 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -384,8 +384,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1214/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:09:31.559443019 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1214/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:09:31.559443019 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 261, 
          "faulty": "replacement=Node.newNumber(value);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return this;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_391/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:58:26.318132400 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_391/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:58:26.318132400 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +364,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        StringBuilder builder = new StringBuilder();\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_391/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:58:26.322132549 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,20 +1143,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n-        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n-        .append(HEX_CHARS[codePoint & 0xf]);\n+    int index = -1;\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_391/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:58:26.322132549 -0500\n@@ -258,10 +258,9 @@\n       replacement = new Node(Token.NEG, Node.newString(Token.NAME, \"Infinity\"));\n       replacement.copyInformationFromForTree(n);\n     } else {\n-      replacement = Node.newNumber(value);\n+      StringBuilder builder = new StringBuilder();\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "InsertBefore", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 358, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_751/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:03:19.385194925 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_751/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:03:19.389195076 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +364,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +376,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_751/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:03:19.389195076 -0500\n@@ -1142,16 +1142,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_751/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:03:19.393195227 -0500\n@@ -260,9 +260,6 @@\n     } else {\n       replacement = Node.newNumber(value);\n     }\n-\n-    n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n@@ -352,12 +349,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_459/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:59:26.020369256 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_459/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:59:26.024369406 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +384,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_459/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:59:26.024369406 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_459/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:59:26.028369557 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "InsertBefore", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_564/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:00:56.035770374 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_564/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:00:56.039770526 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -384,8 +376,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_564/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:00:56.039770526 -0500\n@@ -1142,17 +1142,9 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n+    StringBuilder builder = new StringBuilder();\n+    int start = 0;\n+\tout.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_564/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:00:56.043770679 -0500\n@@ -260,9 +260,6 @@\n     } else {\n       replacement = Node.newNumber(value);\n     }\n-\n-    n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n@@ -352,12 +349,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 359, 
          "faulty": "return left;", 
          "type": "InsertBefore", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_916/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:05:33.430320304 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_916/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:05:33.430320304 -0500\n@@ -346,7 +346,8 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n+\treturn null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +373,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +385,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_916/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:05:33.434320457 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,17 +1143,9 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n+    StringBuilder builder = new StringBuilder();\n+    int index = -1;\n+\tout.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_916/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:05:33.434320457 -0500\n@@ -262,7 +262,6 @@\n     }\n \n     n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 301, 
          "faulty": "return \"NOT\";", 
          "type": "InsertBefore", 
          "seed": "Node pn=null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_172/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:55:08.994755572 -0500\n@@ -298,7 +298,10 @@\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n           case MOD:             return \"MOD\";\n-          case NOT:             return \"NOT\";\n+          case NOT:             {\n+\t\t\t\tNode pn = null;\n+\t\t\t\treturn \"NOT\";\n+\t\t\t}\n           case BITNOT:          return \"BITNOT\";\n           case POS:             return \"POS\";\n           case NEG:             return \"NEG\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_172/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:55:08.998755721 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_172/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:55:09.002755870 -0500\n@@ -298,7 +298,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -346,7 +349,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 317, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "start++;", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_945/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:05:55.271163958 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_945/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:05:55.275164112 -0500\n@@ -313,11 +313,6 @@\n       // vertical tab is not always whitespace\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -346,7 +341,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -361,7 +356,9 @@\n     }\n     while (start < end\n         && isStrWhiteSpaceChar(s.charAt(start)) == TernaryValue.TRUE) {\n-      start++;\n+      Node parameterName = Node.newString(Token.NAME,\n+\t\t\t\t\t\"jscomp_throw_param\");\n+\tstart++;\n     }\n     return s.substring(start, end);\n   }\n@@ -372,7 +369,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +381,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_945/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:05:55.279164266 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_945/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:05:55.279164266 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_222/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:55:56.260521648 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_222/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:55:56.264521797 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_222/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:55:56.264521797 -0500\n@@ -1142,16 +1142,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_222/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:55:56.268521948 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 317, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "boolean nullKey=false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_986/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:06:26.452372193 -0500\n@@ -1410,7 +1410,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        boolean nullKey = false;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_986/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:06:26.456372347 -0500\n@@ -313,11 +313,6 @@\n       // vertical tab is not always whitespace\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -346,7 +341,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +367,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +379,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_986/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:06:26.456372347 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_986/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:06:26.460372502 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "InsertBefore", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 358, 
          "faulty": "reportCodeChange();", 
          "type": "InsertBefore", 
          "seed": "int keyParent=key(parent);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_620/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:01:42.821544077 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_620/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:01:42.821544077 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +364,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +376,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_620/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:01:42.825544230 -0500\n@@ -1142,17 +1142,9 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n+    StringBuilder builder = new StringBuilder();\n+    int start = 0;\n+\tout.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_620/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:01:42.829544380 -0500\n@@ -260,9 +260,6 @@\n     } else {\n       replacement = Node.newNumber(value);\n     }\n-\n-    n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n@@ -352,12 +349,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "InsertBefore", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_449/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:59:17.676054917 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_449/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:59:17.680055069 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_449/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:59:17.684055218 -0500\n@@ -1142,17 +1142,9 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n+    StringBuilder builder = new StringBuilder();\n+    int start = 0;\n+\tout.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_449/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:59:17.684055218 -0500\n@@ -352,12 +352,14 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        {\n+\t\t\tStringBuilder builder = new StringBuilder();\n+\t\t\tif (NodeUtil.isNumericResult(left)) {\n+\t\t\t\tparent.replaceChild(n, left.detachFromParent());\n+\t\t\t\treportCodeChange();\n+\t\t\t\treturn left;\n+\t\t\t}\n+\t\t}\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 321, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 301, 
          "faulty": "return \"NOT\";", 
          "type": "Delete", 
          "seed": "String X=null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_731/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:03:04.232622793 -0500\n@@ -298,7 +298,7 @@\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n           case MOD:             return \"MOD\";\n-          case NOT:             return \"NOT\";\n+          case NOT:             ;\n           case BITNOT:          return \"BITNOT\";\n           case POS:             return \"POS\";\n           case NEG:             return \"NEG\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_731/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:03:04.236622944 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_731/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:03:04.240623095 -0500\n@@ -318,17 +318,6 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n-        && s.charAt(0) == '0'\n-        && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n-      // Attempt to convert hex numbers.\n-      try {\n-        return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n-      } catch (NumberFormatException e) {\n-        return Double.NaN;\n-      }\n-    }\n-\n     if (s.length() > 3\n         && (s.charAt(0) == '-' || s.charAt(0) == '+')\n         && s.charAt(1) == '0'\n@@ -346,7 +335,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +361,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_731/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:03:04.240623095 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_731/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:03:04.244623247 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 2141, 
          "faulty": "return \"+\";", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1256/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:10:01.392576715 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1256/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:10:01.396576868 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +384,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n@@ -2138,7 +2141,7 @@\n       case Token.BITNOT: return \"~\";\n       case Token.ADD: return \"+\";\n       case Token.SUB: return \"-\";\n-      case Token.POS: return \"+\";\n+      case Token.POS: int index = -1;\n       case Token.NEG: return \"-\";\n       case Token.ASSIGN: return \"=\";\n       case Token.ASSIGN_BITOR: return \"|=\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1256/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:10:01.400577018 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1256/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:10:01.400577018 -0500\n@@ -352,12 +352,14 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (NodeUtil.isNumericResult(left)) {\n+\t\t\t\tparent.replaceChild(n, left.detachFromParent());\n+\t\t\t\treportCodeChange();\n+\t\t\t\treturn left;\n+\t\t\t}\n+\t\t}\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 301, 
          "faulty": "return \"NOT\";", 
          "type": "Replace", 
          "seed": "int count=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1061/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:07:20.110437723 -0500\n@@ -298,7 +298,7 @@\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n           case MOD:             return \"MOD\";\n-          case NOT:             return \"NOT\";\n+          case NOT:             int count = 0;\n           case BITNOT:          return \"BITNOT\";\n           case POS:             return \"POS\";\n           case NEG:             return \"NEG\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1061/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:07:20.110437723 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1061/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:07:20.114437875 -0500\n@@ -298,7 +298,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1061/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:07:20.118438028 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 359, 
          "faulty": "return left;", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 359, 
          "faulty": "return left;", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_550/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:00:44.855345942 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_550/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:00:44.859346094 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_550/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:00:44.859346094 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_550/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:00:44.863346246 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 359, 
          "faulty": "return left;", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_611/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:01:37.141328926 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_611/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:01:37.145329077 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_611/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:01:37.149329229 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 301, 
          "faulty": "return \"NOT\";", 
          "type": "Delete", 
          "seed": "int c=getChar();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "InsertBefore", 
          "seed": "parent=null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1344/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:11:14.383347400 -0500\n@@ -298,7 +298,7 @@\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n           case MOD:             return \"MOD\";\n-          case NOT:             return \"NOT\";\n+          case NOT:             ;\n           case BITNOT:          return \"BITNOT\";\n           case POS:             return \"POS\";\n           case NEG:             return \"NEG\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1344/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:11:14.383347400 -0500\n@@ -1410,7 +1410,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        parent = null;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1344/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:11:14.387347551 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -384,8 +384,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1344/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:11:14.387347551 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1344/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:11:14.391347703 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "consumeToken();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 2141, 
          "faulty": "return \"+\";", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1125/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:08:17.436622739 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1125/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:08:17.440622891 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -2138,7 +2138,7 @@\n       case Token.BITNOT: return \"~\";\n       case Token.ADD: return \"+\";\n       case Token.SUB: return \"-\";\n-      case Token.POS: return \"+\";\n+      case Token.POS: int index = -1;\n       case Token.NEG: return \"-\";\n       case Token.ASSIGN: return \"=\";\n       case Token.ASSIGN_BITOR: return \"|=\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1125/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:08:17.444623044 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1125/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:08:17.444623044 -0500\n@@ -352,12 +352,14 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (NodeUtil.isNumericResult(left)) {\n+\t\t\t\tparent.replaceChild(n, left.detachFromParent());\n+\t\t\t\treportCodeChange();\n+\t\t\t\treturn left;\n+\t\t\t}\n+\t\t}\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_545/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:00:41.299210894 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_545/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:00:41.303211045 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -384,8 +384,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_545/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:00:41.303211045 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_545/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:00:41.307211198 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 261, 
          "faulty": "replacement=Node.newNumber(value);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "Replace", 
          "seed": "int keyParent=key(parent);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 303, 
          "faulty": "return \"POS\";", 
          "type": "Delete", 
          "seed": "addToken(Token.NAME);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 303, 
          "faulty": "return \"POS\";", 
          "type": "Delete", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "Replace", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_547/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:00:42.719264825 -0500\n@@ -300,7 +300,7 @@\n           case MOD:             return \"MOD\";\n           case NOT:             return \"NOT\";\n           case BITNOT:          return \"BITNOT\";\n-          case POS:             return \"POS\";\n+          case POS:             ;\n           case NEG:             return \"NEG\";\n           case NEW:             return \"NEW\";\n           case DELPROP:         return \"DELPROP\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_547/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:00:42.723264976 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_547/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:00:42.723264976 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        StringBuilder builder = new StringBuilder();\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_547/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:00:42.727265129 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_547/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:00:42.727265129 -0500\n@@ -258,10 +258,9 @@\n       replacement = new Node(Token.NEG, Node.newString(Token.NAME, \"Infinity\"));\n       replacement.copyInformationFromForTree(n);\n     } else {\n-      replacement = Node.newNumber(value);\n+      StringBuilder builder = new StringBuilder();\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 321, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_988/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:06:27.344406712 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_988/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:06:27.348406867 -0500\n@@ -318,7 +318,8 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n+    Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n+\tif (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n       // Attempt to convert hex numbers.\n@@ -346,7 +347,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -384,8 +385,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_988/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:06:27.348406867 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_988/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:06:27.352407022 -0500\n@@ -262,7 +262,6 @@\n     }\n \n     n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 303, 
          "faulty": "return \"POS\";", 
          "type": "InsertBefore", 
          "seed": "final String defaultResource=\"rhino_ast.java.com.google.javascript.rhino.Messages\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 317, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_711/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:02:47.607994784 -0500\n@@ -300,7 +300,10 @@\n           case MOD:             return \"MOD\";\n           case NOT:             return \"NOT\";\n           case BITNOT:          return \"BITNOT\";\n-          case POS:             return \"POS\";\n+          case POS:             {\n+\t\t\t\tfinal String defaultResource = \"rhino_ast.java.com.google.javascript.rhino.Messages\";\n+\t\t\t\treturn \"POS\";\n+\t\t\t}\n           case NEG:             return \"NEG\";\n           case NEW:             return \"NEW\";\n           case DELPROP:         return \"DELPROP\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_711/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:02:47.607994784 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_711/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:02:47.611994935 -0500\n@@ -313,7 +313,8 @@\n       // vertical tab is not always whitespace\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n+    Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n+\t// return ScriptRuntime.toNumber(s);\n     if (s.length() == 0) {\n       return 0.0;\n     }\n@@ -346,7 +347,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -384,8 +385,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_711/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:02:47.611994935 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_711/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:02:47.615995086 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 301, 
          "faulty": "return \"NOT\";", 
          "type": "Replace", 
          "seed": "int count=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_102/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:54:16.860808526 -0500\n@@ -298,7 +298,7 @@\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n           case MOD:             return \"MOD\";\n-          case NOT:             return \"NOT\";\n+          case NOT:             int count = 0;\n           case BITNOT:          return \"BITNOT\";\n           case POS:             return \"POS\";\n           case NEG:             return \"NEG\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_102/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:54:16.860808526 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_102/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:54:16.864808677 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 358, 
          "faulty": "reportCodeChange();", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "if (matchChar('=')) {\n  if (matchChar('='))   return Token.SHEQ;\n else   return Token.EQ;\n}\n else {\n  return Token.ASSIGN;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 317, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_246/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:56:13.321159285 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_246/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:56:13.325159434 -0500\n@@ -298,7 +298,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        StringBuilder builder = new StringBuilder();\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -313,11 +313,6 @@\n       // vertical tab is not always whitespace\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -346,7 +341,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +367,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_246/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:56:13.329159583 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_244/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:56:12.445126541 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_244/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:56:12.449126690 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_244/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:56:12.449126690 -0500\n@@ -1142,20 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n-        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n-        .append(HEX_CHARS[codePoint & 0xf]);\n+    StringBuilder builder = new StringBuilder();\n+    int index = -1;\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_244/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:56:12.453126841 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 321, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_859/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:04:41.360307155 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_859/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:04:41.364307305 -0500\n@@ -318,7 +318,8 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n+    Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n+\tif (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n       // Attempt to convert hex numbers.\n@@ -346,7 +347,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +373,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +385,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_859/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:04:41.368307457 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_859/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:04:41.368307457 -0500\n@@ -262,7 +262,6 @@\n     }\n \n     n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 317, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 301, 
          "faulty": "return \"NOT\";", 
          "type": "Delete", 
          "seed": "return new ScriptOrFnNode(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 359, 
          "faulty": "return left;", 
          "type": "InsertBefore", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1043/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:07:08.465993441 -0500\n@@ -298,7 +298,7 @@\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n           case MOD:             return \"MOD\";\n-          case NOT:             return \"NOT\";\n+          case NOT:             ;\n           case BITNOT:          return \"BITNOT\";\n           case POS:             return \"POS\";\n           case NEG:             return \"NEG\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1043/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:07:08.469993594 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1043/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:07:08.469993594 -0500\n@@ -313,11 +313,6 @@\n       // vertical tab is not always whitespace\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -346,7 +341,8 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n+\treturn null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -384,8 +380,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1043/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:07:08.473993748 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1043/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:07:08.473993748 -0500\n@@ -262,7 +262,6 @@\n     }\n \n     n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 359, 
          "faulty": "return left;", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_446/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:59:15.755982580 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_446/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:59:15.759982729 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +364,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +376,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_446/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:59:15.759982729 -0500\n@@ -1142,17 +1142,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n+    int start = 0;\n+\tout.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_446/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:59:15.763982881 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n@@ -356,7 +355,6 @@\n           // POS does nothing to numeric values.\n           parent.replaceChild(n, left.detachFromParent());\n           reportCodeChange();\n-          return left;\n         }\n         return n;\n       case Token.NEG:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "InsertBefore", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 358, 
          "faulty": "reportCodeChange();", 
          "type": "InsertBefore", 
          "seed": "int keyParent=key(parent);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 358, 
          "faulty": "reportCodeChange();", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 321, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 301, 
          "faulty": "return \"NOT\";", 
          "type": "Delete", 
          "seed": "String X=null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_693/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:02:36.155561969 -0500\n@@ -298,7 +298,7 @@\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n           case MOD:             return \"MOD\";\n-          case NOT:             return \"NOT\";\n+          case NOT:             ;\n           case BITNOT:          return \"BITNOT\";\n           case POS:             return \"POS\";\n           case NEG:             return \"NEG\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_693/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:02:36.155561969 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_693/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:02:36.159562120 -0500\n@@ -318,25 +318,6 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n-        && s.charAt(0) == '0'\n-        && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n-      // Attempt to convert hex numbers.\n-      try {\n-        return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n-      } catch (NumberFormatException e) {\n-        return Double.NaN;\n-      }\n-    }\n-\n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +327,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -384,8 +365,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_693/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:02:36.159562120 -0500\n@@ -1142,17 +1142,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n+    int start = 0;\n+\tout.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_693/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:02:36.163562271 -0500\n@@ -260,9 +260,6 @@\n     } else {\n       replacement = Node.newNumber(value);\n     }\n-\n-    n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n@@ -352,12 +349,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 303, 
          "faulty": "return \"POS\";", 
          "type": "InsertBefore", 
          "seed": "final String defaultResource=\"rhino_ast.java.com.google.javascript.rhino.Messages\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_666/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:02:18.570897082 -0500\n@@ -300,7 +300,10 @@\n           case MOD:             return \"MOD\";\n           case NOT:             return \"NOT\";\n           case BITNOT:          return \"BITNOT\";\n-          case POS:             return \"POS\";\n+          case POS:             {\n+\t\t\t\tfinal String defaultResource = \"rhino_ast.java.com.google.javascript.rhino.Messages\";\n+\t\t\t\treturn \"POS\";\n+\t\t\t}\n           case NEG:             return \"NEG\";\n           case NEW:             return \"NEW\";\n           case DELPROP:         return \"DELPROP\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_666/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:02:18.570897082 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_666/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:02:18.574897233 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -384,8 +384,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_666/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:02:18.574897233 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_666/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:02:18.578897385 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 359, 
          "faulty": "return left;", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_566/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:00:57.055809085 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_566/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:00:57.059809237 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +364,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_566/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:00:57.059809237 -0500\n@@ -1142,17 +1142,9 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n+    StringBuilder builder = new StringBuilder();\n+    int start = 0;\n+\tout.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_566/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:00:57.063809390 -0500\n@@ -353,10 +353,7 @@\n         return replacementNode;\n       case Token.POS:\n         if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n           reportCodeChange();\n-          return left;\n         }\n         return n;\n       case Token.NEG:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 261, 
          "faulty": "replacement=Node.newNumber(value);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_416/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:58:55.843236879 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_416/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:58:55.847237028 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        StringBuilder builder = new StringBuilder();\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_416/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:58:55.851237178 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_416/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:58:55.851237178 -0500\n@@ -258,10 +258,9 @@\n       replacement = new Node(Token.NEG, Node.newString(Token.NAME, \"Infinity\"));\n       replacement.copyInformationFromForTree(n);\n     } else {\n-      replacement = Node.newNumber(value);\n+      StringBuilder builder = new StringBuilder();\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 303, 
          "faulty": "return \"POS\";", 
          "type": "InsertBefore", 
          "seed": "final String defaultResource=\"rhino_ast.java.com.google.javascript.rhino.Messages\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_770/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:03:30.609618582 -0500\n@@ -300,7 +300,10 @@\n           case MOD:             return \"MOD\";\n           case NOT:             return \"NOT\";\n           case BITNOT:          return \"BITNOT\";\n-          case POS:             return \"POS\";\n+          case POS:             {\n+\t\t\t\tfinal String defaultResource = \"rhino_ast.java.com.google.javascript.rhino.Messages\";\n+\t\t\t\treturn \"POS\";\n+\t\t\t}\n           case NEG:             return \"NEG\";\n           case NEW:             return \"NEW\";\n           case DELPROP:         return \"DELPROP\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_770/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:03:30.609618582 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_770/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:03:30.613618733 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +384,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_770/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:03:30.617618884 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_770/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:03:30.617618884 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "consumeToken();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 2141, 
          "faulty": "return \"+\";", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 303, 
          "faulty": "return \"POS\";", 
          "type": "Replace", 
          "seed": "String X=null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1247/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:09:54.656320795 -0500\n@@ -300,7 +300,7 @@\n           case MOD:             return \"MOD\";\n           case NOT:             return \"NOT\";\n           case BITNOT:          return \"BITNOT\";\n-          case POS:             return \"POS\";\n+          case POS:             String X = null;\n           case NEG:             return \"NEG\";\n           case NEW:             return \"NEW\";\n           case DELPROP:         return \"DELPROP\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1247/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:09:54.660320947 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1247/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:09:54.660320947 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -2138,7 +2138,7 @@\n       case Token.BITNOT: return \"~\";\n       case Token.ADD: return \"+\";\n       case Token.SUB: return \"-\";\n-      case Token.POS: return \"+\";\n+      case Token.POS: int index = -1;\n       case Token.NEG: return \"-\";\n       case Token.ASSIGN: return \"=\";\n       case Token.ASSIGN_BITOR: return \"|=\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1247/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:09:54.664321099 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1247/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:09:54.664321099 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "InsertBefore", 
          "seed": "int c;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1392/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:11:48.220630496 -0500\n@@ -1410,7 +1410,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        int c;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1392/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:11:48.224630647 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1392/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:11:48.224630647 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1392/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:11:48.228630800 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_176/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:55:17.315066405 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_176/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:55:17.319066554 -0500\n@@ -298,7 +298,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_176/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:55:17.323066704 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 303, 
          "faulty": "return \"POS\";", 
          "type": "InsertBefore", 
          "seed": "final String defaultResource=\"rhino_ast.java.com.google.javascript.rhino.Messages\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_872/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:04:53.252762649 -0500\n@@ -300,7 +300,10 @@\n           case MOD:             return \"MOD\";\n           case NOT:             return \"NOT\";\n           case BITNOT:          return \"BITNOT\";\n-          case POS:             return \"POS\";\n+          case POS:             {\n+\t\t\t\tfinal String defaultResource = \"rhino_ast.java.com.google.javascript.rhino.Messages\";\n+\t\t\t\treturn \"POS\";\n+\t\t\t}\n           case NEG:             return \"NEG\";\n           case NEW:             return \"NEW\";\n           case DELPROP:         return \"DELPROP\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_872/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:04:53.256762803 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_872/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:04:53.260762959 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +364,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +376,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_872/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:04:53.260762959 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_872/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:04:53.264763114 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 321, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 301, 
          "faulty": "return \"NOT\";", 
          "type": "Delete", 
          "seed": "case 3:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_853/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:04:37.528161572 -0500\n@@ -298,7 +298,7 @@\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n           case MOD:             return \"MOD\";\n-          case NOT:             return \"NOT\";\n+          case NOT:             ;\n           case BITNOT:          return \"BITNOT\";\n           case POS:             return \"POS\";\n           case NEG:             return \"NEG\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_853/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:04:37.532161724 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_853/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:04:37.532161724 -0500\n@@ -318,16 +318,7 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n-        && s.charAt(0) == '0'\n-        && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n-      // Attempt to convert hex numbers.\n-      try {\n-        return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n-      } catch (NumberFormatException e) {\n-        return Double.NaN;\n-      }\n-    }\n+    Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n     if (s.length() > 3\n         && (s.charAt(0) == '-' || s.charAt(0) == '+')\n@@ -346,7 +337,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +363,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +375,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_853/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:04:37.536161876 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_853/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:04:37.536161876 -0500\n@@ -262,7 +262,6 @@\n     }\n \n     n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 358, 
          "faulty": "reportCodeChange();", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_296/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:57:00.050906193 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_296/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:57:00.050906193 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_296/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:57:00.054906342 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_74/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:53:53.135922853 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_74/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:53:53.139923003 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_74/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:53:53.143923152 -0500\n@@ -1142,16 +1142,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_74/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:53:53.143923152 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 301, 
          "faulty": "return \"NOT\";", 
          "type": "Delete", 
          "seed": "int c=getChar();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1371, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1402/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:11:55.288898422 -0500\n@@ -298,7 +298,7 @@\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n           case MOD:             return \"MOD\";\n-          case NOT:             return \"NOT\";\n+          case NOT:             ;\n           case BITNOT:          return \"BITNOT\";\n           case POS:             return \"POS\";\n           case NEG:             return \"NEG\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1402/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:11:55.292898573 -0500\n@@ -1368,7 +1368,13 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n@@ -1410,7 +1416,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1402/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:11:55.292898573 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +384,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1402/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:11:55.296898725 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1402/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:11:55.296898725 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 321, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "Context cx=Context.getCurrentContext();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_766/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:03:28.089523474 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_766/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:03:28.089523474 -0500\n@@ -318,17 +318,6 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n-        && s.charAt(0) == '0'\n-        && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n-      // Attempt to convert hex numbers.\n-      try {\n-        return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n-      } catch (NumberFormatException e) {\n-        return Double.NaN;\n-      }\n-    }\n-\n     if (s.length() > 3\n         && (s.charAt(0) == '-' || s.charAt(0) == '+')\n         && s.charAt(1) == '0'\n@@ -346,7 +335,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_766/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:03:28.093523625 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 359, 
          "faulty": "return left;", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_516/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:00:09.970024041 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_516/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:00:09.970024041 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +364,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_516/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:00:09.974024193 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,17 +1143,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n+    int start = 0;\n+\tout.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_516/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:00:09.974024193 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n@@ -353,10 +352,7 @@\n         return replacementNode;\n       case Token.POS:\n         if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n           reportCodeChange();\n-          return left;\n         }\n         return n;\n       case Token.NEG:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1108/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:08:06.272197478 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1108/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:08:06.272197478 -0500\n@@ -298,7 +298,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1108/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:08:06.276197629 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1108/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:08:06.276197629 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        StringBuilder builder = new StringBuilder();\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 317, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 253, 
          "faulty": "if (Double.isNaN(value)) {\n  replacement=Node.newString(Token.NAME,\"NaN\");\n}\n else if (value == Double.POSITIVE_INFINITY) {\n  replacement=Node.newString(Token.NAME,\"Infinity\");\n}\n else if (value == Double.NEGATIVE_INFINITY) {\n  replacement=new Node(Token.NEG,Node.newString(Token.NAME,\"Infinity\"));\n  replacement.copyInformationFromForTree(n);\n}\n else {\n  replacement=Node.newNumber(value);\n}", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_942/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:05:53.507095891 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_942/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:05:53.511096045 -0500\n@@ -313,11 +313,6 @@\n       // vertical tab is not always whitespace\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -346,7 +341,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +367,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +379,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_942/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:05:53.511096045 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_942/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:05:53.515096199 -0500\n@@ -250,7 +250,8 @@\n     double value = result;\n \n     Node replacement;\n-    if (Double.isNaN(value)) {\n+    int start = 0;\n+\tif (Double.isNaN(value)) {\n       replacement = Node.newString(Token.NAME, \"NaN\");\n     } else if (value == Double.POSITIVE_INFINITY) {\n       replacement = Node.newString(Token.NAME, \"Infinity\");\n@@ -352,12 +353,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 356, 
          "faulty": "int start=0;", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_164/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:55:04.066571474 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_164/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:55:04.066571474 -0500\n@@ -298,7 +298,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -346,14 +346,15 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n   }\n \n   static String trimJsWhiteSpace(String s) {\n-    int start = 0;\n+    Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n+\tint start = 0;\n     int end = s.length();\n     while (end > 0\n         && isStrWhiteSpaceChar(s.charAt(end - 1)) == TernaryValue.TRUE) {\n@@ -372,7 +373,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_164/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:55:04.070571624 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_291/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:56:56.458771888 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_291/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:56:56.458771888 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +384,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_291/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:56:56.462772038 -0500\n@@ -1152,7 +1152,8 @@\n       appendHexJavaScriptRepresentation(surrogates[1], out);\n       return;\n     }\n-    out.append(\"\\\\u\")\n+    int start = 0;\n+\tout.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_291/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:56:56.462772038 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1182/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:09:03.778386596 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1182/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:09:03.778386596 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1182/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:09:03.782386748 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1182/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:09:03.782386748 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 261, 
          "faulty": "replacement=Node.newNumber(value);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_324/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:57:21.551710136 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_324/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:57:21.555710286 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        StringBuilder builder = new StringBuilder();\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_324/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:57:21.559710435 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_324/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:57:21.559710435 -0500\n@@ -258,10 +258,9 @@\n       replacement = new Node(Token.NEG, Node.newString(Token.NAME, \"Infinity\"));\n       replacement.copyInformationFromForTree(n);\n     } else {\n-      replacement = Node.newNumber(value);\n+      StringBuilder builder = new StringBuilder();\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 317, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "InsertBefore", 
          "seed": "NodeMismatch diff=checkTreeEqualsImpl(node2);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_891/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:05:10.841445512 -0500\n@@ -1410,7 +1410,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        NodeMismatch diff = checkTreeEqualsImpl(node2);\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_891/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:05:10.841445512 -0500\n@@ -313,11 +313,6 @@\n       // vertical tab is not always whitespace\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -346,7 +341,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +367,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +379,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_891/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:05:10.845445668 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_891/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:05:10.845445668 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 358, 
          "faulty": "reportCodeChange();", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "start++;", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_216/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:55:52.680387853 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_216/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:55:52.680387853 -0500\n@@ -298,7 +298,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -361,7 +361,9 @@\n     }\n     while (start < end\n         && isStrWhiteSpaceChar(s.charAt(start)) == TernaryValue.TRUE) {\n-      start++;\n+      Node parameterName = Node.newString(Token.NAME,\n+\t\t\t\t\t\"jscomp_throw_param\");\n+\tstart++;\n     }\n     return s.substring(start, end);\n   }\n@@ -372,7 +374,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_216/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:55:52.684388001 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_216/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:55:52.684388001 -0500\n@@ -355,7 +355,7 @@\n         if (NodeUtil.isNumericResult(left)) {\n           // POS does nothing to numeric values.\n           parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n+          Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n           return left;\n         }\n         return n;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 359, 
          "faulty": "return left;", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_618/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:01:41.717502264 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_618/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:01:41.721502414 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +364,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_618/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:01:41.725502567 -0500\n@@ -1142,17 +1142,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n+    int start = 0;\n+\tout.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_618/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:01:41.725502567 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n@@ -353,10 +352,7 @@\n         return replacementNode;\n       case Token.POS:\n         if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n           reportCodeChange();\n-          return left;\n         }\n         return n;\n       case Token.NEG:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 321, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_912/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:05:30.014188159 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_912/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:05:30.018188314 -0500\n@@ -318,7 +318,8 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n+    Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n+\tif (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n       // Attempt to convert hex numbers.\n@@ -346,7 +347,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +373,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_912/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:05:30.018188314 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_912/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:05:30.022188469 -0500\n@@ -262,7 +262,6 @@\n     }\n \n     n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 246, 
          "faulty": "if (result == null) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 366, 
          "faulty": "return s.substring(start,end);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1410/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:12:01.401130082 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1410/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:12:01.405130233 -0500\n@@ -298,7 +298,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -363,7 +363,8 @@\n         && isStrWhiteSpaceChar(s.charAt(start)) == TernaryValue.TRUE) {\n       start++;\n     }\n-    return s.substring(start, end);\n+    int index = -1;\n+\treturn s.substring(start, end);\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1410/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:12:01.409130385 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1410/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:12:01.409130385 -0500\n@@ -243,7 +243,8 @@\n     }\n \n     Double result = NodeUtil.getNumberValue(n);\n-    if (result == null) {\n+    Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n+\tif (result == null) {\n       return;\n     }\n \n@@ -352,12 +353,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1052/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:07:14.858237350 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1052/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:07:14.862237503 -0500\n@@ -298,7 +298,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1052/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:07:14.862237503 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1052/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:07:14.866237655 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "InsertBefore", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 358, 
          "faulty": "reportCodeChange();", 
          "type": "InsertBefore", 
          "seed": "int keyParent=key(parent);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 358, 
          "faulty": "reportCodeChange();", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 303, 
          "faulty": "return \"POS\";", 
          "type": "InsertBefore", 
          "seed": "final String defaultResource=\"rhino_ast.java.com.google.javascript.rhino.Messages\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_768/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:03:28.981557140 -0500\n@@ -300,7 +300,10 @@\n           case MOD:             return \"MOD\";\n           case NOT:             return \"NOT\";\n           case BITNOT:          return \"BITNOT\";\n-          case POS:             return \"POS\";\n+          case POS:             {\n+\t\t\t\tfinal String defaultResource = \"rhino_ast.java.com.google.javascript.rhino.Messages\";\n+\t\t\t\treturn \"POS\";\n+\t\t\t}\n           case NEG:             return \"NEG\";\n           case NEW:             return \"NEW\";\n           case DELPROP:         return \"DELPROP\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_768/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:03:28.981557140 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_768/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:03:28.985557292 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +364,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +376,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_768/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:03:28.985557292 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,17 +1143,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n+    int start = 0;\n+\tout.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_768/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:03:28.989557443 -0500\n@@ -260,9 +260,6 @@\n     } else {\n       replacement = Node.newNumber(value);\n     }\n-\n-    n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n@@ -352,12 +349,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "consumeToken();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 2141, 
          "faulty": "return \"+\";", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 359, 
          "faulty": "return left;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1414/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:12:04.941264246 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1414/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:12:04.945264396 -0500\n@@ -298,7 +298,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -384,8 +384,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n@@ -2138,7 +2141,7 @@\n       case Token.BITNOT: return \"~\";\n       case Token.ADD: return \"+\";\n       case Token.SUB: return \"-\";\n-      case Token.POS: return \"+\";\n+      case Token.POS: int index = -1;\n       case Token.NEG: return \"-\";\n       case Token.ASSIGN: return \"=\";\n       case Token.ASSIGN_BITOR: return \"|=\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1414/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:12:04.949264549 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1414/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:12:04.949264549 -0500\n@@ -262,7 +262,6 @@\n     }\n \n     n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 246, 
          "faulty": "if (result == null) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 357, 
          "faulty": "int end=s.length();", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 359, 
          "faulty": "return left;", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "InsertBefore", 
          "seed": "int c;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1427/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:12:14.021608333 -0500\n@@ -1410,7 +1410,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        int c;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1427/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:12:14.025608485 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -354,7 +354,8 @@\n \n   static String trimJsWhiteSpace(String s) {\n     int start = 0;\n-    int end = s.length();\n+    StringBuilder builder = new StringBuilder();\n+\tint end = s.length();\n     while (end > 0\n         && isStrWhiteSpaceChar(s.charAt(end - 1)) == TernaryValue.TRUE) {\n       end--;\n@@ -372,7 +373,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1427/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:12:14.029608636 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1427/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:12:14.029608636 -0500\n@@ -243,7 +243,8 @@\n     }\n \n     Double result = NodeUtil.getNumberValue(n);\n-    if (result == null) {\n+    int type = n.getType();\n+\tif (result == null) {\n       return;\n     }\n \n@@ -352,12 +353,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "consumeToken();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 2141, 
          "faulty": "return \"+\";", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1287/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:10:25.553494312 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1287/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:10:25.557494465 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -2138,7 +2138,7 @@\n       case Token.BITNOT: return \"~\";\n       case Token.ADD: return \"+\";\n       case Token.SUB: return \"-\";\n-      case Token.POS: return \"+\";\n+      case Token.POS: int index = -1;\n       case Token.NEG: return \"-\";\n       case Token.ASSIGN: return \"=\";\n       case Token.ASSIGN_BITOR: return \"|=\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1287/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:10:25.557494465 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1287/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:10:25.561494615 -0500\n@@ -262,7 +262,6 @@\n     }\n \n     n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 261, 
          "faulty": "replacement=Node.newNumber(value);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_293/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:56:58.002829618 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_293/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:56:58.002829618 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        StringBuilder builder = new StringBuilder();\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_293/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:56:58.006829767 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_293/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:56:58.006829767 -0500\n@@ -258,10 +258,9 @@\n       replacement = new Node(Token.NEG, Node.newString(Token.NAME, \"Infinity\"));\n       replacement.copyInformationFromForTree(n);\n     } else {\n-      replacement = Node.newNumber(value);\n+      StringBuilder builder = new StringBuilder();\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 317, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_630/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:01:50.781845510 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_630/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:01:50.781845510 -0500\n@@ -313,10 +313,7 @@\n       // vertical tab is not always whitespace\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n+    int start = 0;\n \n     if (s.length() > 2\n         && s.charAt(0) == '0'\n@@ -346,7 +343,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +369,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +381,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_630/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:01:50.785845663 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_630/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:01:50.785845663 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 359, 
          "faulty": "return left;", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_660/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:02:14.386738817 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_660/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:02:14.386738817 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +364,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_660/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:02:14.390738968 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_660/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:02:14.390738968 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 321, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1039/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:07:05.669886610 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1039/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:07:05.673886764 -0500\n@@ -318,7 +318,8 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n+    Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n+\tif (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n       // Attempt to convert hex numbers.\n@@ -346,7 +347,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -384,8 +385,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1039/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:07:05.673886764 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1039/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:07:05.677886919 -0500\n@@ -262,7 +262,6 @@\n     }\n \n     n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 321, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 301, 
          "faulty": "return \"NOT\";", 
          "type": "Delete", 
          "seed": "if (matchChar('+')) {\n  return Token.INC;\n}\n else {\n  return Token.ADD;\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_960/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:06:06.475598190 -0500\n@@ -298,7 +298,7 @@\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n           case MOD:             return \"MOD\";\n-          case NOT:             return \"NOT\";\n+          case NOT:             ;\n           case BITNOT:          return \"BITNOT\";\n           case POS:             return \"POS\";\n           case NEG:             return \"NEG\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_960/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:06:06.479598345 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_960/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:06:06.479598345 -0500\n@@ -318,7 +318,8 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n+    Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n+\tif (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n       // Attempt to convert hex numbers.\n@@ -346,7 +347,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +373,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +385,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_960/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:06:06.483598500 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_960/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:06:06.483598500 -0500\n@@ -262,7 +262,6 @@\n     }\n \n     n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "InsertBefore", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1019, 
          "faulty": "appendHexJavaScriptRepresentation(sb,c);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_655/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:02:10.398587944 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_655/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:02:10.402588095 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +364,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +376,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_655/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:02:10.402588095 -0500\n@@ -1013,10 +1013,7 @@\n             if (c > 0x1f && c <= 0x7f) {\n               sb.append(c);\n             } else {\n-              // Other characters can be misinterpreted by some js parsers,\n-              // or perhaps mangled by proxies along the way,\n-              // so we play it safe and unicode escape them.\n-              appendHexJavaScriptRepresentation(sb, c);\n+              int index = -1;\n             }\n           }\n       }\n@@ -1152,7 +1149,8 @@\n       appendHexJavaScriptRepresentation(surrogates[1], out);\n       return;\n     }\n-    out.append(\"\\\\u\")\n+    int start = 0;\n+\tout.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_655/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:02:10.406588246 -0500\n@@ -260,9 +260,6 @@\n     } else {\n       replacement = Node.newNumber(value);\n     }\n-\n-    n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n@@ -352,12 +349,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 246, 
          "faulty": "if (result == null) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1194/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:09:14.062777760 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1194/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:09:14.066777912 -0500\n@@ -298,7 +298,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1194/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:09:14.070778065 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1194/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:09:14.070778065 -0500\n@@ -243,7 +243,8 @@\n     }\n \n     Double result = NodeUtil.getNumberValue(n);\n-    if (result == null) {\n+    Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n+\tif (result == null) {\n       return;\n     }\n \n@@ -352,12 +353,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_497/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:59:57.189542971 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_497/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:59:57.193543121 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +364,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +376,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_497/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:59:57.197543272 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,17 +1143,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n+    int start = 0;\n+\tout.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_497/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:59:57.197543272 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 357, 
          "faulty": "int end=s.length();", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1432/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:12:18.285769899 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1432/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:12:18.289770052 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -354,7 +354,8 @@\n \n   static String trimJsWhiteSpace(String s) {\n     int start = 0;\n-    int end = s.length();\n+    StringBuilder builder = new StringBuilder();\n+\tint end = s.length();\n     while (end > 0\n         && isStrWhiteSpaceChar(s.charAt(end - 1)) == TernaryValue.TRUE) {\n       end--;\n@@ -384,8 +385,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1432/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:12:18.289770052 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1432/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:12:18.293770203 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 301, 
          "faulty": "return \"NOT\";", 
          "type": "Delete", 
          "seed": "int c=getChar();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 358, 
          "faulty": "reportCodeChange();", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1320/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:10:53.350549430 -0500\n@@ -298,7 +298,7 @@\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n           case MOD:             return \"MOD\";\n-          case NOT:             return \"NOT\";\n+          case NOT:             ;\n           case BITNOT:          return \"BITNOT\";\n           case POS:             return \"POS\";\n           case NEG:             return \"NEG\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1320/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:10:53.354549581 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1320/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:10:53.358549733 -0500\n@@ -355,7 +355,7 @@\n         if (NodeUtil.isNumericResult(left)) {\n           // POS does nothing to numeric values.\n           parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n+          Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n           return left;\n         }\n         return n;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 317, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "boolean nullKey=false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "start++;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "parent=null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1115/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:08:11.020378356 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1115/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:08:11.024378508 -0500\n@@ -313,11 +313,6 @@\n       // vertical tab is not always whitespace\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -346,7 +341,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -361,7 +356,8 @@\n     }\n     while (start < end\n         && isStrWhiteSpaceChar(s.charAt(start)) == TernaryValue.TRUE) {\n-      start++;\n+      int index = -1;\n+\tstart++;\n     }\n     return s.substring(start, end);\n   }\n@@ -372,7 +368,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +380,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1115/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:08:11.024378508 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1115/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:08:11.028378659 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 301, 
          "faulty": "return \"NOT\";", 
          "type": "Delete", 
          "seed": "int c=getChar();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1254/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:10:00.512543284 -0500\n@@ -298,7 +298,7 @@\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n           case MOD:             return \"MOD\";\n-          case NOT:             return \"NOT\";\n+          case NOT:             ;\n           case BITNOT:          return \"BITNOT\";\n           case POS:             return \"POS\";\n           case NEG:             return \"NEG\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1254/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:10:00.516543436 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "InsertBefore", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 358, 
          "faulty": "reportCodeChange();", 
          "type": "InsertBefore", 
          "seed": "int keyParent=key(parent);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 358, 
          "faulty": "reportCodeChange();", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 321, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "Context cx=Context.getCurrentContext();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_787/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:03:43.302098382 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_787/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:03:43.306098535 -0500\n@@ -318,25 +318,6 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n-        && s.charAt(0) == '0'\n-        && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n-      // Attempt to convert hex numbers.\n-      try {\n-        return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n-      } catch (NumberFormatException e) {\n-        return Double.NaN;\n-      }\n-    }\n-\n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +327,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -384,8 +365,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_787/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:03:43.306098535 -0500\n@@ -1142,17 +1142,9 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n+    StringBuilder builder = new StringBuilder();\n+    int start = 0;\n+\tout.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_787/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:03:43.310098687 -0500\n@@ -260,9 +260,6 @@\n     } else {\n       replacement = Node.newNumber(value);\n     }\n-\n-    n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n@@ -352,12 +349,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_107/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:54:19.436904710 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_371/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:58:09.237493509 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_371/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:58:09.237493509 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_371/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:58:09.241493660 -0500\n@@ -1152,7 +1152,8 @@\n       appendHexJavaScriptRepresentation(surrogates[1], out);\n       return;\n     }\n-    out.append(\"\\\\u\")\n+    int start = 0;\n+\tout.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_371/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:58:09.241493660 -0500\n@@ -352,12 +352,14 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        {\n+\t\t\tStringBuilder builder = new StringBuilder();\n+\t\t\tif (NodeUtil.isNumericResult(left)) {\n+\t\t\t\tparent.replaceChild(n, left.detachFromParent());\n+\t\t\t\treportCodeChange();\n+\t\t\t\treturn left;\n+\t\t\t}\n+\t\t}\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 301, 
          "faulty": "return \"NOT\";", 
          "type": "Delete", 
          "seed": "return \"BLOCK\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_795/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:03:49.850347866 -0500\n@@ -298,7 +298,7 @@\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n           case MOD:             return \"MOD\";\n-          case NOT:             return \"NOT\";\n+          case NOT:             ;\n           case BITNOT:          return \"BITNOT\";\n           case POS:             return \"POS\";\n           case NEG:             return \"NEG\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_795/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:03:49.850347866 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_795/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:03:49.854348018 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +384,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_795/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:03:49.854348018 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_795/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:03:49.858348171 -0500\n@@ -262,7 +262,6 @@\n     }\n \n     n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 261, 
          "faulty": "replacement=Node.newNumber(value);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_452/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:59:19.892138404 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_452/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:59:19.892138404 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        StringBuilder builder = new StringBuilder();\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +384,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_452/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:59:19.896138556 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,17 +1143,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n+    int start = 0;\n+\tout.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_452/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:59:19.900138706 -0500\n@@ -258,10 +258,9 @@\n       replacement = new Node(Token.NEG, Node.newString(Token.NAME, \"Infinity\"));\n       replacement.copyInformationFromForTree(n);\n     } else {\n-      replacement = Node.newNumber(value);\n+      StringBuilder builder = new StringBuilder();\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 301, 
          "faulty": "return \"NOT\";", 
          "type": "Delete", 
          "seed": "int c=getChar();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 303, 
          "faulty": "return \"POS\";", 
          "type": "InsertBefore", 
          "seed": "Node pn=null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1258/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:10:02.276610298 -0500\n@@ -298,9 +298,12 @@\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n           case MOD:             return \"MOD\";\n-          case NOT:             return \"NOT\";\n+          case NOT:             ;\n           case BITNOT:          return \"BITNOT\";\n-          case POS:             return \"POS\";\n+          case POS:             {\n+\t\t\t\tNode pn = null;\n+\t\t\t\treturn \"POS\";\n+\t\t\t}\n           case NEG:             return \"NEG\";\n           case NEW:             return \"NEW\";\n           case DELPROP:         return \"DELPROP\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1258/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:10:02.280610450 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1258/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:10:02.280610450 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -384,8 +384,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1258/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:10:02.284610603 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1258/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:10:02.284610603 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_702/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:02:41.191752318 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_702/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:02:41.195752469 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +384,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_702/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:02:41.195752469 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,17 +1143,9 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n+    int index = -1;\n+    int start = 0;\n+\tout.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_702/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:02:41.199752620 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "InsertBefore", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_715/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:02:50.956121289 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_715/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:02:50.960121440 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +364,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +376,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_715/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:02:50.960121440 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,17 +1143,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n+    int start = 0;\n+\tout.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_715/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:02:50.964121591 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "mustMatchToken(Token.RP,\"msg.no.paren\");"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_532/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:00:29.302755132 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_532/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:00:29.306755284 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +364,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +376,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_532/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:00:29.306755284 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,17 +1143,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n+    int start = 0;\n+\tout.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_532/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:00:29.310755436 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 301, 
          "faulty": "return \"NOT\";", 
          "type": "Replace", 
          "seed": "int count=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1106/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:08:05.392163951 -0500\n@@ -298,7 +298,7 @@\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n           case MOD:             return \"MOD\";\n-          case NOT:             return \"NOT\";\n+          case NOT:             int count = 0;\n           case BITNOT:          return \"BITNOT\";\n           case POS:             return \"POS\";\n           case NEG:             return \"NEG\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1106/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:08:05.392163951 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1106/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:08:05.396164104 -0500\n@@ -298,7 +298,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1106/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:08:05.396164104 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1106/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:08:05.400164256 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 301, 
          "faulty": "return \"NOT\";", 
          "type": "Delete", 
          "seed": "int c=getChar();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1371, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1316/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:10:50.558443473 -0500\n@@ -298,7 +298,7 @@\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n           case MOD:             return \"MOD\";\n-          case NOT:             return \"NOT\";\n+          case NOT:             ;\n           case BITNOT:          return \"BITNOT\";\n           case POS:             return \"POS\";\n           case NEG:             return \"NEG\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1316/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:10:50.562443625 -0500\n@@ -1368,7 +1368,13 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n@@ -1410,7 +1416,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1316/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:10:50.562443625 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -384,8 +384,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1316/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:10:50.566443777 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_607/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:01:33.913206631 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_607/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:01:33.913206631 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -384,8 +384,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_607/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:01:33.917206781 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_607/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:01:33.921206934 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 317, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 301, 
          "faulty": "return \"NOT\";", 
          "type": "Delete", 
          "seed": "return new ScriptOrFnNode(Token.SCRIPT);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_994/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:06:31.372562547 -0500\n@@ -298,7 +298,7 @@\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n           case MOD:             return \"MOD\";\n-          case NOT:             return \"NOT\";\n+          case NOT:             ;\n           case BITNOT:          return \"BITNOT\";\n           case POS:             return \"POS\";\n           case NEG:             return \"NEG\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_994/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:06:31.376562702 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_994/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:06:31.376562702 -0500\n@@ -313,11 +313,6 @@\n       // vertical tab is not always whitespace\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -346,7 +341,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -384,8 +379,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_994/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:06:31.380562856 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_994/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:06:31.380562856 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 321, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 303, 
          "faulty": "return \"POS\";", 
          "type": "Replace", 
          "seed": "Context cx=Context.getCurrentContext();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 301, 
          "faulty": "return \"NOT\";", 
          "type": "Delete", 
          "seed": "final String defaultResource=\"rhino_ast.java.com.google.javascript.rhino.Messages\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1127/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:08:18.824675602 -0500\n@@ -298,9 +298,9 @@\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n           case MOD:             return \"MOD\";\n-          case NOT:             return \"NOT\";\n+          case NOT:             ;\n           case BITNOT:          return \"BITNOT\";\n-          case POS:             return \"POS\";\n+          case POS:             Context cx = Context.getCurrentContext();\n           case NEG:             return \"NEG\";\n           case NEW:             return \"NEW\";\n           case DELPROP:         return \"DELPROP\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1127/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:08:18.828675754 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1127/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:08:18.828675754 -0500\n@@ -318,16 +318,7 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n-        && s.charAt(0) == '0'\n-        && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n-      // Attempt to convert hex numbers.\n-      try {\n-        return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n-      } catch (NumberFormatException e) {\n-        return Double.NaN;\n-      }\n-    }\n+    int index = -1;\n \n     if (s.length() > 3\n         && (s.charAt(0) == '-' || s.charAt(0) == '+')\n@@ -346,7 +337,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -384,8 +375,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1127/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:08:18.832675907 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1127/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:08:18.832675907 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 358, 
          "faulty": "reportCodeChange();", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 301, 
          "faulty": "return \"NOT\";", 
          "type": "Replace", 
          "seed": "if (!(0 <= token && token <= Token.LAST_TOKEN)) throw new IllegalArgumentException();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_605/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:01:32.653158890 -0500\n@@ -298,7 +298,8 @@\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n           case MOD:             return \"MOD\";\n-          case NOT:             return \"NOT\";\n+          case NOT:             if (!(0 <= token && token <= Token.LAST_TOKEN))\n+\t\t\t\tthrow new IllegalArgumentException();\n           case BITNOT:          return \"BITNOT\";\n           case POS:             return \"POS\";\n           case NEG:             return \"NEG\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_605/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:01:32.657159040 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_605/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:01:32.657159040 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -384,8 +384,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_605/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:01:32.661159193 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_605/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:01:32.661159193 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 342, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1139/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:08:26.824980250 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1139/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:08:26.828980402 -0500\n@@ -298,7 +298,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -329,15 +329,8 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n-    // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n+    Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n+\t// FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n         || s.equals(\"-infinity\")\n@@ -346,7 +339,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +365,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1139/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:08:26.832980554 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1139/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:08:26.832980554 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "start++;", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_159/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:55:00.222427878 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_159/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:55:00.226428028 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -361,7 +361,9 @@\n     }\n     while (start < end\n         && isStrWhiteSpaceChar(s.charAt(start)) == TernaryValue.TRUE) {\n-      start++;\n+      Node parameterName = Node.newString(Token.NAME,\n+\t\t\t\t\t\"jscomp_throw_param\");\n+\tstart++;\n     }\n     return s.substring(start, end);\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_159/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:55:00.230428178 -0500\n@@ -1142,16 +1142,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_159/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:55:00.230428178 -0500\n@@ -262,7 +262,6 @@\n     }\n \n     n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_444/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:59:14.863948972 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_444/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:59:14.863948972 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_444/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:59:14.867949121 -0500\n@@ -1142,20 +1142,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n-        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n-        .append(HEX_CHARS[codePoint & 0xf]);\n+    StringBuilder builder = new StringBuilder();\n+    int start = 0;\n+\tint index = -1;\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_444/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:59:14.867949121 -0500\n@@ -352,12 +352,14 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        {\n+\t\t\tStringBuilder builder = new StringBuilder();\n+\t\t\tif (NodeUtil.isNumericResult(left)) {\n+\t\t\t\tparent.replaceChild(n, left.detachFromParent());\n+\t\t\t\treportCodeChange();\n+\t\t\t\treturn left;\n+\t\t\t}\n+\t\t}\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 301, 
          "faulty": "return \"NOT\";", 
          "type": "Delete", 
          "seed": "int c=getChar();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 301, 
          "faulty": "return \"NOT\";", 
          "type": "Delete", 
          "seed": "case 4:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1322/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:10:54.546594816 -0500\n@@ -298,7 +298,7 @@\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n           case MOD:             return \"MOD\";\n-          case NOT:             return \"NOT\";\n+          case NOT:             ;\n           case BITNOT:          return \"BITNOT\";\n           case POS:             return \"POS\";\n           case NEG:             return \"NEG\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1322/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:10:54.550594966 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1322/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:10:54.554595119 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1322/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:10:54.554595119 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1322/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:10:54.558595271 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "start++;", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 2141, 
          "faulty": "return \"+\";", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_311/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:57:13.187397371 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_311/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:57:13.191397521 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -361,7 +361,9 @@\n     }\n     while (start < end\n         && isStrWhiteSpaceChar(s.charAt(start)) == TernaryValue.TRUE) {\n-      start++;\n+      Node parameterName = Node.newString(Token.NAME,\n+\t\t\t\t\t\"jscomp_throw_param\");\n+\tstart++;\n     }\n     return s.substring(start, end);\n   }\n@@ -372,7 +374,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        StringBuilder builder = new StringBuilder();\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -2138,7 +2140,7 @@\n       case Token.BITNOT: return \"~\";\n       case Token.ADD: return \"+\";\n       case Token.SUB: return \"-\";\n-      case Token.POS: return \"+\";\n+      case Token.POS: int index = -1;\n       case Token.NEG: return \"-\";\n       case Token.ASSIGN: return \"=\";\n       case Token.ASSIGN_BITOR: return \"|=\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_311/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:57:13.195397670 -0500\n@@ -262,7 +262,6 @@\n     }\n \n     n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 321, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_898/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:05:16.341658738 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_898/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:05:16.341658738 -0500\n@@ -318,7 +318,8 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n+    Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n+\tif (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n       // Attempt to convert hex numbers.\n@@ -346,7 +347,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +373,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +385,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_898/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:05:16.345658892 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_898/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:05:16.345658892 -0500\n@@ -262,7 +262,6 @@\n     }\n \n     n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "InsertBefore", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 303, 
          "faulty": "return \"POS\";", 
          "type": "Delete", 
          "seed": "return Token.STAR;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1371, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "int lengthEncodingSize=1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_740/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:03:10.188847718 -0500\n@@ -300,7 +300,7 @@\n           case MOD:             return \"MOD\";\n           case NOT:             return \"NOT\";\n           case BITNOT:          return \"BITNOT\";\n-          case POS:             return \"POS\";\n+          case POS:             ;\n           case NEG:             return \"NEG\";\n           case NEW:             return \"NEW\";\n           case DELPROP:         return \"DELPROP\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_740/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:03:10.188847718 -0500\n@@ -1368,7 +1368,8 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        int lengthEncodingSize = 1;\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n@@ -1410,7 +1411,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_740/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:03:10.192847869 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -384,8 +376,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_740/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:03:10.192847869 -0500\n@@ -1142,16 +1142,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_740/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:03:10.196848021 -0500\n@@ -260,9 +260,6 @@\n     } else {\n       replacement = Node.newNumber(value);\n     }\n-\n-    n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n@@ -352,12 +349,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 359, 
          "faulty": "return left;", 
          "type": "InsertBefore", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_830/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:04:19.907491810 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_830/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:04:19.907491810 -0500\n@@ -346,7 +346,8 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n+\treturn null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +373,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +385,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_830/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:04:19.911491964 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_830/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:04:19.911491964 -0500\n@@ -262,7 +262,6 @@\n     }\n \n     n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 261, 
          "faulty": "replacement=Node.newNumber(value);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_510/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:00:05.049838854 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_510/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:00:05.053839004 -0500\n@@ -298,7 +298,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        StringBuilder builder = new StringBuilder();\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_510/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:00:05.053839004 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_510/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:00:05.057839155 -0500\n@@ -258,10 +258,9 @@\n       replacement = new Node(Token.NEG, Node.newString(Token.NAME, \"Infinity\"));\n       replacement.copyInformationFromForTree(n);\n     } else {\n-      replacement = Node.newNumber(value);\n+      StringBuilder builder = new StringBuilder();\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 303, 
          "faulty": "return \"POS\";", 
          "type": "InsertBefore", 
          "seed": "int c;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_875/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:04:55.184837736 -0500\n@@ -300,7 +300,10 @@\n           case MOD:             return \"MOD\";\n           case NOT:             return \"NOT\";\n           case BITNOT:          return \"BITNOT\";\n-          case POS:             return \"POS\";\n+          case POS:             {\n+\t\t\t\tint c;\n+\t\t\t\treturn \"POS\";\n+\t\t\t}\n           case NEG:             return \"NEG\";\n           case NEW:             return \"NEW\";\n           case DELPROP:         return \"DELPROP\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_875/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:04:55.184837736 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_875/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:04:55.188837891 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +384,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_875/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:04:55.188837891 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_875/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:04:55.192838047 -0500\n@@ -262,7 +262,6 @@\n     }\n \n     n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 358, 
          "faulty": "reportCodeChange();", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_150/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:54:53.578179700 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_150/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:54:53.582179849 -0500\n@@ -298,7 +298,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_150/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:54:53.582179849 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_150/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:54:53.586179998 -0500\n@@ -355,7 +355,7 @@\n         if (NodeUtil.isNumericResult(left)) {\n           // POS does nothing to numeric values.\n           parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n+          Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n           return left;\n         }\n         return n;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_570/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:01:01.007959054 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_570/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:01:01.007959054 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -384,8 +384,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_570/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:01:01.011959206 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_570/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:01:01.011959206 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 359, 
          "faulty": "return left;", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "int type=n.getType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_506/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:00:01.937721710 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_506/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:00:01.941721860 -0500\n@@ -298,7 +298,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tint type = n.getType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -329,14 +332,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +341,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +367,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +379,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_506/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:00:01.945722011 -0500\n@@ -1142,17 +1142,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n+    int start = 0;\n+\tout.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_506/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:00:01.945722011 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1005/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:06:40.040897654 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1005/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:06:40.040897654 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -384,8 +384,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1005/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:06:40.044897808 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1005/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:06:40.044897808 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 359, 
          "faulty": "return left;", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_485/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:59:46.717148696 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_485/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:59:46.717148696 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +364,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +376,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_485/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:59:46.721148846 -0500\n@@ -1142,17 +1142,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n+    int start = 0;\n+\tout.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_485/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:59:46.725148998 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "InsertBefore", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 358, 
          "faulty": "reportCodeChange();", 
          "type": "InsertBefore", 
          "seed": "int keyParent=key(parent);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 358, 
          "faulty": "reportCodeChange();", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_653/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:02:09.506554195 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_653/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:02:09.510554346 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +364,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +376,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_653/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:02:09.510554346 -0500\n@@ -1142,17 +1142,9 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n+    StringBuilder builder = new StringBuilder();\n+    int start = 0;\n+\tout.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_653/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:02:09.514554497 -0500\n@@ -262,7 +262,6 @@\n     }\n \n     n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 246, 
          "faulty": "if (result == null) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1416/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:12:05.821297596 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1416/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:12:05.825297746 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1416/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:12:05.825297746 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1416/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:12:05.829297899 -0500\n@@ -243,7 +243,8 @@\n     }\n \n     Double result = NodeUtil.getNumberValue(n);\n-    if (result == null) {\n+    Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n+\tif (result == null) {\n       return;\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 321, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_851/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:04:36.488122057 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_851/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:04:36.492122209 -0500\n@@ -318,16 +318,7 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n-        && s.charAt(0) == '0'\n-        && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n-      // Attempt to convert hex numbers.\n-      try {\n-        return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n-      } catch (NumberFormatException e) {\n-        return Double.NaN;\n-      }\n-    }\n+    Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n     if (s.length() > 3\n         && (s.charAt(0) == '-' || s.charAt(0) == '+')\n@@ -346,7 +337,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +363,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_851/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:04:36.496122361 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 301, 
          "faulty": "return \"NOT\";", 
          "type": "Delete", 
          "seed": "int c=getChar();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1329/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:11:03.874948759 -0500\n@@ -298,7 +298,7 @@\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n           case MOD:             return \"MOD\";\n-          case NOT:             return \"NOT\";\n+          case NOT:             ;\n           case BITNOT:          return \"BITNOT\";\n           case POS:             return \"POS\";\n           case NEG:             return \"NEG\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1329/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:11:03.878948910 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1329/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:11:03.882949062 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1329/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:11:03.882949062 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_457/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:59:24.976329928 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_457/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:59:24.976329928 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +364,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +376,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tStringBuilder builder = new StringBuilder();\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_457/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:59:24.980330080 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,20 +1143,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n-        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n-        .append(HEX_CHARS[codePoint & 0xf]);\n+    int start = 0;\n+\tint index = -1;\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_457/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:59:24.980330080 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 317, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 301, 
          "faulty": "return \"NOT\";", 
          "type": "Delete", 
          "seed": "return new ScriptOrFnNode(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 301, 
          "faulty": "return \"NOT\";", 
          "type": "Replace", 
          "seed": "Kit.codeBug();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 321, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "Node pn=mulExpr();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1033/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:07:01.089710066 -0500\n@@ -298,7 +298,7 @@\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n           case MOD:             return \"MOD\";\n-          case NOT:             return \"NOT\";\n+          case NOT:             Kit.codeBug();\n           case BITNOT:          return \"BITNOT\";\n           case POS:             return \"POS\";\n           case NEG:             return \"NEG\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1033/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:07:01.093710220 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1033/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:07:01.097710374 -0500\n@@ -313,21 +313,7 @@\n       // vertical tab is not always whitespace\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n-    if (s.length() > 2\n-        && s.charAt(0) == '0'\n-        && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n-      // Attempt to convert hex numbers.\n-      try {\n-        return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n-      } catch (NumberFormatException e) {\n-        return Double.NaN;\n-      }\n-    }\n+    int index = -1;\n \n     if (s.length() > 3\n         && (s.charAt(0) == '-' || s.charAt(0) == '+')\n@@ -346,7 +332,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +358,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +370,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1033/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:07:01.097710374 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1033/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:07:01.101710528 -0500\n@@ -261,7 +261,7 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n+    int start = 0;\n     reportCodeChange();\n   }\n \n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 301, 
          "faulty": "return \"NOT\";", 
          "type": "Delete", 
          "seed": "int c=getChar();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "throw new IllegalArgumentException();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1216/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:09:32.607482859 -0500\n@@ -298,7 +298,7 @@\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n           case MOD:             return \"MOD\";\n-          case NOT:             return \"NOT\";\n+          case NOT:             ;\n           case BITNOT:          return \"BITNOT\";\n           case POS:             return \"POS\";\n           case NEG:             return \"NEG\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1216/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:09:32.611483011 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1216/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:09:32.615483163 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +384,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1216/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:09:32.615483163 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1216/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:09:32.619483315 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "start++;", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1019, 
          "faulty": "appendHexJavaScriptRepresentation(sb,c);", 
          "type": "Delete", 
          "seed": "return 0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_270/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:56:32.581879245 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_270/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:56:32.585879394 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -361,7 +361,9 @@\n     }\n     while (start < end\n         && isStrWhiteSpaceChar(s.charAt(start)) == TernaryValue.TRUE) {\n-      start++;\n+      Node parameterName = Node.newString(Token.NAME,\n+\t\t\t\t\t\"jscomp_throw_param\");\n+\tstart++;\n     }\n     return s.substring(start, end);\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_270/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:56:32.585879394 -0500\n@@ -1013,10 +1013,6 @@\n             if (c > 0x1f && c <= 0x7f) {\n               sb.append(c);\n             } else {\n-              // Other characters can be misinterpreted by some js parsers,\n-              // or perhaps mangled by proxies along the way,\n-              // so we play it safe and unicode escape them.\n-              appendHexJavaScriptRepresentation(sb, c);\n             }\n           }\n       }\n@@ -1142,16 +1138,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_270/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:56:32.589879545 -0500\n@@ -262,7 +262,6 @@\n     }\n \n     n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 261, 
          "faulty": "replacement=Node.newNumber(value);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_494/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:59:55.093464062 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_494/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:59:55.093464062 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        StringBuilder builder = new StringBuilder();\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +384,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_494/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:59:55.097464211 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,17 +1143,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n+    int start = 0;\n+\tout.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_494/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:59:55.097464211 -0500\n@@ -258,10 +258,9 @@\n       replacement = new Node(Token.NEG, Node.newString(Token.NAME, \"Infinity\"));\n       replacement.copyInformationFromForTree(n);\n     } else {\n-      replacement = Node.newNumber(value);\n+      StringBuilder builder = new StringBuilder();\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 357, 
          "faulty": "int end=s.length();", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1425/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:12:12.681557558 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1425/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:12:12.685557708 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -354,7 +354,8 @@\n \n   static String trimJsWhiteSpace(String s) {\n     int start = 0;\n-    int end = s.length();\n+    StringBuilder builder = new StringBuilder();\n+\tint end = s.length();\n     while (end > 0\n         && isStrWhiteSpaceChar(s.charAt(end - 1)) == TernaryValue.TRUE) {\n       end--;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_508/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:00:03.653786305 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_508/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:00:03.657786456 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_508/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:00:03.657786456 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_508/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:00:03.661786607 -0500\n@@ -262,7 +262,6 @@\n     }\n \n     n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "InsertBefore", 
          "seed": "return toDot(n,null);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_461/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:59:27.096409786 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_461/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:59:27.100409938 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +364,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +376,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_461/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:59:27.104410088 -0500\n@@ -1142,17 +1142,9 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n+    StringBuilder builder = new StringBuilder();\n+    int start = 0;\n+\tout.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_461/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:59:27.104410088 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 317, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_841/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:04:29.047839310 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_841/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:04:29.051839462 -0500\n@@ -313,11 +313,6 @@\n       // vertical tab is not always whitespace\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -346,7 +341,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +367,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +379,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_841/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:04:29.051839462 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_841/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:04:29.055839614 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_315/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:57:15.819495791 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_315/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:57:15.819495791 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_315/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:57:15.823495941 -0500\n@@ -1142,20 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n-        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n-        .append(HEX_CHARS[codePoint & 0xf]);\n+    StringBuilder builder = new StringBuilder();\n+    int index = -1;\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_315/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:57:15.827496091 -0500\n@@ -352,12 +352,14 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        {\n+\t\t\tStringBuilder builder = new StringBuilder();\n+\t\t\tif (NodeUtil.isNumericResult(left)) {\n+\t\t\t\tparent.replaceChild(n, left.detachFromParent());\n+\t\t\t\treportCodeChange();\n+\t\t\t\treturn left;\n+\t\t\t}\n+\t\t}\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 359, 
          "faulty": "return left;", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 342, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_684/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:02:29.167297786 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_684/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:02:29.171297938 -0500\n@@ -329,24 +329,8 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n-    // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +356,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_684/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:02:29.171297938 -0500\n@@ -1142,17 +1142,9 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n+    StringBuilder builder = new StringBuilder();\n+    int start = 0;\n+\tout.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_684/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:02:29.175298089 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 317, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "boolean nullKey=false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "start++;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 246, 
          "faulty": "if (result == null) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 303, 
          "faulty": "return \"POS\";", 
          "type": "Delete", 
          "seed": "break L0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "break L;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1174/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:08:57.854161225 -0500\n@@ -300,7 +300,7 @@\n           case MOD:             return \"MOD\";\n           case NOT:             return \"NOT\";\n           case BITNOT:          return \"BITNOT\";\n-          case POS:             return \"POS\";\n+          case POS:             ;\n           case NEG:             return \"NEG\";\n           case NEW:             return \"NEW\";\n           case DELPROP:         return \"DELPROP\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1174/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:08:57.858161377 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1174/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:08:57.858161377 -0500\n@@ -313,11 +313,6 @@\n       // vertical tab is not always whitespace\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -346,7 +341,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -361,7 +356,8 @@\n     }\n     while (start < end\n         && isStrWhiteSpaceChar(s.charAt(start)) == TernaryValue.TRUE) {\n-      start++;\n+      int index = -1;\n+\tstart++;\n     }\n     return s.substring(start, end);\n   }\n@@ -384,8 +380,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1174/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:08:57.862161529 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1174/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:08:57.862161529 -0500\n@@ -243,7 +243,8 @@\n     }\n \n     Double result = NodeUtil.getNumberValue(n);\n-    if (result == null) {\n+    int type = n.getType();\n+\tif (result == null) {\n       return;\n     }\n \n@@ -352,12 +353,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "consumeToken();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 2141, 
          "faulty": "return \"+\";", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1097/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:07:58.195889765 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1097/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:07:58.199889917 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -2138,7 +2138,7 @@\n       case Token.BITNOT: return \"~\";\n       case Token.ADD: return \"+\";\n       case Token.SUB: return \"-\";\n-      case Token.POS: return \"+\";\n+      case Token.POS: int index = -1;\n       case Token.NEG: return \"-\";\n       case Token.ASSIGN: return \"=\";\n       case Token.ASSIGN_BITOR: return \"|=\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1097/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:07:58.199889917 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1097/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:07:58.203890068 -0500\n@@ -352,12 +352,14 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (NodeUtil.isNumericResult(left)) {\n+\t\t\t\tparent.replaceChild(n, left.detachFromParent());\n+\t\t\t\treportCodeChange();\n+\t\t\t\treturn left;\n+\t\t\t}\n+\t\t}\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 357, 
          "faulty": "int end=s.length();", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1293/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:10:28.389601993 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1293/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:10:28.389601993 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -354,7 +354,8 @@\n \n   static String trimJsWhiteSpace(String s) {\n     int start = 0;\n-    int end = s.length();\n+    StringBuilder builder = new StringBuilder();\n+\tint end = s.length();\n     while (end > 0\n         && isStrWhiteSpaceChar(s.charAt(end - 1)) == TernaryValue.TRUE) {\n       end--;\n@@ -372,7 +373,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1293/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:10:28.393602144 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1293/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:10:28.397602296 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 301, 
          "faulty": "return \"NOT\";", 
          "type": "Delete", 
          "seed": "int c=getChar();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1371, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1270/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:10:10.072906436 -0500\n@@ -298,7 +298,7 @@\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n           case MOD:             return \"MOD\";\n-          case NOT:             return \"NOT\";\n+          case NOT:             ;\n           case BITNOT:          return \"BITNOT\";\n           case POS:             return \"POS\";\n           case NEG:             return \"NEG\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1270/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:10:10.072906436 -0500\n@@ -1368,7 +1368,13 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n@@ -1410,7 +1416,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1270/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:10:10.076906588 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -384,8 +384,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1270/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:10:10.076906588 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1270/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:10:10.080906740 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "consumeToken();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 2141, 
          "faulty": "return \"+\";", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 356, 
          "faulty": "int start=0;", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 303, 
          "faulty": "return \"POS\";", 
          "type": "InsertBefore", 
          "seed": "Kit.codeBug();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1421/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:12:09.789447968 -0500\n@@ -300,7 +300,10 @@\n           case MOD:             return \"MOD\";\n           case NOT:             return \"NOT\";\n           case BITNOT:          return \"BITNOT\";\n-          case POS:             return \"POS\";\n+          case POS:             {\n+\t\t\t\tKit.codeBug();\n+\t\t\t\treturn \"POS\";\n+\t\t\t}\n           case NEG:             return \"NEG\";\n           case NEW:             return \"NEW\";\n           case DELPROP:         return \"DELPROP\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1421/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:12:09.789447968 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1421/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:12:09.793448119 -0500\n@@ -346,14 +346,15 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n   }\n \n   static String trimJsWhiteSpace(String s) {\n-    int start = 0;\n+    StringBuilder builder = new StringBuilder();\n+\tint start = 0;\n     int end = s.length();\n     while (end > 0\n         && isStrWhiteSpaceChar(s.charAt(end - 1)) == TernaryValue.TRUE) {\n@@ -2138,7 +2139,7 @@\n       case Token.BITNOT: return \"~\";\n       case Token.ADD: return \"+\";\n       case Token.SUB: return \"-\";\n-      case Token.POS: return \"+\";\n+      case Token.POS: int index = -1;\n       case Token.NEG: return \"-\";\n       case Token.ASSIGN: return \"=\";\n       case Token.ASSIGN_BITOR: return \"|=\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1421/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:12:09.793448119 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1421/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:12:09.797448271 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 359, 
          "faulty": "return left;", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_800/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:03:53.658492908 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_800/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:03:53.662493062 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_800/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:03:53.666493214 -0500\n@@ -1142,16 +1142,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_800/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:03:53.666493214 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 317, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 301, 
          "faulty": "return \"NOT\";", 
          "type": "Delete", 
          "seed": "return new ScriptOrFnNode(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1071/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:07:38.395135044 -0500\n@@ -298,7 +298,7 @@\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n           case MOD:             return \"MOD\";\n-          case NOT:             return \"NOT\";\n+          case NOT:             ;\n           case BITNOT:          return \"BITNOT\";\n           case POS:             return \"POS\";\n           case NEG:             return \"NEG\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1071/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:07:38.395135044 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1071/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:07:38.399135196 -0500\n@@ -313,11 +313,6 @@\n       // vertical tab is not always whitespace\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -346,7 +341,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -384,8 +379,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1071/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:07:38.399135196 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1071/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:07:38.403135349 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        int index = -1;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "consumeToken();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 2141, 
          "faulty": "return \"+\";", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "InsertBefore", 
          "seed": "Class c=n.getClass();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "InsertBefore", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1368/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:11:31.219985940 -0500\n@@ -1410,7 +1410,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        Class c = n.getClass();\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1368/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:11:31.223986090 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -2138,7 +2138,7 @@\n       case Token.BITNOT: return \"~\";\n       case Token.ADD: return \"+\";\n       case Token.SUB: return \"-\";\n-      case Token.POS: return \"+\";\n+      case Token.POS: int index = -1;\n       case Token.NEG: return \"-\";\n       case Token.ASSIGN: return \"=\";\n       case Token.ASSIGN_BITOR: return \"|=\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1368/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:11:31.227986243 -0500\n@@ -1142,20 +1142,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n-        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n-        .append(HEX_CHARS[codePoint & 0xf]);\n+    StringBuilder builder = new StringBuilder();\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1368/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:11:31.227986243 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 246, 
          "faulty": "if (result == null) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 317, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1221/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:09:36.619635367 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1221/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:09:36.619635367 -0500\n@@ -298,7 +298,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -313,10 +313,7 @@\n       // vertical tab is not always whitespace\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n+    Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n     if (s.length() > 2\n         && s.charAt(0) == '0'\n@@ -346,7 +343,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1221/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:09:36.623635519 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1221/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:09:36.623635519 -0500\n@@ -243,7 +243,8 @@\n     }\n \n     Double result = NodeUtil.getNumberValue(n);\n-    if (result == null) {\n+    Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n+\tif (result == null) {\n       return;\n     }\n \n@@ -352,12 +353,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "consumeToken();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 2141, 
          "faulty": "return \"+\";", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "InsertBefore", 
          "seed": "Class c=n.getClass();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 357, 
          "faulty": "int end=s.length();", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 359, 
          "faulty": "return left;", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1395/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:11:50.304709496 -0500\n@@ -1410,7 +1410,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        Class c = n.getClass();\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1395/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:11:50.308709648 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -354,7 +354,8 @@\n \n   static String trimJsWhiteSpace(String s) {\n     int start = 0;\n-    int end = s.length();\n+    StringBuilder builder = new StringBuilder();\n+\tint end = s.length();\n     while (end > 0\n         && isStrWhiteSpaceChar(s.charAt(end - 1)) == TernaryValue.TRUE) {\n       end--;\n@@ -2138,7 +2139,7 @@\n       case Token.BITNOT: return \"~\";\n       case Token.ADD: return \"+\";\n       case Token.SUB: return \"-\";\n-      case Token.POS: return \"+\";\n+      case Token.POS: int index = -1;\n       case Token.NEG: return \"-\";\n       case Token.ASSIGN: return \"=\";\n       case Token.ASSIGN_BITOR: return \"|=\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1395/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:11:50.308709648 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1395/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:11:50.312709801 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_335/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:57:30.804056125 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_335/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:57:30.808056274 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +384,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_335/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:57:30.808056274 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,17 +1143,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n+    int start = 0;\n+\tout.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_335/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:57:30.812056423 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 359, 
          "faulty": "return left;", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_706/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:02:44.447875371 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_706/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:02:44.451875522 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_706/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:02:44.451875522 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_706/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:02:44.455875673 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 321, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 359, 
          "faulty": "return left;", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_949/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:05:58.067271838 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_949/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:05:58.067271838 -0500\n@@ -318,7 +318,8 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n+    Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n+\tif (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n       // Attempt to convert hex numbers.\n@@ -346,7 +347,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +373,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_949/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:05:58.071271994 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_949/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:05:58.071271994 -0500\n@@ -262,7 +262,6 @@\n     }\n \n     n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 303, 
          "faulty": "return \"POS\";", 
          "type": "InsertBefore", 
          "seed": "final String defaultResource=\"rhino_ast.java.com.google.javascript.rhino.Messages\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_720/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:02:55.492292659 -0500\n@@ -300,7 +300,10 @@\n           case MOD:             return \"MOD\";\n           case NOT:             return \"NOT\";\n           case BITNOT:          return \"BITNOT\";\n-          case POS:             return \"POS\";\n+          case POS:             {\n+\t\t\t\tfinal String defaultResource = \"rhino_ast.java.com.google.javascript.rhino.Messages\";\n+\t\t\t\treturn \"POS\";\n+\t\t\t}\n           case NEG:             return \"NEG\";\n           case NEW:             return \"NEW\";\n           case DELPROP:         return \"DELPROP\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_720/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:02:55.496292810 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_720/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:02:55.500292961 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +384,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_720/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:02:55.500292961 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,17 +1143,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n+    int start = 0;\n+\tout.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_720/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:02:55.504293112 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_662/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:02:15.270772257 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_662/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:02:15.270772257 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -384,8 +384,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_662/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:02:15.274772408 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,17 +1143,9 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n+    int index = -1;\n+    int start = 0;\n+\tout.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_662/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:02:15.274772408 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "consumeToken();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 2141, 
          "faulty": "return \"+\";", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 358, 
          "faulty": "reportCodeChange();", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1350/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:11:18.195491995 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1350/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:11:18.199492147 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -2138,7 +2138,7 @@\n       case Token.BITNOT: return \"~\";\n       case Token.ADD: return \"+\";\n       case Token.SUB: return \"-\";\n-      case Token.POS: return \"+\";\n+      case Token.POS: int index = -1;\n       case Token.NEG: return \"-\";\n       case Token.ASSIGN: return \"=\";\n       case Token.ASSIGN_BITOR: return \"|=\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1350/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:11:18.203492298 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1350/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:11:18.203492298 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_142/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:54:48.233980091 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_142/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:54:48.233980091 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_142/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:54:48.237980242 -0500\n@@ -1152,7 +1152,8 @@\n       appendHexJavaScriptRepresentation(surrogates[1], out);\n       return;\n     }\n-    out.append(\"\\\\u\")\n+    int start = 0;\n+\tout.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 317, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_893/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:05:12.049492358 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_893/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:05:12.049492358 -0500\n@@ -313,11 +313,6 @@\n       // vertical tab is not always whitespace\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -346,7 +341,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +367,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_893/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:05:12.053492513 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_893/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:05:12.053492513 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "Node pn=null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_480/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:59:42.560992200 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_480/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:59:42.564992351 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +364,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +376,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tStringBuilder builder = new StringBuilder();\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_480/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:59:42.568992501 -0500\n@@ -1142,20 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n-        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n-        .append(HEX_CHARS[codePoint & 0xf]);\n+    StringBuilder builder = new StringBuilder();\n+    int index = -1;\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 317, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 301, 
          "faulty": "return \"NOT\";", 
          "type": "Delete", 
          "seed": "return new ScriptOrFnNode(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1046/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:07:10.702078770 -0500\n@@ -298,7 +298,7 @@\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n           case MOD:             return \"MOD\";\n-          case NOT:             return \"NOT\";\n+          case NOT:             ;\n           case BITNOT:          return \"BITNOT\";\n           case POS:             return \"POS\";\n           case NEG:             return \"NEG\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1046/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:07:10.702078770 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1046/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:07:10.706078921 -0500\n@@ -313,11 +313,6 @@\n       // vertical tab is not always whitespace\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -346,7 +341,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -384,8 +379,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1046/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:07:10.706078921 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,20 +1143,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n-        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n-        .append(HEX_CHARS[codePoint & 0xf]);\n+    StringBuilder builder = new StringBuilder();\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1046/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:07:10.710079075 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 301, 
          "faulty": "return \"NOT\";", 
          "type": "InsertBefore", 
          "seed": "Node pn=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "start++;", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1019, 
          "faulty": "appendHexJavaScriptRepresentation(sb,c);", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 321, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_303/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:57:06.323140709 -0500\n@@ -298,7 +298,10 @@\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n           case MOD:             return \"MOD\";\n-          case NOT:             return \"NOT\";\n+          case NOT:             {\n+\t\t\t\tNode pn = null;\n+\t\t\t\treturn \"NOT\";\n+\t\t\t}\n           case BITNOT:          return \"BITNOT\";\n           case POS:             return \"POS\";\n           case NEG:             return \"NEG\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_303/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:57:06.327140859 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_303/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:57:06.331141008 -0500\n@@ -298,7 +298,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -318,17 +321,6 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n-        && s.charAt(0) == '0'\n-        && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n-      // Attempt to convert hex numbers.\n-      try {\n-        return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n-      } catch (NumberFormatException e) {\n-        return Double.NaN;\n-      }\n-    }\n-\n     if (s.length() > 3\n         && (s.charAt(0) == '-' || s.charAt(0) == '+')\n         && s.charAt(1) == '0'\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -361,7 +353,9 @@\n     }\n     while (start < end\n         && isStrWhiteSpaceChar(s.charAt(start)) == TernaryValue.TRUE) {\n-      start++;\n+      Node parameterName = Node.newString(Token.NAME,\n+\t\t\t\t\t\"jscomp_throw_param\");\n+\tstart++;\n     }\n     return s.substring(start, end);\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_303/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:57:06.331141008 -0500\n@@ -1013,10 +1013,6 @@\n             if (c > 0x1f && c <= 0x7f) {\n               sb.append(c);\n             } else {\n-              // Other characters can be misinterpreted by some js parsers,\n-              // or perhaps mangled by proxies along the way,\n-              // so we play it safe and unicode escape them.\n-              appendHexJavaScriptRepresentation(sb, c);\n             }\n           }\n       }\n@@ -1142,16 +1138,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_303/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:57:06.335141157 -0500\n@@ -262,7 +262,6 @@\n     }\n \n     n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 317, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 301, 
          "faulty": "return \"NOT\";", 
          "type": "Delete", 
          "seed": "return new ScriptOrFnNode(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "consumeToken();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "start++;", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1015/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:06:48.585227654 -0500\n@@ -298,7 +298,7 @@\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n           case MOD:             return \"MOD\";\n-          case NOT:             return \"NOT\";\n+          case NOT:             ;\n           case BITNOT:          return \"BITNOT\";\n           case POS:             return \"POS\";\n           case NEG:             return \"NEG\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1015/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:06:48.585227654 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1015/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:06:48.589227807 -0500\n@@ -313,11 +313,6 @@\n       // vertical tab is not always whitespace\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -346,7 +341,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -361,7 +356,8 @@\n     }\n     while (start < end\n         && isStrWhiteSpaceChar(s.charAt(start)) == TernaryValue.TRUE) {\n-      start++;\n+      StringBuilder builder = new StringBuilder();\n+\tstart++;\n     }\n     return s.substring(start, end);\n   }\n@@ -372,7 +368,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +380,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1015/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:06:48.589227807 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1015/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:06:48.593227963 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1073/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:07:39.279168748 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1073/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:07:39.283168901 -0500\n@@ -298,7 +298,11 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tNode parameterName = Node.newString(Token.NAME,\n+\t\t\t\t\t\"jscomp_throw_param\");\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -346,7 +350,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +376,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +388,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1073/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:07:39.287169053 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1073/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:07:39.287169053 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 317, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "InsertBefore", 
          "seed": "NodeMismatch diff=checkTreeEqualsImpl(node2);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 358, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_922/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:05:37.278469096 -0500\n@@ -1410,7 +1410,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        NodeMismatch diff = checkTreeEqualsImpl(node2);\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_922/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:05:37.282469251 -0500\n@@ -313,11 +313,6 @@\n       // vertical tab is not always whitespace\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -346,7 +341,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +367,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +379,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_922/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:05:37.282469251 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_922/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:05:37.286469405 -0500\n@@ -355,7 +355,6 @@\n         if (NodeUtil.isNumericResult(left)) {\n           // POS does nothing to numeric values.\n           parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n           return left;\n         }\n         return n;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 356, 
          "faulty": "int start=0;", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_52/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:53:35.939281053 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_52/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:53:35.943281202 -0500\n@@ -346,14 +346,15 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n   }\n \n   static String trimJsWhiteSpace(String s) {\n-    int start = 0;\n+    Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n+\tint start = 0;\n     int end = s.length();\n     while (end > 0\n         && isStrWhiteSpaceChar(s.charAt(end - 1)) == TernaryValue.TRUE) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_52/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:53:35.943281202 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_248/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:56:14.197192028 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_248/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:56:14.201192178 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +384,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_248/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:56:14.201192178 -0500\n@@ -1152,7 +1152,8 @@\n       appendHexJavaScriptRepresentation(surrogates[1], out);\n       return;\n     }\n-    out.append(\"\\\\u\")\n+    int start = 0;\n+\tout.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_140/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:54:47.217942144 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_140/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:54:47.221942294 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        return null;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_140/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:54:47.221942294 -0500\n@@ -1142,16 +1142,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_140/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:54:47.225942443 -0500\n@@ -262,7 +262,6 @@\n     }\n \n     n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 317, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "boolean nullKey=false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "start++;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 246, 
          "faulty": "if (result == null) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 357, 
          "faulty": "int end=s.length();", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 359, 
          "faulty": "return left;", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "InsertBefore", 
          "seed": "int c;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1327/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:10:58.598748573 -0500\n@@ -1410,7 +1410,8 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        int c;\n+\t\tboolean nullKey = false;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1327/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:10:58.602748725 -0500\n@@ -313,11 +313,6 @@\n       // vertical tab is not always whitespace\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -346,7 +341,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -354,14 +349,16 @@\n \n   static String trimJsWhiteSpace(String s) {\n     int start = 0;\n-    int end = s.length();\n+    StringBuilder builder = new StringBuilder();\n+\tint end = s.length();\n     while (end > 0\n         && isStrWhiteSpaceChar(s.charAt(end - 1)) == TernaryValue.TRUE) {\n       end--;\n     }\n     while (start < end\n         && isStrWhiteSpaceChar(s.charAt(start)) == TernaryValue.TRUE) {\n-      start++;\n+      int index = -1;\n+\tstart++;\n     }\n     return s.substring(start, end);\n   }\n@@ -372,7 +369,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +381,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1327/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:10:58.602748725 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1327/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:10:58.606748877 -0500\n@@ -243,7 +243,8 @@\n     }\n \n     Double result = NodeUtil.getNumberValue(n);\n-    if (result == null) {\n+    int type = n.getType();\n+\tif (result == null) {\n       return;\n     }\n \n@@ -352,12 +353,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 303, 
          "faulty": "return \"POS\";", 
          "type": "InsertBefore", 
          "seed": "final String defaultResource=\"rhino_ast.java.com.google.javascript.rhino.Messages\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1019, 
          "faulty": "appendHexJavaScriptRepresentation(sb,c);", 
          "type": "Delete", 
          "seed": "sb.setLength(0);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_773/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:03:32.745699193 -0500\n@@ -300,7 +300,10 @@\n           case MOD:             return \"MOD\";\n           case NOT:             return \"NOT\";\n           case BITNOT:          return \"BITNOT\";\n-          case POS:             return \"POS\";\n+          case POS:             {\n+\t\t\t\tfinal String defaultResource = \"rhino_ast.java.com.google.javascript.rhino.Messages\";\n+\t\t\t\treturn \"POS\";\n+\t\t\t}\n           case NEG:             return \"NEG\";\n           case NEW:             return \"NEW\";\n           case DELPROP:         return \"DELPROP\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_773/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:03:32.745699193 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_773/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:03:32.749699344 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +364,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_773/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:03:32.749699344 -0500\n@@ -1013,10 +1013,6 @@\n             if (c > 0x1f && c <= 0x7f) {\n               sb.append(c);\n             } else {\n-              // Other characters can be misinterpreted by some js parsers,\n-              // or perhaps mangled by proxies along the way,\n-              // so we play it safe and unicode escape them.\n-              appendHexJavaScriptRepresentation(sb, c);\n             }\n           }\n       }\n@@ -1142,17 +1138,9 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n+    StringBuilder builder = new StringBuilder();\n+    int start = 0;\n+\tout.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_773/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:03:32.753699495 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return this;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_844/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:04:30.807906206 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_844/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:04:30.811906358 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +364,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_844/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:04:30.811906358 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_844/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:04:30.815906510 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 317, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "boolean nullKey=false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "start++;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 246, 
          "faulty": "if (result == null) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 357, 
          "faulty": "int end=s.length();", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1243/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:09:51.692208173 -0500\n@@ -1410,7 +1410,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        boolean nullKey = false;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1243/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:09:51.696208325 -0500\n@@ -313,11 +313,6 @@\n       // vertical tab is not always whitespace\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -346,7 +341,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -354,14 +349,16 @@\n \n   static String trimJsWhiteSpace(String s) {\n     int start = 0;\n-    int end = s.length();\n+    StringBuilder builder = new StringBuilder();\n+\tint end = s.length();\n     while (end > 0\n         && isStrWhiteSpaceChar(s.charAt(end - 1)) == TernaryValue.TRUE) {\n       end--;\n     }\n     while (start < end\n         && isStrWhiteSpaceChar(s.charAt(start)) == TernaryValue.TRUE) {\n-      start++;\n+      int index = -1;\n+\tstart++;\n     }\n     return s.substring(start, end);\n   }\n@@ -384,8 +381,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1243/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:09:51.700208477 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1243/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:09:51.700208477 -0500\n@@ -243,7 +243,8 @@\n     }\n \n     Double result = NodeUtil.getNumberValue(n);\n-    if (result == null) {\n+    int type = n.getType();\n+\tif (result == null) {\n       return;\n     }\n \n@@ -352,12 +353,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 321, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_812/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:04:00.826765843 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_812/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:04:00.830765995 -0500\n@@ -318,16 +318,7 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n-        && s.charAt(0) == '0'\n-        && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n-      // Attempt to convert hex numbers.\n-      try {\n-        return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n-      } catch (NumberFormatException e) {\n-        return Double.NaN;\n-      }\n-    }\n+    Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n     if (s.length() > 3\n         && (s.charAt(0) == '-' || s.charAt(0) == '+')\n@@ -346,7 +337,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +363,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +375,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_812/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:04:00.830765995 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_812/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:04:00.834766147 -0500\n@@ -262,7 +262,6 @@\n     }\n \n     n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 321, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 303, 
          "faulty": "return \"POS\";", 
          "type": "Replace", 
          "seed": "Context cx=Context.getCurrentContext();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 301, 
          "faulty": "return \"NOT\";", 
          "type": "Delete", 
          "seed": "final String defaultResource=\"rhino_ast.java.com.google.javascript.rhino.Messages\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1112/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:08:09.244310701 -0500\n@@ -298,9 +298,9 @@\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n           case MOD:             return \"MOD\";\n-          case NOT:             return \"NOT\";\n+          case NOT:             ;\n           case BITNOT:          return \"BITNOT\";\n-          case POS:             return \"POS\";\n+          case POS:             Context cx = Context.getCurrentContext();\n           case NEG:             return \"NEG\";\n           case NEW:             return \"NEW\";\n           case DELPROP:         return \"DELPROP\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1112/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:08:09.244310701 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1112/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:08:09.248310852 -0500\n@@ -318,16 +318,7 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n-        && s.charAt(0) == '0'\n-        && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n-      // Attempt to convert hex numbers.\n-      try {\n-        return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n-      } catch (NumberFormatException e) {\n-        return Double.NaN;\n-      }\n-    }\n+    int index = -1;\n \n     if (s.length() > 3\n         && (s.charAt(0) == '-' || s.charAt(0) == '+')\n@@ -346,7 +337,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +363,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +375,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1112/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:08:09.248310852 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1112/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:08:09.252311006 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 303, 
          "faulty": "return \"POS\";", 
          "type": "InsertBefore", 
          "seed": "final String defaultResource=\"rhino_ast.java.com.google.javascript.rhino.Messages\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_709/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:02:46.699960473 -0500\n@@ -300,7 +300,10 @@\n           case MOD:             return \"MOD\";\n           case NOT:             return \"NOT\";\n           case BITNOT:          return \"BITNOT\";\n-          case POS:             return \"POS\";\n+          case POS:             {\n+\t\t\t\tfinal String defaultResource = \"rhino_ast.java.com.google.javascript.rhino.Messages\";\n+\t\t\t\treturn \"POS\";\n+\t\t\t}\n           case NEG:             return \"NEG\";\n           case NEW:             return \"NEW\";\n           case DELPROP:         return \"DELPROP\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_709/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:02:46.699960473 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_709/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:02:46.703960624 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -384,8 +384,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_709/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:02:46.703960624 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_709/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:02:46.707960776 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1049/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:07:12.442145166 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1049/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:07:12.446145317 -0500\n@@ -298,7 +298,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1049/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:07:12.450145471 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1049/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:07:12.450145471 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "if (matchChar('=')) {\n  if (matchChar('='))   return Token.SHEQ;\n else   return Token.EQ;\n}\n else {\n  return Token.ASSIGN;\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_205/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:55:44.544083799 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_205/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:55:44.544083799 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_205/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:55:44.548083947 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 257, 
          "faulty": "if (value == Double.NEGATIVE_INFINITY) {\n  replacement=new Node(Token.NEG,Node.newString(Token.NAME,\"Infinity\"));\n  replacement.copyInformationFromForTree(n);\n}\n else {\n  replacement=Node.newNumber(value);\n}", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_320/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:57:19.479632654 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_320/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:57:19.483632804 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_320/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:57:19.487632953 -0500\n@@ -1142,20 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n-        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n-        .append(HEX_CHARS[codePoint & 0xf]);\n+    StringBuilder builder = new StringBuilder();\n+    int index = -1;\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_320/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:57:19.487632953 -0500\n@@ -254,12 +254,16 @@\n       replacement = Node.newString(Token.NAME, \"NaN\");\n     } else if (value == Double.POSITIVE_INFINITY) {\n       replacement = Node.newString(Token.NAME, \"Infinity\");\n-    } else if (value == Double.NEGATIVE_INFINITY) {\n-      replacement = new Node(Token.NEG, Node.newString(Token.NAME, \"Infinity\"));\n-      replacement.copyInformationFromForTree(n);\n     } else {\n-      replacement = Node.newNumber(value);\n-    }\n+\t\tint start = 0;\n+\t\tif (value == Double.NEGATIVE_INFINITY) {\n+\t\t\treplacement = new Node(Token.NEG, Node.newString(Token.NAME,\n+\t\t\t\t\t\"Infinity\"));\n+\t\t\treplacement.copyInformationFromForTree(n);\n+\t\t} else {\n+\t\t\treplacement = Node.newNumber(value);\n+\t\t}\n+\t}\n \n     n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n@@ -352,12 +356,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "mustMatchToken(Token.RP,\"msg.no.paren\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1019, 
          "faulty": "appendHexJavaScriptRepresentation(sb,c);", 
          "type": "Replace", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_558/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:00:51.275589696 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_558/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:00:51.279589848 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +364,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +376,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_558/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:00:51.283590001 -0500\n@@ -1013,10 +1013,7 @@\n             if (c > 0x1f && c <= 0x7f) {\n               sb.append(c);\n             } else {\n-              // Other characters can be misinterpreted by some js parsers,\n-              // or perhaps mangled by proxies along the way,\n-              // so we play it safe and unicode escape them.\n-              appendHexJavaScriptRepresentation(sb, c);\n+              int start = 0;\n             }\n           }\n       }\n@@ -1125,7 +1122,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,17 +1140,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n+    int start = 0;\n+\tout.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_558/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:00:51.283590001 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 301, 
          "faulty": "return \"NOT\";", 
          "type": "Delete", 
          "seed": "int c=getChar();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1282/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:10:20.389298223 -0500\n@@ -298,7 +298,7 @@\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n           case MOD:             return \"MOD\";\n-          case NOT:             return \"NOT\";\n+          case NOT:             ;\n           case BITNOT:          return \"BITNOT\";\n           case POS:             return \"POS\";\n           case NEG:             return \"NEG\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1282/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:10:20.389298223 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1282/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:10:20.393298375 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -384,8 +384,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1282/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:10:20.397298527 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1282/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:10:20.397298527 -0500\n@@ -352,12 +352,14 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        {\n+\t\t\tStringBuilder builder = new StringBuilder();\n+\t\t\tif (NodeUtil.isNumericResult(left)) {\n+\t\t\t\tparent.replaceChild(n, left.detachFromParent());\n+\t\t\t\treportCodeChange();\n+\t\t\t\treturn left;\n+\t\t\t}\n+\t\t}\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "InsertBefore", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_600/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:01:29.817051426 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_600/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:01:29.821051578 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +364,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +376,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_600/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:01:29.821051578 -0500\n@@ -1142,17 +1142,9 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n+    StringBuilder builder = new StringBuilder();\n+    int start = 0;\n+\tout.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_600/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:01:29.825051729 -0500\n@@ -260,9 +260,6 @@\n     } else {\n       replacement = Node.newNumber(value);\n     }\n-\n-    n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n@@ -352,12 +349,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "InsertBefore", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 358, 
          "faulty": "reportCodeChange();", 
          "type": "InsertBefore", 
          "seed": "int keyParent=key(parent);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 358, 
          "faulty": "reportCodeChange();", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 303, 
          "faulty": "return \"POS\";", 
          "type": "InsertBefore", 
          "seed": "final String defaultResource=\"rhino_ast.java.com.google.javascript.rhino.Messages\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 342, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_804/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:03:55.598566789 -0500\n@@ -300,7 +300,10 @@\n           case MOD:             return \"MOD\";\n           case NOT:             return \"NOT\";\n           case BITNOT:          return \"BITNOT\";\n-          case POS:             return \"POS\";\n+          case POS:             {\n+\t\t\t\tfinal String defaultResource = \"rhino_ast.java.com.google.javascript.rhino.Messages\";\n+\t\t\t\treturn \"POS\";\n+\t\t\t}\n           case NEG:             return \"NEG\";\n           case NEW:             return \"NEW\";\n           case DELPROP:         return \"DELPROP\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_804/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:03:55.602566941 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_804/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:03:55.602566941 -0500\n@@ -329,15 +329,8 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n-    // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n+    StringBuilder builder = new StringBuilder();\n+\t// FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n         || s.equals(\"-infinity\")\n@@ -346,7 +339,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +365,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +377,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_804/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:03:55.606567094 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,17 +1143,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n+    int start = 0;\n+\tout.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_804/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:03:55.606567094 -0500\n@@ -260,9 +260,6 @@\n     } else {\n       replacement = Node.newNumber(value);\n     }\n-\n-    n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n@@ -352,12 +349,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 317, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 253, 
          "faulty": "if (Double.isNaN(value)) {\n  replacement=Node.newString(Token.NAME,\"NaN\");\n}\n else if (value == Double.POSITIVE_INFINITY) {\n  replacement=Node.newString(Token.NAME,\"Infinity\");\n}\n else if (value == Double.NEGATIVE_INFINITY) {\n  replacement=new Node(Token.NEG,Node.newString(Token.NAME,\"Infinity\"));\n  replacement.copyInformationFromForTree(n);\n}\n else {\n  replacement=Node.newNumber(value);\n}", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_969/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:06:12.323824974 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_969/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:06:12.327825128 -0500\n@@ -298,7 +298,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -313,11 +313,6 @@\n       // vertical tab is not always whitespace\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -346,7 +341,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +367,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +379,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_969/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:06:12.327825128 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_969/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:06:12.331825284 -0500\n@@ -250,7 +250,8 @@\n     double value = result;\n \n     Node replacement;\n-    if (Double.isNaN(value)) {\n+    int start = 0;\n+\tif (Double.isNaN(value)) {\n       replacement = Node.newString(Token.NAME, \"NaN\");\n     } else if (value == Double.POSITIVE_INFINITY) {\n       replacement = Node.newString(Token.NAME, \"Infinity\");\n@@ -352,12 +353,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_856/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:04:39.272227832 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_856/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:04:39.272227832 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -384,8 +384,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_856/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:04:39.276227984 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_856/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:04:39.276227984 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "InsertBefore", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_695/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:02:37.051595838 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_695/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:02:37.055595989 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +364,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +376,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_695/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:02:37.055595989 -0500\n@@ -1142,16 +1142,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_695/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:02:37.059596141 -0500\n@@ -260,9 +260,6 @@\n     } else {\n       replacement = Node.newNumber(value);\n     }\n-\n-    n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n@@ -352,12 +349,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 261, 
          "faulty": "replacement=Node.newNumber(value);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_431/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:59:05.723606514 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        StringBuilder builder = new StringBuilder();\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_431/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:59:05.723606514 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_431/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:59:05.727606664 -0500\n@@ -258,10 +258,9 @@\n       replacement = new Node(Token.NEG, Node.newString(Token.NAME, \"Infinity\"));\n       replacement.copyInformationFromForTree(n);\n     } else {\n-      replacement = Node.newNumber(value);\n+      StringBuilder builder = new StringBuilder();\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 359, 
          "faulty": "return left;", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_542/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:00:38.687111681 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_542/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:00:38.691111833 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +364,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_542/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:00:38.695111985 -0500\n@@ -1152,7 +1152,8 @@\n       appendHexJavaScriptRepresentation(surrogates[1], out);\n       return;\n     }\n-    out.append(\"\\\\u\")\n+    int start = 0;\n+\tout.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_542/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:00:38.695111985 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n@@ -353,10 +352,7 @@\n         return replacementNode;\n       case Token.POS:\n         if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n           reportCodeChange();\n-          return left;\n         }\n         return n;\n       case Token.NEG:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "InsertBefore", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1019, 
          "faulty": "appendHexJavaScriptRepresentation(sb,c);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_613/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:01:38.033362717 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_613/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:01:38.033362717 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +364,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +376,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_613/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:01:38.037362869 -0500\n@@ -1013,10 +1013,7 @@\n             if (c > 0x1f && c <= 0x7f) {\n               sb.append(c);\n             } else {\n-              // Other characters can be misinterpreted by some js parsers,\n-              // or perhaps mangled by proxies along the way,\n-              // so we play it safe and unicode escape them.\n-              appendHexJavaScriptRepresentation(sb, c);\n+              int index = -1;\n             }\n           }\n       }\n@@ -1142,17 +1139,9 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n+    StringBuilder builder = new StringBuilder();\n+    int start = 0;\n+\tout.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_613/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:01:38.037362869 -0500\n@@ -262,7 +262,6 @@\n     }\n \n     n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "InsertBefore", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_466/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:59:31.316568739 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_466/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:59:31.320568890 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +364,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +376,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_466/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:59:31.320568890 -0500\n@@ -1142,17 +1142,9 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n+    StringBuilder builder = new StringBuilder();\n+    int start = 0;\n+\tout.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_466/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:59:31.324569042 -0500\n@@ -262,7 +262,6 @@\n     }\n \n     n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "consumeToken();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 2141, 
          "faulty": "return \"+\";", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "InsertBefore", 
          "seed": "Class c=n.getClass();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1370/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:11:32.100019309 -0500\n@@ -1410,7 +1410,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        Class c = n.getClass();\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1370/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:11:32.104019462 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -2138,7 +2138,7 @@\n       case Token.BITNOT: return \"~\";\n       case Token.ADD: return \"+\";\n       case Token.SUB: return \"-\";\n-      case Token.POS: return \"+\";\n+      case Token.POS: int index = -1;\n       case Token.NEG: return \"-\";\n       case Token.ASSIGN: return \"=\";\n       case Token.ASSIGN_BITOR: return \"|=\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1370/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:11:32.108019612 -0500\n@@ -1142,16 +1142,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1370/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:11:32.108019612 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 303, 
          "faulty": "return \"POS\";", 
          "type": "InsertBefore", 
          "seed": "final String defaultResource=\"rhino_ast.java.com.google.javascript.rhino.Messages\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return this;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_733/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:03:05.288662675 -0500\n@@ -300,7 +300,10 @@\n           case MOD:             return \"MOD\";\n           case NOT:             return \"NOT\";\n           case BITNOT:          return \"BITNOT\";\n-          case POS:             return \"POS\";\n+          case POS:             {\n+\t\t\t\tfinal String defaultResource = \"rhino_ast.java.com.google.javascript.rhino.Messages\";\n+\t\t\t\treturn \"POS\";\n+\t\t\t}\n           case NEG:             return \"NEG\";\n           case NEW:             return \"NEW\";\n           case DELPROP:         return \"DELPROP\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_733/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:03:05.288662675 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_733/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:03:05.292662826 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -384,8 +376,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_733/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:03:05.292662826 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_733/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:03:05.296662977 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 356, 
          "faulty": "int start=0;", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_71/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:53:51.323855218 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_71/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:53:51.327855367 -0500\n@@ -298,7 +298,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -346,14 +349,15 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n   }\n \n   static String trimJsWhiteSpace(String s) {\n-    int start = 0;\n+    Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n+\tint start = 0;\n     int end = s.length();\n     while (end > 0\n         && isStrWhiteSpaceChar(s.charAt(end - 1)) == TernaryValue.TRUE) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_71/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:53:51.327855367 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 317, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "boolean nullKey=false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "start++;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 246, 
          "faulty": "if (result == null) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 2141, 
          "faulty": "return \"+\";", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1291/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:10:27.509568580 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1291/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:10:27.513568732 -0500\n@@ -313,11 +313,6 @@\n       // vertical tab is not always whitespace\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -346,7 +341,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -361,7 +356,8 @@\n     }\n     while (start < end\n         && isStrWhiteSpaceChar(s.charAt(start)) == TernaryValue.TRUE) {\n-      start++;\n+      int index = -1;\n+\tstart++;\n     }\n     return s.substring(start, end);\n   }\n@@ -372,7 +368,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +380,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n@@ -2138,7 +2137,7 @@\n       case Token.BITNOT: return \"~\";\n       case Token.ADD: return \"+\";\n       case Token.SUB: return \"-\";\n-      case Token.POS: return \"+\";\n+      case Token.POS: int index = -1;\n       case Token.NEG: return \"-\";\n       case Token.ASSIGN: return \"=\";\n       case Token.ASSIGN_BITOR: return \"|=\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1291/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:10:27.513568732 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1291/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:10:27.517568885 -0500\n@@ -243,7 +243,8 @@\n     }\n \n     Double result = NodeUtil.getNumberValue(n);\n-    if (result == null) {\n+    int type = n.getType();\n+\tif (result == null) {\n       return;\n     }\n \n@@ -352,12 +353,14 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (NodeUtil.isNumericResult(left)) {\n+\t\t\t\tparent.replaceChild(n, left.detachFromParent());\n+\t\t\t\treportCodeChange();\n+\t\t\t\treturn left;\n+\t\t\t}\n+\t\t}\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1037/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:07:04.785852541 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1037/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:07:04.789852695 -0500\n@@ -298,7 +298,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1037/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:07:04.793852849 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1037/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:07:04.793852849 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 359, 
          "faulty": "return left;", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_490/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:59:51.797339970 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_490/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:59:51.801340119 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +364,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +376,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_490/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:59:51.801340119 -0500\n@@ -1152,7 +1152,8 @@\n       appendHexJavaScriptRepresentation(surrogates[1], out);\n       return;\n     }\n-    out.append(\"\\\\u\")\n+    int start = 0;\n+\tout.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_490/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:59:51.801340119 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n@@ -356,7 +355,6 @@\n           // POS does nothing to numeric values.\n           parent.replaceChild(n, left.detachFromParent());\n           reportCodeChange();\n-          return left;\n         }\n         return n;\n       case Token.NEG:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 358, 
          "faulty": "reportCodeChange();", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_197/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:55:37.103805774 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_197/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:55:37.103805774 -0500\n@@ -298,7 +298,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_197/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:55:37.107805922 -0500\n@@ -1142,16 +1142,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_197/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:55:37.111806074 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_433/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:59:06.607639588 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_433/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:59:06.611639737 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +384,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_433/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:59:06.611639737 -0500\n@@ -1142,17 +1142,9 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n+    StringBuilder builder = new StringBuilder();\n+    int start = 0;\n+\tout.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_433/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:59:06.615639887 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 356, 
          "faulty": "int start=0;", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 342, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_146/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:54:50.814076458 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_146/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:54:50.818076607 -0500\n@@ -298,7 +298,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -337,7 +340,8 @@\n       return null;\n     }\n \n-    // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n+    StringBuilder builder = new StringBuilder();\n+\t// FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n         || s.equals(\"-infinity\")\n@@ -346,14 +350,15 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n   }\n \n   static String trimJsWhiteSpace(String s) {\n-    int start = 0;\n+    Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n+\tint start = 0;\n     int end = s.length();\n     while (end > 0\n         && isStrWhiteSpaceChar(s.charAt(end - 1)) == TernaryValue.TRUE) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_146/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:54:50.822076756 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "start++;", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_286/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:56:51.818598403 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -361,7 +361,9 @@\n     }\n     while (start < end\n         && isStrWhiteSpaceChar(s.charAt(start)) == TernaryValue.TRUE) {\n-      start++;\n+      Node parameterName = Node.newString(Token.NAME,\n+\t\t\t\t\t\"jscomp_throw_param\");\n+\tstart++;\n     }\n     return s.substring(start, end);\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_286/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:56:51.822598552 -0500\n@@ -262,7 +262,6 @@\n     }\n \n     n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 317, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 301, 
          "faulty": "return \"NOT\";", 
          "type": "Delete", 
          "seed": "return new ScriptOrFnNode(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 301, 
          "faulty": "return \"NOT\";", 
          "type": "Replace", 
          "seed": "Kit.codeBug();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 321, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1008/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:06:41.988972919 -0500\n@@ -298,7 +298,7 @@\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n           case MOD:             return \"MOD\";\n-          case NOT:             return \"NOT\";\n+          case NOT:             Kit.codeBug();\n           case BITNOT:          return \"BITNOT\";\n           case POS:             return \"POS\";\n           case NEG:             return \"NEG\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1008/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:06:41.992973074 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1008/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:06:41.996973228 -0500\n@@ -313,21 +313,7 @@\n       // vertical tab is not always whitespace\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n-    if (s.length() > 2\n-        && s.charAt(0) == '0'\n-        && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n-      // Attempt to convert hex numbers.\n-      try {\n-        return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n-      } catch (NumberFormatException e) {\n-        return Double.NaN;\n-      }\n-    }\n+    int index = -1;\n \n     if (s.length() > 3\n         && (s.charAt(0) == '-' || s.charAt(0) == '+')\n@@ -346,7 +332,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +358,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +370,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1008/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:06:41.996973228 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1008/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:06:42.000973382 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 357, 
          "faulty": "int end=s.length();", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 359, 
          "faulty": "return left;", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1364/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:11:28.595886431 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1364/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:11:28.595886431 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -354,7 +354,8 @@\n \n   static String trimJsWhiteSpace(String s) {\n     int start = 0;\n-    int end = s.length();\n+    StringBuilder builder = new StringBuilder();\n+\tint end = s.length();\n     while (end > 0\n         && isStrWhiteSpaceChar(s.charAt(end - 1)) == TernaryValue.TRUE) {\n       end--;\n@@ -372,7 +373,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1364/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:11:28.599886584 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1364/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:11:28.599886584 -0500\n@@ -356,7 +356,8 @@\n           // POS does nothing to numeric values.\n           parent.replaceChild(n, left.detachFromParent());\n           reportCodeChange();\n-          return left;\n+          Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n+\t\treturn left;\n         }\n         return n;\n       case Token.NEG:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_241/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:56:10.517054476 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_241/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:56:10.517054476 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_241/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:56:10.521054625 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_241/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:56:10.521054625 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_16/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:53:05.350139807 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_16/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:53:05.366140404 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 246, 
          "faulty": "if (result == null) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 317, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1268/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:10:09.008866022 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1268/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:10:09.008866022 -0500\n@@ -313,10 +313,7 @@\n       // vertical tab is not always whitespace\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n+    Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n     if (s.length() > 2\n         && s.charAt(0) == '0'\n@@ -346,7 +343,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1268/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:10:09.012866174 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1268/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:10:09.012866174 -0500\n@@ -243,7 +243,8 @@\n     }\n \n     Double result = NodeUtil.getNumberValue(n);\n-    if (result == null) {\n+    Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n+\tif (result == null) {\n       return;\n     }\n \n@@ -353,8 +354,6 @@\n         return replacementNode;\n       case Token.POS:\n         if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n           reportCodeChange();\n           return left;\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 359, 
          "faulty": "return left;", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_499/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:59:58.221581821 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_499/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:59:58.221581821 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_499/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:59:58.225581973 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_499/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:59:58.225581973 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_119/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:54:28.929259150 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_119/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:54:28.929259150 -0500\n@@ -1142,16 +1142,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_119/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:54:28.933259298 -0500\n@@ -262,7 +262,6 @@\n     }\n \n     n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "InsertBefore", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_668/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:02:19.462930820 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_668/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:02:19.466930972 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -384,8 +376,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_668/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:02:19.470931123 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_668/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:02:19.470931123 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 303, 
          "faulty": "return \"POS\";", 
          "type": "InsertBefore", 
          "seed": "final String defaultResource=\"rhino_ast.java.com.google.javascript.rhino.Messages\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return this;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_763/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:03:25.833438325 -0500\n@@ -300,7 +300,10 @@\n           case MOD:             return \"MOD\";\n           case NOT:             return \"NOT\";\n           case BITNOT:          return \"BITNOT\";\n-          case POS:             return \"POS\";\n+          case POS:             {\n+\t\t\t\tfinal String defaultResource = \"rhino_ast.java.com.google.javascript.rhino.Messages\";\n+\t\t\t\treturn \"POS\";\n+\t\t\t}\n           case NEG:             return \"NEG\";\n           case NEW:             return \"NEW\";\n           case DELPROP:         return \"DELPROP\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_763/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:03:25.837438476 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_763/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:03:25.841438627 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +364,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +376,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_763/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:03:25.841438627 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_763/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:03:25.845438778 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "consumeToken();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 2141, 
          "faulty": "return \"+\";", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "InsertBefore", 
          "seed": "Class c=n.getClass();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 2141, 
          "faulty": "return \"+\";", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1310/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:10:45.762261454 -0500\n@@ -1410,7 +1410,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        Class c = n.getClass();\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1310/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:10:45.766261605 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -2138,7 +2138,7 @@\n       case Token.BITNOT: return \"~\";\n       case Token.ADD: return \"+\";\n       case Token.SUB: return \"-\";\n-      case Token.POS: return \"+\";\n+      case Token.POS: ;\n       case Token.NEG: return \"-\";\n       case Token.ASSIGN: return \"=\";\n       case Token.ASSIGN_BITOR: return \"|=\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1310/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:10:45.770261757 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1310/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:10:45.770261757 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 301, 
          "faulty": "return \"NOT\";", 
          "type": "Replace", 
          "seed": "int count=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1099/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:07:59.051922382 -0500\n@@ -298,7 +298,7 @@\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n           case MOD:             return \"MOD\";\n-          case NOT:             return \"NOT\";\n+          case NOT:             int count = 0;\n           case BITNOT:          return \"BITNOT\";\n           case POS:             return \"POS\";\n           case NEG:             return \"NEG\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1099/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:07:59.055922536 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1099/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:07:59.055922536 -0500\n@@ -298,7 +298,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1099/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:07:59.059922688 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_697/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:02:38.291642709 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_697/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:02:38.295642860 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +384,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_697/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:02:38.295642860 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_697/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:02:38.299643011 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 321, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1019, 
          "faulty": "appendHexJavaScriptRepresentation(sb,c);", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_882/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:05:00.973062575 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_882/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:05:00.973062575 -0500\n@@ -318,7 +318,8 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n+    Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n+\tif (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n       // Attempt to convert hex numbers.\n@@ -346,7 +347,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +373,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +385,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_882/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:05:00.977062729 -0500\n@@ -1013,10 +1013,6 @@\n             if (c > 0x1f && c <= 0x7f) {\n               sb.append(c);\n             } else {\n-              // Other characters can be misinterpreted by some js parsers,\n-              // or perhaps mangled by proxies along the way,\n-              // so we play it safe and unicode escape them.\n-              appendHexJavaScriptRepresentation(sb, c);\n             }\n           }\n       }\n@@ -1125,7 +1121,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1139,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_882/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:05:00.977062729 -0500\n@@ -262,7 +262,6 @@\n     }\n \n     n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 359, 
          "faulty": "return left;", 
          "type": "InsertBefore", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 358, 
          "faulty": "reportCodeChange();", 
          "type": "Replace", 
          "seed": "traverseNodes(n);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_918/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:05:34.310354336 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_918/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:05:34.314354491 -0500\n@@ -346,7 +346,8 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n+\treturn null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +373,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +385,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_918/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:05:34.314354491 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_918/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:05:34.318354646 -0500\n@@ -262,7 +262,6 @@\n     }\n \n     n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_104/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:54:17.728840935 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_104/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:54:17.728840935 -0500\n@@ -1142,16 +1142,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_104/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:54:17.732841086 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 358, 
          "faulty": "reportCodeChange();", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_115/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:54:26.125154441 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_115/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:54:26.129154592 -0500\n@@ -298,7 +298,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_115/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:54:26.133154741 -0500\n@@ -355,7 +355,7 @@\n         if (NodeUtil.isNumericResult(left)) {\n           // POS does nothing to numeric values.\n           parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n+          Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n           return left;\n         }\n         return n;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_85/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:54:00.740206700 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_85/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:54:00.744206849 -0500\n@@ -1142,16 +1142,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_85/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:54:00.744206849 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 359, 
          "faulty": "return left;", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_436/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:59:08.523711271 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_436/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:59:08.527711422 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +364,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +376,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_436/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:59:08.527711422 -0500\n@@ -1142,20 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n-        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n-        .append(HEX_CHARS[codePoint & 0xf]);\n+    int start = 0;\n+\tint index = -1;\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_436/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:59:08.531711571 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n@@ -356,7 +355,6 @@\n           // POS does nothing to numeric values.\n           parent.replaceChild(n, left.detachFromParent());\n           reportCodeChange();\n-          return left;\n         }\n         return n;\n       case Token.NEG:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 317, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "boolean nullKey=false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 301, 
          "faulty": "return \"NOT\";", 
          "type": "Delete", 
          "seed": "int c=getChar();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1191/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:09:11.626685112 -0500\n@@ -298,7 +298,7 @@\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n           case MOD:             return \"MOD\";\n-          case NOT:             return \"NOT\";\n+          case NOT:             ;\n           case BITNOT:          return \"BITNOT\";\n           case POS:             return \"POS\";\n           case NEG:             return \"NEG\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1191/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:09:11.630685264 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1191/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:09:11.630685264 -0500\n@@ -313,11 +313,6 @@\n       // vertical tab is not always whitespace\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -346,7 +341,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -384,8 +379,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1191/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:09:11.634685416 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1191/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:09:11.634685416 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 321, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 301, 
          "faulty": "return \"NOT\";", 
          "type": "Delete", 
          "seed": "String X=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 358, 
          "faulty": "reportCodeChange();", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_760/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:03:24.073371892 -0500\n@@ -298,7 +298,7 @@\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n           case MOD:             return \"MOD\";\n-          case NOT:             return \"NOT\";\n+          case NOT:             ;\n           case BITNOT:          return \"BITNOT\";\n           case POS:             return \"POS\";\n           case NEG:             return \"NEG\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_760/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:03:24.077372043 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_760/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:03:24.081372195 -0500\n@@ -318,17 +318,6 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n-        && s.charAt(0) == '0'\n-        && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n-      // Attempt to convert hex numbers.\n-      try {\n-        return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n-      } catch (NumberFormatException e) {\n-        return Double.NaN;\n-      }\n-    }\n-\n     if (s.length() > 3\n         && (s.charAt(0) == '-' || s.charAt(0) == '+')\n         && s.charAt(1) == '0'\n@@ -346,7 +335,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +361,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_760/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:03:24.081372195 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_760/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:03:24.085372346 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1027/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:06:56.429530352 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1027/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:06:56.433530508 -0500\n@@ -298,7 +298,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1027/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:06:56.437530662 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 321, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_602/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:01:30.885091897 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_602/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:01:30.885091897 -0500\n@@ -318,17 +318,6 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n-        && s.charAt(0) == '0'\n-        && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n-      // Attempt to convert hex numbers.\n-      try {\n-        return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n-      } catch (NumberFormatException e) {\n-        return Double.NaN;\n-      }\n-    }\n-\n     if (s.length() > 3\n         && (s.charAt(0) == '-' || s.charAt(0) == '+')\n         && s.charAt(1) == '0'\n@@ -346,7 +335,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -384,8 +373,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_602/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:01:30.889092048 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_602/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:01:30.889092048 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "InsertBefore", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 301, 
          "faulty": "return \"NOT\";", 
          "type": "Delete", 
          "seed": "int c=getChar();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_651/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:02:08.282507883 -0500\n@@ -298,7 +298,7 @@\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n           case MOD:             return \"MOD\";\n-          case NOT:             return \"NOT\";\n+          case NOT:             ;\n           case BITNOT:          return \"BITNOT\";\n           case POS:             return \"POS\";\n           case NEG:             return \"NEG\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_651/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:02:08.286508035 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_651/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:02:08.286508035 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +364,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +376,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_651/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:02:08.290508186 -0500\n@@ -1142,17 +1142,9 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n+    StringBuilder builder = new StringBuilder();\n+    int start = 0;\n+\tout.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_651/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:02:08.290508186 -0500\n@@ -260,9 +260,6 @@\n     } else {\n       replacement = Node.newNumber(value);\n     }\n-\n-    n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n@@ -352,12 +349,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 261, 
          "faulty": "replacement=Node.newNumber(value);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 321, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_322/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:57:20.647676331 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_322/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:57:20.651676481 -0500\n@@ -318,17 +318,6 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n-        && s.charAt(0) == '0'\n-        && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n-      // Attempt to convert hex numbers.\n-      try {\n-        return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n-      } catch (NumberFormatException e) {\n-        return Double.NaN;\n-      }\n-    }\n-\n     if (s.length() > 3\n         && (s.charAt(0) == '-' || s.charAt(0) == '+')\n         && s.charAt(1) == '0'\n@@ -346,7 +335,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +361,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        StringBuilder builder = new StringBuilder();\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_322/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:57:20.655676631 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_322/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:57:20.655676631 -0500\n@@ -258,10 +258,9 @@\n       replacement = new Node(Token.NEG, Node.newString(Token.NAME, \"Infinity\"));\n       replacement.copyInformationFromForTree(n);\n     } else {\n-      replacement = Node.newNumber(value);\n+      StringBuilder builder = new StringBuilder();\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 357, 
          "faulty": "int end=s.length();", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1398/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:11:52.352787131 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1398/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:11:52.356787283 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -354,7 +354,8 @@\n \n   static String trimJsWhiteSpace(String s) {\n     int start = 0;\n-    int end = s.length();\n+    StringBuilder builder = new StringBuilder();\n+\tint end = s.length();\n     while (end > 0\n         && isStrWhiteSpaceChar(s.charAt(end - 1)) == TernaryValue.TRUE) {\n       end--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1398/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:11:52.356787283 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_670/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:02:20.318963196 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_670/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:02:20.318963196 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_670/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:02:20.322963347 -0500\n@@ -260,9 +260,6 @@\n     } else {\n       replacement = Node.newNumber(value);\n     }\n-\n-    n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 359, 
          "faulty": "return left;", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_512/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:00:06.401889744 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_512/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:00:06.401889744 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +364,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_512/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:00:06.405889895 -0500\n@@ -1142,17 +1142,9 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n+    StringBuilder builder = new StringBuilder();\n+    int start = 0;\n+\tout.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_512/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:00:06.405889895 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 301, 
          "faulty": "return \"NOT\";", 
          "type": "Delete", 
          "seed": "return Token.LP;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_743/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:03:12.584938191 -0500\n@@ -298,7 +298,7 @@\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n           case MOD:             return \"MOD\";\n-          case NOT:             return \"NOT\";\n+          case NOT:             ;\n           case BITNOT:          return \"BITNOT\";\n           case POS:             return \"POS\";\n           case NEG:             return \"NEG\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_743/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:03:12.588938342 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_743/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:03:12.588938342 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -384,8 +384,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_743/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:03:12.592938493 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    int index = -1;\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_743/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:03:12.592938493 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "Context cx=Context.getCurrentContext();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_821/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:04:12.671216581 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_821/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:04:12.675216733 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_821/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:04:12.675216733 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 359, 
          "faulty": "return left;", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 253, 
          "faulty": "if (Double.isNaN(value)) {\n  replacement=Node.newString(Token.NAME,\"NaN\");\n}\n else if (value == Double.POSITIVE_INFINITY) {\n  replacement=Node.newString(Token.NAME,\"Infinity\");\n}\n else if (value == Double.NEGATIVE_INFINITY) {\n  replacement=new Node(Token.NEG,Node.newString(Token.NAME,\"Infinity\"));\n  replacement.copyInformationFromForTree(n);\n}\n else {\n  replacement=Node.newNumber(value);\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_539/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:00:35.943007440 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_539/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:00:35.947007592 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +364,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_539/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:00:35.947007592 -0500\n@@ -1142,17 +1142,9 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n+    StringBuilder builder = new StringBuilder();\n+    int start = 0;\n+\tout.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_539/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:00:35.951007744 -0500\n@@ -250,7 +250,8 @@\n     double value = result;\n \n     Node replacement;\n-    if (Double.isNaN(value)) {\n+    StringBuilder builder = new StringBuilder();\n+\tif (Double.isNaN(value)) {\n       replacement = Node.newString(Token.NAME, \"NaN\");\n     } else if (value == Double.POSITIVE_INFINITY) {\n       replacement = Node.newString(Token.NAME, \"Infinity\");\n@@ -352,12 +353,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_420/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:58:57.615303173 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_420/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:58:57.619303322 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +364,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +376,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_420/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:58:57.623303472 -0500\n@@ -1142,20 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n-        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n-        .append(HEX_CHARS[codePoint & 0xf]);\n+    int start = 0;\n+\tint index = -1;\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_420/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:58:57.623303472 -0500\n@@ -260,9 +260,6 @@\n     } else {\n       replacement = Node.newNumber(value);\n     }\n-\n-    n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 317, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "boolean nullKey=false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "start++;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 246, 
          "faulty": "if (result == null) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "consumeToken();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 2141, 
          "faulty": "return \"+\";", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1300/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:10:33.133782103 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1300/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:10:33.133782103 -0500\n@@ -313,11 +313,6 @@\n       // vertical tab is not always whitespace\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -346,7 +341,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -361,7 +356,8 @@\n     }\n     while (start < end\n         && isStrWhiteSpaceChar(s.charAt(start)) == TernaryValue.TRUE) {\n-      start++;\n+      int index = -1;\n+\tstart++;\n     }\n     return s.substring(start, end);\n   }\n@@ -384,8 +380,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n@@ -2138,7 +2137,7 @@\n       case Token.BITNOT: return \"~\";\n       case Token.ADD: return \"+\";\n       case Token.SUB: return \"-\";\n-      case Token.POS: return \"+\";\n+      case Token.POS: int index = -1;\n       case Token.NEG: return \"-\";\n       case Token.ASSIGN: return \"=\";\n       case Token.ASSIGN_BITOR: return \"|=\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1300/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:10:33.137782255 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1300/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:10:33.141782407 -0500\n@@ -243,7 +243,8 @@\n     }\n \n     Double result = NodeUtil.getNumberValue(n);\n-    if (result == null) {\n+    int type = n.getType();\n+\tif (result == null) {\n       return;\n     }\n \n@@ -352,12 +353,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 317, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "boolean nullKey=false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "start++;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 246, 
          "faulty": "if (result == null) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "consumeToken();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 2141, 
          "faulty": "return \"+\";", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1340/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:11:11.591241487 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1340/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:11:11.595241639 -0500\n@@ -313,11 +313,6 @@\n       // vertical tab is not always whitespace\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -346,7 +341,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -361,7 +356,8 @@\n     }\n     while (start < end\n         && isStrWhiteSpaceChar(s.charAt(start)) == TernaryValue.TRUE) {\n-      start++;\n+      int index = -1;\n+\tstart++;\n     }\n     return s.substring(start, end);\n   }\n@@ -372,7 +368,11 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        {\n+\t\t\tNode parameterName = Node.newString(Token.NAME,\n+\t\t\t\t\t\"jscomp_throw_param\");\n+\t\t\treturn TernaryValue.TRUE;\n+\t\t}\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +384,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n@@ -2138,7 +2141,7 @@\n       case Token.BITNOT: return \"~\";\n       case Token.ADD: return \"+\";\n       case Token.SUB: return \"-\";\n-      case Token.POS: return \"+\";\n+      case Token.POS: int index = -1;\n       case Token.NEG: return \"-\";\n       case Token.ASSIGN: return \"=\";\n       case Token.ASSIGN_BITOR: return \"|=\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1340/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:11:11.595241639 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1340/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:11:11.599241791 -0500\n@@ -243,7 +243,8 @@\n     }\n \n     Double result = NodeUtil.getNumberValue(n);\n-    if (result == null) {\n+    int type = n.getType();\n+\tif (result == null) {\n       return;\n     }\n \n@@ -352,12 +353,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "consumeToken();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 2141, 
          "faulty": "return \"+\";", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 301, 
          "faulty": "return \"NOT\";", 
          "type": "Delete", 
          "seed": "int c2=getChar();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1230/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:09:43.391892759 -0500\n@@ -298,7 +298,7 @@\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n           case MOD:             return \"MOD\";\n-          case NOT:             return \"NOT\";\n+          case NOT:             ;\n           case BITNOT:          return \"BITNOT\";\n           case POS:             return \"POS\";\n           case NEG:             return \"NEG\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1230/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:09:43.391892759 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1230/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:09:43.395892911 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -2138,7 +2138,7 @@\n       case Token.BITNOT: return \"~\";\n       case Token.ADD: return \"+\";\n       case Token.SUB: return \"-\";\n-      case Token.POS: return \"+\";\n+      case Token.POS: int index = -1;\n       case Token.NEG: return \"-\";\n       case Token.ASSIGN: return \"=\";\n       case Token.ASSIGN_BITOR: return \"|=\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1230/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:09:43.399893064 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1230/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:09:43.399893064 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1066/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:07:28.918773691 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1066/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:07:28.918773691 -0500\n@@ -298,7 +298,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +364,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1066/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:07:28.922773845 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1066/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:07:28.926773996 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_404/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:58:41.654706096 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_404/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:58:41.658706245 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +364,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +376,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_404/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:58:41.658706245 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,20 +1143,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n-        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n-        .append(HEX_CHARS[codePoint & 0xf]);\n+    int start = 0;\n+\tint index = -1;\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_404/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:58:41.662706395 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 261, 
          "faulty": "replacement=Node.newNumber(value);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_332/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:57:28.703977592 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_332/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:57:28.703977592 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        StringBuilder builder = new StringBuilder();\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_332/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:57:28.707977741 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_332/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:57:28.707977741 -0500\n@@ -258,10 +258,9 @@\n       replacement = new Node(Token.NEG, Node.newString(Token.NAME, \"Infinity\"));\n       replacement.copyInformationFromForTree(n);\n     } else {\n-      replacement = Node.newNumber(value);\n+      StringBuilder builder = new StringBuilder();\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "String namespace=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1092/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:07:54.383744493 -0500\n@@ -1410,7 +1410,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        String namespace = null;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1092/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:07:54.383744493 -0500\n@@ -298,7 +298,11 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tNode parameterName = Node.newString(Token.NAME,\n+\t\t\t\t\t\"jscomp_throw_param\");\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -346,7 +350,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +376,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +388,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1092/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:07:54.387744647 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1092/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:07:54.387744647 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "InsertBefore", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1019, 
          "faulty": "appendHexJavaScriptRepresentation(sb,c);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_504/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:00:01.041687981 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_504/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:00:01.045688131 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +364,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +376,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_504/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:00:01.049688283 -0500\n@@ -1013,10 +1013,7 @@\n             if (c > 0x1f && c <= 0x7f) {\n               sb.append(c);\n             } else {\n-              // Other characters can be misinterpreted by some js parsers,\n-              // or perhaps mangled by proxies along the way,\n-              // so we play it safe and unicode escape them.\n-              appendHexJavaScriptRepresentation(sb, c);\n+              int index = -1;\n             }\n           }\n       }\n@@ -1142,17 +1139,9 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n+    StringBuilder builder = new StringBuilder();\n+    int start = 0;\n+\tout.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_504/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:00:01.049688283 -0500\n@@ -262,7 +262,6 @@\n     }\n \n     n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_55/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:53:37.823351361 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_55/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:53:37.827351510 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 317, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "boolean nullKey=false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "start++;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 246, 
          "faulty": "if (result == null) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int type=n.getType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1019/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:06:51.241330176 -0500\n@@ -1410,7 +1410,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        boolean nullKey = false;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1019/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:06:51.245330331 -0500\n@@ -313,11 +313,6 @@\n       // vertical tab is not always whitespace\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -346,7 +341,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -361,7 +356,8 @@\n     }\n     while (start < end\n         && isStrWhiteSpaceChar(s.charAt(start)) == TernaryValue.TRUE) {\n-      start++;\n+      int index = -1;\n+\tstart++;\n     }\n     return s.substring(start, end);\n   }\n@@ -372,7 +368,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +380,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1019/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:06:51.249330485 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1019/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:06:51.249330485 -0500\n@@ -243,7 +243,8 @@\n     }\n \n     Double result = NodeUtil.getNumberValue(n);\n-    if (result == null) {\n+    int type = n.getType();\n+\tif (result == null) {\n       return;\n     }\n \n@@ -352,12 +353,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "consumeToken();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 2141, 
          "faulty": "return \"+\";", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "InsertBefore", 
          "seed": "Class c=n.getClass();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1312/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:10:46.970307301 -0500\n@@ -1410,7 +1410,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        Class c = n.getClass();\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1312/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:10:46.970307301 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -2138,7 +2138,7 @@\n       case Token.BITNOT: return \"~\";\n       case Token.ADD: return \"+\";\n       case Token.SUB: return \"-\";\n-      case Token.POS: return \"+\";\n+      case Token.POS: int index = -1;\n       case Token.NEG: return \"-\";\n       case Token.ASSIGN: return \"=\";\n       case Token.ASSIGN_BITOR: return \"|=\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1312/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:10:46.974307453 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1312/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:10:46.978307606 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "start++;", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_181/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:55:25.443370088 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -361,7 +361,9 @@\n     }\n     while (start < end\n         && isStrWhiteSpaceChar(s.charAt(start)) == TernaryValue.TRUE) {\n-      start++;\n+      Node parameterName = Node.newString(Token.NAME,\n+\t\t\t\t\t\"jscomp_throw_param\");\n+\tstart++;\n     }\n     return s.substring(start, end);\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_181/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:55:25.443370088 -0500\n@@ -1142,16 +1142,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_181/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:55:25.447370237 -0500\n@@ -262,7 +262,6 @@\n     }\n \n     n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1120/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:08:14.120496438 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1120/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:08:14.124496592 -0500\n@@ -298,7 +298,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1120/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:08:14.124496592 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1120/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:08:14.128496744 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_279/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:56:39.354132412 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_279/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:56:39.358132563 -0500\n@@ -298,7 +298,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_279/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:56:39.358132563 -0500\n@@ -1142,16 +1142,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_279/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:56:39.362132712 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "consumeToken();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 2141, 
          "faulty": "return \"+\";", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 358, 
          "faulty": "reportCodeChange();", 
          "type": "InsertBefore", 
          "seed": "return toDot(n,null);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1388/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:11:46.456563622 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1388/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:11:46.460563774 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -2138,7 +2138,7 @@\n       case Token.BITNOT: return \"~\";\n       case Token.ADD: return \"+\";\n       case Token.SUB: return \"-\";\n-      case Token.POS: return \"+\";\n+      case Token.POS: int index = -1;\n       case Token.NEG: return \"-\";\n       case Token.ASSIGN: return \"=\";\n       case Token.ASSIGN_BITOR: return \"|=\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1388/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:11:46.460563774 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1388/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:11:46.464563927 -0500\n@@ -262,7 +262,6 @@\n     }\n \n     n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 301, 
          "faulty": "return \"NOT\";", 
          "type": "Delete", 
          "seed": "int c=getChar();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 321, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1384/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:11:43.828463992 -0500\n@@ -298,7 +298,7 @@\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n           case MOD:             return \"MOD\";\n-          case NOT:             return \"NOT\";\n+          case NOT:             ;\n           case BITNOT:          return \"BITNOT\";\n           case POS:             return \"POS\";\n           case NEG:             return \"NEG\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1384/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:11:43.832464143 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1384/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:11:43.832464143 -0500\n@@ -298,7 +298,11 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tNode parameterName = Node.newString(Token.NAME,\n+\t\t\t\t\t\"jscomp_throw_param\");\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -318,17 +322,6 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n-        && s.charAt(0) == '0'\n-        && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n-      // Attempt to convert hex numbers.\n-      try {\n-        return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n-      } catch (NumberFormatException e) {\n-        return Double.NaN;\n-      }\n-    }\n-\n     if (s.length() > 3\n         && (s.charAt(0) == '-' || s.charAt(0) == '+')\n         && s.charAt(1) == '0'\n@@ -346,7 +339,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -384,8 +377,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1384/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:11:43.836464296 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1384/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:11:43.836464296 -0500\n@@ -352,12 +352,14 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        {\n+\t\t\tStringBuilder builder = new StringBuilder();\n+\t\t\tif (NodeUtil.isNumericResult(left)) {\n+\t\t\t\tparent.replaceChild(n, left.detachFromParent());\n+\t\t\t\treportCodeChange();\n+\t\t\t\treturn left;\n+\t\t\t}\n+\t\t}\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 261, 
          "faulty": "replacement=Node.newNumber(value);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_400/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:58:38.974605838 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_400/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:58:38.978605989 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        StringBuilder builder = new StringBuilder();\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_400/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:58:38.982606138 -0500\n@@ -1125,7 +1125,9 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int index = -1;\n+\t\tint start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,20 +1144,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n-        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n-        .append(HEX_CHARS[codePoint & 0xf]);\n+    int index = -1;\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_400/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:58:38.982606138 -0500\n@@ -258,10 +258,9 @@\n       replacement = new Node(Token.NEG, Node.newString(Token.NAME, \"Infinity\"));\n       replacement.copyInformationFromForTree(n);\n     } else {\n-      replacement = Node.newNumber(value);\n+      StringBuilder builder = new StringBuilder();\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 317, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "boolean nullKey=false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "start++;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 246, 
          "faulty": "if (result == null) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 317, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1019, 
          "faulty": "appendHexJavaScriptRepresentation(sb,c);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1200/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:09:18.594950109 -0500\n@@ -1410,7 +1410,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        boolean nullKey = false;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1200/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:09:18.594950109 -0500\n@@ -313,10 +313,7 @@\n       // vertical tab is not always whitespace\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n+    StringBuilder builder = new StringBuilder();\n \n     if (s.length() > 2\n         && s.charAt(0) == '0'\n@@ -346,7 +343,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -361,7 +358,8 @@\n     }\n     while (start < end\n         && isStrWhiteSpaceChar(s.charAt(start)) == TernaryValue.TRUE) {\n-      start++;\n+      int index = -1;\n+\tstart++;\n     }\n     return s.substring(start, end);\n   }\n@@ -384,8 +382,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1200/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:09:18.598950261 -0500\n@@ -1013,7 +1013,8 @@\n             if (c > 0x1f && c <= 0x7f) {\n               sb.append(c);\n             } else {\n-              // Other characters can be misinterpreted by some js parsers,\n+              int start = 0;\n+\t\t\t// Other characters can be misinterpreted by some js parsers,\n               // or perhaps mangled by proxies along the way,\n               // so we play it safe and unicode escape them.\n               appendHexJavaScriptRepresentation(sb, c);\n@@ -1125,7 +1126,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1144,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1200/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:09:18.598950261 -0500\n@@ -243,7 +243,8 @@\n     }\n \n     Double result = NodeUtil.getNumberValue(n);\n-    if (result == null) {\n+    int type = n.getType();\n+\tif (result == null) {\n       return;\n     }\n \n@@ -352,12 +353,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return this;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_778/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:03:36.789851796 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_778/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:03:36.793851947 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +364,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_778/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:03:36.797852099 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_778/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:03:36.797852099 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "InsertBefore", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_757/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:03:22.053295642 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_757/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:03:22.053295642 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +364,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +376,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_757/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:03:22.057295793 -0500\n@@ -1142,16 +1142,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_757/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:03:22.057295793 -0500\n@@ -260,9 +260,6 @@\n     } else {\n       replacement = Node.newNumber(value);\n     }\n-\n-    n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n@@ -352,12 +349,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_383/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:58:19.961894643 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_383/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:58:19.965894793 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +364,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +376,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_383/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:58:19.965894793 -0500\n@@ -1142,17 +1142,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n+    int start = 0;\n+\tout.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_383/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:58:19.969894943 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 301, 
          "faulty": "return \"NOT\";", 
          "type": "Delete", 
          "seed": "int c=getChar();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1371, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 321, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1357/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:11:23.571695898 -0500\n@@ -298,7 +298,7 @@\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n           case MOD:             return \"MOD\";\n-          case NOT:             return \"NOT\";\n+          case NOT:             ;\n           case BITNOT:          return \"BITNOT\";\n           case POS:             return \"POS\";\n           case NEG:             return \"NEG\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1357/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:11:23.575696050 -0500\n@@ -1368,7 +1368,13 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n@@ -1410,7 +1416,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1357/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:11:23.575696050 -0500\n@@ -318,17 +318,6 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n-        && s.charAt(0) == '0'\n-        && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n-      // Attempt to convert hex numbers.\n-      try {\n-        return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n-      } catch (NumberFormatException e) {\n-        return Double.NaN;\n-      }\n-    }\n-\n     if (s.length() > 3\n         && (s.charAt(0) == '-' || s.charAt(0) == '+')\n         && s.charAt(1) == '0'\n@@ -346,7 +335,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +361,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +373,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1357/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:11:23.579696201 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 261, 
          "faulty": "replacement=Node.newNumber(value);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 358, 
          "faulty": "reportCodeChange();", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_408/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:58:44.474811592 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_408/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:58:44.478811741 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        StringBuilder builder = new StringBuilder();\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_408/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:58:44.482811891 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,17 +1143,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n+    int start = 0;\n+\tout.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_408/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:58:44.482811891 -0500\n@@ -258,10 +258,9 @@\n       replacement = new Node(Token.NEG, Node.newString(Token.NAME, \"Infinity\"));\n       replacement.copyInformationFromForTree(n);\n     } else {\n-      replacement = Node.newNumber(value);\n+      StringBuilder builder = new StringBuilder();\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_339/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:57:33.440154704 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_339/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:57:33.444154852 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +364,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +376,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_339/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:57:33.444154852 -0500\n@@ -1142,20 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n-        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n-        .append(HEX_CHARS[codePoint & 0xf]);\n+    int start = 0;\n+\tint index = -1;\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_339/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:57:33.448155003 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 255, 
          "faulty": "if (value == Double.POSITIVE_INFINITY) {\n  replacement=Node.newString(Token.NAME,\"Infinity\");\n}\n else if (value == Double.NEGATIVE_INFINITY) {\n  replacement=new Node(Token.NEG,Node.newString(Token.NAME,\"Infinity\"));\n  replacement.copyInformationFromForTree(n);\n}\n else {\n  replacement=Node.newNumber(value);\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_260/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:56:25.373609791 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_260/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:56:25.377609940 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_260/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:56:25.381610089 -0500\n@@ -1142,16 +1142,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_260/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:56:25.381610089 -0500\n@@ -252,16 +252,19 @@\n     Node replacement;\n     if (Double.isNaN(value)) {\n       replacement = Node.newString(Token.NAME, \"NaN\");\n-    } else if (value == Double.POSITIVE_INFINITY) {\n-      replacement = Node.newString(Token.NAME, \"Infinity\");\n-    } else if (value == Double.NEGATIVE_INFINITY) {\n-      replacement = new Node(Token.NEG, Node.newString(Token.NAME, \"Infinity\"));\n-      replacement.copyInformationFromForTree(n);\n     } else {\n-      replacement = Node.newNumber(value);\n-    }\n+\t\tStringBuilder builder = new StringBuilder();\n+\t\tif (value == Double.POSITIVE_INFINITY) {\n+\t\t\treplacement = Node.newString(Token.NAME, \"Infinity\");\n+\t\t} else if (value == Double.NEGATIVE_INFINITY) {\n+\t\t\treplacement = new Node(Token.NEG, Node.newString(Token.NAME,\n+\t\t\t\t\t\"Infinity\"));\n+\t\t\treplacement.copyInformationFromForTree(n);\n+\t\t} else {\n+\t\t\treplacement = Node.newNumber(value);\n+\t\t}\n+\t}\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n@@ -352,12 +355,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 358, 
          "faulty": "reportCodeChange();", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_195/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:55:36.067767062 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_195/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:55:36.071767211 -0500\n@@ -298,7 +298,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_195/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:55:36.071767211 -0500\n@@ -1142,20 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n-        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n-        .append(HEX_CHARS[codePoint & 0xf]);\n+    StringBuilder builder = new StringBuilder();\n+    int index = -1;\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_195/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:55:36.075767359 -0500\n@@ -355,7 +355,7 @@\n         if (NodeUtil.isNumericResult(left)) {\n           // POS does nothing to numeric values.\n           parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n+          Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n           return left;\n         }\n         return n;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 317, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "boolean nullKey=false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "start++;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 246, 
          "faulty": "if (result == null) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int type=n.getType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1154/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:08:41.537540329 -0500\n@@ -1410,7 +1410,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        boolean nullKey = false;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1154/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:08:41.541540481 -0500\n@@ -313,11 +313,6 @@\n       // vertical tab is not always whitespace\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -346,7 +341,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -361,7 +356,8 @@\n     }\n     while (start < end\n         && isStrWhiteSpaceChar(s.charAt(start)) == TernaryValue.TRUE) {\n-      start++;\n+      int index = -1;\n+\tstart++;\n     }\n     return s.substring(start, end);\n   }\n@@ -372,7 +368,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +380,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1154/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:08:41.541540481 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1154/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:08:41.545540633 -0500\n@@ -243,7 +243,8 @@\n     }\n \n     Double result = NodeUtil.getNumberValue(n);\n-    if (result == null) {\n+    int type = n.getType();\n+\tif (result == null) {\n       return;\n     }\n \n@@ -352,12 +353,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 301, 
          "faulty": "return \"NOT\";", 
          "type": "InsertBefore", 
          "seed": "int firstDeleted=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1161/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:08:46.281720886 -0500\n@@ -298,7 +298,10 @@\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n           case MOD:             return \"MOD\";\n-          case NOT:             return \"NOT\";\n+          case NOT:             {\n+\t\t\t\tint firstDeleted = -1;\n+\t\t\t\treturn \"NOT\";\n+\t\t\t}\n           case BITNOT:          return \"BITNOT\";\n           case POS:             return \"POS\";\n           case NEG:             return \"NEG\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1161/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:08:46.285721038 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1161/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:08:46.289721190 -0500\n@@ -298,7 +298,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +364,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1161/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:08:46.289721190 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1161/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:08:46.293721341 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 317, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 301, 
          "faulty": "return \"NOT\";", 
          "type": "Delete", 
          "seed": "return new ScriptOrFnNode(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "consumeToken();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 2141, 
          "faulty": "return \"+\";", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1000/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:06:36.372755888 -0500\n@@ -298,7 +298,7 @@\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n           case MOD:             return \"MOD\";\n-          case NOT:             return \"NOT\";\n+          case NOT:             ;\n           case BITNOT:          return \"BITNOT\";\n           case POS:             return \"POS\";\n           case NEG:             return \"NEG\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1000/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:06:36.372755888 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1000/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:06:36.376756041 -0500\n@@ -313,11 +313,6 @@\n       // vertical tab is not always whitespace\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -346,7 +341,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +367,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +379,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n@@ -2138,7 +2136,7 @@\n       case Token.BITNOT: return \"~\";\n       case Token.ADD: return \"+\";\n       case Token.SUB: return \"-\";\n-      case Token.POS: return \"+\";\n+      case Token.POS: int index = -1;\n       case Token.NEG: return \"-\";\n       case Token.ASSIGN: return \"=\";\n       case Token.ASSIGN_BITOR: return \"|=\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1000/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:06:36.380756196 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1000/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:06:36.380756196 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_962/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:06:07.511638378 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_962/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:06:07.515638533 -0500\n@@ -298,7 +298,11 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tNode parameterName = Node.newString(Token.NAME,\n+\t\t\t\t\t\"jscomp_throw_param\");\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -346,7 +350,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +376,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +388,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_962/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:06:07.515638533 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_962/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:06:07.519638688 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 303, 
          "faulty": "return \"POS\";", 
          "type": "InsertBefore", 
          "seed": "final String defaultResource=\"rhino_ast.java.com.google.javascript.rhino.Messages\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 342, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_837/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:04:25.987722990 -0500\n@@ -300,7 +300,10 @@\n           case MOD:             return \"MOD\";\n           case NOT:             return \"NOT\";\n           case BITNOT:          return \"BITNOT\";\n-          case POS:             return \"POS\";\n+          case POS:             {\n+\t\t\t\tfinal String defaultResource = \"rhino_ast.java.com.google.javascript.rhino.Messages\";\n+\t\t\t\treturn \"POS\";\n+\t\t\t}\n           case NEG:             return \"NEG\";\n           case NEW:             return \"NEW\";\n           case DELPROP:         return \"DELPROP\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_837/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:04:25.991723142 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_837/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:04:25.991723142 -0500\n@@ -337,7 +337,8 @@\n       return null;\n     }\n \n-    // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n+    StringBuilder builder = new StringBuilder();\n+\t// FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n         || s.equals(\"-infinity\")\n@@ -346,7 +347,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -384,8 +385,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_837/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:04:25.995723294 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_837/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:04:25.995723294 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 317, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 301, 
          "faulty": "return \"NOT\";", 
          "type": "Delete", 
          "seed": "return new ScriptOrFnNode(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_972/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:06:14.091893505 -0500\n@@ -298,7 +298,7 @@\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n           case MOD:             return \"MOD\";\n-          case NOT:             return \"NOT\";\n+          case NOT:             ;\n           case BITNOT:          return \"BITNOT\";\n           case POS:             return \"POS\";\n           case NEG:             return \"NEG\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_972/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:06:14.091893505 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_972/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:06:14.095893660 -0500\n@@ -313,11 +313,6 @@\n       // vertical tab is not always whitespace\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -346,7 +341,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -384,8 +379,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_972/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:06:14.099893815 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_972/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:06:14.099893815 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "InsertBefore", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 358, 
          "faulty": "reportCodeChange();", 
          "type": "InsertBefore", 
          "seed": "int keyParent=key(parent);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 358, 
          "faulty": "reportCodeChange();", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 321, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_673/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:02:22.079029759 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_673/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:02:22.083029910 -0500\n@@ -318,25 +318,6 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n-        && s.charAt(0) == '0'\n-        && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n-      // Attempt to convert hex numbers.\n-      try {\n-        return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n-      } catch (NumberFormatException e) {\n-        return Double.NaN;\n-      }\n-    }\n-\n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +327,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +353,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +365,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_673/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:02:22.083029910 -0500\n@@ -1142,17 +1142,9 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n+    StringBuilder builder = new StringBuilder();\n+    int start = 0;\n+\tout.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_673/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:02:22.087030062 -0500\n@@ -262,7 +262,6 @@\n     }\n \n     n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 359, 
          "faulty": "return left;", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 257, 
          "faulty": "if (value == Double.NEGATIVE_INFINITY) {\n  replacement=new Node(Token.NEG,Node.newString(Token.NAME,\"Infinity\"));\n  replacement.copyInformationFromForTree(n);\n}\n else {\n  replacement=Node.newNumber(value);\n}", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 261, 
          "faulty": "replacement=Node.newNumber(value);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 253, 
          "faulty": "if (Double.isNaN(value)) {\n  replacement=Node.newString(Token.NAME,\"NaN\");\n}\n else if (value == Double.POSITIVE_INFINITY) {\n  replacement=Node.newString(Token.NAME,\"Infinity\");\n}\n else if (value == Double.NEGATIVE_INFINITY) {\n  replacement=new Node(Token.NEG,Node.newString(Token.NAME,\"Infinity\"));\n  replacement.copyInformationFromForTree(n);\n}\n else {\n  replacement=Node.newNumber(value);\n}", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_686/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:02:30.059331512 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_686/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:02:30.063331663 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +364,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_686/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:02:30.063331663 -0500\n@@ -1142,17 +1142,9 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n+    StringBuilder builder = new StringBuilder();\n+    int start = 0;\n+\tout.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_686/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:02:30.067331814 -0500\n@@ -250,18 +250,8 @@\n     double value = result;\n \n     Node replacement;\n-    if (Double.isNaN(value)) {\n-      replacement = Node.newString(Token.NAME, \"NaN\");\n-    } else if (value == Double.POSITIVE_INFINITY) {\n-      replacement = Node.newString(Token.NAME, \"Infinity\");\n-    } else if (value == Double.NEGATIVE_INFINITY) {\n-      replacement = new Node(Token.NEG, Node.newString(Token.NAME, \"Infinity\"));\n-      replacement.copyInformationFromForTree(n);\n-    } else {\n-      replacement = Node.newNumber(value);\n-    }\n+    Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n@@ -352,12 +342,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "InsertBefore", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_677/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:02:23.851096772 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_677/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:02:23.855096923 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -384,8 +376,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_677/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:02:23.855096923 -0500\n@@ -1142,17 +1142,9 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n+    StringBuilder builder = new StringBuilder();\n+    int start = 0;\n+\tout.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_677/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:02:23.859097074 -0500\n@@ -262,7 +262,6 @@\n     }\n \n     n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_867/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:04:49.560619102 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_867/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:04:49.560619102 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +384,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_867/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:04:49.564619257 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_867/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:04:49.564619257 -0500\n@@ -262,7 +262,6 @@\n     }\n \n     n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_179/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:55:24.559337059 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_179/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:55:24.563337208 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_179/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:55:24.563337208 -0500\n@@ -1142,16 +1142,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_179/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:55:24.567337357 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 317, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "boolean nullKey=false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 301, 
          "faulty": "return \"NOT\";", 
          "type": "Delete", 
          "seed": "int c=getChar();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1237/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:09:46.900026076 -0500\n@@ -298,7 +298,7 @@\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n           case MOD:             return \"MOD\";\n-          case NOT:             return \"NOT\";\n+          case NOT:             ;\n           case BITNOT:          return \"BITNOT\";\n           case POS:             return \"POS\";\n           case NEG:             return \"NEG\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1237/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:09:46.900026076 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1237/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:09:46.904026228 -0500\n@@ -313,11 +313,6 @@\n       // vertical tab is not always whitespace\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -346,7 +341,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -384,8 +379,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1237/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:09:46.908026380 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1237/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:09:46.908026380 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_463/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:59:28.380458151 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +364,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +376,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_463/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:59:28.384458302 -0500\n@@ -1152,7 +1152,8 @@\n       appendHexJavaScriptRepresentation(surrogates[1], out);\n       return;\n     }\n-    out.append(\"\\\\u\")\n+    int start = 0;\n+\tout.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 301, 
          "faulty": "return \"NOT\";", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 301, 
          "faulty": "return \"NOT\";", 
          "type": "Delete", 
          "seed": "int c=getChar();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1180/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:09:02.894352967 -0500\n@@ -298,7 +298,7 @@\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n           case MOD:             return \"MOD\";\n-          case NOT:             return \"NOT\";\n+          case NOT:             ;\n           case BITNOT:          return \"BITNOT\";\n           case POS:             return \"POS\";\n           case NEG:             return \"NEG\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1180/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:09:02.894352967 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1180/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:09:02.898353119 -0500\n@@ -298,7 +298,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +384,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1180/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:09:02.898353119 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    int start = 0;\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1180/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:09:02.902353272 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1019, 
          "faulty": "appendHexJavaScriptRepresentation(sb,c);", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_817/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:04:04.482905008 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_817/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:04:04.486905160 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +384,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_817/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:04:04.486905160 -0500\n@@ -1013,10 +1013,6 @@\n             if (c > 0x1f && c <= 0x7f) {\n               sb.append(c);\n             } else {\n-              // Other characters can be misinterpreted by some js parsers,\n-              // or perhaps mangled by proxies along the way,\n-              // so we play it safe and unicode escape them.\n-              appendHexJavaScriptRepresentation(sb, c);\n             }\n           }\n       }\n@@ -1125,7 +1121,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1139,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_817/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:04:04.490905313 -0500\n@@ -260,9 +260,6 @@\n     } else {\n       replacement = Node.newNumber(value);\n     }\n-\n-    n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n@@ -352,12 +349,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "consumeToken();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 2141, 
          "faulty": "return \"+\";", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1263/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:10:06.232760577 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1263/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:10:06.236760730 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -384,8 +384,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n@@ -2138,7 +2141,7 @@\n       case Token.BITNOT: return \"~\";\n       case Token.ADD: return \"+\";\n       case Token.SUB: return \"-\";\n-      case Token.POS: return \"+\";\n+      case Token.POS: int index = -1;\n       case Token.NEG: return \"-\";\n       case Token.ASSIGN: return \"=\";\n       case Token.ASSIGN_BITOR: return \"|=\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1263/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:10:06.240760880 -0500\n@@ -1142,16 +1142,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1263/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:10:06.240760880 -0500\n@@ -352,12 +352,14 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (NodeUtil.isNumericResult(left)) {\n+\t\t\t\tparent.replaceChild(n, left.detachFromParent());\n+\t\t\t\treportCodeChange();\n+\t\t\t\treturn left;\n+\t\t\t}\n+\t\t}\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_755/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:03:21.169262273 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_755/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:03:21.173262424 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +384,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_755/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:03:21.177262574 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_755/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:03:21.177262574 -0500\n@@ -262,7 +262,6 @@\n     }\n \n     n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 321, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1058/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:07:18.378371647 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1058/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:07:18.378371647 -0500\n@@ -318,7 +318,8 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n+    Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n+\tif (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n       // Attempt to convert hex numbers.\n@@ -346,7 +347,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -384,8 +385,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1058/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:07:18.382371801 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1058/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:07:18.382371801 -0500\n@@ -262,7 +262,6 @@\n     }\n \n     n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "InsertBefore", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_749/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:03:18.501161552 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_749/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:03:18.505161704 -0500\n@@ -298,7 +298,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +384,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_749/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:03:18.505161704 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_749/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:03:18.509161855 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 356, 
          "faulty": "int start=0;", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_155/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:54:57.230316114 -0500\n@@ -346,14 +346,15 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n   }\n \n   static String trimJsWhiteSpace(String s) {\n-    int start = 0;\n+    Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n+\tint start = 0;\n     int end = s.length();\n     while (end > 0\n         && isStrWhiteSpaceChar(s.charAt(end - 1)) == TernaryValue.TRUE) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_155/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:54:57.234316263 -0500\n@@ -1142,16 +1142,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_155/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:54:57.234316263 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 317, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "boolean nullKey=false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "start++;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1117/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:08:11.884411268 -0500\n@@ -1410,7 +1410,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        boolean nullKey = false;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1117/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:08:11.888411419 -0500\n@@ -313,11 +313,6 @@\n       // vertical tab is not always whitespace\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -346,7 +341,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -361,7 +356,8 @@\n     }\n     while (start < end\n         && isStrWhiteSpaceChar(s.charAt(start)) == TernaryValue.TRUE) {\n-      start++;\n+      int index = -1;\n+\tstart++;\n     }\n     return s.substring(start, end);\n   }\n@@ -384,8 +380,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1117/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:08:11.892411573 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 317, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 301, 
          "faulty": "return \"NOT\";", 
          "type": "Delete", 
          "seed": "return new ScriptOrFnNode(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_931/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:05:42.986689692 -0500\n@@ -298,7 +298,7 @@\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n           case MOD:             return \"MOD\";\n-          case NOT:             return \"NOT\";\n+          case NOT:             ;\n           case BITNOT:          return \"BITNOT\";\n           case POS:             return \"POS\";\n           case NEG:             return \"NEG\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_931/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:05:42.990689847 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_931/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:05:42.990689847 -0500\n@@ -313,11 +313,6 @@\n       // vertical tab is not always whitespace\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -346,7 +341,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +367,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +379,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_931/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:05:42.994690001 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_931/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:05:42.994690001 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 317, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "boolean nullKey=false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "start++;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 246, 
          "faulty": "if (result == null) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int type=n.getType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1133/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:08:23.136839815 -0500\n@@ -1410,7 +1410,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        boolean nullKey = false;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1133/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:08:23.136839815 -0500\n@@ -313,11 +313,6 @@\n       // vertical tab is not always whitespace\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -346,7 +341,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -361,7 +356,8 @@\n     }\n     while (start < end\n         && isStrWhiteSpaceChar(s.charAt(start)) == TernaryValue.TRUE) {\n-      start++;\n+      int index = -1;\n+\tstart++;\n     }\n     return s.substring(start, end);\n   }\n@@ -384,8 +380,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1133/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:08:23.140839967 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1133/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:08:23.140839967 -0500\n@@ -243,7 +243,8 @@\n     }\n \n     Double result = NodeUtil.getNumberValue(n);\n-    if (result == null) {\n+    int type = n.getType();\n+\tif (result == null) {\n       return;\n     }\n \n@@ -352,12 +353,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 359, 
          "faulty": "return left;", 
          "type": "InsertBefore", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_967/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:06:11.391788842 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_967/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:06:11.395788997 -0500\n@@ -346,7 +346,8 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n+\treturn null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +373,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_967/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:06:11.395788997 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_967/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:06:11.399789152 -0500\n@@ -262,7 +262,6 @@\n     }\n \n     n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "InsertBefore", 
          "seed": "return new DotFormatter();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_736/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:03:07.524747118 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_736/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:03:07.528747269 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +384,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_736/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:03:07.532747420 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_736/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:03:07.532747420 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 321, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1031/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:06:59.061631866 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1031/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:06:59.065632021 -0500\n@@ -318,16 +318,7 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n-        && s.charAt(0) == '0'\n-        && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n-      // Attempt to convert hex numbers.\n-      try {\n-        return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n-      } catch (NumberFormatException e) {\n-        return Double.NaN;\n-      }\n-    }\n+    int index = -1;\n \n     if (s.length() > 3\n         && (s.charAt(0) == '-' || s.charAt(0) == '+')\n@@ -346,7 +337,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +363,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +375,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1031/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:06:59.065632021 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1031/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:06:59.069632175 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "consumeToken();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 2141, 
          "faulty": "return \"+\";", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "InsertBefore", 
          "seed": "Class c=n.getClass();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1278/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:10:16.973168498 -0500\n@@ -1410,7 +1410,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        Class c = n.getClass();\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1278/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:10:16.977168650 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -2138,7 +2138,7 @@\n       case Token.BITNOT: return \"~\";\n       case Token.ADD: return \"+\";\n       case Token.SUB: return \"-\";\n-      case Token.POS: return \"+\";\n+      case Token.POS: int index = -1;\n       case Token.NEG: return \"-\";\n       case Token.ASSIGN: return \"=\";\n       case Token.ASSIGN_BITOR: return \"|=\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1278/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:10:16.981168802 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1278/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:10:16.981168802 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "consumeToken();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 2141, 
          "faulty": "return \"+\";", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1022/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:06:53.657423410 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1022/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:06:53.661423565 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -2138,7 +2138,7 @@\n       case Token.BITNOT: return \"~\";\n       case Token.ADD: return \"+\";\n       case Token.SUB: return \"-\";\n-      case Token.POS: return \"+\";\n+      case Token.POS: int index = -1;\n       case Token.NEG: return \"-\";\n       case Token.ASSIGN: return \"=\";\n       case Token.ASSIGN_BITOR: return \"|=\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1022/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:06:53.661423565 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1022/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:06:53.665423719 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_412/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:58:52.795122848 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_412/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:58:52.795122848 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +364,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +376,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_412/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:58:52.799122999 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,20 +1143,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n-        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n-        .append(HEX_CHARS[codePoint & 0xf]);\n+    int start = 0;\n+\tint index = -1;\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_412/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:58:52.799122999 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 317, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 301, 
          "faulty": "return \"NOT\";", 
          "type": "Delete", 
          "seed": "return new ScriptOrFnNode(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1056/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:07:17.494337922 -0500\n@@ -298,7 +298,7 @@\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n           case MOD:             return \"MOD\";\n-          case NOT:             return \"NOT\";\n+          case NOT:             ;\n           case BITNOT:          return \"BITNOT\";\n           case POS:             return \"POS\";\n           case NEG:             return \"NEG\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1056/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:07:17.494337922 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1056/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:07:17.498338075 -0500\n@@ -313,11 +313,6 @@\n       // vertical tab is not always whitespace\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -346,7 +341,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -384,8 +379,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1056/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:07:17.498338075 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1056/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:07:17.502338227 -0500\n@@ -353,8 +353,7 @@\n         return replacementNode;\n       case Token.POS:\n         if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n+          StringBuilder builder = new StringBuilder();\n           reportCodeChange();\n           return left;\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_81/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:53:58.880137265 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_81/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:53:58.880137265 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_81/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:53:58.884137416 -0500\n@@ -1142,16 +1142,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_81/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:53:58.888137566 -0500\n@@ -262,7 +262,6 @@\n     }\n \n     n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_237/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:56:07.676948325 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_237/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:56:07.676948325 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_237/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:56:07.680948473 -0500\n@@ -1142,16 +1142,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_237/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:56:07.680948473 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 358, 
          "faulty": "reportCodeChange();", 
          "type": "Replace", 
          "seed": "return toDot(n,null);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_753/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:03:20.265228146 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_753/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:03:20.269228298 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +384,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_753/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:03:20.273228449 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_753/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:03:20.273228449 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_991/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:06:29.428487346 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_991/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:06:29.432487501 -0500\n@@ -298,7 +298,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_991/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:06:29.432487501 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_991/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:06:29.436487656 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 317, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_886/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:05:07.321308971 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_886/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:05:07.325309126 -0500\n@@ -313,11 +313,6 @@\n       // vertical tab is not always whitespace\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -346,7 +341,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -384,8 +379,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_886/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:05:07.325309126 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_886/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:05:07.329309280 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 359, 
          "faulty": "return left;", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_578/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:01:08.668249653 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_578/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:01:08.668249653 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +364,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_578/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:01:08.672249806 -0500\n@@ -1142,17 +1142,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n+    int start = 0;\n+\tout.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_578/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:01:08.672249806 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "InsertBefore", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 358, 
          "faulty": "reportCodeChange();", 
          "type": "InsertBefore", 
          "seed": "int keyParent=key(parent);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 358, 
          "faulty": "reportCodeChange();", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 321, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "Context cx=Context.getCurrentContext();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 358, 
          "faulty": "reportCodeChange();", 
          "type": "Replace", 
          "seed": "return toDot(n,null);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_827/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:04:17.755409968 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_827/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:04:17.755409968 -0500\n@@ -318,25 +318,6 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n-        && s.charAt(0) == '0'\n-        && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n-      // Attempt to convert hex numbers.\n-      try {\n-        return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n-      } catch (NumberFormatException e) {\n-        return Double.NaN;\n-      }\n-    }\n-\n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +327,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -384,8 +365,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_827/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:04:17.759410120 -0500\n@@ -1142,17 +1142,9 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n+    StringBuilder builder = new StringBuilder();\n+    int start = 0;\n+\tout.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_827/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:04:17.759410120 -0500\n@@ -260,9 +260,6 @@\n     } else {\n       replacement = Node.newNumber(value);\n     }\n-\n-    n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n@@ -352,12 +349,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 261, 
          "faulty": "replacement=Node.newNumber(value);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_395/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:58:34.382434057 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_395/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:58:34.382434057 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        StringBuilder builder = new StringBuilder();\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_395/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:58:34.386434206 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,20 +1143,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n-        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n-        .append(HEX_CHARS[codePoint & 0xf]);\n+    int index = -1;\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_395/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:58:34.386434206 -0500\n@@ -258,10 +258,9 @@\n       replacement = new Node(Token.NEG, Node.newString(Token.NAME, \"Infinity\"));\n       replacement.copyInformationFromForTree(n);\n     } else {\n-      replacement = Node.newNumber(value);\n+      StringBuilder builder = new StringBuilder();\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 261, 
          "faulty": "replacement=Node.newNumber(value);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_329/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:57:25.663863906 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_329/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:57:25.663863906 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        StringBuilder builder = new StringBuilder();\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_329/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:57:25.667864057 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,20 +1143,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n-        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n-        .append(HEX_CHARS[codePoint & 0xf]);\n+    int index = -1;\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_329/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:57:25.667864057 -0500\n@@ -258,10 +258,9 @@\n       replacement = new Node(Token.NEG, Node.newString(Token.NAME, \"Infinity\"));\n       replacement.copyInformationFromForTree(n);\n     } else {\n-      replacement = Node.newNumber(value);\n+      StringBuilder builder = new StringBuilder();\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 317, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 301, 
          "faulty": "return \"NOT\";", 
          "type": "Delete", 
          "seed": "return new ScriptOrFnNode(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "consumeToken();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "start++;", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 301, 
          "faulty": "return \"NOT\";", 
          "type": "InsertBefore", 
          "seed": "int firstDeleted=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1024/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:06:54.693463381 -0500\n@@ -298,7 +298,10 @@\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n           case MOD:             return \"MOD\";\n-          case NOT:             return \"NOT\";\n+          case NOT:             {\n+\t\t\t\tint firstDeleted = -1;\n+\t\t\t\treturn \"NOT\";\n+\t\t\t}\n           case BITNOT:          return \"BITNOT\";\n           case POS:             return \"POS\";\n           case NEG:             return \"NEG\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1024/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:06:54.697463537 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1024/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:06:54.697463537 -0500\n@@ -313,11 +313,6 @@\n       // vertical tab is not always whitespace\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -346,7 +341,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -361,7 +356,8 @@\n     }\n     while (start < end\n         && isStrWhiteSpaceChar(s.charAt(start)) == TernaryValue.TRUE) {\n-      start++;\n+      StringBuilder builder = new StringBuilder();\n+\tstart++;\n     }\n     return s.substring(start, end);\n   }\n@@ -372,7 +368,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +380,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1024/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:06:54.701463690 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1024/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:06:54.701463690 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 317, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "boolean nullKey=false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "start++;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_997/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:06:33.796656293 -0500\n@@ -1410,7 +1410,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        boolean nullKey = false;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_997/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:06:33.800656446 -0500\n@@ -313,11 +313,6 @@\n       // vertical tab is not always whitespace\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -346,7 +341,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -361,7 +356,8 @@\n     }\n     while (start < end\n         && isStrWhiteSpaceChar(s.charAt(start)) == TernaryValue.TRUE) {\n-      start++;\n+      int index = -1;\n+\tstart++;\n     }\n     return s.substring(start, end);\n   }\n@@ -372,7 +368,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +380,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_997/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:06:33.800656446 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_997/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:06:33.804656601 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 301, 
          "faulty": "return \"NOT\";", 
          "type": "Delete", 
          "seed": "int c=getChar();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1265/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:10:07.096793396 -0500\n@@ -298,7 +298,7 @@\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n           case MOD:             return \"MOD\";\n-          case NOT:             return \"NOT\";\n+          case NOT:             ;\n           case BITNOT:          return \"BITNOT\";\n           case POS:             return \"POS\";\n           case NEG:             return \"NEG\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1265/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:10:07.100793549 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1265/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:10:07.104793700 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1265/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:10:07.104793700 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_166/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:55:04.918603302 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_166/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:55:04.922603451 -0500\n@@ -298,7 +298,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -346,7 +349,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_212/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:55:49.900283958 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_212/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:55:49.904284107 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_212/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:55:49.908284256 -0500\n@@ -1152,7 +1152,8 @@\n       appendHexJavaScriptRepresentation(surrogates[1], out);\n       return;\n     }\n-    out.append(\"\\\\u\")\n+    int start = 0;\n+\tout.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_212/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:55:49.908284256 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "consumeToken();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 2141, 
          "faulty": "return \"+\";", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1130/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:08:21.036759844 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1130/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:08:21.040759995 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -2138,7 +2138,7 @@\n       case Token.BITNOT: return \"~\";\n       case Token.ADD: return \"+\";\n       case Token.SUB: return \"-\";\n-      case Token.POS: return \"+\";\n+      case Token.POS: int index = -1;\n       case Token.NEG: return \"-\";\n       case Token.ASSIGN: return \"=\";\n       case Token.ASSIGN_BITOR: return \"|=\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1130/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:08:21.044760149 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1130/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:08:21.044760149 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 358, 
          "faulty": "reportCodeChange();", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_188/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:55:31.087580976 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_188/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:55:31.091581125 -0500\n@@ -298,7 +298,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_188/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:55:31.091581125 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_188/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:55:31.095581275 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 317, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 301, 
          "faulty": "return \"NOT\";", 
          "type": "Delete", 
          "seed": "return new ScriptOrFnNode(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "consumeToken();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 2141, 
          "faulty": "return \"+\";", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1078/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:07:43.119315148 -0500\n@@ -298,7 +298,7 @@\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n           case MOD:             return \"MOD\";\n-          case NOT:             return \"NOT\";\n+          case NOT:             ;\n           case BITNOT:          return \"BITNOT\";\n           case POS:             return \"POS\";\n           case NEG:             return \"NEG\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1078/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:07:43.123315301 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1078/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:07:43.123315301 -0500\n@@ -313,11 +313,6 @@\n       // vertical tab is not always whitespace\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -346,7 +341,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +367,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +379,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n@@ -2138,7 +2136,7 @@\n       case Token.BITNOT: return \"~\";\n       case Token.ADD: return \"+\";\n       case Token.SUB: return \"-\";\n-      case Token.POS: return \"+\";\n+      case Token.POS: int index = -1;\n       case Token.NEG: return \"-\";\n       case Token.ASSIGN: return \"=\";\n       case Token.ASSIGN_BITOR: return \"|=\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1078/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:07:43.127315453 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1078/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:07:43.127315453 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        int start = 0;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 357, 
          "faulty": "int end=s.length();", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1333/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:11:06.503048465 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1333/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:11:06.507048616 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -354,7 +354,8 @@\n \n   static String trimJsWhiteSpace(String s) {\n     int start = 0;\n-    int end = s.length();\n+    StringBuilder builder = new StringBuilder();\n+\tint end = s.length();\n     while (end > 0\n         && isStrWhiteSpaceChar(s.charAt(end - 1)) == TernaryValue.TRUE) {\n       end--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1333/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:11:06.507048616 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1333/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:11:06.511048768 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_398/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:58:37.326544188 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_398/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:58:37.326544188 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +384,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_398/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:58:37.330544338 -0500\n@@ -1142,20 +1142,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n-        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n-        .append(HEX_CHARS[codePoint & 0xf]);\n+    StringBuilder builder = new StringBuilder();\n+    int start = 0;\n+\tint index = -1;\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 317, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 301, 
          "faulty": "return \"NOT\";", 
          "type": "Delete", 
          "seed": "return new ScriptOrFnNode(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 301, 
          "faulty": "return \"NOT\";", 
          "type": "Replace", 
          "seed": "Kit.codeBug();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_979/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:06:20.644147342 -0500\n@@ -298,7 +298,7 @@\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n           case MOD:             return \"MOD\";\n-          case NOT:             return \"NOT\";\n+          case NOT:             Kit.codeBug();\n           case BITNOT:          return \"BITNOT\";\n           case POS:             return \"POS\";\n           case NEG:             return \"NEG\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_979/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:06:20.648147497 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_979/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:06:20.648147497 -0500\n@@ -313,11 +313,6 @@\n       // vertical tab is not always whitespace\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -346,7 +341,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +367,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +379,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_979/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:06:20.652147652 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_979/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:06:20.652147652 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 357, 
          "faulty": "int end=s.length();", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 359, 
          "faulty": "return left;", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1298/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:10:32.241748239 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1298/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:10:32.245748391 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -354,7 +354,8 @@\n \n   static String trimJsWhiteSpace(String s) {\n     int start = 0;\n-    int end = s.length();\n+    StringBuilder builder = new StringBuilder();\n+\tint end = s.length();\n     while (end > 0\n         && isStrWhiteSpaceChar(s.charAt(end - 1)) == TernaryValue.TRUE) {\n       end--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1298/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:10:32.249748543 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1298/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:10:32.249748543 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "InsertBefore", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 358, 
          "faulty": "reportCodeChange();", 
          "type": "InsertBefore", 
          "seed": "int keyParent=key(parent);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 358, 
          "faulty": "reportCodeChange();", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_675/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:02:22.963063190 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_675/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:02:22.967063341 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +364,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +376,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_675/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:02:22.971063492 -0500\n@@ -1142,17 +1142,9 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n+    StringBuilder builder = new StringBuilder();\n+    int start = 0;\n+\tout.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_675/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:02:22.971063492 -0500\n@@ -260,9 +260,6 @@\n     } else {\n       replacement = Node.newNumber(value);\n     }\n-\n-    n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n@@ -352,12 +349,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "InsertBefore", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 358, 
          "faulty": "reportCodeChange();", 
          "type": "InsertBefore", 
          "seed": "int keyParent=key(parent);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 358, 
          "faulty": "reportCodeChange();", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 321, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "Context cx=Context.getCurrentContext();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_727/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:03:00.564484252 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_727/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:03:00.568484403 -0500\n@@ -318,25 +318,6 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n-        && s.charAt(0) == '0'\n-        && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n-      // Attempt to convert hex numbers.\n-      try {\n-        return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n-      } catch (NumberFormatException e) {\n-        return Double.NaN;\n-      }\n-    }\n-\n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +327,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +353,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +365,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_727/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:03:00.572484554 -0500\n@@ -1142,17 +1142,9 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n+    StringBuilder builder = new StringBuilder();\n+    int start = 0;\n+\tout.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_727/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:03:00.572484554 -0500\n@@ -260,9 +260,6 @@\n     } else {\n       replacement = Node.newNumber(value);\n     }\n-\n-    n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n@@ -352,12 +349,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 359, 
          "faulty": "return left;", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_469/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:59:33.092635631 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_469/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:59:33.096635783 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +364,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_469/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:59:33.100635933 -0500\n@@ -1142,17 +1142,9 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n+    StringBuilder builder = new StringBuilder();\n+    int start = 0;\n+\tout.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_469/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:59:33.100635933 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 317, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "boolean nullKey=false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 301, 
          "faulty": "return \"NOT\";", 
          "type": "Delete", 
          "seed": "int c=getChar();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1400, 
          "faulty": "return new NodeMismatch(this,node2);", 
          "type": "InsertBefore", 
          "seed": "StringBuilder s=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1235/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:09:46.015992482 -0500\n@@ -298,7 +298,7 @@\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n           case MOD:             return \"MOD\";\n-          case NOT:             return \"NOT\";\n+          case NOT:             ;\n           case BITNOT:          return \"BITNOT\";\n           case POS:             return \"POS\";\n           case NEG:             return \"NEG\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1235/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:09:46.019992634 -0500\n@@ -1397,7 +1397,8 @@\n    */\n   NodeMismatch checkTreeEqualsImpl(Node node2) {\n     if (!isEquivalentTo(node2, false, false)) {\n-      return new NodeMismatch(this, node2);\n+      StringBuilder s = new StringBuilder();\n+\treturn new NodeMismatch(this, node2);\n     }\n \n     NodeMismatch res = null;\n@@ -1410,7 +1411,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1235/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:09:46.019992634 -0500\n@@ -313,11 +313,6 @@\n       // vertical tab is not always whitespace\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -346,7 +341,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -384,8 +379,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1235/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:09:46.023992786 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1235/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:09:46.023992786 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "consumeToken();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 2141, 
          "faulty": "return \"+\";", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1171/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:08:56.090094108 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1171/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:08:56.090094108 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,10 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn TernaryValue.TRUE;\n+\t\t}\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -2138,7 +2141,7 @@\n       case Token.BITNOT: return \"~\";\n       case Token.ADD: return \"+\";\n       case Token.SUB: return \"-\";\n-      case Token.POS: return \"+\";\n+      case Token.POS: int index = -1;\n       case Token.NEG: return \"-\";\n       case Token.ASSIGN: return \"=\";\n       case Token.ASSIGN_BITOR: return \"|=\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1171/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:08:56.094094260 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1171/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:08:56.094094260 -0500\n@@ -352,12 +352,14 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (NodeUtil.isNumericResult(left)) {\n+\t\t\t\tparent.replaceChild(n, left.detachFromParent());\n+\t\t\t\treportCodeChange();\n+\t\t\t\treturn left;\n+\t\t\t}\n+\t\t}\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 303, 
          "faulty": "return \"POS\";", 
          "type": "InsertBefore", 
          "seed": "final String defaultResource=\"rhino_ast.java.com.google.javascript.rhino.Messages\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "InsertBefore", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_780/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:03:37.681885455 -0500\n@@ -300,7 +300,10 @@\n           case MOD:             return \"MOD\";\n           case NOT:             return \"NOT\";\n           case BITNOT:          return \"BITNOT\";\n-          case POS:             return \"POS\";\n+          case POS:             {\n+\t\t\t\tfinal String defaultResource = \"rhino_ast.java.com.google.javascript.rhino.Messages\";\n+\t\t\t\treturn \"POS\";\n+\t\t\t}\n           case NEG:             return \"NEG\";\n           case NEW:             return \"NEW\";\n           case DELPROP:         return \"DELPROP\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_780/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:03:37.685885605 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_780/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:03:37.685885605 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -384,8 +376,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_780/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:03:37.689885756 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_780/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:03:37.689885756 -0500\n@@ -260,9 +260,6 @@\n     } else {\n       replacement = Node.newNumber(value);\n     }\n-\n-    n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n@@ -352,12 +349,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 261, 
          "faulty": "replacement=Node.newNumber(value);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "Replace", 
          "seed": "int keyParent=key(parent);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 303, 
          "faulty": "return \"POS\";", 
          "type": "Delete", 
          "seed": "addToken(Token.NAME);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_492/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:59:53.877418281 -0500\n@@ -300,7 +300,7 @@\n           case MOD:             return \"MOD\";\n           case NOT:             return \"NOT\";\n           case BITNOT:          return \"BITNOT\";\n-          case POS:             return \"POS\";\n+          case POS:             ;\n           case NEG:             return \"NEG\";\n           case NEW:             return \"NEW\";\n           case DELPROP:         return \"DELPROP\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_492/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:59:53.881418431 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_492/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:59:53.885418582 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        StringBuilder builder = new StringBuilder();\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +384,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_492/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:59:53.885418582 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,17 +1143,9 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n+    StringBuilder builder = new StringBuilder();\n+    int start = 0;\n+\tout.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_492/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:59:53.885418582 -0500\n@@ -258,10 +258,9 @@\n       replacement = new Node(Token.NEG, Node.newString(Token.NAME, \"Infinity\"));\n       replacement.copyInformationFromForTree(n);\n     } else {\n-      replacement = Node.newNumber(value);\n+      StringBuilder builder = new StringBuilder();\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n@@ -352,12 +351,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 317, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 301, 
          "faulty": "return \"NOT\";", 
          "type": "Delete", 
          "seed": "return new ScriptOrFnNode(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "consumeToken();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 2141, 
          "faulty": "return \"+\";", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 303, 
          "faulty": "return \"POS\";", 
          "type": "InsertBefore", 
          "seed": "Node pn=null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1080/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:07:44.015349306 -0500\n@@ -298,9 +298,12 @@\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n           case MOD:             return \"MOD\";\n-          case NOT:             return \"NOT\";\n+          case NOT:             ;\n           case BITNOT:          return \"BITNOT\";\n-          case POS:             return \"POS\";\n+          case POS:             {\n+\t\t\t\tNode pn = null;\n+\t\t\t\treturn \"POS\";\n+\t\t\t}\n           case NEG:             return \"NEG\";\n           case NEW:             return \"NEW\";\n           case DELPROP:         return \"DELPROP\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1080/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:07:44.019349459 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1080/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:07:44.019349459 -0500\n@@ -313,11 +313,6 @@\n       // vertical tab is not always whitespace\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -346,7 +341,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +367,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +379,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n@@ -2138,7 +2136,7 @@\n       case Token.BITNOT: return \"~\";\n       case Token.ADD: return \"+\";\n       case Token.SUB: return \"-\";\n-      case Token.POS: return \"+\";\n+      case Token.POS: int index = -1;\n       case Token.NEG: return \"-\";\n       case Token.ASSIGN: return \"=\";\n       case Token.ASSIGN_BITOR: return \"|=\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1080/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:07:44.023349611 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1080/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:07:44.023349611 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 317, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "boolean nullKey=false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "start++;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 246, 
          "faulty": "if (result == null) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 357, 
          "faulty": "int end=s.length();", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1307/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:10:44.022195411 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1307/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:10:44.022195411 -0500\n@@ -313,11 +313,6 @@\n       // vertical tab is not always whitespace\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -346,7 +341,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -354,14 +349,16 @@\n \n   static String trimJsWhiteSpace(String s) {\n     int start = 0;\n-    int end = s.length();\n+    StringBuilder builder = new StringBuilder();\n+\tint end = s.length();\n     while (end > 0\n         && isStrWhiteSpaceChar(s.charAt(end - 1)) == TernaryValue.TRUE) {\n       end--;\n     }\n     while (start < end\n         && isStrWhiteSpaceChar(s.charAt(start)) == TernaryValue.TRUE) {\n-      start++;\n+      int index = -1;\n+\tstart++;\n     }\n     return s.substring(start, end);\n   }\n@@ -372,7 +369,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +381,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1307/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:10:44.026195564 -0500\n@@ -1142,16 +1142,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1307/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:10:44.026195564 -0500\n@@ -243,7 +243,8 @@\n     }\n \n     Double result = NodeUtil.getNumberValue(n);\n-    if (result == null) {\n+    int type = n.getType();\n+\tif (result == null) {\n       return;\n     }\n \n@@ -352,12 +353,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 317, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 253, 
          "faulty": "if (Double.isNaN(value)) {\n  replacement=Node.newString(Token.NAME,\"NaN\");\n}\n else if (value == Double.POSITIVE_INFINITY) {\n  replacement=Node.newString(Token.NAME,\"Infinity\");\n}\n else if (value == Double.NEGATIVE_INFINITY) {\n  replacement=new Node(Token.NEG,Node.newString(Token.NAME,\"Infinity\"));\n  replacement.copyInformationFromForTree(n);\n}\n else {\n  replacement=Node.newNumber(value);\n}", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_954/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:06:01.783416115 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_954/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:06:01.787416271 -0500\n@@ -313,11 +313,6 @@\n       // vertical tab is not always whitespace\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -346,7 +341,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +367,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +379,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_954/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:06:01.787416271 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,7 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n+    StringBuilder builder = new StringBuilder();\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_954/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:06:01.791416426 -0500\n@@ -250,7 +250,8 @@\n     double value = result;\n \n     Node replacement;\n-    if (Double.isNaN(value)) {\n+    int start = 0;\n+\tif (Double.isNaN(value)) {\n       replacement = Node.newString(Token.NAME, \"NaN\");\n     } else if (value == Double.POSITIVE_INFINITY) {\n       replacement = Node.newString(Token.NAME, \"Infinity\");\n@@ -352,12 +353,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "InsertBefore", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 358, 
          "faulty": "reportCodeChange();", 
          "type": "InsertBefore", 
          "seed": "int keyParent=key(parent);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_646/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:02:03.982345169 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_646/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:02:03.986345320 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +364,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +376,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_646/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:02:03.986345320 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,17 +1143,9 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n+    StringBuilder builder = new StringBuilder();\n+    int start = 0;\n+\tout.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_646/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:02:03.990345473 -0500\n@@ -260,9 +260,6 @@\n     } else {\n       replacement = Node.newNumber(value);\n     }\n-\n-    n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n@@ -352,12 +349,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 317, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 261, 
          "faulty": "replacement=Node.newNumber(value);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_427/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:59:02.807497418 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_427/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:59:02.811497568 -0500\n@@ -313,10 +313,7 @@\n       // vertical tab is not always whitespace\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n+    int index = -1;\n \n     if (s.length() > 2\n         && s.charAt(0) == '0'\n@@ -329,14 +326,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +335,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +361,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +373,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_427/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:59:02.811497568 -0500\n@@ -1142,17 +1142,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n+    int start = 0;\n+\tout.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_427/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:59:02.815497717 -0500\n@@ -258,10 +258,8 @@\n       replacement = new Node(Token.NEG, Node.newString(Token.NAME, \"Infinity\"));\n       replacement.copyInformationFromForTree(n);\n     } else {\n-      replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n@@ -352,12 +350,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return Token.RC;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "InsertBefore", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 301, 
          "faulty": "return \"NOT\";", 
          "type": "Delete", 
          "seed": "int c=getChar();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 357, 
          "faulty": "parent.replaceChild(n,left.detachFromParent());", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:44:28.130816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_681/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-02 07:02:26.599200686 -0500\n@@ -298,7 +298,7 @@\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n           case MOD:             return \"MOD\";\n-          case NOT:             return \"NOT\";\n+          case NOT:             ;\n           case BITNOT:          return \"BITNOT\";\n           case POS:             return \"POS\";\n           case NEG:             return \"NEG\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:44:28.126816614 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_681/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-02 07:02:26.599200686 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:44:29.966816550 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_681/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:02:26.603200838 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +364,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        ;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n@@ -384,8 +376,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:44:28.066816617 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_681/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 07:02:26.603200838 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      int start = 0;\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,17 +1143,9 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n+    StringBuilder builder = new StringBuilder();\n+    int start = 0;\n+\tout.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n\n\n--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:44:28.094816616 -0500\n+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_681/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:02:26.607200989 -0500\n@@ -260,9 +260,6 @@\n     } else {\n       replacement = Node.newNumber(value);\n     }\n-\n-    n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n@@ -352,12 +349,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n"
    }
  ]
}