{
  "repair_end": "2018-12-02 13:44:02.312573", 
  "repair_begin": "2018-12-02 13:03:27.594551", 
  "patches": [
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_885/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:27:36.304457539 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_885/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:27:36.308457722 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_885/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:27:36.308457722 -0500\n@@ -1726,7 +1726,6 @@\n     private final List<Entry> entries = Lists.newArrayList();\n \n     protected void add(CheckLevel level, String groupName) {\n-      entries.add(new Entry(level, groupName));\n     }\n \n     protected void clear() {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 1729, 
          "faulty": "entries.add(new Entry(level,groupName));", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_868/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:27:16.835560991 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:03:03.286376056 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_868/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:27:16.839561177 -0500\n@@ -1097,9 +1097,6 @@\n           new SemanticReverseAbstractInterpreter(\n               getCodingConvention(), getTypeRegistry());\n       if (options.closurePass) {\n-        interpreter = new ClosureReverseAbstractInterpreter(\n-            getCodingConvention(), getTypeRegistry())\n-            .append(interpreter).getFirst();\n       }\n       abstractInterpreter = interpreter;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_868/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:27:16.839561177 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/Compiler.java", 
          "line": 1100, 
          "faulty": "interpreter=new ClosureReverseAbstractInterpreter(getCodingConvention(),getTypeRegistry()).append(interpreter).getFirst();", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1160/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:32:26.553312563 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1160/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:32:26.557312736 -0500\n@@ -72,11 +72,9 @@\n    * @param options The CompilerOptions object to set the options on.\n    */\n   private static void addVerboseWarnings(CompilerOptions options) {\n-    addDefaultWarnings(options);\n-\n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 75, 
          "faulty": "addDefaultWarnings(options);", 
          "type": "Delete", 
          "seed": "return this;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_806/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:26:14.240632604 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_806/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:26:14.244632795 -0500\n@@ -68,8 +68,6 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n-            getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n             getWarningCount());\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_806/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:26:14.244632795 -0500\n@@ -1726,7 +1726,6 @@\n     private final List<Entry> entries = Lists.newArrayList();\n \n     protected void add(CheckLevel level, String groupName) {\n-      entries.add(new Entry(level, groupName));\n     }\n \n     protected void clear() {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 1729, 
          "faulty": "entries.add(new Entry(level,groupName));", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "Delete", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_50/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:12:42.570597683 -0500\n@@ -76,7 +76,6 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1477/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:37:58.220143512 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1477/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:37:58.224143689 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java\t2018-12-02 07:03:01.150376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1477/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java\t2018-12-02 07:37:58.224143689 -0500\n@@ -193,7 +193,6 @@\n       Node lhs = assign.getFirstChild();\n \n       if (!NodeUtil.isName(lhs)) {\n-        return false;\n       }\n \n       Var var = s.getVar(lhs.getString());\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1477/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:37:58.224143689 -0500\n@@ -68,7 +68,8 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n+        int index = -1;\n+\t\tstream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n             getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1477/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:37:58.228143865 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1477/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:37:58.228143865 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseVariableDeclarations.java", 
          "line": 196, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1309/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:35:02.696237222 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1309/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:35:02.700237406 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1309/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:35:02.700237406 -0500\n@@ -157,7 +157,8 @@\n       return null;\n     }\n \n-    JSType returnType = ((FunctionType) scopeType).getReturnType();\n+    Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n+\tJSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n       return null;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 160, 
          "faulty": "JSType returnType=((FunctionType)scopeType).getReturnType();", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1818/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:43:28.854911609 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:03:03.286376056 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1818/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:43:28.854911609 -0500\n@@ -1097,9 +1097,7 @@\n           new SemanticReverseAbstractInterpreter(\n               getCodingConvention(), getTypeRegistry());\n       if (options.closurePass) {\n-        interpreter = new ClosureReverseAbstractInterpreter(\n-            getCodingConvention(), getTypeRegistry())\n-            .append(interpreter).getFirst();\n+        StringBuilder builder = new StringBuilder();\n       }\n       abstractInterpreter = interpreter;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1818/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:43:28.858911784 -0500\n@@ -159,15 +159,12 @@\n \n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n-    if (returnType == null) {\n-      return null;\n-    }\n-\n     if (!isVoidOrUnknown(returnType)) {\n       return returnType;\n     }\n \n-    return null;\n+    boolean valid = false;\n+\treturn null;\n   }\n \n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1818/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:43:28.858911784 -0500\n@@ -233,7 +233,6 @@\n     }\n \n     if (options.aggressiveVarCheck.isOn()) {\n-      checks.add(checkVariableReferences);\n     }\n \n     // This pass should run before types are assigned.\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 162, 
          "faulty": "if (returnType == null) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java", 
          "line": 236, 
          "faulty": "checks.add(checkVariableReferences);", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/Compiler.java", 
          "line": 1100, 
          "faulty": "interpreter=new ClosureReverseAbstractInterpreter(getCodingConvention(),getTypeRegistry()).append(interpreter).getFirst();", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 170, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "boolean valid=false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1749/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:42:29.280297791 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1749/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:42:29.280297791 -0500\n@@ -76,7 +76,8 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    boolean valid = false;\n+\tStringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java\t2018-12-02 07:03:01.150376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1749/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java\t2018-12-02 07:42:29.280297791 -0500\n@@ -190,7 +190,8 @@\n         return false;\n       }\n       Node assign = n.getFirstChild();\n-      Node lhs = assign.getFirstChild();\n+      String sourceName = n.getSourceFileName();\n+\tNode lhs = assign.getFirstChild();\n \n       if (!NodeUtil.isName(lhs)) {\n         return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1749/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:42:29.284297967 -0500\n@@ -68,8 +68,6 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n-            getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n             getWarningCount());\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1749/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:42:29.284297967 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1749/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:42:29.284297967 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "InsertBefore", 
          "seed": "boolean valid=false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseVariableDeclarations.java", 
          "line": 193, 
          "faulty": "Node lhs=assign.getFirstChild();", 
          "type": "InsertBefore", 
          "seed": "String sourceName=n.getSourceFileName();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1234/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:33:42.412575596 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1234/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:33:42.412575596 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1234/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:33:42.416575767 -0500\n@@ -68,8 +68,6 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n-            getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n             getWarningCount());\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "Delete", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1606/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:40:13.618266727 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:03:03.286376056 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1606/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:40:13.622266906 -0500\n@@ -1097,9 +1097,6 @@\n           new SemanticReverseAbstractInterpreter(\n               getCodingConvention(), getTypeRegistry());\n       if (options.closurePass) {\n-        interpreter = new ClosureReverseAbstractInterpreter(\n-            getCodingConvention(), getTypeRegistry())\n-            .append(interpreter).getFirst();\n       }\n       abstractInterpreter = interpreter;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DiagnosticGroups.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1606/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DiagnosticGroups.java\t2018-12-02 07:40:13.622266906 -0500\n@@ -205,6 +205,6 @@\n       String name, CheckLevel level) {\n     DiagnosticGroup group = forName(name);\n     Preconditions.checkNotNull(group, \"No warning class for name: \" + name);\n-    options.setWarningLevel(group, level);\n+    return;\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1606/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:40:13.626267086 -0500\n@@ -1726,7 +1726,6 @@\n     private final List<Entry> entries = Lists.newArrayList();\n \n     protected void add(CheckLevel level, String groupName) {\n-      entries.add(new Entry(level, groupName));\n     }\n \n     protected void clear() {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 1729, 
          "faulty": "entries.add(new Entry(level,groupName));", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/Compiler.java", 
          "line": 1100, 
          "faulty": "interpreter=new ClosureReverseAbstractInterpreter(getCodingConvention(),getTypeRegistry()).append(interpreter).getFirst();", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DiagnosticGroups.java", 
          "line": 208, 
          "faulty": "options.setWarningLevel(group,level);", 
          "type": "Replace", 
          "seed": "return;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1154/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:32:20.501051092 -0500\n@@ -76,7 +76,6 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1154/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:32:20.505051265 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1154/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:32:20.509051438 -0500\n@@ -233,7 +233,6 @@\n     }\n \n     if (options.aggressiveVarCheck.isOn()) {\n-      checks.add(checkVariableReferences);\n     }\n \n     // This pass should run before types are assigned.\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java", 
          "line": 236, 
          "faulty": "checks.add(checkVariableReferences);", 
          "type": "Delete", 
          "seed": "boolean valid=false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1133/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:32:00.896202807 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1133/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:32:00.896202807 -0500\n@@ -76,7 +76,6 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1133/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:32:00.900202980 -0500\n@@ -68,8 +68,6 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n-            getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n             getWarningCount());\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1133/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:32:00.900202980 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1133/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:32:00.904203154 -0500\n@@ -1726,7 +1726,6 @@\n     private final List<Entry> entries = Lists.newArrayList();\n \n     protected void add(CheckLevel level, String groupName) {\n-      entries.add(new Entry(level, groupName));\n     }\n \n     protected void clear() {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 1729, 
          "faulty": "entries.add(new Entry(level,groupName));", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_332/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:17:46.842989739 -0500\n@@ -72,11 +72,11 @@\n    * @param options The CompilerOptions object to set the options on.\n    */\n   private static void addVerboseWarnings(CompilerOptions options) {\n-    addDefaultWarnings(options);\n+    StringBuilder builder = new StringBuilder();\n+\taddDefaultWarnings(options);\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 75, 
          "faulty": "addDefaultWarnings(options);", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1065/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:30:47.949026326 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1065/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:30:47.949026326 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DiagnosticGroups.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1065/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DiagnosticGroups.java\t2018-12-02 07:30:47.953026500 -0500\n@@ -205,6 +205,5 @@\n       String name, CheckLevel level) {\n     DiagnosticGroup group = forName(name);\n     Preconditions.checkNotNull(group, \"No warning class for name: \" + name);\n-    options.setWarningLevel(group, level);\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1065/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:30:47.953026500 -0500\n@@ -1726,7 +1726,6 @@\n     private final List<Entry> entries = Lists.newArrayList();\n \n     protected void add(CheckLevel level, String groupName) {\n-      entries.add(new Entry(level, groupName));\n     }\n \n     protected void clear() {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 1729, 
          "faulty": "entries.add(new Entry(level,groupName));", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DiagnosticGroups.java", 
          "line": 208, 
          "faulty": "options.setWarningLevel(group,level);", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_968/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:29:04.244439501 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_968/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:29:04.248439679 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1666/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:41:09.692775440 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1666/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:41:09.696775619 -0500\n@@ -72,11 +72,9 @@\n    * @param options The CompilerOptions object to set the options on.\n    */\n   private static void addVerboseWarnings(CompilerOptions options) {\n-    addDefaultWarnings(options);\n-\n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:03:03.286376056 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1666/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:41:09.696775619 -0500\n@@ -1097,9 +1097,6 @@\n           new SemanticReverseAbstractInterpreter(\n               getCodingConvention(), getTypeRegistry());\n       if (options.closurePass) {\n-        interpreter = new ClosureReverseAbstractInterpreter(\n-            getCodingConvention(), getTypeRegistry())\n-            .append(interpreter).getFirst();\n       }\n       abstractInterpreter = interpreter;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1666/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:41:09.700775796 -0500\n@@ -153,16 +153,8 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n-    if (returnType == null) {\n-      return null;\n-    }\n-\n     if (!isVoidOrUnknown(returnType)) {\n       return returnType;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DiagnosticGroups.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1666/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DiagnosticGroups.java\t2018-12-02 07:41:09.700775796 -0500\n@@ -205,6 +205,6 @@\n       String name, CheckLevel level) {\n     DiagnosticGroup group = forName(name);\n     Preconditions.checkNotNull(group, \"No warning class for name: \" + name);\n-    options.setWarningLevel(group, level);\n+    return;\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1666/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:41:09.704775974 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n@@ -1726,7 +1725,6 @@\n     private final List<Entry> entries = Lists.newArrayList();\n \n     protected void add(CheckLevel level, String groupName) {\n-      entries.add(new Entry(level, groupName));\n     }\n \n     protected void clear() {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1666/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:41:09.704775974 -0500\n@@ -260,7 +260,8 @@\n     if (options.checkTypes &&\n         (options.enables(DiagnosticGroups.ACCESS_CONTROLS)\n          || options.enables(DiagnosticGroups.CONSTANT_PROPERTY))) {\n-      checks.add(checkAccessControls);\n+      boolean valid = false;\n+\tchecks.add(checkAccessControls);\n     }\n \n     if (options.checkGlobalNamesLevel.isOn()) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 162, 
          "faulty": "if (returnType == null) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/Compiler.java", 
          "line": 1100, 
          "faulty": "interpreter=new ClosureReverseAbstractInterpreter(getCodingConvention(),getTypeRegistry()).append(interpreter).getFirst();", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DiagnosticGroups.java", 
          "line": 208, 
          "faulty": "options.setWarningLevel(group,level);", 
          "type": "Replace", 
          "seed": "return;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 1729, 
          "faulty": "entries.add(new Entry(level,groupName));", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 75, 
          "faulty": "addDefaultWarnings(options);", 
          "type": "Delete", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java", 
          "line": 263, 
          "faulty": "checks.add(checkAccessControls);", 
          "type": "InsertBefore", 
          "seed": "boolean valid=false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1680/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:41:20.305247495 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1680/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:41:20.309247672 -0500\n@@ -76,7 +76,6 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1680/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:41:20.309247672 -0500\n@@ -68,7 +68,8 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n+        int index = -1;\n+\t\tstream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n             getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:03:03.286376056 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1680/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:41:20.309247672 -0500\n@@ -1097,9 +1097,6 @@\n           new SemanticReverseAbstractInterpreter(\n               getCodingConvention(), getTypeRegistry());\n       if (options.closurePass) {\n-        interpreter = new ClosureReverseAbstractInterpreter(\n-            getCodingConvention(), getTypeRegistry())\n-            .append(interpreter).getFirst();\n       }\n       abstractInterpreter = interpreter;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1680/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:41:20.313247850 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1680/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:41:20.313247850 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n@@ -1726,7 +1725,6 @@\n     private final List<Entry> entries = Lists.newArrayList();\n \n     protected void add(CheckLevel level, String groupName) {\n-      entries.add(new Entry(level, groupName));\n     }\n \n     protected void clear() {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CommandLineRunner.java\t2018-12-02 07:03:01.150376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1680/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CommandLineRunner.java\t2018-12-02 07:41:20.317248029 -0500\n@@ -438,7 +438,8 @@\n       @Override public Class getType() { return proxy.getType(); }\n \n       @Override public void addValue(Object value) throws CmdLineException {\n-        proxy.addValue((String) value);\n+        int index = -1;\n+\t\tproxy.addValue((String) value);\n         warningGuardSpec.add(level, (String) value);\n       }\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 1729, 
          "faulty": "entries.add(new Entry(level,groupName));", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/Compiler.java", 
          "line": 1100, 
          "faulty": "interpreter=new ClosureReverseAbstractInterpreter(getCodingConvention(),getTypeRegistry()).append(interpreter).getFirst();", 
          "type": "Delete", 
          "seed": "boolean valid=false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CommandLineRunner.java", 
          "line": 441, 
          "faulty": "proxy.addValue((String)value);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_771/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:25:36.199016541 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_771/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:25:36.203016707 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_290/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:17:05.953185382 -0500\n@@ -281,17 +281,8 @@\n             addToDefIfLocal(name.getString(), conditional ? null : cfgNode,\n               n.getLastChild(), output);\n             return;\n-          } else if (NodeUtil.isGet(n.getFirstChild())) {\n-            // Treat all assignments to arguments as redefining the\n-            // parameters itself.\n-            Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n-          }\n+          } else\n+\t\t\t;\n         }\n \n         if (NodeUtil.isName(n) && \"arguments\".equals(n.getString())) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_290/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:17:05.953185382 -0500\n@@ -74,9 +74,7 @@\n   private static void addVerboseWarnings(CompilerOptions options) {\n     addDefaultWarnings(options);\n \n-    // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n-    options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 78, 
          "faulty": "options.checkSuspiciousCode=true;", 
          "type": "Delete", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 284, 
          "faulty": "if (NodeUtil.isGet(n.getFirstChild())) {\n  Node obj=n.getFirstChild().getFirstChild();\n  if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n    escapeParameters(output);\n  }\n}", 
          "type": "Delete", 
          "seed": "if (!n.getBooleanProp(Node.SYNTHETIC_BLOCK_PROP)) {\n  violation(\"Missing 'synthetic block' annotation.\",n);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_848/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:26:56.930637757 -0500\n@@ -76,8 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n-    options.checkSymbols = true;\n+    StringBuilder builder = new StringBuilder();\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n     // checkTypes has the side-effect of asserting that the\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 80, 
          "faulty": "options.checkSymbols=true;", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_712/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:24:31.964332501 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_712/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:24:31.968332668 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n@@ -1726,7 +1725,6 @@\n     private final List<Entry> entries = Lists.newArrayList();\n \n     protected void add(CheckLevel level, String groupName) {\n-      entries.add(new Entry(level, groupName));\n     }\n \n     protected void clear() {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 1729, 
          "faulty": "entries.add(new Entry(level,groupName));", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_200/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:15:25.625131051 -0500\n@@ -74,9 +74,7 @@\n   private static void addVerboseWarnings(CompilerOptions options) {\n     addDefaultWarnings(options);\n \n-    // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n-    options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 78, 
          "faulty": "options.checkSuspiciousCode=true;", 
          "type": "Delete", 
          "seed": "return this;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_355/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:18:09.555995106 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_355/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:18:09.559995282 -0500\n@@ -260,7 +260,7 @@\n     if (options.checkTypes &&\n         (options.enables(DiagnosticGroups.ACCESS_CONTROLS)\n          || options.enables(DiagnosticGroups.CONSTANT_PROPERTY))) {\n-      checks.add(checkAccessControls);\n+      int start = 0;\n     }\n \n     if (options.checkGlobalNamesLevel.isOn()) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java", 
          "line": 263, 
          "faulty": "checks.add(checkAccessControls);", 
          "type": "Replace", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_729/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:24:50.525109036 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_729/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:24:50.529109203 -0500\n@@ -68,8 +68,6 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n-            getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n             getWarningCount());\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_729/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:24:50.529109203 -0500\n@@ -1726,7 +1726,6 @@\n     private final List<Entry> entries = Lists.newArrayList();\n \n     protected void add(CheckLevel level, String groupName) {\n-      entries.add(new Entry(level, groupName));\n     }\n \n     protected void clear() {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_729/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:24:50.533109370 -0500\n@@ -260,7 +260,7 @@\n     if (options.checkTypes &&\n         (options.enables(DiagnosticGroups.ACCESS_CONTROLS)\n          || options.enables(DiagnosticGroups.CONSTANT_PROPERTY))) {\n-      checks.add(checkAccessControls);\n+      int index = -1;\n     }\n \n     if (options.checkGlobalNamesLevel.isOn()) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 1729, 
          "faulty": "entries.add(new Entry(level,groupName));", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java", 
          "line": 263, 
          "faulty": "checks.add(checkAccessControls);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "Delete", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1622/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:40:31.211056597 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1622/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:40:31.215056777 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1622/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:40:31.215056777 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1622/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:40:31.219056957 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1622/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:40:31.219056957 -0500\n@@ -233,7 +233,6 @@\n     }\n \n     if (options.aggressiveVarCheck.isOn()) {\n-      checks.add(checkVariableReferences);\n     }\n \n     // This pass should run before types are assigned.\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java", 
          "line": 236, 
          "faulty": "checks.add(checkVariableReferences);", 
          "type": "Delete", 
          "seed": "return;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_893/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:27:45.200865223 -0500\n@@ -76,7 +76,6 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_893/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:27:45.204865406 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n@@ -1726,7 +1725,6 @@\n     private final List<Entry> entries = Lists.newArrayList();\n \n     protected void add(CheckLevel level, String groupName) {\n-      entries.add(new Entry(level, groupName));\n     }\n \n     protected void clear() {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 1729, 
          "faulty": "entries.add(new Entry(level,groupName));", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_767/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:25:33.534905399 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_767/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:25:33.538905567 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_767/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:25:33.538905567 -0500\n@@ -68,8 +68,6 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n-            getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n             getWarningCount());\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_767/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:25:33.542905733 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1583/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:39:50.489223992 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1583/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:39:50.493224172 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:03:03.286376056 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1583/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:39:50.493224172 -0500\n@@ -1097,9 +1097,7 @@\n           new SemanticReverseAbstractInterpreter(\n               getCodingConvention(), getTypeRegistry());\n       if (options.closurePass) {\n-        interpreter = new ClosureReverseAbstractInterpreter(\n-            getCodingConvention(), getTypeRegistry())\n-            .append(interpreter).getFirst();\n+        StringBuilder builder = new StringBuilder();\n       }\n       abstractInterpreter = interpreter;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1583/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:39:50.497224354 -0500\n@@ -68,8 +68,6 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n-            getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n             getWarningCount());\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1583/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:39:50.497224354 -0500\n@@ -153,16 +153,8 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n-    if (returnType == null) {\n-      return null;\n-    }\n-\n     if (!isVoidOrUnknown(returnType)) {\n       return returnType;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DiagnosticGroups.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1583/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DiagnosticGroups.java\t2018-12-02 07:39:50.501224535 -0500\n@@ -205,6 +205,6 @@\n       String name, CheckLevel level) {\n     DiagnosticGroup group = forName(name);\n     Preconditions.checkNotNull(group, \"No warning class for name: \" + name);\n-    options.setWarningLevel(group, level);\n+    return;\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1583/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:39:50.501224535 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n@@ -1726,7 +1725,6 @@\n     private final List<Entry> entries = Lists.newArrayList();\n \n     protected void add(CheckLevel level, String groupName) {\n-      entries.add(new Entry(level, groupName));\n     }\n \n     protected void clear() {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 162, 
          "faulty": "if (returnType == null) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/Compiler.java", 
          "line": 1100, 
          "faulty": "interpreter=new ClosureReverseAbstractInterpreter(getCodingConvention(),getTypeRegistry()).append(interpreter).getFirst();", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DiagnosticGroups.java", 
          "line": 208, 
          "faulty": "options.setWarningLevel(group,level);", 
          "type": "Replace", 
          "seed": "return;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 1729, 
          "faulty": "entries.add(new Entry(level,groupName));", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/Compiler.java", 
          "line": 1100, 
          "faulty": "interpreter=new ClosureReverseAbstractInterpreter(getCodingConvention(),getTypeRegistry()).append(interpreter).getFirst();", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_761/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:25:27.438651022 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckGlobalThis.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_761/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckGlobalThis.java\t2018-12-02 07:25:27.438651022 -0500\n@@ -161,7 +161,8 @@\n \n   private boolean shouldReportThis(Node n, Node parent) {\n     if (assignLhsChild != null) {\n-      // Always report a THIS on the left side of an assign.\n+      StringBuilder builder = new StringBuilder();\n+\t// Always report a THIS on the left side of an assign.\n       return true;\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckGlobalThis.java", 
          "line": 165, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1556/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:39:22.995977558 -0500\n@@ -76,7 +76,6 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java\t2018-12-02 07:03:01.150376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1556/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java\t2018-12-02 07:39:22.999977742 -0500\n@@ -193,7 +193,6 @@\n       Node lhs = assign.getFirstChild();\n \n       if (!NodeUtil.isName(lhs)) {\n-        return false;\n       }\n \n       Var var = s.getVar(lhs.getString());\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:03:03.286376056 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1556/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:39:22.999977742 -0500\n@@ -1097,9 +1097,6 @@\n           new SemanticReverseAbstractInterpreter(\n               getCodingConvention(), getTypeRegistry());\n       if (options.closurePass) {\n-        interpreter = new ClosureReverseAbstractInterpreter(\n-            getCodingConvention(), getTypeRegistry())\n-            .append(interpreter).getFirst();\n       }\n       abstractInterpreter = interpreter;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1556/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:39:23.003977923 -0500\n@@ -68,7 +68,8 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n+        int index = -1;\n+\t\tstream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n             getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1556/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:39:23.003977923 -0500\n@@ -159,10 +159,6 @@\n \n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n-    if (returnType == null) {\n-      return null;\n-    }\n-\n     if (!isVoidOrUnknown(returnType)) {\n       return returnType;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DiagnosticGroups.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1556/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DiagnosticGroups.java\t2018-12-02 07:39:23.007978106 -0500\n@@ -205,6 +205,6 @@\n       String name, CheckLevel level) {\n     DiagnosticGroup group = forName(name);\n     Preconditions.checkNotNull(group, \"No warning class for name: \" + name);\n-    options.setWarningLevel(group, level);\n+    return;\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1556/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:39:23.007978106 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 162, 
          "faulty": "if (returnType == null) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/Compiler.java", 
          "line": 1100, 
          "faulty": "interpreter=new ClosureReverseAbstractInterpreter(getCodingConvention(),getTypeRegistry()).append(interpreter).getFirst();", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DiagnosticGroups.java", 
          "line": 208, 
          "faulty": "options.setWarningLevel(group,level);", 
          "type": "Replace", 
          "seed": "return;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseVariableDeclarations.java", 
          "line": 196, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1604/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:40:12.370210587 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1604/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:40:12.374210768 -0500\n@@ -76,7 +76,8 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    boolean valid = false;\n+\tStringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java\t2018-12-02 07:03:01.150376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1604/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java\t2018-12-02 07:40:12.374210768 -0500\n@@ -190,7 +190,8 @@\n         return false;\n       }\n       Node assign = n.getFirstChild();\n-      Node lhs = assign.getFirstChild();\n+      String sourceName = n.getSourceFileName();\n+\tNode lhs = assign.getFirstChild();\n \n       if (!NodeUtil.isName(lhs)) {\n         return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1604/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:40:12.378210948 -0500\n@@ -68,8 +68,6 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n-            getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n             getWarningCount());\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1604/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:40:12.378210948 -0500\n@@ -153,16 +153,8 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n-    if (returnType == null) {\n-      return null;\n-    }\n-\n     if (!isVoidOrUnknown(returnType)) {\n       return returnType;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 162, 
          "faulty": "if (returnType == null) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "InsertBefore", 
          "seed": "boolean valid=false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseVariableDeclarations.java", 
          "line": 193, 
          "faulty": "Node lhs=assign.getFirstChild();", 
          "type": "InsertBefore", 
          "seed": "String sourceName=n.getSourceFileName();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1302/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:34:55.403901088 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/ExploitAssigns.java\t2018-12-02 07:03:01.162376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1302/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/ExploitAssigns.java\t2018-12-02 07:34:55.407901272 -0500\n@@ -76,11 +76,7 @@\n   private boolean isCollapsibleValue(Node value, boolean isLValue) {\n     switch (value.getType()) {\n       case Token.GETPROP:\n-        // Do not collapse GETPROPs on arbitrary objects, because\n-        // they may be implemented  setter functions, and oftentimes\n-        // setter functions fail on native objects. This is ok for \"THIS\"\n-        // objects, because we assume that they are non-native.\n-        return !isLValue || value.getFirstChild().getType() == Token.THIS;\n+        ;\n \n       case Token.NAME:\n         return true;\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1302/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:34:55.407901272 -0500\n@@ -68,7 +68,8 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n+        int index = -1;\n+\t\tstream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n             getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1302/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:34:55.411901456 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ExploitAssigns.java", 
          "line": 83, 
          "faulty": "return !isLValue || value.getFirstChild().getType() == Token.THIS;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1253/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:34:03.465483291 -0500\n@@ -76,7 +76,6 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1253/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:34:03.465483291 -0500\n@@ -68,7 +68,8 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n+        int index = -1;\n+\t\tstream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n             getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1253/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:34:03.469483479 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_425/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:19:20.227087710 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-02 07:03:01.186376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_425/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-02 07:19:20.231087884 -0500\n@@ -932,7 +932,8 @@\n       if (current.getType() == Token.NAME) {\n         return new Assign(assignNode, current, isPropAssign);\n       }\n-      return null;\n+      StringBuilder builder = new StringBuilder();\n+\treturn null;\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 935, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_148/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:14:30.166899551 -0500\n@@ -76,7 +76,6 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckGlobalNames.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_148/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckGlobalNames.java\t2018-12-02 07:14:30.170899712 -0500\n@@ -64,7 +64,6 @@\n    * can be re-used for multiple check passes. Returns this for easy chaining.\n    */\n   CheckGlobalNames injectNamespace(GlobalNamespace namespace) {\n-    this.namespace = namespace;\n     return this;\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckGlobalNames.java", 
          "line": 67, 
          "faulty": "this.namespace=namespace;", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1697/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:41:35.797935223 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1697/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:41:35.801935401 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1697/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:41:35.801935401 -0500\n@@ -68,7 +68,8 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n+        int index = -1;\n+\t\tstream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n             getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:03:03.286376056 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1697/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:41:35.801935401 -0500\n@@ -1097,9 +1097,7 @@\n           new SemanticReverseAbstractInterpreter(\n               getCodingConvention(), getTypeRegistry());\n       if (options.closurePass) {\n-        interpreter = new ClosureReverseAbstractInterpreter(\n-            getCodingConvention(), getTypeRegistry())\n-            .append(interpreter).getFirst();\n+        StringBuilder builder = new StringBuilder();\n       }\n       abstractInterpreter = interpreter;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1697/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:41:35.805935579 -0500\n@@ -153,16 +153,8 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n-    if (returnType == null) {\n-      return null;\n-    }\n-\n     if (!isVoidOrUnknown(returnType)) {\n       return returnType;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1697/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:41:35.805935579 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1697/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:41:35.809935756 -0500\n@@ -233,7 +233,6 @@\n     }\n \n     if (options.aggressiveVarCheck.isOn()) {\n-      checks.add(checkVariableReferences);\n     }\n \n     // This pass should run before types are assigned.\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 162, 
          "faulty": "if (returnType == null) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java", 
          "line": 236, 
          "faulty": "checks.add(checkVariableReferences);", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/Compiler.java", 
          "line": 1100, 
          "faulty": "interpreter=new ClosureReverseAbstractInterpreter(getCodingConvention(),getTypeRegistry()).append(interpreter).getFirst();", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1391/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:36:30.572234459 -0500\n@@ -76,7 +76,6 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1391/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:36:30.572234459 -0500\n@@ -159,9 +159,7 @@\n \n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n-    if (returnType == null) {\n-      return null;\n-    }\n+    int index = -1;\n \n     if (!isVoidOrUnknown(returnType)) {\n       return returnType;\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1391/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:36:30.576234639 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n@@ -1726,7 +1725,6 @@\n     private final List<Entry> entries = Lists.newArrayList();\n \n     protected void add(CheckLevel level, String groupName) {\n-      entries.add(new Entry(level, groupName));\n     }\n \n     protected void clear() {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 1729, 
          "faulty": "entries.add(new Entry(level,groupName));", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 162, 
          "faulty": "if (returnType == null) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 162, 
          "faulty": "if (returnType == null) {\n  return null;\n}", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1632/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:40:39.879444813 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1632/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:40:39.883444992 -0500\n@@ -76,7 +76,8 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    boolean valid = false;\n+\tStringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java\t2018-12-02 07:03:01.150376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1632/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java\t2018-12-02 07:40:39.883444992 -0500\n@@ -190,7 +190,8 @@\n         return false;\n       }\n       Node assign = n.getFirstChild();\n-      Node lhs = assign.getFirstChild();\n+      String sourceName = n.getSourceFileName();\n+\tNode lhs = assign.getFirstChild();\n \n       if (!NodeUtil.isName(lhs)) {\n         return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1632/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:40:39.887445170 -0500\n@@ -68,8 +68,6 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n-            getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n             getWarningCount());\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1632/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:40:39.887445170 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1632/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:40:39.887445170 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "InsertBefore", 
          "seed": "boolean valid=false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseVariableDeclarations.java", 
          "line": 193, 
          "faulty": "Node lhs=assign.getFirstChild();", 
          "type": "InsertBefore", 
          "seed": "String sourceName=n.getSourceFileName();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1684/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:41:24.065414561 -0500\n@@ -76,7 +76,8 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    boolean valid = false;\n+\tStringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java\t2018-12-02 07:03:01.150376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1684/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java\t2018-12-02 07:41:24.065414561 -0500\n@@ -190,7 +190,8 @@\n         return false;\n       }\n       Node assign = n.getFirstChild();\n-      Node lhs = assign.getFirstChild();\n+      String sourceName = n.getSourceFileName();\n+\tNode lhs = assign.getFirstChild();\n \n       if (!NodeUtil.isName(lhs)) {\n         return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1684/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:41:24.069414739 -0500\n@@ -68,8 +68,6 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n-            getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n             getWarningCount());\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1684/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:41:24.069414739 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1684/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:41:24.073414916 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "InsertBefore", 
          "seed": "boolean valid=false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseVariableDeclarations.java", 
          "line": 193, 
          "faulty": "Node lhs=assign.getFirstChild();", 
          "type": "InsertBefore", 
          "seed": "String sourceName=n.getSourceFileName();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_414/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:19:09.558623946 -0500\n@@ -282,7 +282,8 @@\n               n.getLastChild(), output);\n             return;\n           } else if (NodeUtil.isGet(n.getFirstChild())) {\n-            // Treat all assignments to arguments as redefining the\n+            int index = -1;\n+\t\t\t// Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n             if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_414/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:19:09.562624121 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckGlobalThis.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_414/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckGlobalThis.java\t2018-12-02 07:19:09.562624121 -0500\n@@ -161,8 +161,6 @@\n \n   private boolean shouldReportThis(Node n, Node parent) {\n     if (assignLhsChild != null) {\n-      // Always report a THIS on the left side of an assign.\n-      return true;\n     }\n \n     // Also report a THIS with a property access.\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CommandLineRunner.java\t2018-12-02 07:03:01.150376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_414/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CommandLineRunner.java\t2018-12-02 07:19:09.566624295 -0500\n@@ -439,7 +439,7 @@\n \n       @Override public void addValue(Object value) throws CmdLineException {\n         proxy.addValue((String) value);\n-        warningGuardSpec.add(level, (String) value);\n+        StringBuilder builder = new StringBuilder();\n       }\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckGlobalThis.java", 
          "line": 165, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "switch (n.getType()) {\ncase Token.LABEL:\n  validateLabel(n);\nreturn;\ncase Token.BLOCK:\nvalidateBlock(n);\nreturn;\ncase Token.FUNCTION:\nvalidateFunctionStatement(n);\nreturn;\ncase Token.WITH:\nvalidateWith(n);\nreturn;\ncase Token.FOR:\nvalidateFor(n);\nreturn;\ncase Token.WHILE:\nvalidateWhile(n);\nreturn;\ncase Token.DO:\nvalidateDo(n);\nreturn;\ncase Token.SWITCH:\nvalidateSwitch(n);\nreturn;\ncase Token.IF:\nvalidateIf(n);\nreturn;\ncase Token.VAR:\nvalidateVar(n);\nreturn;\ncase Token.EXPR_RESULT:\nvalidateExprStmt(n);\nreturn;\ncase Token.RETURN:\nvalidateReturn(n);\nreturn;\ncase Token.THROW:\nvalidateThrow(n);\nreturn;\ncase Token.TRY:\nvalidateTry(n);\nreturn;\ncase Token.BREAK:\nvalidateBreak(n);\nreturn;\ncase Token.CONTINUE:\nvalidateContinue(n);\nreturn;\ncase Token.EMPTY:\nvalidateChildless(n);\nreturn;\ncase Token.DEBUGGER:\nvalidateChildless(n);\nreturn;\ndefault :\nviolation(\"Expected statement but was \" + Node.tokenToName(n.getType()) + \".\",n);\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 287, 
          "faulty": "Node obj=n.getFirstChild().getFirstChild();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CommandLineRunner.java", 
          "line": 442, 
          "faulty": "warningGuardSpec.add(level,(String)value);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1375/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:36:13.507465185 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1375/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:36:13.511465368 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1375/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:36:13.511465368 -0500\n@@ -68,8 +68,6 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n-            getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n             getWarningCount());\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "Delete", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_365/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:18:18.724399234 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java\t2018-12-02 07:03:01.150376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_365/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java\t2018-12-02 07:18:18.724399234 -0500\n@@ -193,7 +193,6 @@\n       Node lhs = assign.getFirstChild();\n \n       if (!NodeUtil.isName(lhs)) {\n-        return false;\n       }\n \n       Var var = s.getVar(lhs.getString());\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseVariableDeclarations.java", 
          "line": 196, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "validateMaximumChildCount(n,1);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1676/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:41:17.737133336 -0500\n@@ -39,7 +39,7 @@\n         addDefaultWarnings(options);\n         break;\n       case VERBOSE:\n-        addVerboseWarnings(options);\n+        ;\n         break;\n       default:\n         throw new RuntimeException(\"Unknown warning level.\");\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:03:03.286376056 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1676/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:41:17.741133514 -0500\n@@ -1097,9 +1097,6 @@\n           new SemanticReverseAbstractInterpreter(\n               getCodingConvention(), getTypeRegistry());\n       if (options.closurePass) {\n-        interpreter = new ClosureReverseAbstractInterpreter(\n-            getCodingConvention(), getTypeRegistry())\n-            .append(interpreter).getFirst();\n       }\n       abstractInterpreter = interpreter;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CommandLineRunner.java\t2018-12-02 07:03:01.150376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1676/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CommandLineRunner.java\t2018-12-02 07:41:17.741133514 -0500\n@@ -438,7 +438,8 @@\n       @Override public Class getType() { return proxy.getType(); }\n \n       @Override public void addValue(Object value) throws CmdLineException {\n-        proxy.addValue((String) value);\n+        int index = -1;\n+\t\tproxy.addValue((String) value);\n         warningGuardSpec.add(level, (String) value);\n       }\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/Compiler.java", 
          "line": 1100, 
          "faulty": "interpreter=new ClosureReverseAbstractInterpreter(getCodingConvention(),getTypeRegistry()).append(interpreter).getFirst();", 
          "type": "Delete", 
          "seed": "boolean valid=false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CommandLineRunner.java", 
          "line": 441, 
          "faulty": "proxy.addValue((String)value);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 42, 
          "faulty": "addVerboseWarnings(options);", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_340/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:17:55.363367611 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_340/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:17:55.363367611 -0500\n@@ -159,7 +159,8 @@\n \n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n-    if (returnType == null) {\n+    Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n+\tif (returnType == null) {\n       return null;\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 162, 
          "faulty": "if (returnType == null) {\n  return null;\n}", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_962/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:28:58.332174833 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/ExploitAssigns.java\t2018-12-02 07:03:01.162376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_962/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/ExploitAssigns.java\t2018-12-02 07:28:58.336175011 -0500\n@@ -76,11 +76,7 @@\n   private boolean isCollapsibleValue(Node value, boolean isLValue) {\n     switch (value.getType()) {\n       case Token.GETPROP:\n-        // Do not collapse GETPROPs on arbitrary objects, because\n-        // they may be implemented  setter functions, and oftentimes\n-        // setter functions fail on native objects. This is ok for \"THIS\"\n-        // objects, because we assume that they are non-native.\n-        return !isLValue || value.getFirstChild().getType() == Token.THIS;\n+        ;\n \n       case Token.NAME:\n         return true;\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_962/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:28:58.336175011 -0500\n@@ -68,8 +68,6 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n-            getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n             getWarningCount());\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ExploitAssigns.java", 
          "line": 83, 
          "faulty": "return !isLValue || value.getFirstChild().getType() == Token.THIS;", 
          "type": "Delete", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_803/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:26:11.908521993 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckGlobalNames.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_803/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckGlobalNames.java\t2018-12-02 07:26:11.908521993 -0500\n@@ -65,7 +65,8 @@\n    */\n   CheckGlobalNames injectNamespace(GlobalNamespace namespace) {\n     this.namespace = namespace;\n-    return this;\n+    int index = -1;\n+\treturn this;\n   }\n \n   public void process(Node externs, Node root) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_803/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:26:11.912522184 -0500\n@@ -1726,7 +1726,6 @@\n     private final List<Entry> entries = Lists.newArrayList();\n \n     protected void add(CheckLevel level, String groupName) {\n-      entries.add(new Entry(level, groupName));\n     }\n \n     protected void clear() {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 1729, 
          "faulty": "entries.add(new Entry(level,groupName));", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckGlobalNames.java", 
          "line": 68, 
          "faulty": "return this;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_841/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:26:50.846354141 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:03:03.286376056 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_841/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:26:50.850354328 -0500\n@@ -1097,9 +1097,6 @@\n           new SemanticReverseAbstractInterpreter(\n               getCodingConvention(), getTypeRegistry());\n       if (options.closurePass) {\n-        interpreter = new ClosureReverseAbstractInterpreter(\n-            getCodingConvention(), getTypeRegistry())\n-            .append(interpreter).getFirst();\n       }\n       abstractInterpreter = interpreter;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/Compiler.java", 
          "line": 1100, 
          "faulty": "interpreter=new ClosureReverseAbstractInterpreter(getCodingConvention(),getTypeRegistry()).append(interpreter).getFirst();", 
          "type": "Delete", 
          "seed": "return 0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1488/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:38:08.224585849 -0500\n@@ -72,11 +72,9 @@\n    * @param options The CompilerOptions object to set the options on.\n    */\n   private static void addVerboseWarnings(CompilerOptions options) {\n-    addDefaultWarnings(options);\n-\n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 75, 
          "faulty": "addDefaultWarnings(options);", 
          "type": "Delete", 
          "seed": "return this;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_386/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:18:41.329391724 -0500\n@@ -76,7 +76,6 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_386/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:18:41.329391724 -0500\n@@ -159,7 +159,8 @@\n \n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n-    if (returnType == null) {\n+    Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n+\tif (returnType == null) {\n       return null;\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 162, 
          "faulty": "if (returnType == null) {\n  return null;\n}", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1628/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:40:36.139277385 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1628/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:40:36.143277565 -0500\n@@ -72,11 +72,9 @@\n    * @param options The CompilerOptions object to set the options on.\n    */\n   private static void addVerboseWarnings(CompilerOptions options) {\n-    addDefaultWarnings(options);\n-\n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:03:03.286376056 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1628/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:40:36.143277565 -0500\n@@ -1097,9 +1097,6 @@\n           new SemanticReverseAbstractInterpreter(\n               getCodingConvention(), getTypeRegistry());\n       if (options.closurePass) {\n-        interpreter = new ClosureReverseAbstractInterpreter(\n-            getCodingConvention(), getTypeRegistry())\n-            .append(interpreter).getFirst();\n       }\n       abstractInterpreter = interpreter;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1628/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:40:36.147277743 -0500\n@@ -153,16 +153,8 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n-    if (returnType == null) {\n-      return null;\n-    }\n-\n     if (!isVoidOrUnknown(returnType)) {\n       return returnType;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DiagnosticGroups.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1628/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DiagnosticGroups.java\t2018-12-02 07:40:36.147277743 -0500\n@@ -205,6 +205,6 @@\n       String name, CheckLevel level) {\n     DiagnosticGroup group = forName(name);\n     Preconditions.checkNotNull(group, \"No warning class for name: \" + name);\n-    options.setWarningLevel(group, level);\n+    return;\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1628/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:40:36.151277923 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n@@ -1726,7 +1725,6 @@\n     private final List<Entry> entries = Lists.newArrayList();\n \n     protected void add(CheckLevel level, String groupName) {\n-      entries.add(new Entry(level, groupName));\n     }\n \n     protected void clear() {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 162, 
          "faulty": "if (returnType == null) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/Compiler.java", 
          "line": 1100, 
          "faulty": "interpreter=new ClosureReverseAbstractInterpreter(getCodingConvention(),getTypeRegistry()).append(interpreter).getFirst();", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DiagnosticGroups.java", 
          "line": 208, 
          "faulty": "options.setWarningLevel(group,level);", 
          "type": "Replace", 
          "seed": "return;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 1729, 
          "faulty": "entries.add(new Entry(level,groupName));", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 75, 
          "faulty": "addDefaultWarnings(options);", 
          "type": "Delete", 
          "seed": "return this;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1799/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:43:12.526196839 -0500\n@@ -74,9 +74,7 @@\n   private static void addVerboseWarnings(CompilerOptions options) {\n     addDefaultWarnings(options);\n \n-    // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n-    options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:03:03.286376056 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1799/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:43:12.530197014 -0500\n@@ -1097,9 +1097,6 @@\n           new SemanticReverseAbstractInterpreter(\n               getCodingConvention(), getTypeRegistry());\n       if (options.closurePass) {\n-        interpreter = new ClosureReverseAbstractInterpreter(\n-            getCodingConvention(), getTypeRegistry())\n-            .append(interpreter).getFirst();\n       }\n       abstractInterpreter = interpreter;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CommandLineRunner.java\t2018-12-02 07:03:01.150376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1799/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CommandLineRunner.java\t2018-12-02 07:43:12.530197014 -0500\n@@ -438,7 +438,8 @@\n       @Override public Class getType() { return proxy.getType(); }\n \n       @Override public void addValue(Object value) throws CmdLineException {\n-        proxy.addValue((String) value);\n+        int index = -1;\n+\t\tproxy.addValue((String) value);\n         warningGuardSpec.add(level, (String) value);\n       }\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/Compiler.java", 
          "line": 1100, 
          "faulty": "interpreter=new ClosureReverseAbstractInterpreter(getCodingConvention(),getTypeRegistry()).append(interpreter).getFirst();", 
          "type": "Delete", 
          "seed": "boolean valid=false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CommandLineRunner.java", 
          "line": 441, 
          "faulty": "proxy.addValue((String)value);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 78, 
          "faulty": "options.checkSuspiciousCode=true;", 
          "type": "Delete", 
          "seed": "return this;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1738/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:42:17.283769294 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1738/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:42:17.287769469 -0500\n@@ -233,7 +233,6 @@\n     }\n \n     if (options.aggressiveVarCheck.isOn()) {\n-      checks.add(checkVariableReferences);\n     }\n \n     // This pass should run before types are assigned.\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java", 
          "line": 236, 
          "faulty": "checks.add(checkVariableReferences);", 
          "type": "Delete", 
          "seed": "return;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1230/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:33:40.036473750 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1230/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:33:40.040473923 -0500\n@@ -76,7 +76,6 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1230/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:33:40.040473923 -0500\n@@ -157,7 +157,8 @@\n       return null;\n     }\n \n-    JSType returnType = ((FunctionType) scopeType).getReturnType();\n+    Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n+\tJSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n       return null;\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1230/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:33:40.040473923 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 160, 
          "faulty": "JSType returnType=((FunctionType)scopeType).getReturnType();", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_933/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:28:25.858713817 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckGlobalNames.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_933/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckGlobalNames.java\t2018-12-02 07:28:25.858713817 -0500\n@@ -65,7 +65,8 @@\n    */\n   CheckGlobalNames injectNamespace(GlobalNamespace namespace) {\n     this.namespace = namespace;\n-    return this;\n+    int index = -1;\n+\treturn this;\n   }\n \n   public void process(Node externs, Node root) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_933/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:28:25.862713997 -0500\n@@ -159,10 +159,6 @@\n \n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n-    if (returnType == null) {\n-      return null;\n-    }\n-\n     if (!isVoidOrUnknown(returnType)) {\n       return returnType;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckGlobalNames.java", 
          "line": 68, 
          "faulty": "return this;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 162, 
          "faulty": "if (returnType == null) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return this;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1363/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:35:59.970852755 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1363/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:35:59.974852936 -0500\n@@ -76,7 +76,6 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckGlobalNames.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1363/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckGlobalNames.java\t2018-12-02 07:35:59.974852936 -0500\n@@ -64,7 +64,6 @@\n    * can be re-used for multiple check passes. Returns this for easy chaining.\n    */\n   CheckGlobalNames injectNamespace(GlobalNamespace namespace) {\n-    this.namespace = namespace;\n     return this;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1363/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:35:59.974852936 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckGlobalNames.java", 
          "line": 67, 
          "faulty": "this.namespace=namespace;", 
          "type": "Delete", 
          "seed": "this.level=level;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1715/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:41:55.778819873 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1715/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:41:55.782820050 -0500\n@@ -68,7 +68,8 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n+        int index = -1;\n+\t\tstream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n             getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1715/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:41:55.782820050 -0500\n@@ -233,7 +233,6 @@\n     }\n \n     if (options.aggressiveVarCheck.isOn()) {\n-      checks.add(checkVariableReferences);\n     }\n \n     // This pass should run before types are assigned.\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java", 
          "line": 236, 
          "faulty": "checks.add(checkVariableReferences);", 
          "type": "Delete", 
          "seed": "return;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1648/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:40:54.856114107 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1648/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:40:54.860114286 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1648/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:40:54.860114286 -0500\n@@ -68,7 +68,8 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n+        int index = -1;\n+\t\tstream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n             getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:03:03.286376056 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1648/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:40:54.864114464 -0500\n@@ -1097,9 +1097,7 @@\n           new SemanticReverseAbstractInterpreter(\n               getCodingConvention(), getTypeRegistry());\n       if (options.closurePass) {\n-        interpreter = new ClosureReverseAbstractInterpreter(\n-            getCodingConvention(), getTypeRegistry())\n-            .append(interpreter).getFirst();\n+        StringBuilder builder = new StringBuilder();\n       }\n       abstractInterpreter = interpreter;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1648/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:40:54.864114464 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1648/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:40:54.868114643 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1648/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:40:54.868114643 -0500\n@@ -233,7 +233,6 @@\n     }\n \n     if (options.aggressiveVarCheck.isOn()) {\n-      checks.add(checkVariableReferences);\n     }\n \n     // This pass should run before types are assigned.\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java", 
          "line": 236, 
          "faulty": "checks.add(checkVariableReferences);", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/Compiler.java", 
          "line": 1100, 
          "faulty": "interpreter=new ClosureReverseAbstractInterpreter(getCodingConvention(),getTypeRegistry()).append(interpreter).getFirst();", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_402/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:18:56.454052870 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_402/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:18:56.454052870 -0500\n@@ -233,7 +233,6 @@\n     }\n \n     if (options.aggressiveVarCheck.isOn()) {\n-      checks.add(checkVariableReferences);\n     }\n \n     // This pass should run before types are assigned.\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java", 
          "line": 236, 
          "faulty": "checks.add(checkVariableReferences);", 
          "type": "Delete", 
          "seed": "boolean valid=false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1810/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:43:22.642639811 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1810/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:43:22.646639986 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:03:03.286376056 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1810/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:43:22.646639986 -0500\n@@ -1097,9 +1097,6 @@\n           new SemanticReverseAbstractInterpreter(\n               getCodingConvention(), getTypeRegistry());\n       if (options.closurePass) {\n-        interpreter = new ClosureReverseAbstractInterpreter(\n-            getCodingConvention(), getTypeRegistry())\n-            .append(interpreter).getFirst();\n       }\n       abstractInterpreter = interpreter;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1810/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:43:22.646639986 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1810/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:43:22.650640161 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CommandLineRunner.java\t2018-12-02 07:03:01.150376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1810/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CommandLineRunner.java\t2018-12-02 07:43:22.650640161 -0500\n@@ -438,7 +438,8 @@\n       @Override public Class getType() { return proxy.getType(); }\n \n       @Override public void addValue(Object value) throws CmdLineException {\n-        proxy.addValue((String) value);\n+        int index = -1;\n+\t\tproxy.addValue((String) value);\n         warningGuardSpec.add(level, (String) value);\n       }\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/Compiler.java", 
          "line": 1100, 
          "faulty": "interpreter=new ClosureReverseAbstractInterpreter(getCodingConvention(),getTypeRegistry()).append(interpreter).getFirst();", 
          "type": "Delete", 
          "seed": "boolean valid=false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CommandLineRunner.java", 
          "line": 441, 
          "faulty": "proxy.addValue((String)value);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1569/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:39:37.728646460 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:03:03.286376056 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1569/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:39:37.728646460 -0500\n@@ -1097,9 +1097,6 @@\n           new SemanticReverseAbstractInterpreter(\n               getCodingConvention(), getTypeRegistry());\n       if (options.closurePass) {\n-        interpreter = new ClosureReverseAbstractInterpreter(\n-            getCodingConvention(), getTypeRegistry())\n-            .append(interpreter).getFirst();\n       }\n       abstractInterpreter = interpreter;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DiagnosticGroups.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1569/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DiagnosticGroups.java\t2018-12-02 07:39:37.732646642 -0500\n@@ -205,6 +205,6 @@\n       String name, CheckLevel level) {\n     DiagnosticGroup group = forName(name);\n     Preconditions.checkNotNull(group, \"No warning class for name: \" + name);\n-    options.setWarningLevel(group, level);\n+    return;\n   }\n }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/Compiler.java", 
          "line": 1100, 
          "faulty": "interpreter=new ClosureReverseAbstractInterpreter(getCodingConvention(),getTypeRegistry()).append(interpreter).getFirst();", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DiagnosticGroups.java", 
          "line": 208, 
          "faulty": "options.setWarningLevel(group,level);", 
          "type": "Replace", 
          "seed": "return;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1068/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:30:50.377132630 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1068/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:30:50.377132630 -0500\n@@ -76,7 +76,6 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1068/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:30:50.381132804 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DiagnosticGroups.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1068/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DiagnosticGroups.java\t2018-12-02 07:30:50.381132804 -0500\n@@ -205,6 +205,5 @@\n       String name, CheckLevel level) {\n     DiagnosticGroup group = forName(name);\n     Preconditions.checkNotNull(group, \"No warning class for name: \" + name);\n-    options.setWarningLevel(group, level);\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1068/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:30:50.385132979 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n@@ -1726,7 +1725,6 @@\n     private final List<Entry> entries = Lists.newArrayList();\n \n     protected void add(CheckLevel level, String groupName) {\n-      entries.add(new Entry(level, groupName));\n     }\n \n     protected void clear() {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 1729, 
          "faulty": "entries.add(new Entry(level,groupName));", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DiagnosticGroups.java", 
          "line": 208, 
          "faulty": "options.setWarningLevel(group,level);", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1311/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:35:03.904292834 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1311/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:35:03.904292834 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1311/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:35:03.908293019 -0500\n@@ -68,8 +68,6 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n-            getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n             getWarningCount());\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1311/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:35:03.908293019 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "Delete", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1135/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:32:02.080254099 -0500\n@@ -72,11 +72,8 @@\n    * @param options The CompilerOptions object to set the options on.\n    */\n   private static void addVerboseWarnings(CompilerOptions options) {\n-    addDefaultWarnings(options);\n-\n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1135/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:32:02.084254271 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 75, 
          "faulty": "addDefaultWarnings(options);", 
          "type": "Delete", 
          "seed": "return this;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_700/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:24:20.803865153 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_700/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:24:20.803865153 -0500\n@@ -260,7 +260,6 @@\n     if (options.checkTypes &&\n         (options.enables(DiagnosticGroups.ACCESS_CONTROLS)\n          || options.enables(DiagnosticGroups.CONSTANT_PROPERTY))) {\n-      checks.add(checkAccessControls);\n     }\n \n     if (options.checkGlobalNamesLevel.isOn()) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java", 
          "line": 263, 
          "faulty": "checks.add(checkAccessControls);", 
          "type": "Delete", 
          "seed": "return 0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1661/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:41:05.868605139 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1661/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:41:05.872605316 -0500\n@@ -72,11 +72,8 @@\n    * @param options The CompilerOptions object to set the options on.\n    */\n   private static void addVerboseWarnings(CompilerOptions options) {\n-    addDefaultWarnings(options);\n-\n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1661/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:41:05.872605316 -0500\n@@ -68,7 +68,8 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n+        int index = -1;\n+\t\tstream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n             getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1661/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:41:05.876605495 -0500\n@@ -153,16 +153,8 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n-    if (returnType == null) {\n-      return null;\n-    }\n-\n     if (!isVoidOrUnknown(returnType)) {\n       return returnType;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1661/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:41:05.876605495 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 162, 
          "faulty": "if (returnType == null) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 75, 
          "faulty": "addDefaultWarnings(options);", 
          "type": "Delete", 
          "seed": "return this;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_343/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:17:57.731472476 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_343/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:17:57.731472476 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_909/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:28:03.289690521 -0500\n@@ -282,7 +282,9 @@\n               n.getLastChild(), output);\n             return;\n           } else if (NodeUtil.isGet(n.getFirstChild())) {\n-            // Treat all assignments to arguments as redefining the\n+            Node parameterName = Node.newString(Token.NAME,\n+\t\t\t\t\t\"jscomp_throw_param\");\n+\t\t\t// Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n             if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_909/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:28:03.293690702 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_909/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:28:03.293690702 -0500\n@@ -68,8 +68,6 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n-            getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n             getWarningCount());\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_909/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:28:03.293690702 -0500\n@@ -1726,7 +1726,6 @@\n     private final List<Entry> entries = Lists.newArrayList();\n \n     protected void add(CheckLevel level, String groupName) {\n-      entries.add(new Entry(level, groupName));\n     }\n \n     protected void clear() {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 1729, 
          "faulty": "entries.add(new Entry(level,groupName));", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 287, 
          "faulty": "Node obj=n.getFirstChild().getFirstChild();", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1808/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:43:21.382584661 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1808/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:43:21.382584661 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1808/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:43:21.386584835 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1808/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:43:21.386584835 -0500\n@@ -233,7 +233,6 @@\n     }\n \n     if (options.aggressiveVarCheck.isOn()) {\n-      checks.add(checkVariableReferences);\n     }\n \n     // This pass should run before types are assigned.\n@@ -260,7 +259,6 @@\n     if (options.checkTypes &&\n         (options.enables(DiagnosticGroups.ACCESS_CONTROLS)\n          || options.enables(DiagnosticGroups.CONSTANT_PROPERTY))) {\n-      checks.add(checkAccessControls);\n     }\n \n     if (options.checkGlobalNamesLevel.isOn()) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java", 
          "line": 236, 
          "faulty": "checks.add(checkVariableReferences);", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java", 
          "line": 263, 
          "faulty": "checks.add(checkAccessControls);", 
          "type": "Delete", 
          "seed": "return 0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1320/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:35:13.900752232 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1320/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:35:13.904752416 -0500\n@@ -76,7 +76,6 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:03:03.286376056 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1320/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:35:13.904752416 -0500\n@@ -1097,9 +1097,6 @@\n           new SemanticReverseAbstractInterpreter(\n               getCodingConvention(), getTypeRegistry());\n       if (options.closurePass) {\n-        interpreter = new ClosureReverseAbstractInterpreter(\n-            getCodingConvention(), getTypeRegistry())\n-            .append(interpreter).getFirst();\n       }\n       abstractInterpreter = interpreter;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1320/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:35:13.908752599 -0500\n@@ -153,16 +153,8 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n-    if (returnType == null) {\n-      return null;\n-    }\n-\n     if (!isVoidOrUnknown(returnType)) {\n       return returnType;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1320/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:35:13.908752599 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n@@ -1726,7 +1725,6 @@\n     private final List<Entry> entries = Lists.newArrayList();\n \n     protected void add(CheckLevel level, String groupName) {\n-      entries.add(new Entry(level, groupName));\n     }\n \n     protected void clear() {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 1729, 
          "faulty": "entries.add(new Entry(level,groupName));", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 162, 
          "faulty": "if (returnType == null) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/Compiler.java", 
          "line": 1100, 
          "faulty": "interpreter=new ClosureReverseAbstractInterpreter(getCodingConvention(),getTypeRegistry()).append(interpreter).getFirst();", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1259/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:34:08.477718564 -0500\n@@ -76,7 +76,6 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1259/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:34:08.481718751 -0500\n@@ -159,10 +159,6 @@\n \n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n-    if (returnType == null) {\n-      return null;\n-    }\n-\n     if (!isVoidOrUnknown(returnType)) {\n       return returnType;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1259/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:34:08.481718751 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n@@ -1726,7 +1725,6 @@\n     private final List<Entry> entries = Lists.newArrayList();\n \n     protected void add(CheckLevel level, String groupName) {\n-      entries.add(new Entry(level, groupName));\n     }\n \n     protected void clear() {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 1729, 
          "faulty": "entries.add(new Entry(level,groupName));", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 162, 
          "faulty": "if (returnType == null) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return 0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1720/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:41:59.738994914 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1720/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:41:59.742995091 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1720/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:41:59.746995268 -0500\n@@ -68,7 +68,8 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n+        int index = -1;\n+\t\tstream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n             getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:03:03.286376056 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1720/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:41:59.746995268 -0500\n@@ -1097,9 +1097,7 @@\n           new SemanticReverseAbstractInterpreter(\n               getCodingConvention(), getTypeRegistry());\n       if (options.closurePass) {\n-        interpreter = new ClosureReverseAbstractInterpreter(\n-            getCodingConvention(), getTypeRegistry())\n-            .append(interpreter).getFirst();\n+        StringBuilder builder = new StringBuilder();\n       }\n       abstractInterpreter = interpreter;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1720/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:41:59.746995268 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1720/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:41:59.750995445 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1720/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:41:59.750995445 -0500\n@@ -233,7 +233,6 @@\n     }\n \n     if (options.aggressiveVarCheck.isOn()) {\n-      checks.add(checkVariableReferences);\n     }\n \n     // This pass should run before types are assigned.\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java", 
          "line": 236, 
          "faulty": "checks.add(checkVariableReferences);", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/Compiler.java", 
          "line": 1100, 
          "faulty": "interpreter=new ClosureReverseAbstractInterpreter(getCodingConvention(),getTypeRegistry()).append(interpreter).getFirst();", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1116/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:31:42.383399818 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1116/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:31:42.387399992 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1116/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:31:42.387399992 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1116/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:31:42.391400166 -0500\n@@ -1726,7 +1726,6 @@\n     private final List<Entry> entries = Lists.newArrayList();\n \n     protected void add(CheckLevel level, String groupName) {\n-      entries.add(new Entry(level, groupName));\n     }\n \n     protected void clear() {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 1729, 
          "faulty": "entries.add(new Entry(level,groupName));", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 1729, 
          "faulty": "entries.add(new Entry(level,groupName));", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_813/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:26:20.152912502 -0500\n@@ -76,8 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n-    options.checkSymbols = true;\n+    int start = 0;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n     // checkTypes has the side-effect of asserting that the\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_813/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:26:20.156912691 -0500\n@@ -1726,7 +1726,6 @@\n     private final List<Entry> entries = Lists.newArrayList();\n \n     protected void add(CheckLevel level, String groupName) {\n-      entries.add(new Entry(level, groupName));\n     }\n \n     protected void clear() {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_813/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:26:20.156912691 -0500\n@@ -260,7 +260,7 @@\n     if (options.checkTypes &&\n         (options.enables(DiagnosticGroups.ACCESS_CONTROLS)\n          || options.enables(DiagnosticGroups.CONSTANT_PROPERTY))) {\n-      checks.add(checkAccessControls);\n+      int index = -1;\n     }\n \n     if (options.checkGlobalNamesLevel.isOn()) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 1729, 
          "faulty": "entries.add(new Entry(level,groupName));", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java", 
          "line": 263, 
          "faulty": "checks.add(checkAccessControls);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 80, 
          "faulty": "options.checkSymbols=true;", 
          "type": "Replace", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_363/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:18:17.576348681 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java\t2018-12-02 07:03:01.150376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_363/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java\t2018-12-02 07:18:17.576348681 -0500\n@@ -193,7 +193,6 @@\n       Node lhs = assign.getFirstChild();\n \n       if (!NodeUtil.isName(lhs)) {\n-        return false;\n       }\n \n       Var var = s.getVar(lhs.getString());\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DiagnosticGroups.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_363/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DiagnosticGroups.java\t2018-12-02 07:18:17.580348856 -0500\n@@ -205,6 +205,6 @@\n       String name, CheckLevel level) {\n     DiagnosticGroup group = forName(name);\n     Preconditions.checkNotNull(group, \"No warning class for name: \" + name);\n-    options.setWarningLevel(group, level);\n+    boolean valid = false;\n   }\n }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseVariableDeclarations.java", 
          "line": 196, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "validateMaximumChildCount(n,1);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DiagnosticGroups.java", 
          "line": 208, 
          "faulty": "options.setWarningLevel(group,level);", 
          "type": "Replace", 
          "seed": "boolean valid=false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1776/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:42:53.353356031 -0500\n@@ -72,11 +72,7 @@\n    * @param options The CompilerOptions object to set the options on.\n    */\n   private static void addVerboseWarnings(CompilerOptions options) {\n-    addDefaultWarnings(options);\n-\n-    // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n-    options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1776/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:42:53.357356207 -0500\n@@ -264,7 +264,6 @@\n     }\n \n     if (options.checkGlobalNamesLevel.isOn()) {\n-      checks.add(checkGlobalNames);\n     }\n \n     checks.add(checkStrictMode);\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 75, 
          "faulty": "addDefaultWarnings(options);", 
          "type": "Delete", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 78, 
          "faulty": "options.checkSuspiciousCode=true;", 
          "type": "Delete", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java", 
          "line": 267, 
          "faulty": "checks.add(checkGlobalNames);", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1663/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:41:07.088659482 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1663/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:41:07.092659661 -0500\n@@ -76,7 +76,8 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    boolean valid = false;\n+\tStringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java\t2018-12-02 07:03:01.150376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1663/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java\t2018-12-02 07:41:07.092659661 -0500\n@@ -190,7 +190,8 @@\n         return false;\n       }\n       Node assign = n.getFirstChild();\n-      Node lhs = assign.getFirstChild();\n+      String sourceName = n.getSourceFileName();\n+\tNode lhs = assign.getFirstChild();\n \n       if (!NodeUtil.isName(lhs)) {\n         return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1663/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:41:07.096659839 -0500\n@@ -68,8 +68,6 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n-            getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n             getWarningCount());\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1663/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:41:07.096659839 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1663/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:41:07.100660017 -0500\n@@ -1726,7 +1726,6 @@\n     private final List<Entry> entries = Lists.newArrayList();\n \n     protected void add(CheckLevel level, String groupName) {\n-      entries.add(new Entry(level, groupName));\n     }\n \n     protected void clear() {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 1729, 
          "faulty": "entries.add(new Entry(level,groupName));", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "InsertBefore", 
          "seed": "boolean valid=false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseVariableDeclarations.java", 
          "line": 193, 
          "faulty": "Node lhs=assign.getFirstChild();", 
          "type": "InsertBefore", 
          "seed": "String sourceName=n.getSourceFileName();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_559/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:21:38.957041607 -0500\n@@ -76,7 +76,6 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_559/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:21:38.957041607 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_460/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:19:56.888674122 -0500\n@@ -76,7 +76,6 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java\t2018-12-02 07:03:01.150376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_460/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java\t2018-12-02 07:19:56.888674122 -0500\n@@ -193,7 +193,6 @@\n       Node lhs = assign.getFirstChild();\n \n       if (!NodeUtil.isName(lhs)) {\n-        return false;\n       }\n \n       Var var = s.getVar(lhs.getString());\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_460/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:19:56.892674295 -0500\n@@ -159,7 +159,8 @@\n \n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n-    if (returnType == null) {\n+    Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n+\tif (returnType == null) {\n       return null;\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 162, 
          "faulty": "if (returnType == null) {\n  return null;\n}", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseVariableDeclarations.java", 
          "line": 196, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1505/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:38:25.573351304 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1505/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:38:25.577351480 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1505/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:38:25.577351480 -0500\n@@ -68,8 +68,6 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n-            getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n             getWarningCount());\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1505/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:38:25.581351656 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1505/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:38:25.581351656 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "Delete", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_109/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:13:47.553190875 -0500\n@@ -76,7 +76,6 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1437/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:37:18.442377450 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1437/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:37:18.446377629 -0500\n@@ -72,11 +72,9 @@\n    * @param options The CompilerOptions object to set the options on.\n    */\n   private static void addVerboseWarnings(CompilerOptions options) {\n-    addDefaultWarnings(options);\n-\n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1437/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:37:18.446377629 -0500\n@@ -68,8 +68,6 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n-            getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n             getWarningCount());\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1437/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:37:18.450377807 -0500\n@@ -159,10 +159,6 @@\n \n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n-    if (returnType == null) {\n-      return null;\n-    }\n-\n     if (!isVoidOrUnknown(returnType)) {\n       return returnType;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1437/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:37:18.450377807 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 75, 
          "faulty": "addDefaultWarnings(options);", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 162, 
          "faulty": "if (returnType == null) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1755/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:42:34.368521715 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1755/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:42:34.368521715 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1755/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:42:34.372521891 -0500\n@@ -68,7 +68,8 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n+        int index = -1;\n+\t\tstream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n             getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1755/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:42:34.372521891 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1755/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:42:34.372521891 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1755/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:42:34.376522067 -0500\n@@ -233,7 +233,6 @@\n     }\n \n     if (options.aggressiveVarCheck.isOn()) {\n-      checks.add(checkVariableReferences);\n     }\n \n     // This pass should run before types are assigned.\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java", 
          "line": 236, 
          "faulty": "checks.add(checkVariableReferences);", 
          "type": "Delete", 
          "seed": "return;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1409/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:36:49.885101565 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1409/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:36:49.889101744 -0500\n@@ -72,11 +72,9 @@\n    * @param options The CompilerOptions object to set the options on.\n    */\n   private static void addVerboseWarnings(CompilerOptions options) {\n-    addDefaultWarnings(options);\n-\n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1409/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:36:49.889101744 -0500\n@@ -68,8 +68,6 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n-            getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n             getWarningCount());\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1409/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:36:49.889101744 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 75, 
          "faulty": "addDefaultWarnings(options);", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1846/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:43:54.524032996 -0500\n@@ -74,9 +74,7 @@\n   private static void addVerboseWarnings(CompilerOptions options) {\n     addDefaultWarnings(options);\n \n-    // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n-    options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1846/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:43:54.528033171 -0500\n@@ -176,7 +176,8 @@\n    *     with an empty body\n    */\n   private static boolean isEmptyFunction(Node function) {\n-    return function.getChildCount() == 3 &&\n+    boolean valid = false;\n+\treturn function.getChildCount() == 3 &&\n            !function.getFirstChild().getNext().getNext().hasChildren();\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 78, 
          "faulty": "options.checkSuspiciousCode=true;", 
          "type": "Delete", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 179, 
          "faulty": "return function.getChildCount() == 3 && !function.getFirstChild().getNext().getNext().hasChildren();", 
          "type": "InsertBefore", 
          "seed": "boolean valid=false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_783/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:25:49.115555193 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_783/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:25:49.119555361 -0500\n@@ -68,8 +68,6 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n-            getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n             getWarningCount());\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "Delete", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1774/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:42:52.133302469 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1774/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:42:52.133302469 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1774/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:42:52.137302645 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1774/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:42:52.137302645 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1774/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:42:52.141302820 -0500\n@@ -233,7 +233,6 @@\n     }\n \n     if (options.aggressiveVarCheck.isOn()) {\n-      checks.add(checkVariableReferences);\n     }\n \n     // This pass should run before types are assigned.\n@@ -260,7 +259,6 @@\n     if (options.checkTypes &&\n         (options.enables(DiagnosticGroups.ACCESS_CONTROLS)\n          || options.enables(DiagnosticGroups.CONSTANT_PROPERTY))) {\n-      checks.add(checkAccessControls);\n     }\n \n     if (options.checkGlobalNamesLevel.isOn()) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java", 
          "line": 236, 
          "faulty": "checks.add(checkVariableReferences);", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java", 
          "line": 263, 
          "faulty": "checks.add(checkAccessControls);", 
          "type": "Delete", 
          "seed": "return 0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1652/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:40:57.368226198 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1652/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:40:57.372226377 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:03:03.286376056 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1652/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:40:57.372226377 -0500\n@@ -1097,9 +1097,6 @@\n           new SemanticReverseAbstractInterpreter(\n               getCodingConvention(), getTypeRegistry());\n       if (options.closurePass) {\n-        interpreter = new ClosureReverseAbstractInterpreter(\n-            getCodingConvention(), getTypeRegistry())\n-            .append(interpreter).getFirst();\n       }\n       abstractInterpreter = interpreter;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1652/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:40:57.376226556 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/Compiler.java", 
          "line": 1100, 
          "faulty": "interpreter=new ClosureReverseAbstractInterpreter(getCodingConvention(),getTypeRegistry()).append(interpreter).getFirst();", 
          "type": "Delete", 
          "seed": "boolean valid=false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_306/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:17:20.257804729 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_306/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:17:20.261804908 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1849/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:43:57.224150805 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1849/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:43:57.228150978 -0500\n@@ -72,11 +72,9 @@\n    * @param options The CompilerOptions object to set the options on.\n    */\n   private static void addVerboseWarnings(CompilerOptions options) {\n-    addDefaultWarnings(options);\n-\n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1849/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:43:57.228150978 -0500\n@@ -68,7 +68,8 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n+        int index = -1;\n+\t\tstream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n             getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1849/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:43:57.232151153 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1849/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:43:57.232151153 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1849/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:43:57.236151328 -0500\n@@ -233,7 +233,6 @@\n     }\n \n     if (options.aggressiveVarCheck.isOn()) {\n-      checks.add(checkVariableReferences);\n     }\n \n     // This pass should run before types are assigned.\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 75, 
          "faulty": "addDefaultWarnings(options);", 
          "type": "Delete", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java", 
          "line": 236, 
          "faulty": "checks.add(checkVariableReferences);", 
          "type": "Delete", 
          "seed": "return;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1678/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:41:19.037191133 -0500\n@@ -72,11 +72,7 @@\n    * @param options The CompilerOptions object to set the options on.\n    */\n   private static void addVerboseWarnings(CompilerOptions options) {\n-    addDefaultWarnings(options);\n-\n-    // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n-    options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 75, 
          "faulty": "addDefaultWarnings(options);", 
          "type": "Delete", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 78, 
          "faulty": "options.checkSuspiciousCode=true;", 
          "type": "Delete", 
          "seed": "return this;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_645/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:23:16.685173233 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_645/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:23:16.685173233 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_645/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:23:16.689173401 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_990/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:29:25.681395968 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_990/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:29:25.685396147 -0500\n@@ -76,7 +76,6 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java\t2018-12-02 07:03:01.150376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_990/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java\t2018-12-02 07:29:25.685396147 -0500\n@@ -192,10 +192,6 @@\n       Node assign = n.getFirstChild();\n       Node lhs = assign.getFirstChild();\n \n-      if (!NodeUtil.isName(lhs)) {\n-        return false;\n-      }\n-\n       Var var = s.getVar(lhs.getString());\n       return var != null &&\n           var.getScope() == s && !blacklistedVars.contains(var);\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_990/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:29:25.685396147 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_990/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:29:25.689396325 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n@@ -1726,7 +1725,6 @@\n     private final List<Entry> entries = Lists.newArrayList();\n \n     protected void add(CheckLevel level, String groupName) {\n-      entries.add(new Entry(level, groupName));\n     }\n \n     protected void clear() {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 1729, 
          "faulty": "entries.add(new Entry(level,groupName));", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseVariableDeclarations.java", 
          "line": 195, 
          "faulty": "if (!NodeUtil.isName(lhs)) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "validateReturn(n);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1543/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:39:10.375402647 -0500\n@@ -76,7 +76,6 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:03:03.286376056 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1543/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:39:10.375402647 -0500\n@@ -1097,9 +1097,6 @@\n           new SemanticReverseAbstractInterpreter(\n               getCodingConvention(), getTypeRegistry());\n       if (options.closurePass) {\n-        interpreter = new ClosureReverseAbstractInterpreter(\n-            getCodingConvention(), getTypeRegistry())\n-            .append(interpreter).getFirst();\n       }\n       abstractInterpreter = interpreter;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DiagnosticGroups.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1543/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DiagnosticGroups.java\t2018-12-02 07:39:10.379402829 -0500\n@@ -205,6 +205,6 @@\n       String name, CheckLevel level) {\n     DiagnosticGroup group = forName(name);\n     Preconditions.checkNotNull(group, \"No warning class for name: \" + name);\n-    options.setWarningLevel(group, level);\n+    return;\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1543/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:39:10.379402829 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/Compiler.java", 
          "line": 1100, 
          "faulty": "interpreter=new ClosureReverseAbstractInterpreter(getCodingConvention(),getTypeRegistry()).append(interpreter).getFirst();", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DiagnosticGroups.java", 
          "line": 208, 
          "faulty": "options.setWarningLevel(group,level);", 
          "type": "Replace", 
          "seed": "return;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_312/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:17:26.186069790 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java\t2018-12-02 07:03:01.150376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_312/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java\t2018-12-02 07:17:26.186069790 -0500\n@@ -193,7 +193,6 @@\n       Node lhs = assign.getFirstChild();\n \n       if (!NodeUtil.isName(lhs)) {\n-        return false;\n       }\n \n       Var var = s.getVar(lhs.getString());\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseVariableDeclarations.java", 
          "line": 196, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "validateMaximumChildCount(n,1);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1335/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:35:30.173497196 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1335/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:35:30.177497379 -0500\n@@ -72,11 +72,8 @@\n    * @param options The CompilerOptions object to set the options on.\n    */\n   private static void addVerboseWarnings(CompilerOptions options) {\n-    addDefaultWarnings(options);\n-\n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1335/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:35:30.177497379 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1335/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:35:30.181497561 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1335/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:35:30.181497561 -0500\n@@ -260,7 +260,8 @@\n     if (options.checkTypes &&\n         (options.enables(DiagnosticGroups.ACCESS_CONTROLS)\n          || options.enables(DiagnosticGroups.CONSTANT_PROPERTY))) {\n-      checks.add(checkAccessControls);\n+      boolean valid = false;\n+\tchecks.add(checkAccessControls);\n     }\n \n     if (options.checkGlobalNamesLevel.isOn()) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 75, 
          "faulty": "addDefaultWarnings(options);", 
          "type": "Delete", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java", 
          "line": 263, 
          "faulty": "checks.add(checkAccessControls);", 
          "type": "InsertBefore", 
          "seed": "boolean valid=false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_389/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:18:43.629492414 -0500\n@@ -76,7 +76,6 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_389/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:18:43.633492589 -0500\n@@ -159,7 +159,8 @@\n \n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n-    if (returnType == null) {\n+    Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n+\tif (returnType == null) {\n       return null;\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 162, 
          "faulty": "if (returnType == null) {\n  return null;\n}", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1525/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:38:50.614498723 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1525/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:38:50.618498906 -0500\n@@ -76,7 +76,6 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:03:03.286376056 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1525/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:38:50.618498906 -0500\n@@ -1097,9 +1097,6 @@\n           new SemanticReverseAbstractInterpreter(\n               getCodingConvention(), getTypeRegistry());\n       if (options.closurePass) {\n-        interpreter = new ClosureReverseAbstractInterpreter(\n-            getCodingConvention(), getTypeRegistry())\n-            .append(interpreter).getFirst();\n       }\n       abstractInterpreter = interpreter;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1525/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:38:50.622499090 -0500\n@@ -159,10 +159,6 @@\n \n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n-    if (returnType == null) {\n-      return null;\n-    }\n-\n     if (!isVoidOrUnknown(returnType)) {\n       return returnType;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DiagnosticGroups.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1525/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DiagnosticGroups.java\t2018-12-02 07:38:50.622499090 -0500\n@@ -205,6 +205,6 @@\n       String name, CheckLevel level) {\n     DiagnosticGroup group = forName(name);\n     Preconditions.checkNotNull(group, \"No warning class for name: \" + name);\n-    options.setWarningLevel(group, level);\n+    return;\n   }\n }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 162, 
          "faulty": "if (returnType == null) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/Compiler.java", 
          "line": 1100, 
          "faulty": "interpreter=new ClosureReverseAbstractInterpreter(getCodingConvention(),getTypeRegistry()).append(interpreter).getFirst();", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DiagnosticGroups.java", 
          "line": 208, 
          "faulty": "options.setWarningLevel(group,level);", 
          "type": "Replace", 
          "seed": "return;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1789/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:43:03.765812872 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:03:03.286376056 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1789/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:43:03.769813048 -0500\n@@ -1097,9 +1097,7 @@\n           new SemanticReverseAbstractInterpreter(\n               getCodingConvention(), getTypeRegistry());\n       if (options.closurePass) {\n-        interpreter = new ClosureReverseAbstractInterpreter(\n-            getCodingConvention(), getTypeRegistry())\n-            .append(interpreter).getFirst();\n+        StringBuilder builder = new StringBuilder();\n       }\n       abstractInterpreter = interpreter;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1789/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:43:03.769813048 -0500\n@@ -233,7 +233,6 @@\n     }\n \n     if (options.aggressiveVarCheck.isOn()) {\n-      checks.add(checkVariableReferences);\n     }\n \n     // This pass should run before types are assigned.\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java", 
          "line": 236, 
          "faulty": "checks.add(checkVariableReferences);", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/Compiler.java", 
          "line": 1100, 
          "faulty": "interpreter=new ClosureReverseAbstractInterpreter(getCodingConvention(),getTypeRegistry()).append(interpreter).getFirst();", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_112/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:13:49.985288235 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DiagnosticGroups.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_112/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DiagnosticGroups.java\t2018-12-02 07:13:49.989288395 -0500\n@@ -204,7 +204,7 @@\n   void setWarningLevel(CompilerOptions options,\n       String name, CheckLevel level) {\n     DiagnosticGroup group = forName(name);\n-    Preconditions.checkNotNull(group, \"No warning class for name: \" + name);\n+    int start = 0;\n     options.setWarningLevel(group, level);\n   }\n }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DiagnosticGroups.java", 
          "line": 207, 
          "faulty": "Preconditions.checkNotNull(group,\"No warning class for name: \" + name);", 
          "type": "Replace", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_948/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:28:42.579467688 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_948/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:28:42.583467870 -0500\n@@ -72,11 +72,11 @@\n    * @param options The CompilerOptions object to set the options on.\n    */\n   private static void addVerboseWarnings(CompilerOptions options) {\n-    addDefaultWarnings(options);\n+    int index = -1;\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_948/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:28:42.583467870 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 75, 
          "faulty": "addDefaultWarnings(options);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1138/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:32:04.544360817 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1138/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:32:04.548360990 -0500\n@@ -68,8 +68,6 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n-            getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n             getWarningCount());\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CommandLineRunner.java\t2018-12-02 07:03:01.150376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1138/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CommandLineRunner.java\t2018-12-02 07:32:04.548360990 -0500\n@@ -438,7 +438,6 @@\n       @Override public Class getType() { return proxy.getType(); }\n \n       @Override public void addValue(Object value) throws CmdLineException {\n-        proxy.addValue((String) value);\n         warningGuardSpec.add(level, (String) value);\n       }\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CommandLineRunner.java", 
          "line": 441, 
          "faulty": "proxy.addValue((String)value);", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1096/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:31:20.726457852 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1096/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:31:20.730458026 -0500\n@@ -76,7 +76,6 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1096/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:31:20.730458026 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckGlobalNames.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1096/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckGlobalNames.java\t2018-12-02 07:31:20.730458026 -0500\n@@ -65,7 +65,8 @@\n    */\n   CheckGlobalNames injectNamespace(GlobalNamespace namespace) {\n     this.namespace = namespace;\n-    return this;\n+    int start = 0;\n+\treturn this;\n   }\n \n   public void process(Node externs, Node root) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1096/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:31:20.734458201 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n@@ -1726,7 +1725,6 @@\n     private final List<Entry> entries = Lists.newArrayList();\n \n     protected void add(CheckLevel level, String groupName) {\n-      entries.add(new Entry(level, groupName));\n     }\n \n     protected void clear() {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 1729, 
          "faulty": "entries.add(new Entry(level,groupName));", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckGlobalNames.java", 
          "line": 68, 
          "faulty": "return this;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1814/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:43:26.382803470 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1814/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:43:26.382803470 -0500\n@@ -72,11 +72,9 @@\n    * @param options The CompilerOptions object to set the options on.\n    */\n   private static void addVerboseWarnings(CompilerOptions options) {\n-    addDefaultWarnings(options);\n-\n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1814/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:43:26.386803645 -0500\n@@ -68,7 +68,8 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n+        int index = -1;\n+\t\tstream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n             getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1814/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:43:26.386803645 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1814/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:43:26.390803820 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1814/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:43:26.390803820 -0500\n@@ -233,7 +233,6 @@\n     }\n \n     if (options.aggressiveVarCheck.isOn()) {\n-      checks.add(checkVariableReferences);\n     }\n \n     // This pass should run before types are assigned.\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 75, 
          "faulty": "addDefaultWarnings(options);", 
          "type": "Delete", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java", 
          "line": 236, 
          "faulty": "checks.add(checkVariableReferences);", 
          "type": "Delete", 
          "seed": "return;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1767/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:42:45.837025932 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:03:03.286376056 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1767/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:42:45.841026107 -0500\n@@ -1097,9 +1097,7 @@\n           new SemanticReverseAbstractInterpreter(\n               getCodingConvention(), getTypeRegistry());\n       if (options.closurePass) {\n-        interpreter = new ClosureReverseAbstractInterpreter(\n-            getCodingConvention(), getTypeRegistry())\n-            .append(interpreter).getFirst();\n+        StringBuilder builder = new StringBuilder();\n       }\n       abstractInterpreter = interpreter;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1767/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:42:45.841026107 -0500\n@@ -159,10 +159,6 @@\n \n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n-    if (returnType == null) {\n-      return null;\n-    }\n-\n     if (!isVoidOrUnknown(returnType)) {\n       return returnType;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1767/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:42:45.845026283 -0500\n@@ -233,7 +233,6 @@\n     }\n \n     if (options.aggressiveVarCheck.isOn()) {\n-      checks.add(checkVariableReferences);\n     }\n \n     // This pass should run before types are assigned.\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 162, 
          "faulty": "if (returnType == null) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java", 
          "line": 236, 
          "faulty": "checks.add(checkVariableReferences);", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/Compiler.java", 
          "line": 1100, 
          "faulty": "interpreter=new ClosureReverseAbstractInterpreter(getCodingConvention(),getTypeRegistry()).append(interpreter).getFirst();", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_642/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:23:14.293072551 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_642/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:23:14.293072551 -0500\n@@ -1726,7 +1726,6 @@\n     private final List<Entry> entries = Lists.newArrayList();\n \n     protected void add(CheckLevel level, String groupName) {\n-      entries.add(new Entry(level, groupName));\n     }\n \n     protected void clear() {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 1729, 
          "faulty": "entries.add(new Entry(level,groupName));", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1175/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:32:42.714009854 -0500\n@@ -76,7 +76,6 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1175/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:32:42.714009854 -0500\n@@ -159,10 +159,6 @@\n \n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n-    if (returnType == null) {\n-      return null;\n-    }\n-\n     if (!isVoidOrUnknown(returnType)) {\n       return returnType;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1175/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:32:42.718010025 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 162, 
          "faulty": "if (returnType == null) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1484/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:38:04.556423746 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:03:03.286376056 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1484/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:38:04.560423923 -0500\n@@ -1097,9 +1097,6 @@\n           new SemanticReverseAbstractInterpreter(\n               getCodingConvention(), getTypeRegistry());\n       if (options.closurePass) {\n-        interpreter = new ClosureReverseAbstractInterpreter(\n-            getCodingConvention(), getTypeRegistry())\n-            .append(interpreter).getFirst();\n       }\n       abstractInterpreter = interpreter;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1484/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:38:04.560423923 -0500\n@@ -159,10 +159,6 @@\n \n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n-    if (returnType == null) {\n-      return null;\n-    }\n-\n     if (!isVoidOrUnknown(returnType)) {\n       return returnType;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DiagnosticGroups.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1484/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DiagnosticGroups.java\t2018-12-02 07:38:04.564424099 -0500\n@@ -205,6 +205,6 @@\n       String name, CheckLevel level) {\n     DiagnosticGroup group = forName(name);\n     Preconditions.checkNotNull(group, \"No warning class for name: \" + name);\n-    options.setWarningLevel(group, level);\n+    return;\n   }\n }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 162, 
          "faulty": "if (returnType == null) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/Compiler.java", 
          "line": 1100, 
          "faulty": "interpreter=new ClosureReverseAbstractInterpreter(getCodingConvention(),getTypeRegistry()).append(interpreter).getFirst();", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DiagnosticGroups.java", 
          "line": 208, 
          "faulty": "options.setWarningLevel(group,level);", 
          "type": "Replace", 
          "seed": "return;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1695/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:41:34.117860722 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1695/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:41:34.121860900 -0500\n@@ -76,7 +76,8 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    boolean valid = false;\n+\tStringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java\t2018-12-02 07:03:01.150376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1695/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java\t2018-12-02 07:41:34.121860900 -0500\n@@ -190,7 +190,8 @@\n         return false;\n       }\n       Node assign = n.getFirstChild();\n-      Node lhs = assign.getFirstChild();\n+      String sourceName = n.getSourceFileName();\n+\tNode lhs = assign.getFirstChild();\n \n       if (!NodeUtil.isName(lhs)) {\n         return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1695/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:41:34.125861077 -0500\n@@ -68,8 +68,6 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n-            getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n             getWarningCount());\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:03:03.286376056 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1695/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:41:34.125861077 -0500\n@@ -1097,9 +1097,6 @@\n           new SemanticReverseAbstractInterpreter(\n               getCodingConvention(), getTypeRegistry());\n       if (options.closurePass) {\n-        interpreter = new ClosureReverseAbstractInterpreter(\n-            getCodingConvention(), getTypeRegistry())\n-            .append(interpreter).getFirst();\n       }\n       abstractInterpreter = interpreter;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1695/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:41:34.125861077 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1695/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:41:34.129861255 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "InsertBefore", 
          "seed": "boolean valid=false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseVariableDeclarations.java", 
          "line": 193, 
          "faulty": "Node lhs=assign.getFirstChild();", 
          "type": "InsertBefore", 
          "seed": "String sourceName=n.getSourceFileName();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/Compiler.java", 
          "line": 1100, 
          "faulty": "interpreter=new ClosureReverseAbstractInterpreter(getCodingConvention(),getTypeRegistry()).append(interpreter).getFirst();", 
          "type": "Delete", 
          "seed": "return;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_769/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:25:35.042968316 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_769/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:25:35.046968481 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_769/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:25:35.046968481 -0500\n@@ -68,8 +68,6 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n-            getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n             getWarningCount());\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_769/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:25:35.046968481 -0500\n@@ -1726,7 +1726,6 @@\n     private final List<Entry> entries = Lists.newArrayList();\n \n     protected void add(CheckLevel level, String groupName) {\n-      entries.add(new Entry(level, groupName));\n     }\n \n     protected void clear() {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_769/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:25:35.050968649 -0500\n@@ -260,7 +260,7 @@\n     if (options.checkTypes &&\n         (options.enables(DiagnosticGroups.ACCESS_CONTROLS)\n          || options.enables(DiagnosticGroups.CONSTANT_PROPERTY))) {\n-      checks.add(checkAccessControls);\n+      int index = -1;\n     }\n \n     if (options.checkGlobalNamesLevel.isOn()) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 1729, 
          "faulty": "entries.add(new Entry(level,groupName));", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java", 
          "line": 263, 
          "faulty": "checks.add(checkAccessControls);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "Delete", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_835/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:26:45.098085553 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_835/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:26:45.102085740 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_835/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:26:45.102085740 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_835/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:26:45.106085927 -0500\n@@ -1726,7 +1726,6 @@\n     private final List<Entry> entries = Lists.newArrayList();\n \n     protected void add(CheckLevel level, String groupName) {\n-      entries.add(new Entry(level, groupName));\n     }\n \n     protected void clear() {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 1729, 
          "faulty": "entries.add(new Entry(level,groupName));", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1198/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:33:08.007098741 -0500\n@@ -76,7 +76,6 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1198/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:33:08.011098913 -0500\n@@ -68,7 +68,8 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n+        int index = -1;\n+\t\tstream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n             getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1198/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:33:08.011098913 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n@@ -187,6 +183,7 @@\n   private boolean isVoidOrUnknown(JSType returnType) {\n     final JSType voidType =\n         compiler.getTypeRegistry().getNativeType(JSTypeNative.VOID_TYPE);\n-    return voidType.isSubtype(returnType);\n+    Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n+\treturn voidType.isSubtype(returnType);\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1198/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:33:08.015099085 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n@@ -1726,7 +1725,6 @@\n     private final List<Entry> entries = Lists.newArrayList();\n \n     protected void add(CheckLevel level, String groupName) {\n-      entries.add(new Entry(level, groupName));\n     }\n \n     protected void clear() {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 1729, 
          "faulty": "entries.add(new Entry(level,groupName));", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 1729, 
          "faulty": "entries.add(new Entry(level,groupName));", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 190, 
          "faulty": "return voidType.isSubtype(returnType);", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_780/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:25:46.543447955 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_780/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:25:46.547448123 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n@@ -1726,7 +1725,6 @@\n     private final List<Entry> entries = Lists.newArrayList();\n \n     protected void add(CheckLevel level, String groupName) {\n-      entries.add(new Entry(level, groupName));\n     }\n \n     protected void clear() {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_780/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:25:46.551448289 -0500\n@@ -260,7 +260,7 @@\n     if (options.checkTypes &&\n         (options.enables(DiagnosticGroups.ACCESS_CONTROLS)\n          || options.enables(DiagnosticGroups.CONSTANT_PROPERTY))) {\n-      checks.add(checkAccessControls);\n+      int index = -1;\n     }\n \n     if (options.checkGlobalNamesLevel.isOn()) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 1729, 
          "faulty": "entries.add(new Entry(level,groupName));", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java", 
          "line": 263, 
          "faulty": "checks.add(checkAccessControls);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1519/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:38:45.242252149 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1519/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:38:45.246252332 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/ExploitAssigns.java\t2018-12-02 07:03:01.162376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1519/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/ExploitAssigns.java\t2018-12-02 07:38:45.246252332 -0500\n@@ -76,11 +76,7 @@\n   private boolean isCollapsibleValue(Node value, boolean isLValue) {\n     switch (value.getType()) {\n       case Token.GETPROP:\n-        // Do not collapse GETPROPs on arbitrary objects, because\n-        // they may be implemented  setter functions, and oftentimes\n-        // setter functions fail on native objects. This is ok for \"THIS\"\n-        // objects, because we assume that they are non-native.\n-        return !isLValue || value.getFirstChild().getType() == Token.THIS;\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.NAME:\n         return true;\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:03:03.286376056 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1519/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:38:45.246252332 -0500\n@@ -1097,9 +1097,6 @@\n           new SemanticReverseAbstractInterpreter(\n               getCodingConvention(), getTypeRegistry());\n       if (options.closurePass) {\n-        interpreter = new ClosureReverseAbstractInterpreter(\n-            getCodingConvention(), getTypeRegistry())\n-            .append(interpreter).getFirst();\n       }\n       abstractInterpreter = interpreter;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1519/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:38:45.250252516 -0500\n@@ -153,16 +153,8 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n-    if (returnType == null) {\n-      return null;\n-    }\n-\n     if (!isVoidOrUnknown(returnType)) {\n       return returnType;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DiagnosticGroups.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1519/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DiagnosticGroups.java\t2018-12-02 07:38:45.250252516 -0500\n@@ -205,6 +205,6 @@\n       String name, CheckLevel level) {\n     DiagnosticGroup group = forName(name);\n     Preconditions.checkNotNull(group, \"No warning class for name: \" + name);\n-    options.setWarningLevel(group, level);\n+    return;\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1519/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:38:45.254252699 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 162, 
          "faulty": "if (returnType == null) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/Compiler.java", 
          "line": 1100, 
          "faulty": "interpreter=new ClosureReverseAbstractInterpreter(getCodingConvention(),getTypeRegistry()).append(interpreter).getFirst();", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DiagnosticGroups.java", 
          "line": 208, 
          "faulty": "options.setWarningLevel(group,level);", 
          "type": "Replace", 
          "seed": "return;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ExploitAssigns.java", 
          "line": 83, 
          "faulty": "return !isLValue || value.getFirstChild().getType() == Token.THIS;", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1571/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:39:39.020705014 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1571/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:39:39.024705196 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1571/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:39:39.024705196 -0500\n@@ -68,7 +68,8 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n+        int index = -1;\n+\t\tstream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n             getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1571/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:39:39.028705378 -0500\n@@ -153,16 +153,8 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n-    if (returnType == null) {\n-      return null;\n-    }\n-\n     if (!isVoidOrUnknown(returnType)) {\n       return returnType;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1571/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:39:39.028705378 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1571/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:39:39.028705378 -0500\n@@ -233,7 +233,6 @@\n     }\n \n     if (options.aggressiveVarCheck.isOn()) {\n-      checks.add(checkVariableReferences);\n     }\n \n     // This pass should run before types are assigned.\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 162, 
          "faulty": "if (returnType == null) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java", 
          "line": 236, 
          "faulty": "checks.add(checkVariableReferences);", 
          "type": "Delete", 
          "seed": "return;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1208/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:33:15.791433302 -0500\n@@ -76,7 +76,6 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1208/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:33:15.791433302 -0500\n@@ -153,16 +153,8 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n-    if (returnType == null) {\n-      return null;\n-    }\n-\n     if (!isVoidOrUnknown(returnType)) {\n       return returnType;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1208/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:33:15.795433473 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n@@ -1726,7 +1725,6 @@\n     private final List<Entry> entries = Lists.newArrayList();\n \n     protected void add(CheckLevel level, String groupName) {\n-      entries.add(new Entry(level, groupName));\n     }\n \n     protected void clear() {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 1729, 
          "faulty": "entries.add(new Entry(level,groupName));", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 162, 
          "faulty": "if (returnType == null) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return 0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_980/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:29:17.361025309 -0500\n@@ -285,12 +285,7 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n+            String sourceName = n.getSourceFileName();\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_980/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:29:17.361025309 -0500\n@@ -72,11 +72,11 @@\n    * @param options The CompilerOptions object to set the options on.\n    */\n   private static void addVerboseWarnings(CompilerOptions options) {\n-    addDefaultWarnings(options);\n+    int index = -1;\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_980/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:29:17.365025487 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_980/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:29:17.365025487 -0500\n@@ -1726,7 +1726,6 @@\n     private final List<Entry> entries = Lists.newArrayList();\n \n     protected void add(CheckLevel level, String groupName) {\n-      entries.add(new Entry(level, groupName));\n     }\n \n     protected void clear() {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 1729, 
          "faulty": "entries.add(new Entry(level,groupName));", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 75, 
          "faulty": "addDefaultWarnings(options);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Replace", 
          "seed": "String sourceName=n.getSourceFileName();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_826/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:26:35.501635746 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_826/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:26:35.501635746 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_826/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:26:35.505635934 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_826/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:26:35.505635934 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_704/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:24:24.556022312 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_704/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:24:24.560022480 -0500\n@@ -159,7 +159,8 @@\n \n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n-    if (returnType == null) {\n+    Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n+\tif (returnType == null) {\n       return null;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_704/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:24:24.564022647 -0500\n@@ -1726,7 +1726,6 @@\n     private final List<Entry> entries = Lists.newArrayList();\n \n     protected void add(CheckLevel level, String groupName) {\n-      entries.add(new Entry(level, groupName));\n     }\n \n     protected void clear() {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 1729, 
          "faulty": "entries.add(new Entry(level,groupName));", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 162, 
          "faulty": "if (returnType == null) {\n  return null;\n}", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1446/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:37:27.062761229 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1446/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:37:27.066761405 -0500\n@@ -76,7 +76,6 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckGlobalNames.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1446/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckGlobalNames.java\t2018-12-02 07:37:27.066761405 -0500\n@@ -64,7 +64,6 @@\n    * can be re-used for multiple check passes. Returns this for easy chaining.\n    */\n   CheckGlobalNames injectNamespace(GlobalNamespace namespace) {\n-    this.namespace = namespace;\n     return this;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1446/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:37:27.070761585 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n@@ -1726,7 +1725,6 @@\n     private final List<Entry> entries = Lists.newArrayList();\n \n     protected void add(CheckLevel level, String groupName) {\n-      entries.add(new Entry(level, groupName));\n     }\n \n     protected void clear() {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 1729, 
          "faulty": "entries.add(new Entry(level,groupName));", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckGlobalNames.java", 
          "line": 67, 
          "faulty": "this.namespace=namespace;", 
          "type": "Delete", 
          "seed": "this.level=level;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1249/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:33:59.829321489 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1249/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:33:59.829321489 -0500\n@@ -72,11 +72,8 @@\n    * @param options The CompilerOptions object to set the options on.\n    */\n   private static void addVerboseWarnings(CompilerOptions options) {\n-    addDefaultWarnings(options);\n-\n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1249/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:33:59.833321660 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1249/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:33:59.833321660 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 75, 
          "faulty": "addDefaultWarnings(options);", 
          "type": "Delete", 
          "seed": "return this;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1401/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:36:41.628731311 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1401/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:36:41.628731311 -0500\n@@ -68,7 +68,8 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n+        int index = -1;\n+\t\tstream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n             getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1401/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:36:41.632731491 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_262/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:16:35.443950479 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/ExploitAssigns.java\t2018-12-02 07:03:01.162376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_262/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/ExploitAssigns.java\t2018-12-02 07:16:35.447950641 -0500\n@@ -76,11 +76,7 @@\n   private boolean isCollapsibleValue(Node value, boolean isLValue) {\n     switch (value.getType()) {\n       case Token.GETPROP:\n-        // Do not collapse GETPROPs on arbitrary objects, because\n-        // they may be implemented  setter functions, and oftentimes\n-        // setter functions fail on native objects. This is ok for \"THIS\"\n-        // objects, because we assume that they are non-native.\n-        return !isLValue || value.getFirstChild().getType() == Token.THIS;\n+        ;\n \n       case Token.NAME:\n         return true;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ExploitAssigns.java", 
          "line": 83, 
          "faulty": "return !isLValue || value.getFirstChild().getType() == Token.THIS;", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1452/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:37:33.431044357 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckGlobalNames.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1452/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckGlobalNames.java\t2018-12-02 07:37:33.431044357 -0500\n@@ -64,7 +64,6 @@\n    * can be re-used for multiple check passes. Returns this for easy chaining.\n    */\n   CheckGlobalNames injectNamespace(GlobalNamespace namespace) {\n-    this.namespace = namespace;\n     return this;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1452/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:37:33.435044535 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckGlobalNames.java", 
          "line": 67, 
          "faulty": "this.namespace=namespace;", 
          "type": "Delete", 
          "seed": "this.level=level;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1061/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:30:44.388870378 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1061/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:30:44.392870553 -0500\n@@ -68,8 +68,6 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n-            getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n             getWarningCount());\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1061/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:30:44.392870553 -0500\n@@ -1726,7 +1726,7 @@\n     private final List<Entry> entries = Lists.newArrayList();\n \n     protected void add(CheckLevel level, String groupName) {\n-      entries.add(new Entry(level, groupName));\n+      boolean valid = false;\n     }\n \n     protected void clear() {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CommandLineRunner.java\t2018-12-02 07:03:01.150376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1061/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CommandLineRunner.java\t2018-12-02 07:30:44.396870729 -0500\n@@ -438,7 +438,6 @@\n       @Override public Class getType() { return proxy.getType(); }\n \n       @Override public void addValue(Object value) throws CmdLineException {\n-        proxy.addValue((String) value);\n         warningGuardSpec.add(level, (String) value);\n       }\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CommandLineRunner.java", 
          "line": 441, 
          "faulty": "proxy.addValue((String)value);", 
          "type": "Delete", 
          "seed": "boolean valid=false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 1729, 
          "faulty": "entries.add(new Entry(level,groupName));", 
          "type": "Replace", 
          "seed": "boolean valid=false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_191/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:15:17.316796245 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_191/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:15:17.320796407 -0500\n@@ -1726,7 +1726,6 @@\n     private final List<Entry> entries = Lists.newArrayList();\n \n     protected void add(CheckLevel level, String groupName) {\n-      entries.add(new Entry(level, groupName));\n     }\n \n     protected void clear() {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 1729, 
          "faulty": "entries.add(new Entry(level,groupName));", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1091/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:31:15.986251281 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1091/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:31:15.990251456 -0500\n@@ -68,8 +68,6 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n-            getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n             getWarningCount());\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1091/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:31:15.990251456 -0500\n@@ -159,9 +159,7 @@\n \n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n-    if (returnType == null) {\n-      return null;\n-    }\n+    Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n     if (!isVoidOrUnknown(returnType)) {\n       return returnType;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 162, 
          "faulty": "if (returnType == null) {\n  return null;\n}", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1787/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:43:02.489756914 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1787/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:43:02.493757090 -0500\n@@ -72,11 +72,8 @@\n    * @param options The CompilerOptions object to set the options on.\n    */\n   private static void addVerboseWarnings(CompilerOptions options) {\n-    addDefaultWarnings(options);\n-\n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1787/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:43:02.493757090 -0500\n@@ -68,7 +68,8 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n+        int index = -1;\n+\t\tstream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n             getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1787/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:43:02.497757265 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1787/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:43:02.497757265 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CommandLineRunner.java\t2018-12-02 07:03:01.150376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1787/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CommandLineRunner.java\t2018-12-02 07:43:02.501757441 -0500\n@@ -439,7 +439,7 @@\n \n       @Override public void addValue(Object value) throws CmdLineException {\n         proxy.addValue((String) value);\n-        warningGuardSpec.add(level, (String) value);\n+        StringBuilder builder = new StringBuilder();\n       }\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 75, 
          "faulty": "addDefaultWarnings(options);", 
          "type": "Delete", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CommandLineRunner.java", 
          "line": 442, 
          "faulty": "warningGuardSpec.add(level,(String)value);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_706/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:24:25.804074577 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_706/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:24:25.804074577 -0500\n@@ -260,7 +260,7 @@\n     if (options.checkTypes &&\n         (options.enables(DiagnosticGroups.ACCESS_CONTROLS)\n          || options.enables(DiagnosticGroups.CONSTANT_PROPERTY))) {\n-      checks.add(checkAccessControls);\n+      int index = -1;\n     }\n \n     if (options.checkGlobalNamesLevel.isOn()) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java", 
          "line": 263, 
          "faulty": "checks.add(checkAccessControls);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1200/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:33:09.231151365 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1200/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:33:09.235151537 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1200/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:33:09.235151537 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1200/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:33:09.239151709 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_472/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:20:09.989238478 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_472/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:20:09.993238650 -0500\n@@ -1726,7 +1726,6 @@\n     private final List<Entry> entries = Lists.newArrayList();\n \n     protected void add(CheckLevel level, String groupName) {\n-      entries.add(new Entry(level, groupName));\n     }\n \n     protected void clear() {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_472/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:20:09.993238650 -0500\n@@ -260,7 +260,7 @@\n     if (options.checkTypes &&\n         (options.enables(DiagnosticGroups.ACCESS_CONTROLS)\n          || options.enables(DiagnosticGroups.CONSTANT_PROPERTY))) {\n-      checks.add(checkAccessControls);\n+      int index = -1;\n     }\n \n     if (options.checkGlobalNamesLevel.isOn()) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 1729, 
          "faulty": "entries.add(new Entry(level,groupName));", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java", 
          "line": 263, 
          "faulty": "checks.add(checkAccessControls);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1469/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:37:49.647763926 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1469/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:37:49.647763926 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1469/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:37:49.651764104 -0500\n@@ -68,7 +68,8 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n+        int index = -1;\n+\t\tstream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n             getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1469/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:37:49.651764104 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1469/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:37:49.655764280 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1469/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:37:49.655764280 -0500\n@@ -233,7 +233,6 @@\n     }\n \n     if (options.aggressiveVarCheck.isOn()) {\n-      checks.add(checkVariableReferences);\n     }\n \n     // This pass should run before types are assigned.\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CommandLineRunner.java\t2018-12-02 07:03:01.150376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1469/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CommandLineRunner.java\t2018-12-02 07:37:49.659764459 -0500\n@@ -438,7 +438,7 @@\n       @Override public Class getType() { return proxy.getType(); }\n \n       @Override public void addValue(Object value) throws CmdLineException {\n-        proxy.addValue((String) value);\n+        int index = -1;\n         warningGuardSpec.add(level, (String) value);\n       }\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java", 
          "line": 236, 
          "faulty": "checks.add(checkVariableReferences);", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CommandLineRunner.java", 
          "line": 441, 
          "faulty": "proxy.addValue((String)value);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1038/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:30:20.255810707 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1038/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:30:20.259810883 -0500\n@@ -68,8 +68,6 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n-            getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n             getWarningCount());\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1038/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:30:20.259810883 -0500\n@@ -176,7 +176,8 @@\n    *     with an empty body\n    */\n   private static boolean isEmptyFunction(Node function) {\n-    return function.getChildCount() == 3 &&\n+    Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n+\treturn function.getChildCount() == 3 &&\n            !function.getFirstChild().getNext().getNext().hasChildren();\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 179, 
          "faulty": "return function.getChildCount() == 3 && !function.getFirstChild().getNext().getNext().hasChildren();", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_545/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:21:24.812440026 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    boolean valid = false;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_545/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:21:24.812440026 -0500\n@@ -159,9 +159,7 @@\n \n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n-    if (returnType == null) {\n-      return null;\n-    }\n+    Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n     if (!isVoidOrUnknown(returnType)) {\n       return returnType;\n@@ -187,6 +185,7 @@\n   private boolean isVoidOrUnknown(JSType returnType) {\n     final JSType voidType =\n         compiler.getTypeRegistry().getNativeType(JSTypeNative.VOID_TYPE);\n-    return voidType.isSubtype(returnType);\n+    int start = 0;\n+\treturn voidType.isSubtype(returnType);\n   }\n }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 162, 
          "faulty": "if (returnType == null) {\n  return null;\n}", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "boolean valid=false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 190, 
          "faulty": "return voidType.isSubtype(returnType);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_239/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:16:10.394937816 -0500\n@@ -74,9 +74,7 @@\n   private static void addVerboseWarnings(CompilerOptions options) {\n     addDefaultWarnings(options);\n \n-    // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n-    options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_239/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:16:10.398937977 -0500\n@@ -260,7 +260,6 @@\n     if (options.checkTypes &&\n         (options.enables(DiagnosticGroups.ACCESS_CONTROLS)\n          || options.enables(DiagnosticGroups.CONSTANT_PROPERTY))) {\n-      checks.add(checkAccessControls);\n     }\n \n     if (options.checkGlobalNamesLevel.isOn()) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 78, 
          "faulty": "options.checkSuspiciousCode=true;", 
          "type": "Delete", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java", 
          "line": 263, 
          "faulty": "checks.add(checkAccessControls);", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1170/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:32:37.845799936 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1170/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:32:37.845799936 -0500\n@@ -76,7 +76,6 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1170/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:32:37.849800108 -0500\n@@ -68,7 +68,8 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n+        int index = -1;\n+\t\tstream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n             getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1170/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:32:37.849800108 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1170/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:32:37.849800108 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_912/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:28:05.685799491 -0500\n@@ -76,8 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n-    options.checkSymbols = true;\n+    StringBuilder builder = new StringBuilder();\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n     // checkTypes has the side-effect of asserting that the\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_912/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:28:05.689799672 -0500\n@@ -1726,7 +1726,6 @@\n     private final List<Entry> entries = Lists.newArrayList();\n \n     protected void add(CheckLevel level, String groupName) {\n-      entries.add(new Entry(level, groupName));\n     }\n \n     protected void clear() {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 1729, 
          "faulty": "entries.add(new Entry(level,groupName));", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 80, 
          "faulty": "options.checkSymbols=true;", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_931/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:28:24.694661203 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_931/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:28:24.694661203 -0500\n@@ -68,8 +68,6 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n-            getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n             getWarningCount());\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CommandLineRunner.java\t2018-12-02 07:03:01.150376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_931/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CommandLineRunner.java\t2018-12-02 07:28:24.698661383 -0500\n@@ -438,7 +438,6 @@\n       @Override public Class getType() { return proxy.getType(); }\n \n       @Override public void addValue(Object value) throws CmdLineException {\n-        proxy.addValue((String) value);\n         warningGuardSpec.add(level, (String) value);\n       }\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CommandLineRunner.java", 
          "line": 441, 
          "faulty": "proxy.addValue((String)value);", 
          "type": "Delete", 
          "seed": "boolean valid=false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1579/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:39:46.513044211 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1579/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:39:46.513044211 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1579/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:39:46.517044392 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_78/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:13:12.823802907 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DiagnosticGroups.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_78/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DiagnosticGroups.java\t2018-12-02 07:13:12.827803067 -0500\n@@ -204,7 +204,6 @@\n   void setWarningLevel(CompilerOptions options,\n       String name, CheckLevel level) {\n     DiagnosticGroup group = forName(name);\n-    Preconditions.checkNotNull(group, \"No warning class for name: \" + name);\n     options.setWarningLevel(group, level);\n   }\n }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DiagnosticGroups.java", 
          "line": 207, 
          "faulty": "Preconditions.checkNotNull(group,\"No warning class for name: \" + name);", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1482/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:38:03.340369985 -0500\n@@ -76,7 +76,6 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/ExploitAssigns.java\t2018-12-02 07:03:01.162376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1482/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/ExploitAssigns.java\t2018-12-02 07:38:03.344370162 -0500\n@@ -76,11 +76,7 @@\n   private boolean isCollapsibleValue(Node value, boolean isLValue) {\n     switch (value.getType()) {\n       case Token.GETPROP:\n-        // Do not collapse GETPROPs on arbitrary objects, because\n-        // they may be implemented  setter functions, and oftentimes\n-        // setter functions fail on native objects. This is ok for \"THIS\"\n-        // objects, because we assume that they are non-native.\n-        return !isLValue || value.getFirstChild().getType() == Token.THIS;\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.NAME:\n         return true;\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:03:03.286376056 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1482/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:38:03.344370162 -0500\n@@ -1097,9 +1097,6 @@\n           new SemanticReverseAbstractInterpreter(\n               getCodingConvention(), getTypeRegistry());\n       if (options.closurePass) {\n-        interpreter = new ClosureReverseAbstractInterpreter(\n-            getCodingConvention(), getTypeRegistry())\n-            .append(interpreter).getFirst();\n       }\n       abstractInterpreter = interpreter;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1482/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:38:03.348370339 -0500\n@@ -159,10 +159,6 @@\n \n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n-    if (returnType == null) {\n-      return null;\n-    }\n-\n     if (!isVoidOrUnknown(returnType)) {\n       return returnType;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DiagnosticGroups.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1482/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DiagnosticGroups.java\t2018-12-02 07:38:03.348370339 -0500\n@@ -205,6 +205,6 @@\n       String name, CheckLevel level) {\n     DiagnosticGroup group = forName(name);\n     Preconditions.checkNotNull(group, \"No warning class for name: \" + name);\n-    options.setWarningLevel(group, level);\n+    return;\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1482/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:38:03.348370339 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 162, 
          "faulty": "if (returnType == null) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/Compiler.java", 
          "line": 1100, 
          "faulty": "interpreter=new ClosureReverseAbstractInterpreter(getCodingConvention(),getTypeRegistry()).append(interpreter).getFirst();", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DiagnosticGroups.java", 
          "line": 208, 
          "faulty": "options.setWarningLevel(group,level);", 
          "type": "Replace", 
          "seed": "return;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ExploitAssigns.java", 
          "line": 83, 
          "faulty": "return !isLValue || value.getFirstChild().getType() == Token.THIS;", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1018/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:29:58.194837842 -0500\n@@ -285,12 +285,7 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n+            String sourceName = n.getSourceFileName();\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1018/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:29:58.198838017 -0500\n@@ -72,11 +72,11 @@\n    * @param options The CompilerOptions object to set the options on.\n    */\n   private static void addVerboseWarnings(CompilerOptions options) {\n-    addDefaultWarnings(options);\n+    int index = -1;\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1018/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:29:58.198838017 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 75, 
          "faulty": "addDefaultWarnings(options);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Replace", 
          "seed": "String sourceName=n.getSourceFileName();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1323/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:35:16.508871864 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1323/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:35:16.512872048 -0500\n@@ -76,7 +76,6 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:03:03.286376056 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1323/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:35:16.516872231 -0500\n@@ -1097,9 +1097,6 @@\n           new SemanticReverseAbstractInterpreter(\n               getCodingConvention(), getTypeRegistry());\n       if (options.closurePass) {\n-        interpreter = new ClosureReverseAbstractInterpreter(\n-            getCodingConvention(), getTypeRegistry())\n-            .append(interpreter).getFirst();\n       }\n       abstractInterpreter = interpreter;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1323/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:35:16.516872231 -0500\n@@ -153,16 +153,8 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n-    if (returnType == null) {\n-      return null;\n-    }\n-\n     if (!isVoidOrUnknown(returnType)) {\n       return returnType;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DiagnosticGroups.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1323/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DiagnosticGroups.java\t2018-12-02 07:35:16.516872231 -0500\n@@ -205,6 +205,6 @@\n       String name, CheckLevel level) {\n     DiagnosticGroup group = forName(name);\n     Preconditions.checkNotNull(group, \"No warning class for name: \" + name);\n-    options.setWarningLevel(group, level);\n+    return;\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1323/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:35:16.520872415 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n@@ -1726,7 +1725,6 @@\n     private final List<Entry> entries = Lists.newArrayList();\n \n     protected void add(CheckLevel level, String groupName) {\n-      entries.add(new Entry(level, groupName));\n     }\n \n     protected void clear() {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 1729, 
          "faulty": "entries.add(new Entry(level,groupName));", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 162, 
          "faulty": "if (returnType == null) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/Compiler.java", 
          "line": 1100, 
          "faulty": "interpreter=new ClosureReverseAbstractInterpreter(getCodingConvention(),getTypeRegistry()).append(interpreter).getFirst();", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DiagnosticGroups.java", 
          "line": 208, 
          "faulty": "options.setWarningLevel(group,level);", 
          "type": "Replace", 
          "seed": "return;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1462/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:37:44.735546170 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1462/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:37:44.735546170 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1462/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:37:44.739546348 -0500\n@@ -68,7 +68,8 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n+        int index = -1;\n+\t\tstream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n             getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1462/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:37:44.739546348 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "String sourceName=n.getSourceFileName();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_547/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:21:25.908486680 -0500\n@@ -39,7 +39,7 @@\n         addDefaultWarnings(options);\n         break;\n       case VERBOSE:\n-        addVerboseWarnings(options);\n+        int start = 0;\n         break;\n       default:\n         throw new RuntimeException(\"Unknown warning level.\");\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    boolean valid = false;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_547/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:21:25.908486680 -0500\n@@ -159,9 +159,7 @@\n \n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n-    if (returnType == null) {\n-      return null;\n-    }\n+    Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n     if (!isVoidOrUnknown(returnType)) {\n       return returnType;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 162, 
          "faulty": "if (returnType == null) {\n  return null;\n}", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "boolean valid=false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 42, 
          "faulty": "addVerboseWarnings(options);", 
          "type": "Replace", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1549/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:39:15.203622802 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1549/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:39:15.207622985 -0500\n@@ -72,11 +72,8 @@\n    * @param options The CompilerOptions object to set the options on.\n    */\n   private static void addVerboseWarnings(CompilerOptions options) {\n-    addDefaultWarnings(options);\n-\n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1549/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:39:15.207622985 -0500\n@@ -153,16 +153,8 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n-    if (returnType == null) {\n-      return null;\n-    }\n-\n     if (!isVoidOrUnknown(returnType)) {\n       return returnType;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1549/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:39:15.207622985 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 162, 
          "faulty": "if (returnType == null) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 75, 
          "faulty": "addDefaultWarnings(options);", 
          "type": "Delete", 
          "seed": "return this;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1574/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:39:41.628823154 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:03:03.286376056 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1574/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:39:41.632823336 -0500\n@@ -1097,9 +1097,6 @@\n           new SemanticReverseAbstractInterpreter(\n               getCodingConvention(), getTypeRegistry());\n       if (options.closurePass) {\n-        interpreter = new ClosureReverseAbstractInterpreter(\n-            getCodingConvention(), getTypeRegistry())\n-            .append(interpreter).getFirst();\n       }\n       abstractInterpreter = interpreter;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckGlobalNames.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1574/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckGlobalNames.java\t2018-12-02 07:39:41.632823336 -0500\n@@ -64,7 +64,6 @@\n    * can be re-used for multiple check passes. Returns this for easy chaining.\n    */\n   CheckGlobalNames injectNamespace(GlobalNamespace namespace) {\n-    this.namespace = namespace;\n     return this;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1574/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:39:41.636823517 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckGlobalNames.java", 
          "line": 67, 
          "faulty": "this.namespace=namespace;", 
          "type": "Delete", 
          "seed": "this.level=level;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/Compiler.java", 
          "line": 1100, 
          "faulty": "interpreter=new ClosureReverseAbstractInterpreter(getCodingConvention(),getTypeRegistry()).append(interpreter).getFirst();", 
          "type": "Delete", 
          "seed": "boolean valid=false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1527/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:38:51.850555403 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1527/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:38:51.854555586 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1527/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:38:51.854555586 -0500\n@@ -68,7 +68,8 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n+        int index = -1;\n+\t\tstream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n             getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1527/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:38:51.858555770 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1527/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:38:51.858555770 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CommandLineRunner.java\t2018-12-02 07:03:01.150376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1527/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CommandLineRunner.java\t2018-12-02 07:38:51.862555953 -0500\n@@ -438,7 +438,6 @@\n       @Override public Class getType() { return proxy.getType(); }\n \n       @Override public void addValue(Object value) throws CmdLineException {\n-        proxy.addValue((String) value);\n         warningGuardSpec.add(level, (String) value);\n       }\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CommandLineRunner.java", 
          "line": 441, 
          "faulty": "proxy.addValue((String)value);", 
          "type": "Delete", 
          "seed": "return 0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1820/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:43:30.074964970 -0500\n@@ -72,11 +72,7 @@\n    * @param options The CompilerOptions object to set the options on.\n    */\n   private static void addVerboseWarnings(CompilerOptions options) {\n-    addDefaultWarnings(options);\n-\n-    // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n-    options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java\t2018-12-02 07:03:01.150376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1820/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java\t2018-12-02 07:43:30.078965145 -0500\n@@ -192,7 +192,8 @@\n       Node assign = n.getFirstChild();\n       Node lhs = assign.getFirstChild();\n \n-      if (!NodeUtil.isName(lhs)) {\n+      int type = n.getType();\n+\tif (!NodeUtil.isName(lhs)) {\n         return false;\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1820/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:43:30.078965145 -0500\n@@ -264,7 +264,6 @@\n     }\n \n     if (options.checkGlobalNamesLevel.isOn()) {\n-      checks.add(checkGlobalNames);\n     }\n \n     checks.add(checkStrictMode);\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 75, 
          "faulty": "addDefaultWarnings(options);", 
          "type": "Delete", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 78, 
          "faulty": "options.checkSuspiciousCode=true;", 
          "type": "Delete", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java", 
          "line": 267, 
          "faulty": "checks.add(checkGlobalNames);", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseVariableDeclarations.java", 
          "line": 195, 
          "faulty": "if (!NodeUtil.isName(lhs)) {\n  return false;\n}", 
          "type": "InsertBefore", 
          "seed": "int type=n.getType();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1778/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:42:54.565409236 -0500\n@@ -74,9 +74,7 @@\n   private static void addVerboseWarnings(CompilerOptions options) {\n     addDefaultWarnings(options);\n \n-    // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n-    options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1778/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:42:54.565409236 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1778/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:42:54.569409412 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 78, 
          "faulty": "options.checkSuspiciousCode=true;", 
          "type": "Delete", 
          "seed": "return this;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1023/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:30:03.135056064 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1023/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:30:03.139056241 -0500\n@@ -72,11 +72,8 @@\n    * @param options The CompilerOptions object to set the options on.\n    */\n   private static void addVerboseWarnings(CompilerOptions options) {\n-    addDefaultWarnings(options);\n-\n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1023/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:30:03.139056241 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1023/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:30:03.143056418 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n@@ -1726,7 +1725,6 @@\n     private final List<Entry> entries = Lists.newArrayList();\n \n     protected void add(CheckLevel level, String groupName) {\n-      entries.add(new Entry(level, groupName));\n     }\n \n     protected void clear() {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 1729, 
          "faulty": "entries.add(new Entry(level,groupName));", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 75, 
          "faulty": "addDefaultWarnings(options);", 
          "type": "Delete", 
          "seed": "return this;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1596/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:40:04.677864262 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java\t2018-12-02 07:03:01.150376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1596/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java\t2018-12-02 07:40:04.677864262 -0500\n@@ -193,7 +193,6 @@\n       Node lhs = assign.getFirstChild();\n \n       if (!NodeUtil.isName(lhs)) {\n-        return false;\n       }\n \n       Var var = s.getVar(lhs.getString());\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:03:03.286376056 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1596/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:40:04.681864442 -0500\n@@ -1097,9 +1097,6 @@\n           new SemanticReverseAbstractInterpreter(\n               getCodingConvention(), getTypeRegistry());\n       if (options.closurePass) {\n-        interpreter = new ClosureReverseAbstractInterpreter(\n-            getCodingConvention(), getTypeRegistry())\n-            .append(interpreter).getFirst();\n       }\n       abstractInterpreter = interpreter;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1596/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:40:04.681864442 -0500\n@@ -68,7 +68,8 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n+        int index = -1;\n+\t\tstream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n             getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DiagnosticGroups.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1596/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DiagnosticGroups.java\t2018-12-02 07:40:04.681864442 -0500\n@@ -205,6 +205,6 @@\n       String name, CheckLevel level) {\n     DiagnosticGroup group = forName(name);\n     Preconditions.checkNotNull(group, \"No warning class for name: \" + name);\n-    options.setWarningLevel(group, level);\n+    return;\n   }\n }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/Compiler.java", 
          "line": 1100, 
          "faulty": "interpreter=new ClosureReverseAbstractInterpreter(getCodingConvention(),getTypeRegistry()).append(interpreter).getFirst();", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DiagnosticGroups.java", 
          "line": 208, 
          "faulty": "options.setWarningLevel(group,level);", 
          "type": "Replace", 
          "seed": "return;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseVariableDeclarations.java", 
          "line": 196, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1108/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:31:33.931032529 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1108/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:31:33.935032703 -0500\n@@ -76,7 +76,6 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1108/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:31:33.935032703 -0500\n@@ -68,7 +68,8 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n+        int index = -1;\n+\t\tstream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n             getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1108/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:31:33.939032877 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1108/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:31:33.939032877 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n@@ -1726,7 +1725,6 @@\n     private final List<Entry> entries = Lists.newArrayList();\n \n     protected void add(CheckLevel level, String groupName) {\n-      entries.add(new Entry(level, groupName));\n     }\n \n     protected void clear() {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 1729, 
          "faulty": "entries.add(new Entry(level,groupName));", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1183/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:32:51.014367508 -0500\n@@ -72,11 +72,8 @@\n    * @param options The CompilerOptions object to set the options on.\n    */\n   private static void addVerboseWarnings(CompilerOptions options) {\n-    addDefaultWarnings(options);\n-\n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1183/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:32:51.018367680 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n@@ -1726,7 +1725,6 @@\n     private final List<Entry> entries = Lists.newArrayList();\n \n     protected void add(CheckLevel level, String groupName) {\n-      entries.add(new Entry(level, groupName));\n     }\n \n     protected void clear() {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 1729, 
          "faulty": "entries.add(new Entry(level,groupName));", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 75, 
          "faulty": "addDefaultWarnings(options);", 
          "type": "Delete", 
          "seed": "return this;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_34/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:12:24.021860716 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_34/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:12:24.021860716 -0500\n@@ -159,7 +159,8 @@\n \n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n-    if (returnType == null) {\n+    int start = 0;\n+\tif (returnType == null) {\n       return null;\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 162, 
          "faulty": "if (returnType == null) {\n  return null;\n}", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1827/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:43:36.675253531 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1827/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:43:36.679253706 -0500\n@@ -72,11 +72,9 @@\n    * @param options The CompilerOptions object to set the options on.\n    */\n   private static void addVerboseWarnings(CompilerOptions options) {\n-    addDefaultWarnings(options);\n-\n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1827/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:43:36.679253706 -0500\n@@ -68,8 +68,6 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n-            getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n             getWarningCount());\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1827/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:43:36.679253706 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1827/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:43:36.683253881 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1827/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:43:36.683253881 -0500\n@@ -233,7 +233,6 @@\n     }\n \n     if (options.aggressiveVarCheck.isOn()) {\n-      checks.add(checkVariableReferences);\n     }\n \n     // This pass should run before types are assigned.\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java", 
          "line": 236, 
          "faulty": "checks.add(checkVariableReferences);", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 75, 
          "faulty": "addDefaultWarnings(options);", 
          "type": "Delete", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java", 
          "line": 236, 
          "faulty": "checks.add(checkVariableReferences);", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "Delete", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1600/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:40:08.470035062 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1600/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:40:08.474035242 -0500\n@@ -72,11 +72,9 @@\n    * @param options The CompilerOptions object to set the options on.\n    */\n   private static void addVerboseWarnings(CompilerOptions options) {\n-    addDefaultWarnings(options);\n-\n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1600/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:40:08.474035242 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1600/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:40:08.478035422 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 75, 
          "faulty": "addDefaultWarnings(options);", 
          "type": "Delete", 
          "seed": "return this;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_984/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:29:20.909183461 -0500\n@@ -76,8 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n-    options.checkSymbols = true;\n+    StringBuilder builder = new StringBuilder();\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n     // checkTypes has the side-effect of asserting that the\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 80, 
          "faulty": "options.checkSymbols=true;", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_661/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:23:35.169950589 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_661/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:23:35.173950758 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_661/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:23:35.173950758 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_787/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:25:53.115721946 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_787/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:25:53.119722114 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_787/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:25:53.119722114 -0500\n@@ -1726,7 +1726,6 @@\n     private final List<Entry> entries = Lists.newArrayList();\n \n     protected void add(CheckLevel level, String groupName) {\n-      entries.add(new Entry(level, groupName));\n     }\n \n     protected void clear() {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_787/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:25:53.123722280 -0500\n@@ -260,7 +260,7 @@\n     if (options.checkTypes &&\n         (options.enables(DiagnosticGroups.ACCESS_CONTROLS)\n          || options.enables(DiagnosticGroups.CONSTANT_PROPERTY))) {\n-      checks.add(checkAccessControls);\n+      int index = -1;\n     }\n \n     if (options.checkGlobalNamesLevel.isOn()) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 1729, 
          "faulty": "entries.add(new Entry(level,groupName));", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java", 
          "line": 263, 
          "faulty": "checks.add(checkAccessControls);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_918/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:28:11.518064396 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_918/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:28:11.518064396 -0500\n@@ -76,7 +76,6 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_918/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:28:11.522064577 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_918/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:28:11.522064577 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n@@ -1726,7 +1725,6 @@\n     private final List<Entry> entries = Lists.newArrayList();\n \n     protected void add(CheckLevel level, String groupName) {\n-      entries.add(new Entry(level, groupName));\n     }\n \n     protected void clear() {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 1729, 
          "faulty": "entries.add(new Entry(level,groupName));", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_379/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:18:34.185078626 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 935, 
          "faulty": "return null;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1784/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:42:59.817639709 -0500\n@@ -72,11 +72,8 @@\n    * @param options The CompilerOptions object to set the options on.\n    */\n   private static void addVerboseWarnings(CompilerOptions options) {\n-    addDefaultWarnings(options);\n-\n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1784/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:42:59.821639885 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1784/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:42:59.821639885 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 75, 
          "faulty": "addDefaultWarnings(options);", 
          "type": "Delete", 
          "seed": "return this;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1793/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:43:07.585980354 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1793/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:43:07.589980528 -0500\n@@ -68,7 +68,8 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n+        int index = -1;\n+\t\tstream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n             getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:03:03.286376056 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1793/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:43:07.589980528 -0500\n@@ -1097,9 +1097,7 @@\n           new SemanticReverseAbstractInterpreter(\n               getCodingConvention(), getTypeRegistry());\n       if (options.closurePass) {\n-        interpreter = new ClosureReverseAbstractInterpreter(\n-            getCodingConvention(), getTypeRegistry())\n-            .append(interpreter).getFirst();\n+        StringBuilder builder = new StringBuilder();\n       }\n       abstractInterpreter = interpreter;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1793/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:43:07.593980704 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1793/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:43:07.593980704 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1793/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:43:07.597980879 -0500\n@@ -233,7 +233,6 @@\n     }\n \n     if (options.aggressiveVarCheck.isOn()) {\n-      checks.add(checkVariableReferences);\n     }\n \n     // This pass should run before types are assigned.\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java", 
          "line": 236, 
          "faulty": "checks.add(checkVariableReferences);", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/Compiler.java", 
          "line": 1100, 
          "faulty": "interpreter=new ClosureReverseAbstractInterpreter(getCodingConvention(),getTypeRegistry()).append(interpreter).getFirst();", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_617/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:22:45.427856016 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_617/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:22:45.427856016 -0500\n@@ -159,7 +159,8 @@\n \n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n-    if (returnType == null) {\n+    Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n+\tif (returnType == null) {\n       return null;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckGlobalNames.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_617/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckGlobalNames.java\t2018-12-02 07:22:45.431856186 -0500\n@@ -64,7 +64,6 @@\n    * can be re-used for multiple check passes. Returns this for easy chaining.\n    */\n   CheckGlobalNames injectNamespace(GlobalNamespace namespace) {\n-    this.namespace = namespace;\n     return this;\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 162, 
          "faulty": "if (returnType == null) {\n  return null;\n}", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckGlobalNames.java", 
          "line": 67, 
          "faulty": "this.namespace=namespace;", 
          "type": "Delete", 
          "seed": "return this;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1674/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:41:16.569081398 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1674/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:41:16.569081398 -0500\n@@ -68,7 +68,8 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n+        int index = -1;\n+\t\tstream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n             getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1674/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:41:16.573081575 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1674/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:41:16.573081575 -0500\n@@ -233,7 +233,6 @@\n     }\n \n     if (options.aggressiveVarCheck.isOn()) {\n-      checks.add(checkVariableReferences);\n     }\n \n     // This pass should run before types are assigned.\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java", 
          "line": 236, 
          "faulty": "checks.add(checkVariableReferences);", 
          "type": "Delete", 
          "seed": "return;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1699/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:41:36.985987897 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1699/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:41:36.985987897 -0500\n@@ -76,7 +76,8 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    boolean valid = false;\n+\tStringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java\t2018-12-02 07:03:01.150376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1699/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java\t2018-12-02 07:41:36.989988073 -0500\n@@ -190,7 +190,8 @@\n         return false;\n       }\n       Node assign = n.getFirstChild();\n-      Node lhs = assign.getFirstChild();\n+      String sourceName = n.getSourceFileName();\n+\tNode lhs = assign.getFirstChild();\n \n       if (!NodeUtil.isName(lhs)) {\n         return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1699/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:41:36.989988073 -0500\n@@ -68,8 +68,6 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n-            getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n             getWarningCount());\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1699/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:41:36.993988251 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "InsertBefore", 
          "seed": "boolean valid=false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseVariableDeclarations.java", 
          "line": 193, 
          "faulty": "Node lhs=assign.getFirstChild();", 
          "type": "InsertBefore", 
          "seed": "String sourceName=n.getSourceFileName();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_299/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:17:14.413542945 -0500\n@@ -76,7 +76,6 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckGlobalThis.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_299/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckGlobalThis.java\t2018-12-02 07:17:14.417543124 -0500\n@@ -161,8 +161,6 @@\n \n   private boolean shouldReportThis(Node n, Node parent) {\n     if (assignLhsChild != null) {\n-      // Always report a THIS on the left side of an assign.\n-      return true;\n     }\n \n     // Also report a THIS with a property access.\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckGlobalThis.java", 
          "line": 165, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "switch (n.getType()) {\ncase Token.LABEL:\n  validateLabel(n);\nreturn;\ncase Token.BLOCK:\nvalidateBlock(n);\nreturn;\ncase Token.FUNCTION:\nvalidateFunctionStatement(n);\nreturn;\ncase Token.WITH:\nvalidateWith(n);\nreturn;\ncase Token.FOR:\nvalidateFor(n);\nreturn;\ncase Token.WHILE:\nvalidateWhile(n);\nreturn;\ncase Token.DO:\nvalidateDo(n);\nreturn;\ncase Token.SWITCH:\nvalidateSwitch(n);\nreturn;\ncase Token.IF:\nvalidateIf(n);\nreturn;\ncase Token.VAR:\nvalidateVar(n);\nreturn;\ncase Token.EXPR_RESULT:\nvalidateExprStmt(n);\nreturn;\ncase Token.RETURN:\nvalidateReturn(n);\nreturn;\ncase Token.THROW:\nvalidateThrow(n);\nreturn;\ncase Token.TRY:\nvalidateTry(n);\nreturn;\ncase Token.BREAK:\nvalidateBreak(n);\nreturn;\ncase Token.CONTINUE:\nvalidateContinue(n);\nreturn;\ncase Token.EMPTY:\nvalidateChildless(n);\nreturn;\ncase Token.DEBUGGER:\nvalidateChildless(n);\nreturn;\ndefault :\nviolation(\"Expected statement but was \" + Node.tokenToName(n.getType()) + \".\",n);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1718/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:41:58.426936931 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1718/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:41:58.430937107 -0500\n@@ -159,10 +159,6 @@\n \n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n-    if (returnType == null) {\n-      return null;\n-    }\n-\n     if (!isVoidOrUnknown(returnType)) {\n       return returnType;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1718/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:41:58.430937107 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 162, 
          "faulty": "if (returnType == null) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_748/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:25:12.786039300 -0500\n@@ -282,15 +282,6 @@\n               n.getLastChild(), output);\n             return;\n           } else if (NodeUtil.isGet(n.getFirstChild())) {\n-            // Treat all assignments to arguments as redefining the\n-            // parameters itself.\n-            Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_748/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:25:12.786039300 -0500\n@@ -76,7 +76,6 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 287, 
          "faulty": "Node obj=n.getFirstChild().getFirstChild();", 
          "type": "Delete", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1118/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:31:43.739458705 -0500\n@@ -281,17 +281,8 @@\n             addToDefIfLocal(name.getString(), conditional ? null : cfgNode,\n               n.getLastChild(), output);\n             return;\n-          } else if (NodeUtil.isGet(n.getFirstChild())) {\n-            // Treat all assignments to arguments as redefining the\n-            // parameters itself.\n-            Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n-          }\n+          } else\n+\t\t\t;\n         }\n \n         if (NodeUtil.isName(n) && \"arguments\".equals(n.getString())) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1118/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:31:43.743458879 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1118/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:31:43.743458879 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 284, 
          "faulty": "if (NodeUtil.isGet(n.getFirstChild())) {\n  Node obj=n.getFirstChild().getFirstChild();\n  if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n    escapeParameters(output);\n  }\n}", 
          "type": "Delete", 
          "seed": "boolean valid=false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1642/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:40:49.519875838 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:03:03.286376056 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1642/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:40:49.523876017 -0500\n@@ -1097,9 +1097,6 @@\n           new SemanticReverseAbstractInterpreter(\n               getCodingConvention(), getTypeRegistry());\n       if (options.closurePass) {\n-        interpreter = new ClosureReverseAbstractInterpreter(\n-            getCodingConvention(), getTypeRegistry())\n-            .append(interpreter).getFirst();\n       }\n       abstractInterpreter = interpreter;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CommandLineRunner.java\t2018-12-02 07:03:01.150376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1642/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CommandLineRunner.java\t2018-12-02 07:40:49.523876017 -0500\n@@ -438,7 +438,8 @@\n       @Override public Class getType() { return proxy.getType(); }\n \n       @Override public void addValue(Object value) throws CmdLineException {\n-        proxy.addValue((String) value);\n+        int index = -1;\n+\t\tproxy.addValue((String) value);\n         warningGuardSpec.add(level, (String) value);\n       }\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/Compiler.java", 
          "line": 1100, 
          "faulty": "interpreter=new ClosureReverseAbstractInterpreter(getCodingConvention(),getTypeRegistry()).append(interpreter).getFirst();", 
          "type": "Delete", 
          "seed": "boolean valid=false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CommandLineRunner.java", 
          "line": 441, 
          "faulty": "proxy.addValue((String)value);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1295/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:34:48.167566770 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1295/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:34:48.167566770 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1295/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:34:48.171566953 -0500\n@@ -68,7 +68,8 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n+        int index = -1;\n+\t\tstream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n             getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1295/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:34:48.171566953 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1295/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:34:48.171566953 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1545/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:39:11.575457391 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java\t2018-12-02 07:03:01.150376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1545/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java\t2018-12-02 07:39:11.575457391 -0500\n@@ -193,7 +193,6 @@\n       Node lhs = assign.getFirstChild();\n \n       if (!NodeUtil.isName(lhs)) {\n-        return false;\n       }\n \n       Var var = s.getVar(lhs.getString());\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1545/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:39:11.579457574 -0500\n@@ -68,7 +68,8 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n+        int index = -1;\n+\t\tstream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n             getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1545/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:39:11.579457574 -0500\n@@ -159,10 +159,6 @@\n \n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n-    if (returnType == null) {\n-      return null;\n-    }\n-\n     if (!isVoidOrUnknown(returnType)) {\n       return returnType;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1545/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:39:11.583457756 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 162, 
          "faulty": "if (returnType == null) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseVariableDeclarations.java", 
          "line": 196, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1585/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:39:51.645276233 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/ExploitAssigns.java\t2018-12-02 07:03:01.162376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1585/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/ExploitAssigns.java\t2018-12-02 07:39:51.645276233 -0500\n@@ -76,11 +76,7 @@\n   private boolean isCollapsibleValue(Node value, boolean isLValue) {\n     switch (value.getType()) {\n       case Token.GETPROP:\n-        // Do not collapse GETPROPs on arbitrary objects, because\n-        // they may be implemented  setter functions, and oftentimes\n-        // setter functions fail on native objects. This is ok for \"THIS\"\n-        // objects, because we assume that they are non-native.\n-        return !isLValue || value.getFirstChild().getType() == Token.THIS;\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.NAME:\n         return true;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ExploitAssigns.java", 
          "line": 83, 
          "faulty": "return !isLValue || value.getFirstChild().getType() == Token.THIS;", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1725/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:42:03.543162971 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1725/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:42:03.543162971 -0500\n@@ -72,11 +72,8 @@\n    * @param options The CompilerOptions object to set the options on.\n    */\n   private static void addVerboseWarnings(CompilerOptions options) {\n-    addDefaultWarnings(options);\n-\n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:03:03.286376056 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1725/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:42:03.547163148 -0500\n@@ -1097,9 +1097,6 @@\n           new SemanticReverseAbstractInterpreter(\n               getCodingConvention(), getTypeRegistry());\n       if (options.closurePass) {\n-        interpreter = new ClosureReverseAbstractInterpreter(\n-            getCodingConvention(), getTypeRegistry())\n-            .append(interpreter).getFirst();\n       }\n       abstractInterpreter = interpreter;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1725/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:42:03.547163148 -0500\n@@ -153,16 +153,8 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n-    if (returnType == null) {\n-      return null;\n-    }\n-\n     if (!isVoidOrUnknown(returnType)) {\n       return returnType;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DiagnosticGroups.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1725/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DiagnosticGroups.java\t2018-12-02 07:42:03.551163325 -0500\n@@ -205,6 +205,6 @@\n       String name, CheckLevel level) {\n     DiagnosticGroup group = forName(name);\n     Preconditions.checkNotNull(group, \"No warning class for name: \" + name);\n-    options.setWarningLevel(group, level);\n+    return;\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1725/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:42:03.551163325 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 162, 
          "faulty": "if (returnType == null) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/Compiler.java", 
          "line": 1100, 
          "faulty": "interpreter=new ClosureReverseAbstractInterpreter(getCodingConvention(),getTypeRegistry()).append(interpreter).getFirst();", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DiagnosticGroups.java", 
          "line": 208, 
          "faulty": "options.setWarningLevel(group,level);", 
          "type": "Replace", 
          "seed": "return;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 75, 
          "faulty": "addDefaultWarnings(options);", 
          "type": "Delete", 
          "seed": "return this;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_227/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:15:57.078399959 -0500\n@@ -76,8 +76,9 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n-    options.checkSymbols = true;\n+    StringBuilder builder = new StringBuilder();\n+    boolean valid = false;\n+\toptions.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n     // checkTypes has the side-effect of asserting that the\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 80, 
          "faulty": "options.checkSymbols=true;", 
          "type": "InsertBefore", 
          "seed": "boolean valid=false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1659/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:41:04.664551495 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1659/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:41:04.668551672 -0500\n@@ -72,11 +72,8 @@\n    * @param options The CompilerOptions object to set the options on.\n    */\n   private static void addVerboseWarnings(CompilerOptions options) {\n-    addDefaultWarnings(options);\n-\n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1659/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:41:04.668551672 -0500\n@@ -68,7 +68,8 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n+        int index = -1;\n+\t\tstream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n             getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1659/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:41:04.668551672 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckGlobalNames.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1659/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckGlobalNames.java\t2018-12-02 07:41:04.672551851 -0500\n@@ -65,7 +65,7 @@\n    */\n   CheckGlobalNames injectNamespace(GlobalNamespace namespace) {\n     this.namespace = namespace;\n-    return this;\n+    return null;\n   }\n \n   public void process(Node externs, Node root) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1659/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:41:04.672551851 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n@@ -1726,7 +1725,6 @@\n     private final List<Entry> entries = Lists.newArrayList();\n \n     protected void add(CheckLevel level, String groupName) {\n-      entries.add(new Entry(level, groupName));\n     }\n \n     protected void clear() {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 1729, 
          "faulty": "entries.add(new Entry(level,groupName));", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 75, 
          "faulty": "addDefaultWarnings(options);", 
          "type": "Delete", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckGlobalNames.java", 
          "line": 68, 
          "faulty": "return this;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_610/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:22:38.387558823 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_610/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:22:38.391558992 -0500\n@@ -76,7 +76,6 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1262/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:34:11.049839128 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1262/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:34:11.053839316 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1262/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:34:11.053839316 -0500\n@@ -68,8 +68,6 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n-            getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n             getWarningCount());\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1262/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:34:11.053839316 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1262/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:34:11.057839504 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n@@ -1726,7 +1725,6 @@\n     private final List<Entry> entries = Lists.newArrayList();\n \n     protected void add(CheckLevel level, String groupName) {\n-      entries.add(new Entry(level, groupName));\n     }\n \n     protected void clear() {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 1729, 
          "faulty": "entries.add(new Entry(level,groupName));", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "violation(\"Expected expression but was \" + Node.tokenToName(n.getType()),n);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_323/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:17:36.958550233 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckGlobalThis.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_323/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckGlobalThis.java\t2018-12-02 07:17:36.958550233 -0500\n@@ -161,8 +161,6 @@\n \n   private boolean shouldReportThis(Node n, Node parent) {\n     if (assignLhsChild != null) {\n-      // Always report a THIS on the left side of an assign.\n-      return true;\n     }\n \n     // Also report a THIS with a property access.\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckGlobalThis.java", 
          "line": 165, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "switch (n.getType()) {\ncase Token.LABEL:\n  validateLabel(n);\nreturn;\ncase Token.BLOCK:\nvalidateBlock(n);\nreturn;\ncase Token.FUNCTION:\nvalidateFunctionStatement(n);\nreturn;\ncase Token.WITH:\nvalidateWith(n);\nreturn;\ncase Token.FOR:\nvalidateFor(n);\nreturn;\ncase Token.WHILE:\nvalidateWhile(n);\nreturn;\ncase Token.DO:\nvalidateDo(n);\nreturn;\ncase Token.SWITCH:\nvalidateSwitch(n);\nreturn;\ncase Token.IF:\nvalidateIf(n);\nreturn;\ncase Token.VAR:\nvalidateVar(n);\nreturn;\ncase Token.EXPR_RESULT:\nvalidateExprStmt(n);\nreturn;\ncase Token.RETURN:\nvalidateReturn(n);\nreturn;\ncase Token.THROW:\nvalidateThrow(n);\nreturn;\ncase Token.TRY:\nvalidateTry(n);\nreturn;\ncase Token.BREAK:\nvalidateBreak(n);\nreturn;\ncase Token.CONTINUE:\nvalidateContinue(n);\nreturn;\ncase Token.EMPTY:\nvalidateChildless(n);\nreturn;\ncase Token.DEBUGGER:\nvalidateChildless(n);\nreturn;\ndefault :\nviolation(\"Expected statement but was \" + Node.tokenToName(n.getType()) + \".\",n);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_271/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:16:44.668323681 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_271/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:16:44.672323844 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return 0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1496/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:38:17.052975620 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1496/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:38:17.056975796 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1496/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:38:17.056975796 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckGlobalNames.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1496/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckGlobalNames.java\t2018-12-02 07:38:17.056975796 -0500\n@@ -64,7 +64,6 @@\n    * can be re-used for multiple check passes. Returns this for easy chaining.\n    */\n   CheckGlobalNames injectNamespace(GlobalNamespace namespace) {\n-    this.namespace = namespace;\n     return this;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1496/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:38:17.060975974 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckGlobalNames.java", 
          "line": 67, 
          "faulty": "this.namespace=namespace;", 
          "type": "Delete", 
          "seed": "this.level=level;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1688/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:41:27.785579753 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1688/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:41:27.789579931 -0500\n@@ -68,7 +68,8 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n+        int index = -1;\n+\t\tstream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n             getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:03:03.286376056 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1688/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:41:27.789579931 -0500\n@@ -1097,9 +1097,6 @@\n           new SemanticReverseAbstractInterpreter(\n               getCodingConvention(), getTypeRegistry());\n       if (options.closurePass) {\n-        interpreter = new ClosureReverseAbstractInterpreter(\n-            getCodingConvention(), getTypeRegistry())\n-            .append(interpreter).getFirst();\n       }\n       abstractInterpreter = interpreter;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1688/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:41:27.793580109 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckGlobalNames.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1688/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckGlobalNames.java\t2018-12-02 07:41:27.793580109 -0500\n@@ -64,7 +64,6 @@\n    * can be re-used for multiple check passes. Returns this for easy chaining.\n    */\n   CheckGlobalNames injectNamespace(GlobalNamespace namespace) {\n-    this.namespace = namespace;\n     return this;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1688/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:41:27.797580286 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckGlobalNames.java", 
          "line": 67, 
          "faulty": "this.namespace=namespace;", 
          "type": "Delete", 
          "seed": "this.level=level;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/Compiler.java", 
          "line": 1100, 
          "faulty": "interpreter=new ClosureReverseAbstractInterpreter(getCodingConvention(),getTypeRegistry()).append(interpreter).getFirst();", 
          "type": "Delete", 
          "seed": "boolean valid=false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_926/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:28:19.794439525 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_926/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:28:19.798439706 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_926/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:28:19.798439706 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DiagnosticGroups.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_926/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DiagnosticGroups.java\t2018-12-02 07:28:19.798439706 -0500\n@@ -204,7 +204,6 @@\n   void setWarningLevel(CompilerOptions options,\n       String name, CheckLevel level) {\n     DiagnosticGroup group = forName(name);\n-    Preconditions.checkNotNull(group, \"No warning class for name: \" + name);\n     options.setWarningLevel(group, level);\n   }\n }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DiagnosticGroups.java", 
          "line": 207, 
          "faulty": "Preconditions.checkNotNull(group,\"No warning class for name: \" + name);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1650/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:40:56.132171052 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1650/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:40:56.136171231 -0500\n@@ -68,7 +68,8 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n+        int index = -1;\n+\t\tstream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n             getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckGlobalNames.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1650/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckGlobalNames.java\t2018-12-02 07:40:56.136171231 -0500\n@@ -64,7 +64,6 @@\n    * can be re-used for multiple check passes. Returns this for easy chaining.\n    */\n   CheckGlobalNames injectNamespace(GlobalNamespace namespace) {\n-    this.namespace = namespace;\n     return this;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1650/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:40:56.140171408 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1650/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:40:56.140171408 -0500\n@@ -233,7 +233,6 @@\n     }\n \n     if (options.aggressiveVarCheck.isOn()) {\n-      checks.add(checkVariableReferences);\n     }\n \n     // This pass should run before types are assigned.\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckGlobalNames.java", 
          "line": 67, 
          "faulty": "this.namespace=namespace;", 
          "type": "Delete", 
          "seed": "this.level=level;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java", 
          "line": 236, 
          "faulty": "checks.add(checkVariableReferences);", 
          "type": "Delete", 
          "seed": "return;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1804/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:43:17.598418994 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1804/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:43:17.598418994 -0500\n@@ -39,7 +39,7 @@\n         addDefaultWarnings(options);\n         break;\n       case VERBOSE:\n-        addVerboseWarnings(options);\n+        ;\n         break;\n       default:\n         throw new RuntimeException(\"Unknown warning level.\");\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1804/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:43:17.602419169 -0500\n@@ -68,7 +68,8 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n+        int index = -1;\n+\t\tstream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n             getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1804/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:43:17.602419169 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1804/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:43:17.606419344 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 42, 
          "faulty": "addVerboseWarnings(options);", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1532/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:38:57.130797321 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1532/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:38:57.130797321 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1532/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:38:57.134797504 -0500\n@@ -68,8 +68,6 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n-            getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n             getWarningCount());\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1532/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:38:57.134797504 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1532/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:38:57.138797688 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1532/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:38:57.138797688 -0500\n@@ -233,7 +233,7 @@\n     }\n \n     if (options.aggressiveVarCheck.isOn()) {\n-      checks.add(checkVariableReferences);\n+      int start = 0;\n     }\n \n     // This pass should run before types are assigned.\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java", 
          "line": 236, 
          "faulty": "checks.add(checkVariableReferences);", 
          "type": "Replace", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1669/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:41:12.228888323 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1669/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:41:12.228888323 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:03:03.286376056 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1669/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:41:12.232888501 -0500\n@@ -1097,9 +1097,6 @@\n           new SemanticReverseAbstractInterpreter(\n               getCodingConvention(), getTypeRegistry());\n       if (options.closurePass) {\n-        interpreter = new ClosureReverseAbstractInterpreter(\n-            getCodingConvention(), getTypeRegistry())\n-            .append(interpreter).getFirst();\n       }\n       abstractInterpreter = interpreter;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1669/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:41:12.232888501 -0500\n@@ -68,7 +68,8 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n+        int index = -1;\n+\t\tstream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n             getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1669/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:41:12.236888679 -0500\n@@ -153,16 +153,8 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n-    if (returnType == null) {\n-      return null;\n-    }\n-\n     if (!isVoidOrUnknown(returnType)) {\n       return returnType;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DiagnosticGroups.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1669/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DiagnosticGroups.java\t2018-12-02 07:41:12.236888679 -0500\n@@ -205,6 +205,6 @@\n       String name, CheckLevel level) {\n     DiagnosticGroup group = forName(name);\n     Preconditions.checkNotNull(group, \"No warning class for name: \" + name);\n-    options.setWarningLevel(group, level);\n+    return;\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1669/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:41:12.236888679 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1669/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:41:12.240888856 -0500\n@@ -233,7 +233,6 @@\n     }\n \n     if (options.aggressiveVarCheck.isOn()) {\n-      checks.add(checkVariableReferences);\n     }\n \n     // This pass should run before types are assigned.\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 162, 
          "faulty": "if (returnType == null) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/Compiler.java", 
          "line": 1100, 
          "faulty": "interpreter=new ClosureReverseAbstractInterpreter(getCodingConvention(),getTypeRegistry()).append(interpreter).getFirst();", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DiagnosticGroups.java", 
          "line": 208, 
          "faulty": "options.setWarningLevel(group,level);", 
          "type": "Replace", 
          "seed": "return;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java", 
          "line": 236, 
          "faulty": "checks.add(checkVariableReferences);", 
          "type": "Delete", 
          "seed": "return;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_302/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:17:16.725646569 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_302/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:17:16.725646569 -0500\n@@ -76,7 +76,6 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_883/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:27:35.104402453 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ExploitAssigns.java", 
          "line": 198, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1043/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:30:24.944016925 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1043/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:30:24.948017100 -0500\n@@ -76,8 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n-    options.checkSymbols = true;\n+    StringBuilder builder = new StringBuilder();\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n     // checkTypes has the side-effect of asserting that the\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1043/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:30:24.948017100 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 80, 
          "faulty": "options.checkSymbols=true;", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1691/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:41:30.185686280 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1691/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:41:30.185686280 -0500\n@@ -76,7 +76,8 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    boolean valid = false;\n+\tStringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java\t2018-12-02 07:03:01.150376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1691/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java\t2018-12-02 07:41:30.189686458 -0500\n@@ -190,7 +190,8 @@\n         return false;\n       }\n       Node assign = n.getFirstChild();\n-      Node lhs = assign.getFirstChild();\n+      String sourceName = n.getSourceFileName();\n+\tNode lhs = assign.getFirstChild();\n \n       if (!NodeUtil.isName(lhs)) {\n         return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1691/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:41:30.189686458 -0500\n@@ -68,8 +68,6 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n-            getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n             getWarningCount());\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1691/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:41:30.189686458 -0500\n@@ -153,16 +153,8 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n-    if (returnType == null) {\n-      return null;\n-    }\n-\n     if (!isVoidOrUnknown(returnType)) {\n       return returnType;\n     }\n@@ -187,6 +179,7 @@\n   private boolean isVoidOrUnknown(JSType returnType) {\n     final JSType voidType =\n         compiler.getTypeRegistry().getNativeType(JSTypeNative.VOID_TYPE);\n-    return voidType.isSubtype(returnType);\n+    Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n+\treturn voidType.isSubtype(returnType);\n   }\n }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 162, 
          "faulty": "if (returnType == null) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "InsertBefore", 
          "seed": "boolean valid=false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseVariableDeclarations.java", 
          "line": 193, 
          "faulty": "Node lhs=assign.getFirstChild();", 
          "type": "InsertBefore", 
          "seed": "String sourceName=n.getSourceFileName();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 190, 
          "faulty": "return voidType.isSubtype(returnType);", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1350/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:35:47.522287725 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1350/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:35:47.526287907 -0500\n@@ -72,11 +72,8 @@\n    * @param options The CompilerOptions object to set the options on.\n    */\n   private static void addVerboseWarnings(CompilerOptions options) {\n-    addDefaultWarnings(options);\n-\n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1350/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:35:47.526287907 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1350/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:35:47.530288089 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1350/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:35:47.530288089 -0500\n@@ -260,7 +260,8 @@\n     if (options.checkTypes &&\n         (options.enables(DiagnosticGroups.ACCESS_CONTROLS)\n          || options.enables(DiagnosticGroups.CONSTANT_PROPERTY))) {\n-      checks.add(checkAccessControls);\n+      boolean valid = false;\n+\tchecks.add(checkAccessControls);\n     }\n \n     if (options.checkGlobalNamesLevel.isOn()) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CommandLineRunner.java\t2018-12-02 07:03:01.150376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1350/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CommandLineRunner.java\t2018-12-02 07:35:47.534288270 -0500\n@@ -438,7 +438,6 @@\n       @Override public Class getType() { return proxy.getType(); }\n \n       @Override public void addValue(Object value) throws CmdLineException {\n-        proxy.addValue((String) value);\n         warningGuardSpec.add(level, (String) value);\n       }\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 75, 
          "faulty": "addDefaultWarnings(options);", 
          "type": "Delete", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java", 
          "line": 263, 
          "faulty": "checks.add(checkAccessControls);", 
          "type": "InsertBefore", 
          "seed": "boolean valid=false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CommandLineRunner.java", 
          "line": 441, 
          "faulty": "proxy.addValue((String)value);", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1464/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:37:45.939599563 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1464/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:37:45.943599739 -0500\n@@ -68,7 +68,8 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n+        int index = -1;\n+\t\tstream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n             getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1464/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:37:45.943599739 -0500\n@@ -153,7 +153,8 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n+    int start = 0;\n+\tif (isEmptyFunction(scope)) {\n       return null;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1464/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:37:45.947599917 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1723/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:42:02.279107139 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1723/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:42:02.283107316 -0500\n@@ -72,11 +72,8 @@\n    * @param options The CompilerOptions object to set the options on.\n    */\n   private static void addVerboseWarnings(CompilerOptions options) {\n-    addDefaultWarnings(options);\n-\n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1723/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:42:02.283107316 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1723/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:42:02.283107316 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CommandLineRunner.java\t2018-12-02 07:03:01.150376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1723/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CommandLineRunner.java\t2018-12-02 07:42:02.287107493 -0500\n@@ -439,7 +439,7 @@\n \n       @Override public void addValue(Object value) throws CmdLineException {\n         proxy.addValue((String) value);\n-        warningGuardSpec.add(level, (String) value);\n+        StringBuilder builder = new StringBuilder();\n       }\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 75, 
          "faulty": "addDefaultWarnings(options);", 
          "type": "Delete", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CommandLineRunner.java", 
          "line": 442, 
          "faulty": "warningGuardSpec.add(level,(String)value);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_98/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:13:35.572711574 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_98/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:13:35.576711735 -0500\n@@ -68,8 +68,6 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n-            getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n             getWarningCount());\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "Delete", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_513/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:20:50.986996963 -0500\n@@ -76,7 +76,6 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_513/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:20:50.990997134 -0500\n@@ -260,7 +260,7 @@\n     if (options.checkTypes &&\n         (options.enables(DiagnosticGroups.ACCESS_CONTROLS)\n          || options.enables(DiagnosticGroups.CONSTANT_PROPERTY))) {\n-      checks.add(checkAccessControls);\n+      int index = -1;\n     }\n \n     if (options.checkGlobalNamesLevel.isOn()) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java", 
          "line": 263, 
          "faulty": "checks.add(checkAccessControls);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_477/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:20:14.649438933 -0500\n@@ -281,17 +281,8 @@\n             addToDefIfLocal(name.getString(), conditional ? null : cfgNode,\n               n.getLastChild(), output);\n             return;\n-          } else if (NodeUtil.isGet(n.getFirstChild())) {\n-            // Treat all assignments to arguments as redefining the\n-            // parameters itself.\n-            Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n-          }\n+          } else\n+\t\t\t;\n         }\n \n         if (NodeUtil.isName(n) && \"arguments\".equals(n.getString())) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_477/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:20:14.653439105 -0500\n@@ -76,7 +76,6 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_477/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:20:14.657439277 -0500\n@@ -159,7 +159,8 @@\n \n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n-    if (returnType == null) {\n+    Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n+\tif (returnType == null) {\n       return null;\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 284, 
          "faulty": "if (NodeUtil.isGet(n.getFirstChild())) {\n  Node obj=n.getFirstChild().getFirstChild();\n  if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n    escapeParameters(output);\n  }\n}", 
          "type": "Delete", 
          "seed": "if (!n.getBooleanProp(Node.SYNTHETIC_BLOCK_PROP)) {\n  violation(\"Missing 'synthetic block' annotation.\",n);\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 162, 
          "faulty": "if (returnType == null) {\n  return null;\n}", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1257/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:34:07.109654393 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1257/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:34:07.113654580 -0500\n@@ -68,8 +68,6 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n-            getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n             getWarningCount());\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1257/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:34:07.113654580 -0500\n@@ -153,9 +153,7 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n+    int start = 0;\n \n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1232/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:33:41.244525534 -0500\n@@ -281,17 +281,8 @@\n             addToDefIfLocal(name.getString(), conditional ? null : cfgNode,\n               n.getLastChild(), output);\n             return;\n-          } else if (NodeUtil.isGet(n.getFirstChild())) {\n-            // Treat all assignments to arguments as redefining the\n-            // parameters itself.\n-            Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n-          }\n+          } else\n+\t\t\t;\n         }\n \n         if (NodeUtil.isName(n) && \"arguments\".equals(n.getString())) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1232/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:33:41.248525705 -0500\n@@ -76,7 +76,6 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1232/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:33:41.248525705 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 284, 
          "faulty": "if (NodeUtil.isGet(n.getFirstChild())) {\n  Node obj=n.getFirstChild().getFirstChild();\n  if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n    escapeParameters(output);\n  }\n}", 
          "type": "Delete", 
          "seed": "violation(\"Expected expression but was \" + Node.tokenToName(n.getType()),n);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1672/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:41:15.089015572 -0500\n@@ -281,17 +281,8 @@\n             addToDefIfLocal(name.getString(), conditional ? null : cfgNode,\n               n.getLastChild(), output);\n             return;\n-          } else if (NodeUtil.isGet(n.getFirstChild())) {\n-            // Treat all assignments to arguments as redefining the\n-            // parameters itself.\n-            Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n-          }\n+          } else\n+\t\t\t;\n         }\n \n         if (NodeUtil.isName(n) && \"arguments\".equals(n.getString())) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1672/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:41:15.093015750 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1672/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:41:15.093015750 -0500\n@@ -68,7 +68,8 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n+        int index = -1;\n+\t\tstream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n             getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:03:03.286376056 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1672/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:41:15.097015927 -0500\n@@ -1097,9 +1097,7 @@\n           new SemanticReverseAbstractInterpreter(\n               getCodingConvention(), getTypeRegistry());\n       if (options.closurePass) {\n-        interpreter = new ClosureReverseAbstractInterpreter(\n-            getCodingConvention(), getTypeRegistry())\n-            .append(interpreter).getFirst();\n+        StringBuilder builder = new StringBuilder();\n       }\n       abstractInterpreter = interpreter;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckGlobalNames.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1672/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckGlobalNames.java\t2018-12-02 07:41:15.097015927 -0500\n@@ -64,7 +64,6 @@\n    * can be re-used for multiple check passes. Returns this for easy chaining.\n    */\n   CheckGlobalNames injectNamespace(GlobalNamespace namespace) {\n-    this.namespace = namespace;\n     return this;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1672/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:41:15.101016106 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1672/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:41:15.101016106 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1672/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:41:15.105016284 -0500\n@@ -233,7 +233,6 @@\n     }\n \n     if (options.aggressiveVarCheck.isOn()) {\n-      checks.add(checkVariableReferences);\n     }\n \n     // This pass should run before types are assigned.\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckGlobalNames.java", 
          "line": 67, 
          "faulty": "this.namespace=namespace;", 
          "type": "Delete", 
          "seed": "this.level=level;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java", 
          "line": 236, 
          "faulty": "checks.add(checkVariableReferences);", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/Compiler.java", 
          "line": 1100, 
          "faulty": "interpreter=new ClosureReverseAbstractInterpreter(getCodingConvention(),getTypeRegistry()).append(interpreter).getFirst();", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 284, 
          "faulty": "if (NodeUtil.isGet(n.getFirstChild())) {\n  Node obj=n.getFirstChild().getFirstChild();\n  if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n    escapeParameters(output);\n  }\n}", 
          "type": "Delete", 
          "seed": "switch (n.getType()) {\ncase Token.LABEL:\n  validateLabel(n);\nreturn;\ncase Token.BLOCK:\nvalidateBlock(n);\nreturn;\ncase Token.FUNCTION:\nvalidateFunctionStatement(n);\nreturn;\ncase Token.WITH:\nvalidateWith(n);\nreturn;\ncase Token.FOR:\nvalidateFor(n);\nreturn;\ncase Token.WHILE:\nvalidateWhile(n);\nreturn;\ncase Token.DO:\nvalidateDo(n);\nreturn;\ncase Token.SWITCH:\nvalidateSwitch(n);\nreturn;\ncase Token.IF:\nvalidateIf(n);\nreturn;\ncase Token.VAR:\nvalidateVar(n);\nreturn;\ncase Token.EXPR_RESULT:\nvalidateExprStmt(n);\nreturn;\ncase Token.RETURN:\nvalidateReturn(n);\nreturn;\ncase Token.THROW:\nvalidateThrow(n);\nreturn;\ncase Token.TRY:\nvalidateTry(n);\nreturn;\ncase Token.BREAK:\nvalidateBreak(n);\nreturn;\ncase Token.CONTINUE:\nvalidateContinue(n);\nreturn;\ncase Token.EMPTY:\nvalidateChildless(n);\nreturn;\ncase Token.DEBUGGER:\nvalidateChildless(n);\nreturn;\ndefault :\nviolation(\"Expected statement but was \" + Node.tokenToName(n.getType()) + \".\",n);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1444/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:37:25.842706949 -0500\n@@ -76,7 +76,6 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:03:03.286376056 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1444/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:37:25.846707127 -0500\n@@ -1097,9 +1097,6 @@\n           new SemanticReverseAbstractInterpreter(\n               getCodingConvention(), getTypeRegistry());\n       if (options.closurePass) {\n-        interpreter = new ClosureReverseAbstractInterpreter(\n-            getCodingConvention(), getTypeRegistry())\n-            .append(interpreter).getFirst();\n       }\n       abstractInterpreter = interpreter;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1444/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:37:25.846707127 -0500\n@@ -159,10 +159,6 @@\n \n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n-    if (returnType == null) {\n-      return null;\n-    }\n-\n     if (!isVoidOrUnknown(returnType)) {\n       return returnType;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DiagnosticGroups.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1444/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DiagnosticGroups.java\t2018-12-02 07:37:25.846707127 -0500\n@@ -205,6 +205,6 @@\n       String name, CheckLevel level) {\n     DiagnosticGroup group = forName(name);\n     Preconditions.checkNotNull(group, \"No warning class for name: \" + name);\n-    options.setWarningLevel(group, level);\n+    return;\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1444/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:37:25.850707304 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 162, 
          "faulty": "if (returnType == null) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/Compiler.java", 
          "line": 1100, 
          "faulty": "interpreter=new ClosureReverseAbstractInterpreter(getCodingConvention(),getTypeRegistry()).append(interpreter).getFirst();", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DiagnosticGroups.java", 
          "line": 208, 
          "faulty": "options.setWarningLevel(group,level);", 
          "type": "Replace", 
          "seed": "return;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_714/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:24:33.208384575 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_714/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:24:33.208384575 -0500\n@@ -260,7 +260,7 @@\n     if (options.checkTypes &&\n         (options.enables(DiagnosticGroups.ACCESS_CONTROLS)\n          || options.enables(DiagnosticGroups.CONSTANT_PROPERTY))) {\n-      checks.add(checkAccessControls);\n+      int index = -1;\n     }\n \n     if (options.checkGlobalNamesLevel.isOn()) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java", 
          "line": 263, 
          "faulty": "checks.add(checkAccessControls);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_493/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:20:30.506119877 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    boolean valid = false;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_493/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:20:30.510120049 -0500\n@@ -159,9 +159,7 @@\n \n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n-    if (returnType == null) {\n-      return null;\n-    }\n+    Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n     if (!isVoidOrUnknown(returnType)) {\n       return returnType;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 162, 
          "faulty": "if (returnType == null) {\n  return null;\n}", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "boolean valid=false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_510/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:20:48.306882338 -0500\n@@ -76,7 +76,6 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_510/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:20:48.310882509 -0500\n@@ -1726,7 +1726,6 @@\n     private final List<Entry> entries = Lists.newArrayList();\n \n     protected void add(CheckLevel level, String groupName) {\n-      entries.add(new Entry(level, groupName));\n     }\n \n     protected void clear() {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_510/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:20:48.314882680 -0500\n@@ -260,7 +260,7 @@\n     if (options.checkTypes &&\n         (options.enables(DiagnosticGroups.ACCESS_CONTROLS)\n          || options.enables(DiagnosticGroups.CONSTANT_PROPERTY))) {\n-      checks.add(checkAccessControls);\n+      int index = -1;\n     }\n \n     if (options.checkGlobalNamesLevel.isOn()) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 1729, 
          "faulty": "entries.add(new Entry(level,groupName));", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java", 
          "line": 263, 
          "faulty": "checks.add(checkAccessControls);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1521/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:38:46.442307260 -0500\n@@ -76,7 +76,6 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java\t2018-12-02 07:03:01.150376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1521/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java\t2018-12-02 07:38:46.442307260 -0500\n@@ -193,7 +193,6 @@\n       Node lhs = assign.getFirstChild();\n \n       if (!NodeUtil.isName(lhs)) {\n-        return false;\n       }\n \n       Var var = s.getVar(lhs.getString());\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1521/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:38:46.446307443 -0500\n@@ -68,7 +68,8 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n+        int index = -1;\n+\t\tstream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n             getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1521/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:38:46.446307443 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseVariableDeclarations.java", 
          "line": 196, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_179/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:15:04.624285094 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_179/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:15:04.628285254 -0500\n@@ -163,10 +163,6 @@\n       return null;\n     }\n \n-    if (!isVoidOrUnknown(returnType)) {\n-      return returnType;\n-    }\n-\n     return null;\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 166, 
          "faulty": "if (!isVoidOrUnknown(returnType)) {\n  return returnType;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1503/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:38:24.345297185 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1503/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:38:24.345297185 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckGlobalNames.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1503/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckGlobalNames.java\t2018-12-02 07:38:24.349297362 -0500\n@@ -64,7 +64,6 @@\n    * can be re-used for multiple check passes. Returns this for easy chaining.\n    */\n   CheckGlobalNames injectNamespace(GlobalNamespace namespace) {\n-    this.namespace = namespace;\n     return this;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1503/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:38:24.349297362 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckGlobalNames.java", 
          "line": 67, 
          "faulty": "this.namespace=namespace;", 
          "type": "Delete", 
          "seed": "this.level=level;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_433/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:19:27.275393559 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_433/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:19:27.279393731 -0500\n@@ -159,9 +159,7 @@\n \n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n-    if (returnType == null) {\n-      return null;\n-    }\n+    Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n     if (!isVoidOrUnknown(returnType)) {\n       return returnType;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 162, 
          "faulty": "if (returnType == null) {\n  return null;\n}", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1838/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:43:46.907700541 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1838/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:43:46.907700541 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1838/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:43:46.911700716 -0500\n@@ -68,7 +68,8 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n+        int index = -1;\n+\t\tstream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n             getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:03:03.286376056 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1838/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:43:46.911700716 -0500\n@@ -1097,9 +1097,7 @@\n           new SemanticReverseAbstractInterpreter(\n               getCodingConvention(), getTypeRegistry());\n       if (options.closurePass) {\n-        interpreter = new ClosureReverseAbstractInterpreter(\n-            getCodingConvention(), getTypeRegistry())\n-            .append(interpreter).getFirst();\n+        StringBuilder builder = new StringBuilder();\n       }\n       abstractInterpreter = interpreter;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1838/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:43:46.911700716 -0500\n@@ -153,16 +153,8 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n-    if (returnType == null) {\n-      return null;\n-    }\n-\n     if (!isVoidOrUnknown(returnType)) {\n       return returnType;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1838/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:43:46.915700892 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1838/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:43:46.915700892 -0500\n@@ -233,7 +233,6 @@\n     }\n \n     if (options.aggressiveVarCheck.isOn()) {\n-      checks.add(checkVariableReferences);\n     }\n \n     // This pass should run before types are assigned.\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckGlobalThis.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1838/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckGlobalThis.java\t2018-12-02 07:43:46.919701065 -0500\n@@ -161,8 +161,6 @@\n \n   private boolean shouldReportThis(Node n, Node parent) {\n     if (assignLhsChild != null) {\n-      // Always report a THIS on the left side of an assign.\n-      return true;\n     }\n \n     // Also report a THIS with a property access.\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 162, 
          "faulty": "if (returnType == null) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java", 
          "line": 236, 
          "faulty": "checks.add(checkVariableReferences);", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/Compiler.java", 
          "line": 1100, 
          "faulty": "interpreter=new ClosureReverseAbstractInterpreter(getCodingConvention(),getTypeRegistry()).append(interpreter).getFirst();", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckGlobalThis.java", 
          "line": 165, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_859/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:27:07.947149585 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckGlobalNames.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_859/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckGlobalNames.java\t2018-12-02 07:27:07.951149771 -0500\n@@ -65,7 +65,8 @@\n    */\n   CheckGlobalNames injectNamespace(GlobalNamespace namespace) {\n     this.namespace = namespace;\n-    return this;\n+    int index = -1;\n+\treturn this;\n   }\n \n   public void process(Node externs, Node root) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckGlobalNames.java", 
          "line": 68, 
          "faulty": "return this;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1753/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:42:33.076464867 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1753/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:42:33.076464867 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1753/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:42:33.080465042 -0500\n@@ -233,7 +233,6 @@\n     }\n \n     if (options.aggressiveVarCheck.isOn()) {\n-      checks.add(checkVariableReferences);\n     }\n \n     // This pass should run before types are assigned.\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java", 
          "line": 236, 
          "faulty": "checks.add(checkVariableReferences);", 
          "type": "Delete", 
          "seed": "return;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1757/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:42:35.588575387 -0500\n@@ -285,12 +285,8 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n+            Node parameterName = Node.newString(Token.NAME,\n+\t\t\t\t\t\"jscomp_throw_param\");\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1757/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:42:35.592575562 -0500\n@@ -72,11 +72,8 @@\n    * @param options The CompilerOptions object to set the options on.\n    */\n   private static void addVerboseWarnings(CompilerOptions options) {\n-    addDefaultWarnings(options);\n-\n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1757/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:42:35.592575562 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1757/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:42:35.596575740 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CommandLineRunner.java\t2018-12-02 07:03:01.150376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1757/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CommandLineRunner.java\t2018-12-02 07:42:35.596575740 -0500\n@@ -439,7 +439,7 @@\n \n       @Override public void addValue(Object value) throws CmdLineException {\n         proxy.addValue((String) value);\n-        warningGuardSpec.add(level, (String) value);\n+        StringBuilder builder = new StringBuilder();\n       }\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 75, 
          "faulty": "addDefaultWarnings(options);", 
          "type": "Delete", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CommandLineRunner.java", 
          "line": 442, 
          "faulty": "warningGuardSpec.add(level,(String)value);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1626/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:40:34.895221669 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1626/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:40:34.895221669 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1626/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:40:34.899221850 -0500\n@@ -68,8 +68,6 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n-            getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n             getWarningCount());\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:03:03.286376056 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1626/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:40:34.899221850 -0500\n@@ -1097,9 +1097,7 @@\n           new SemanticReverseAbstractInterpreter(\n               getCodingConvention(), getTypeRegistry());\n       if (options.closurePass) {\n-        interpreter = new ClosureReverseAbstractInterpreter(\n-            getCodingConvention(), getTypeRegistry())\n-            .append(interpreter).getFirst();\n+        StringBuilder builder = new StringBuilder();\n       }\n       abstractInterpreter = interpreter;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1626/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:40:34.903222028 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/Compiler.java", 
          "line": 1100, 
          "faulty": "interpreter=new ClosureReverseAbstractInterpreter(getCodingConvention(),getTypeRegistry()).append(interpreter).getFirst();", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_541/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:21:21.084281290 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-02 07:03:01.186376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_541/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-02 07:21:21.084281290 -0500\n@@ -932,7 +932,8 @@\n       if (current.getType() == Token.NAME) {\n         return new Assign(assignNode, current, isPropAssign);\n       }\n-      return null;\n+      Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n+\treturn null;\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 935, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1508/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:38:28.141464768 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1508/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:38:28.145464953 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1508/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:38:28.145464953 -0500\n@@ -153,7 +153,8 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n+    int start = 0;\n+\tif (isEmptyFunction(scope)) {\n       return null;\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_292/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:17:07.209236254 -0500\n@@ -76,7 +76,6 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java\t2018-12-02 07:03:01.150376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_292/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java\t2018-12-02 07:17:07.213236417 -0500\n@@ -193,7 +193,7 @@\n       Node lhs = assign.getFirstChild();\n \n       if (!NodeUtil.isName(lhs)) {\n-        return false;\n+        String sourceName = n.getSourceFileName();\n       }\n \n       Var var = s.getVar(lhs.getString());\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_292/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:17:07.213236417 -0500\n@@ -260,7 +260,6 @@\n     if (options.checkTypes &&\n         (options.enables(DiagnosticGroups.ACCESS_CONTROLS)\n          || options.enables(DiagnosticGroups.CONSTANT_PROPERTY))) {\n-      checks.add(checkAccessControls);\n     }\n \n     if (options.checkGlobalNamesLevel.isOn()) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java", 
          "line": 263, 
          "faulty": "checks.add(checkAccessControls);", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseVariableDeclarations.java", 
          "line": 196, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "String sourceName=n.getSourceFileName();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_986/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:29:22.049234251 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckGlobalNames.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_986/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckGlobalNames.java\t2018-12-02 07:29:22.053234429 -0500\n@@ -65,7 +65,8 @@\n    */\n   CheckGlobalNames injectNamespace(GlobalNamespace namespace) {\n     this.namespace = namespace;\n-    return this;\n+    int index = -1;\n+\treturn this;\n   }\n \n   public void process(Node externs, Node root) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckGlobalNames.java", 
          "line": 68, 
          "faulty": "return this;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1357/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:35:53.802573006 -0500\n@@ -76,7 +76,6 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:03:03.286376056 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1357/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:35:53.802573006 -0500\n@@ -1097,9 +1097,6 @@\n           new SemanticReverseAbstractInterpreter(\n               getCodingConvention(), getTypeRegistry());\n       if (options.closurePass) {\n-        interpreter = new ClosureReverseAbstractInterpreter(\n-            getCodingConvention(), getTypeRegistry())\n-            .append(interpreter).getFirst();\n       }\n       abstractInterpreter = interpreter;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1357/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:35:53.806573187 -0500\n@@ -159,10 +159,6 @@\n \n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n-    if (returnType == null) {\n-      return null;\n-    }\n-\n     if (!isVoidOrUnknown(returnType)) {\n       return returnType;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DiagnosticGroups.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1357/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DiagnosticGroups.java\t2018-12-02 07:35:53.806573187 -0500\n@@ -205,6 +205,6 @@\n       String name, CheckLevel level) {\n     DiagnosticGroup group = forName(name);\n     Preconditions.checkNotNull(group, \"No warning class for name: \" + name);\n-    options.setWarningLevel(group, level);\n+    return;\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1357/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:35:53.806573187 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n@@ -1726,7 +1725,6 @@\n     private final List<Entry> entries = Lists.newArrayList();\n \n     protected void add(CheckLevel level, String groupName) {\n-      entries.add(new Entry(level, groupName));\n     }\n \n     protected void clear() {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 1729, 
          "faulty": "entries.add(new Entry(level,groupName));", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 162, 
          "faulty": "if (returnType == null) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/Compiler.java", 
          "line": 1100, 
          "faulty": "interpreter=new ClosureReverseAbstractInterpreter(getCodingConvention(),getTypeRegistry()).append(interpreter).getFirst();", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DiagnosticGroups.java", 
          "line": 208, 
          "faulty": "options.setWarningLevel(group,level);", 
          "type": "Replace", 
          "seed": "return;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_321/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:17:35.626490906 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java\t2018-12-02 07:03:01.150376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_321/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java\t2018-12-02 07:17:35.626490906 -0500\n@@ -193,7 +193,7 @@\n       Node lhs = assign.getFirstChild();\n \n       if (!NodeUtil.isName(lhs)) {\n-        return false;\n+        String sourceName = n.getSourceFileName();\n       }\n \n       Var var = s.getVar(lhs.getString());\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_321/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:17:35.630491084 -0500\n@@ -260,7 +260,6 @@\n     if (options.checkTypes &&\n         (options.enables(DiagnosticGroups.ACCESS_CONTROLS)\n          || options.enables(DiagnosticGroups.CONSTANT_PROPERTY))) {\n-      checks.add(checkAccessControls);\n     }\n \n     if (options.checkGlobalNamesLevel.isOn()) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java", 
          "line": 263, 
          "faulty": "checks.add(checkAccessControls);", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseVariableDeclarations.java", 
          "line": 196, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "String sourceName=n.getSourceFileName();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_76/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:13:11.671756943 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckGlobalNames.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_76/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckGlobalNames.java\t2018-12-02 07:13:11.675757103 -0500\n@@ -64,7 +64,6 @@\n    * can be re-used for multiple check passes. Returns this for easy chaining.\n    */\n   CheckGlobalNames injectNamespace(GlobalNamespace namespace) {\n-    this.namespace = namespace;\n     return this;\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckGlobalNames.java", 
          "line": 67, 
          "faulty": "this.namespace=namespace;", 
          "type": "Delete", 
          "seed": "return;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1816/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:43:27.586856141 -0500\n@@ -72,11 +72,9 @@\n    * @param options The CompilerOptions object to set the options on.\n    */\n   private static void addVerboseWarnings(CompilerOptions options) {\n-    addDefaultWarnings(options);\n-\n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1816/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:43:27.590856318 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CommandLineRunner.java\t2018-12-02 07:03:01.150376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1816/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CommandLineRunner.java\t2018-12-02 07:43:27.590856318 -0500\n@@ -439,7 +439,7 @@\n \n       @Override public void addValue(Object value) throws CmdLineException {\n         proxy.addValue((String) value);\n-        warningGuardSpec.add(level, (String) value);\n+        StringBuilder builder = new StringBuilder();\n       }\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 75, 
          "faulty": "addDefaultWarnings(options);", 
          "type": "Delete", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CommandLineRunner.java", 
          "line": 442, 
          "faulty": "warningGuardSpec.add(level,(String)value);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1387/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:36:26.964072055 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1387/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:36:26.964072055 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1387/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:36:26.968072234 -0500\n@@ -68,7 +68,8 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n+        int index = -1;\n+\t\tstream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n             getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1387/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:36:26.968072234 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1387/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:36:26.972072416 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1387/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:36:26.972072416 -0500\n@@ -233,7 +233,6 @@\n     }\n \n     if (options.aggressiveVarCheck.isOn()) {\n-      checks.add(checkVariableReferences);\n     }\n \n     // This pass should run before types are assigned.\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java", 
          "line": 236, 
          "faulty": "checks.add(checkVariableReferences);", 
          "type": "Delete", 
          "seed": "return;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1620/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:40:29.930999216 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1620/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:40:29.930999216 -0500\n@@ -72,11 +72,8 @@\n    * @param options The CompilerOptions object to set the options on.\n    */\n   private static void addVerboseWarnings(CompilerOptions options) {\n-    addDefaultWarnings(options);\n-\n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1620/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:40:29.934999396 -0500\n@@ -68,7 +68,8 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n+        int index = -1;\n+\t\tstream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n             getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1620/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:40:29.934999396 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1620/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:40:29.934999396 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n@@ -1726,7 +1725,6 @@\n     private final List<Entry> entries = Lists.newArrayList();\n \n     protected void add(CheckLevel level, String groupName) {\n-      entries.add(new Entry(level, groupName));\n     }\n \n     protected void clear() {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 1729, 
          "faulty": "entries.add(new Entry(level,groupName));", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 75, 
          "faulty": "addDefaultWarnings(options);", 
          "type": "Delete", 
          "seed": "return this;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_176/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:15:02.156185745 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/ExploitAssigns.java\t2018-12-02 07:03:01.162376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_176/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/ExploitAssigns.java\t2018-12-02 07:15:02.156185745 -0500\n@@ -76,11 +76,7 @@\n   private boolean isCollapsibleValue(Node value, boolean isLValue) {\n     switch (value.getType()) {\n       case Token.GETPROP:\n-        // Do not collapse GETPROPs on arbitrary objects, because\n-        // they may be implemented  setter functions, and oftentimes\n-        // setter functions fail on native objects. This is ok for \"THIS\"\n-        // objects, because we assume that they are non-native.\n-        return !isLValue || value.getFirstChild().getType() == Token.THIS;\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.NAME:\n         return true;\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_176/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:15:02.160185907 -0500\n@@ -264,7 +264,6 @@\n     }\n \n     if (options.checkGlobalNamesLevel.isOn()) {\n-      checks.add(checkGlobalNames);\n     }\n \n     checks.add(checkStrictMode);\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java", 
          "line": 267, 
          "faulty": "checks.add(checkGlobalNames);", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ExploitAssigns.java", 
          "line": 83, 
          "faulty": "return !isLValue || value.getFirstChild().getType() == Token.THIS;", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1430/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:37:10.622028758 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1430/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:37:10.622028758 -0500\n@@ -68,7 +68,8 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n+        int index = -1;\n+\t\tstream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n             getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1430/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:37:10.626028936 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckGlobalNames.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1430/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckGlobalNames.java\t2018-12-02 07:37:10.626028936 -0500\n@@ -65,7 +65,8 @@\n    */\n   CheckGlobalNames injectNamespace(GlobalNamespace namespace) {\n     this.namespace = namespace;\n-    return this;\n+    int start = 0;\n+\treturn this;\n   }\n \n   public void process(Node externs, Node root) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1430/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:37:10.626028936 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckGlobalNames.java", 
          "line": 68, 
          "faulty": "return this;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1204/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:33:12.183278259 -0500\n@@ -76,7 +76,6 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1204/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:33:12.187278431 -0500\n@@ -68,7 +68,8 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n+        int index = -1;\n+\t\tstream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n             getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1204/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:33:12.187278431 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1640/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:40:48.291820974 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/ExploitAssigns.java\t2018-12-02 07:03:01.162376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1640/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/ExploitAssigns.java\t2018-12-02 07:40:48.295821153 -0500\n@@ -76,11 +76,7 @@\n   private boolean isCollapsibleValue(Node value, boolean isLValue) {\n     switch (value.getType()) {\n       case Token.GETPROP:\n-        // Do not collapse GETPROPs on arbitrary objects, because\n-        // they may be implemented  setter functions, and oftentimes\n-        // setter functions fail on native objects. This is ok for \"THIS\"\n-        // objects, because we assume that they are non-native.\n-        return !isLValue || value.getFirstChild().getType() == Token.THIS;\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.NAME:\n         return true;\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckGlobalNames.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1640/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckGlobalNames.java\t2018-12-02 07:40:48.295821153 -0500\n@@ -64,7 +64,6 @@\n    * can be re-used for multiple check passes. Returns this for easy chaining.\n    */\n   CheckGlobalNames injectNamespace(GlobalNamespace namespace) {\n-    this.namespace = namespace;\n     return this;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1640/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:40:48.295821153 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckGlobalNames.java", 
          "line": 67, 
          "faulty": "this.namespace=namespace;", 
          "type": "Delete", 
          "seed": "this.level=level;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ExploitAssigns.java", 
          "line": 83, 
          "faulty": "return !isLValue || value.getFirstChild().getType() == Token.THIS;", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1823/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:43:32.527072196 -0500\n@@ -72,11 +72,7 @@\n    * @param options The CompilerOptions object to set the options on.\n    */\n   private static void addVerboseWarnings(CompilerOptions options) {\n-    addDefaultWarnings(options);\n-\n-    // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n-    options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:03:03.286376056 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1823/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:43:32.531072371 -0500\n@@ -1097,9 +1097,7 @@\n           new SemanticReverseAbstractInterpreter(\n               getCodingConvention(), getTypeRegistry());\n       if (options.closurePass) {\n-        interpreter = new ClosureReverseAbstractInterpreter(\n-            getCodingConvention(), getTypeRegistry())\n-            .append(interpreter).getFirst();\n+        StringBuilder builder = new StringBuilder();\n       }\n       abstractInterpreter = interpreter;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1823/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:43:32.535072546 -0500\n@@ -159,10 +159,6 @@\n \n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n-    if (returnType == null) {\n-      return null;\n-    }\n-\n     if (!isVoidOrUnknown(returnType)) {\n       return returnType;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1823/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:43:32.535072546 -0500\n@@ -233,7 +233,6 @@\n     }\n \n     if (options.aggressiveVarCheck.isOn()) {\n-      checks.add(checkVariableReferences);\n     }\n \n     // This pass should run before types are assigned.\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 75, 
          "faulty": "addDefaultWarnings(options);", 
          "type": "Delete", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 78, 
          "faulty": "options.checkSuspiciousCode=true;", 
          "type": "Delete", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 162, 
          "faulty": "if (returnType == null) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java", 
          "line": 236, 
          "faulty": "checks.add(checkVariableReferences);", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/Compiler.java", 
          "line": 1100, 
          "faulty": "interpreter=new ClosureReverseAbstractInterpreter(getCodingConvention(),getTypeRegistry()).append(interpreter).getFirst();", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_419/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:19:14.230827174 -0500\n@@ -74,9 +74,10 @@\n   private static void addVerboseWarnings(CompilerOptions options) {\n     addDefaultWarnings(options);\n \n-    // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n+    boolean valid = false;\n+\t// checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 935, 
          "faulty": "return null;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 78, 
          "faulty": "options.checkSuspiciousCode=true;", 
          "type": "InsertBefore", 
          "seed": "boolean valid=false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_346/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:18:00.075576215 -0500\n@@ -282,7 +282,8 @@\n               n.getLastChild(), output);\n             return;\n           } else if (NodeUtil.isGet(n.getFirstChild())) {\n-            // Treat all assignments to arguments as redefining the\n+            int index = -1;\n+\t\t\t// Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n             if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_346/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:18:00.079576392 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckGlobalThis.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_346/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckGlobalThis.java\t2018-12-02 07:18:00.079576392 -0500\n@@ -161,8 +161,6 @@\n \n   private boolean shouldReportThis(Node n, Node parent) {\n     if (assignLhsChild != null) {\n-      // Always report a THIS on the left side of an assign.\n-      return true;\n     }\n \n     // Also report a THIS with a property access.\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckGlobalThis.java", 
          "line": 165, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "switch (n.getType()) {\ncase Token.LABEL:\n  validateLabel(n);\nreturn;\ncase Token.BLOCK:\nvalidateBlock(n);\nreturn;\ncase Token.FUNCTION:\nvalidateFunctionStatement(n);\nreturn;\ncase Token.WITH:\nvalidateWith(n);\nreturn;\ncase Token.FOR:\nvalidateFor(n);\nreturn;\ncase Token.WHILE:\nvalidateWhile(n);\nreturn;\ncase Token.DO:\nvalidateDo(n);\nreturn;\ncase Token.SWITCH:\nvalidateSwitch(n);\nreturn;\ncase Token.IF:\nvalidateIf(n);\nreturn;\ncase Token.VAR:\nvalidateVar(n);\nreturn;\ncase Token.EXPR_RESULT:\nvalidateExprStmt(n);\nreturn;\ncase Token.RETURN:\nvalidateReturn(n);\nreturn;\ncase Token.THROW:\nvalidateThrow(n);\nreturn;\ncase Token.TRY:\nvalidateTry(n);\nreturn;\ncase Token.BREAK:\nvalidateBreak(n);\nreturn;\ncase Token.CONTINUE:\nvalidateContinue(n);\nreturn;\ncase Token.EMPTY:\nvalidateChildless(n);\nreturn;\ncase Token.DEBUGGER:\nvalidateChildless(n);\nreturn;\ndefault :\nviolation(\"Expected statement but was \" + Node.tokenToName(n.getType()) + \".\",n);\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 287, 
          "faulty": "Node obj=n.getFirstChild().getFirstChild();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1769/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:42:47.049079181 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1769/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:42:47.049079181 -0500\n@@ -72,11 +72,8 @@\n    * @param options The CompilerOptions object to set the options on.\n    */\n   private static void addVerboseWarnings(CompilerOptions options) {\n-    addDefaultWarnings(options);\n-\n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1769/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:42:47.053079357 -0500\n@@ -68,7 +68,8 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n+        int index = -1;\n+\t\tstream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n             getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1769/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:42:47.053079357 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1769/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:42:47.053079357 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 75, 
          "faulty": "addDefaultWarnings(options);", 
          "type": "Delete", 
          "seed": "return this;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1354/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:35:51.158452954 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1354/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:35:51.162453135 -0500\n@@ -68,7 +68,8 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n+        int index = -1;\n+\t\tstream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n             getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1150/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:32:16.552880422 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1150/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:32:16.556880595 -0500\n@@ -76,7 +76,6 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1150/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:32:16.556880595 -0500\n@@ -153,16 +153,8 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n-    if (returnType == null) {\n-      return null;\n-    }\n-\n     if (!isVoidOrUnknown(returnType)) {\n       return returnType;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1150/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:32:16.556880595 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n@@ -1726,7 +1725,6 @@\n     private final List<Entry> entries = Lists.newArrayList();\n \n     protected void add(CheckLevel level, String groupName) {\n-      entries.add(new Entry(level, groupName));\n     }\n \n     protected void clear() {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 1729, 
          "faulty": "entries.add(new Entry(level,groupName));", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 162, 
          "faulty": "if (returnType == null) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return 0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_865/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:27:14.155437082 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_865/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:27:14.159437268 -0500\n@@ -1726,7 +1726,6 @@\n     private final List<Entry> entries = Lists.newArrayList();\n \n     protected void add(CheckLevel level, String groupName) {\n-      entries.add(new Entry(level, groupName));\n     }\n \n     protected void clear() {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 1729, 
          "faulty": "entries.add(new Entry(level,groupName));", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ExploitAssigns.java", 
          "line": 198, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_31/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:12:21.497760554 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java\t2018-12-02 07:03:01.150376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_31/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java\t2018-12-02 07:12:21.501760712 -0500\n@@ -193,7 +193,8 @@\n       Node lhs = assign.getFirstChild();\n \n       if (!NodeUtil.isName(lhs)) {\n-        return false;\n+        int type = n.getType();\n+\t\treturn false;\n       }\n \n       Var var = s.getVar(lhs.getString());\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseVariableDeclarations.java", 
          "line": 196, 
          "faulty": "return false;", 
          "type": "InsertBefore", 
          "seed": "int type=n.getType();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1210/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:33:16.995485027 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1210/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:33:16.999485199 -0500\n@@ -76,7 +76,6 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1210/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:33:16.999485199 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1264/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:34:12.181892154 -0500\n@@ -72,11 +72,9 @@\n    * @param options The CompilerOptions object to set the options on.\n    */\n   private static void addVerboseWarnings(CompilerOptions options) {\n-    addDefaultWarnings(options);\n-\n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 75, 
          "faulty": "addDefaultWarnings(options);", 
          "type": "Delete", 
          "seed": "return this;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1780/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:42:55.821464366 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1780/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:42:55.821464366 -0500\n@@ -72,11 +72,9 @@\n    * @param options The CompilerOptions object to set the options on.\n    */\n   private static void addVerboseWarnings(CompilerOptions options) {\n-    addDefaultWarnings(options);\n-\n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1780/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:42:55.825464541 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1780/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:42:55.825464541 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1780/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:42:55.829464717 -0500\n@@ -233,7 +233,6 @@\n     }\n \n     if (options.aggressiveVarCheck.isOn()) {\n-      checks.add(checkVariableReferences);\n     }\n \n     // This pass should run before types are assigned.\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 75, 
          "faulty": "addDefaultWarnings(options);", 
          "type": "Delete", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java", 
          "line": 236, 
          "faulty": "checks.add(checkVariableReferences);", 
          "type": "Delete", 
          "seed": "return;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1147/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:32:14.128775594 -0500\n@@ -76,7 +76,6 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1147/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:32:14.128775594 -0500\n@@ -68,8 +68,6 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n-            getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n             getWarningCount());\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1147/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:32:14.132775767 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_48/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:12:41.430552343 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_48/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:12:41.434552502 -0500\n@@ -264,7 +264,6 @@\n     }\n \n     if (options.checkGlobalNamesLevel.isOn()) {\n-      checks.add(checkGlobalNames);\n     }\n \n     checks.add(checkStrictMode);\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java", 
          "line": 267, 
          "faulty": "checks.add(checkGlobalNames);", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_490/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:20:28.062015030 -0500\n@@ -281,17 +281,8 @@\n             addToDefIfLocal(name.getString(), conditional ? null : cfgNode,\n               n.getLastChild(), output);\n             return;\n-          } else if (NodeUtil.isGet(n.getFirstChild())) {\n-            // Treat all assignments to arguments as redefining the\n-            // parameters itself.\n-            Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n-          }\n+          } else\n+\t\t\t;\n         }\n \n         if (NodeUtil.isName(n) && \"arguments\".equals(n.getString())) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_490/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:20:28.066015201 -0500\n@@ -76,7 +76,6 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/ExploitAssigns.java\t2018-12-02 07:03:01.162376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_490/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/ExploitAssigns.java\t2018-12-02 07:20:28.066015201 -0500\n@@ -76,11 +76,7 @@\n   private boolean isCollapsibleValue(Node value, boolean isLValue) {\n     switch (value.getType()) {\n       case Token.GETPROP:\n-        // Do not collapse GETPROPs on arbitrary objects, because\n-        // they may be implemented  setter functions, and oftentimes\n-        // setter functions fail on native objects. This is ok for \"THIS\"\n-        // objects, because we assume that they are non-native.\n-        return !isLValue || value.getFirstChild().getType() == Token.THIS;\n+        ;\n \n       case Token.NAME:\n         return true;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 284, 
          "faulty": "if (NodeUtil.isGet(n.getFirstChild())) {\n  Node obj=n.getFirstChild().getFirstChild();\n  if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n    escapeParameters(output);\n  }\n}", 
          "type": "Delete", 
          "seed": "if (!n.getBooleanProp(Node.SYNTHETIC_BLOCK_PROP)) {\n  violation(\"Missing 'synthetic block' annotation.\",n);\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ExploitAssigns.java", 
          "line": 83, 
          "faulty": "return !isLValue || value.getFirstChild().getType() == Token.THIS;", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_526/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:21:04.771585832 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_526/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:21:04.775586002 -0500\n@@ -1726,7 +1726,6 @@\n     private final List<Entry> entries = Lists.newArrayList();\n \n     protected void add(CheckLevel level, String groupName) {\n-      entries.add(new Entry(level, groupName));\n     }\n \n     protected void clear() {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_526/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:21:04.775586002 -0500\n@@ -260,7 +260,7 @@\n     if (options.checkTypes &&\n         (options.enables(DiagnosticGroups.ACCESS_CONTROLS)\n          || options.enables(DiagnosticGroups.CONSTANT_PROPERTY))) {\n-      checks.add(checkAccessControls);\n+      int index = -1;\n     }\n \n     if (options.checkGlobalNamesLevel.isOn()) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 1729, 
          "faulty": "entries.add(new Entry(level,groupName));", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java", 
          "line": 263, 
          "faulty": "checks.add(checkAccessControls);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_507/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:20:45.582765786 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    boolean valid = false;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_507/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:20:45.582765786 -0500\n@@ -159,9 +159,7 @@\n \n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n-    if (returnType == null) {\n-      return null;\n-    }\n+    Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n     if (!isVoidOrUnknown(returnType)) {\n       return returnType;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 162, 
          "faulty": "if (returnType == null) {\n  return null;\n}", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "boolean valid=false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1638/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:40:47.083766991 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/ExploitAssigns.java\t2018-12-02 07:03:01.162376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1638/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/ExploitAssigns.java\t2018-12-02 07:40:47.087767170 -0500\n@@ -76,11 +76,7 @@\n   private boolean isCollapsibleValue(Node value, boolean isLValue) {\n     switch (value.getType()) {\n       case Token.GETPROP:\n-        // Do not collapse GETPROPs on arbitrary objects, because\n-        // they may be implemented  setter functions, and oftentimes\n-        // setter functions fail on native objects. This is ok for \"THIS\"\n-        // objects, because we assume that they are non-native.\n-        return !isLValue || value.getFirstChild().getType() == Token.THIS;\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.NAME:\n         return true;\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java\t2018-12-02 07:03:01.150376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1638/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java\t2018-12-02 07:40:47.087767170 -0500\n@@ -192,7 +192,8 @@\n       Node assign = n.getFirstChild();\n       Node lhs = assign.getFirstChild();\n \n-      if (!NodeUtil.isName(lhs)) {\n+      Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n+\tif (!NodeUtil.isName(lhs)) {\n         return false;\n       }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ExploitAssigns.java", 
          "line": 83, 
          "faulty": "return !isLValue || value.getFirstChild().getType() == Token.THIS;", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseVariableDeclarations.java", 
          "line": 195, 
          "faulty": "if (!NodeUtil.isName(lhs)) {\n  return false;\n}", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1747/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:42:28.044243374 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1747/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:42:28.048243550 -0500\n@@ -76,7 +76,8 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    boolean valid = false;\n+\tStringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java\t2018-12-02 07:03:01.150376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1747/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java\t2018-12-02 07:42:28.048243550 -0500\n@@ -190,7 +190,8 @@\n         return false;\n       }\n       Node assign = n.getFirstChild();\n-      Node lhs = assign.getFirstChild();\n+      String sourceName = n.getSourceFileName();\n+\tNode lhs = assign.getFirstChild();\n \n       if (!NodeUtil.isName(lhs)) {\n         return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1747/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:42:28.052243727 -0500\n@@ -68,8 +68,6 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n-            getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n             getWarningCount());\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:03:03.286376056 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1747/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:42:28.052243727 -0500\n@@ -1097,9 +1097,6 @@\n           new SemanticReverseAbstractInterpreter(\n               getCodingConvention(), getTypeRegistry());\n       if (options.closurePass) {\n-        interpreter = new ClosureReverseAbstractInterpreter(\n-            getCodingConvention(), getTypeRegistry())\n-            .append(interpreter).getFirst();\n       }\n       abstractInterpreter = interpreter;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1747/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:42:28.056243903 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "InsertBefore", 
          "seed": "boolean valid=false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseVariableDeclarations.java", 
          "line": 193, 
          "faulty": "Node lhs=assign.getFirstChild();", 
          "type": "InsertBefore", 
          "seed": "String sourceName=n.getSourceFileName();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/Compiler.java", 
          "line": 1100, 
          "faulty": "interpreter=new ClosureReverseAbstractInterpreter(getCodingConvention(),getTypeRegistry()).append(interpreter).getFirst();", 
          "type": "Delete", 
          "seed": "return;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_519/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:20:57.223263511 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_519/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:20:57.227263682 -0500\n@@ -264,7 +264,8 @@\n     }\n \n     if (options.checkGlobalNamesLevel.isOn()) {\n-      checks.add(checkGlobalNames);\n+      Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n+\tchecks.add(checkGlobalNames);\n     }\n \n     checks.add(checkStrictMode);\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java", 
          "line": 267, 
          "faulty": "checks.add(checkGlobalNames);", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1645/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:40:52.083990357 -0500\n@@ -72,11 +72,9 @@\n    * @param options The CompilerOptions object to set the options on.\n    */\n   private static void addVerboseWarnings(CompilerOptions options) {\n-    addDefaultWarnings(options);\n-\n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1645/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:40:52.087990536 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 75, 
          "faulty": "addDefaultWarnings(options);", 
          "type": "Delete", 
          "seed": "return this;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_118/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:13:56.137534610 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_118/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:13:56.141534769 -0500\n@@ -260,7 +260,6 @@\n     if (options.checkTypes &&\n         (options.enables(DiagnosticGroups.ACCESS_CONTROLS)\n          || options.enables(DiagnosticGroups.CONSTANT_PROPERTY))) {\n-      checks.add(checkAccessControls);\n     }\n \n     if (options.checkGlobalNamesLevel.isOn()) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java", 
          "line": 263, 
          "faulty": "checks.add(checkAccessControls);", 
          "type": "Delete", 
          "seed": "return this;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1417/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:36:57.181428239 -0500\n@@ -76,7 +76,6 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:03:03.286376056 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1417/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:36:57.185428418 -0500\n@@ -1097,9 +1097,6 @@\n           new SemanticReverseAbstractInterpreter(\n               getCodingConvention(), getTypeRegistry());\n       if (options.closurePass) {\n-        interpreter = new ClosureReverseAbstractInterpreter(\n-            getCodingConvention(), getTypeRegistry())\n-            .append(interpreter).getFirst();\n       }\n       abstractInterpreter = interpreter;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1417/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:36:57.185428418 -0500\n@@ -159,10 +159,6 @@\n \n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n-    if (returnType == null) {\n-      return null;\n-    }\n-\n     if (!isVoidOrUnknown(returnType)) {\n       return returnType;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DiagnosticGroups.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1417/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DiagnosticGroups.java\t2018-12-02 07:36:57.189428597 -0500\n@@ -205,6 +205,6 @@\n       String name, CheckLevel level) {\n     DiagnosticGroup group = forName(name);\n     Preconditions.checkNotNull(group, \"No warning class for name: \" + name);\n-    options.setWarningLevel(group, level);\n+    return;\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1417/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:36:57.189428597 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 162, 
          "faulty": "if (returnType == null) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/Compiler.java", 
          "line": 1100, 
          "faulty": "interpreter=new ClosureReverseAbstractInterpreter(getCodingConvention(),getTypeRegistry()).append(interpreter).getFirst();", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DiagnosticGroups.java", 
          "line": 208, 
          "faulty": "options.setWarningLevel(group,level);", 
          "type": "Replace", 
          "seed": "return;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1079/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:31:02.473661594 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1079/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:31:02.473661594 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1079/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:31:02.477661769 -0500\n@@ -68,8 +68,6 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n-            getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n             getWarningCount());\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1079/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:31:02.477661769 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1079/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:31:02.481661943 -0500\n@@ -1726,7 +1726,6 @@\n     private final List<Entry> entries = Lists.newArrayList();\n \n     protected void add(CheckLevel level, String groupName) {\n-      entries.add(new Entry(level, groupName));\n     }\n \n     protected void clear() {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 1729, 
          "faulty": "entries.add(new Entry(level,groupName));", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "Delete", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1202/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:33:10.639211894 -0500\n@@ -76,7 +76,6 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1202/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:33:10.643212066 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n@@ -1726,7 +1725,8 @@\n     private final List<Entry> entries = Lists.newArrayList();\n \n     protected void add(CheckLevel level, String groupName) {\n-      entries.add(new Entry(level, groupName));\n+      int index = -1;\n+\tentries.add(new Entry(level, groupName));\n     }\n \n     protected void clear() {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1202/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:33:10.647212238 -0500\n@@ -233,7 +233,6 @@\n     }\n \n     if (options.aggressiveVarCheck.isOn()) {\n-      checks.add(checkVariableReferences);\n     }\n \n     // This pass should run before types are assigned.\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java", 
          "line": 236, 
          "faulty": "checks.add(checkVariableReferences);", 
          "type": "Delete", 
          "seed": "boolean valid=false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 1729, 
          "faulty": "entries.add(new Entry(level,groupName));", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1415/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:36:55.937372575 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1415/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:36:55.937372575 -0500\n@@ -68,8 +68,6 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n-            getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n             getWarningCount());\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1415/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:36:55.941372753 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n@@ -1726,7 +1725,6 @@\n     private final List<Entry> entries = Lists.newArrayList();\n \n     protected void add(CheckLevel level, String groupName) {\n-      entries.add(new Entry(level, groupName));\n     }\n \n     protected void clear() {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 1729, 
          "faulty": "entries.add(new Entry(level,groupName));", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "Delete", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1835/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:43:44.191581927 -0500\n@@ -285,12 +285,8 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n+            Node parameterName = Node.newString(Token.NAME,\n+\t\t\t\t\t\"jscomp_throw_param\");\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1835/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:43:44.191581927 -0500\n@@ -72,11 +72,8 @@\n    * @param options The CompilerOptions object to set the options on.\n    */\n   private static void addVerboseWarnings(CompilerOptions options) {\n-    addDefaultWarnings(options);\n-\n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1835/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:43:44.195582103 -0500\n@@ -153,16 +153,8 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n-    if (returnType == null) {\n-      return null;\n-    }\n-\n     if (!isVoidOrUnknown(returnType)) {\n       return returnType;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1835/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:43:44.195582103 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CommandLineRunner.java\t2018-12-02 07:03:01.150376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1835/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CommandLineRunner.java\t2018-12-02 07:43:44.199582276 -0500\n@@ -439,7 +439,7 @@\n \n       @Override public void addValue(Object value) throws CmdLineException {\n         proxy.addValue((String) value);\n-        warningGuardSpec.add(level, (String) value);\n+        StringBuilder builder = new StringBuilder();\n       }\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 162, 
          "faulty": "if (returnType == null) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 75, 
          "faulty": "addDefaultWarnings(options);", 
          "type": "Delete", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CommandLineRunner.java", 
          "line": 442, 
          "faulty": "warningGuardSpec.add(level,(String)value);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1560/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:39:27.556184854 -0500\n@@ -76,7 +76,6 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1560/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:39:27.564185217 -0500\n@@ -68,7 +68,8 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n+        int index = -1;\n+\t\tstream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n             getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1560/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:39:27.564185217 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n@@ -1726,7 +1725,6 @@\n     private final List<Entry> entries = Lists.newArrayList();\n \n     protected void add(CheckLevel level, String groupName) {\n-      entries.add(new Entry(level, groupName));\n     }\n \n     protected void clear() {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1560/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:39:27.568185399 -0500\n@@ -233,7 +233,6 @@\n     }\n \n     if (options.aggressiveVarCheck.isOn()) {\n-      checks.add(checkVariableReferences);\n     }\n \n     // This pass should run before types are assigned.\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 1729, 
          "faulty": "entries.add(new Entry(level,groupName));", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java", 
          "line": 236, 
          "faulty": "checks.add(checkVariableReferences);", 
          "type": "Delete", 
          "seed": "return;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1734/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:42:13.535604007 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:03:03.286376056 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1734/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:42:13.535604007 -0500\n@@ -1097,9 +1097,6 @@\n           new SemanticReverseAbstractInterpreter(\n               getCodingConvention(), getTypeRegistry());\n       if (options.closurePass) {\n-        interpreter = new ClosureReverseAbstractInterpreter(\n-            getCodingConvention(), getTypeRegistry())\n-            .append(interpreter).getFirst();\n       }\n       abstractInterpreter = interpreter;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1734/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:42:13.539604185 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CommandLineRunner.java\t2018-12-02 07:03:01.150376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1734/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CommandLineRunner.java\t2018-12-02 07:42:13.539604185 -0500\n@@ -438,7 +438,8 @@\n       @Override public Class getType() { return proxy.getType(); }\n \n       @Override public void addValue(Object value) throws CmdLineException {\n-        proxy.addValue((String) value);\n+        int index = -1;\n+\t\tproxy.addValue((String) value);\n         warningGuardSpec.add(level, (String) value);\n       }\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/Compiler.java", 
          "line": 1100, 
          "faulty": "interpreter=new ClosureReverseAbstractInterpreter(getCodingConvention(),getTypeRegistry()).append(interpreter).getFirst();", 
          "type": "Delete", 
          "seed": "boolean valid=false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CommandLineRunner.java", 
          "line": 441, 
          "faulty": "proxy.addValue((String)value);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_583/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:22:06.818223666 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_583/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:22:06.822223835 -0500\n@@ -163,7 +163,8 @@\n       return null;\n     }\n \n-    if (!isVoidOrUnknown(returnType)) {\n+    StringBuilder builder = new StringBuilder();\n+\tif (!isVoidOrUnknown(returnType)) {\n       return returnType;\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 166, 
          "faulty": "if (!isVoidOrUnknown(returnType)) {\n  return returnType;\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_429/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:19:23.835244333 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 935, 
          "faulty": "return null;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_392/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:18:45.985595502 -0500\n@@ -281,17 +281,8 @@\n             addToDefIfLocal(name.getString(), conditional ? null : cfgNode,\n               n.getLastChild(), output);\n             return;\n-          } else if (NodeUtil.isGet(n.getFirstChild())) {\n-            // Treat all assignments to arguments as redefining the\n-            // parameters itself.\n-            Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n-          }\n+          } else\n+\t\t\t;\n         }\n \n         if (NodeUtil.isName(n) && \"arguments\".equals(n.getString())) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_392/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:18:45.985595502 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 284, 
          "faulty": "if (NodeUtil.isGet(n.getFirstChild())) {\n  Node obj=n.getFirstChild().getFirstChild();\n  if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n    escapeParameters(output);\n  }\n}", 
          "type": "Delete", 
          "seed": "if (!n.getBooleanProp(Node.SYNTHETIC_BLOCK_PROP)) {\n  violation(\"Missing 'synthetic block' annotation.\",n);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1763/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:42:42.044859282 -0500\n@@ -72,11 +72,9 @@\n    * @param options The CompilerOptions object to set the options on.\n    */\n   private static void addVerboseWarnings(CompilerOptions options) {\n-    addDefaultWarnings(options);\n-\n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1763/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:42:42.044859282 -0500\n@@ -68,7 +68,8 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n+        int index = -1;\n+\t\tstream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n             getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:03:03.286376056 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1763/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:42:42.048859458 -0500\n@@ -1097,9 +1097,7 @@\n           new SemanticReverseAbstractInterpreter(\n               getCodingConvention(), getTypeRegistry());\n       if (options.closurePass) {\n-        interpreter = new ClosureReverseAbstractInterpreter(\n-            getCodingConvention(), getTypeRegistry())\n-            .append(interpreter).getFirst();\n+        StringBuilder builder = new StringBuilder();\n       }\n       abstractInterpreter = interpreter;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1763/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:42:42.048859458 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1763/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:42:42.052859634 -0500\n@@ -233,7 +233,6 @@\n     }\n \n     if (options.aggressiveVarCheck.isOn()) {\n-      checks.add(checkVariableReferences);\n     }\n \n     // This pass should run before types are assigned.\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 75, 
          "faulty": "addDefaultWarnings(options);", 
          "type": "Delete", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java", 
          "line": 236, 
          "faulty": "checks.add(checkVariableReferences);", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/Compiler.java", 
          "line": 1100, 
          "faulty": "interpreter=new ClosureReverseAbstractInterpreter(getCodingConvention(),getTypeRegistry()).append(interpreter).getFirst();", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_198/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:15:24.481084940 -0500\n@@ -76,7 +76,6 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:03:03.286376056 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_198/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:15:24.485085100 -0500\n@@ -1097,7 +1097,8 @@\n           new SemanticReverseAbstractInterpreter(\n               getCodingConvention(), getTypeRegistry());\n       if (options.closurePass) {\n-        interpreter = new ClosureReverseAbstractInterpreter(\n+        boolean valid = false;\n+\t\tinterpreter = new ClosureReverseAbstractInterpreter(\n             getCodingConvention(), getTypeRegistry())\n             .append(interpreter).getFirst();\n       }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/Compiler.java", 
          "line": 1100, 
          "faulty": "interpreter=new ClosureReverseAbstractInterpreter(getCodingConvention(),getTypeRegistry()).append(interpreter).getFirst();", 
          "type": "InsertBefore", 
          "seed": "boolean valid=false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_479/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:20:15.909493108 -0500\n@@ -76,7 +76,6 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_479/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:20:15.913493281 -0500\n@@ -163,10 +163,6 @@\n       return null;\n     }\n \n-    if (!isVoidOrUnknown(returnType)) {\n-      return returnType;\n-    }\n-\n     return null;\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 166, 
          "faulty": "if (!isVoidOrUnknown(returnType)) {\n  return returnType;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_857/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:27:06.795096161 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_857/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:27:06.799096346 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_857/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:27:06.799096346 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_857/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:27:06.803096530 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n@@ -1726,7 +1725,6 @@\n     private final List<Entry> entries = Lists.newArrayList();\n \n     protected void add(CheckLevel level, String groupName) {\n-      entries.add(new Entry(level, groupName));\n     }\n \n     protected void clear() {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_857/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:27:06.803096530 -0500\n@@ -233,7 +233,6 @@\n     }\n \n     if (options.aggressiveVarCheck.isOn()) {\n-      checks.add(checkVariableReferences);\n     }\n \n     // This pass should run before types are assigned.\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 1729, 
          "faulty": "entries.add(new Entry(level,groupName));", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java", 
          "line": 236, 
          "faulty": "checks.add(checkVariableReferences);", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_254/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:16:27.015609614 -0500\n@@ -281,17 +281,8 @@\n             addToDefIfLocal(name.getString(), conditional ? null : cfgNode,\n               n.getLastChild(), output);\n             return;\n-          } else if (NodeUtil.isGet(n.getFirstChild())) {\n-            // Treat all assignments to arguments as redefining the\n-            // parameters itself.\n-            Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n-          }\n+          } else\n+\t\t\t;\n         }\n \n         if (NodeUtil.isName(n) && \"arguments\".equals(n.getString())) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_254/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:16:27.015609614 -0500\n@@ -76,7 +76,6 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 284, 
          "faulty": "if (NodeUtil.isGet(n.getFirstChild())) {\n  Node obj=n.getFirstChild().getFirstChild();\n  if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n    escapeParameters(output);\n  }\n}", 
          "type": "Delete", 
          "seed": "if (!n.getBooleanProp(Node.SYNTHETIC_BLOCK_PROP)) {\n  violation(\"Missing 'synthetic block' annotation.\",n);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_809/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:26:16.532741205 -0500\n@@ -39,7 +39,7 @@\n         addDefaultWarnings(options);\n         break;\n       case VERBOSE:\n-        addVerboseWarnings(options);\n+        ;\n         break;\n       default:\n         throw new RuntimeException(\"Unknown warning level.\");\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_809/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:26:16.532741205 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 42, 
          "faulty": "addVerboseWarnings(options);", 
          "type": "Delete", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1611/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:40:18.638492400 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1611/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:40:18.638492400 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1611/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:40:18.642492579 -0500\n@@ -68,7 +68,8 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n+        int index = -1;\n+\t\tstream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n             getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:03:03.286376056 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1611/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:40:18.642492579 -0500\n@@ -1097,9 +1097,6 @@\n           new SemanticReverseAbstractInterpreter(\n               getCodingConvention(), getTypeRegistry());\n       if (options.closurePass) {\n-        interpreter = new ClosureReverseAbstractInterpreter(\n-            getCodingConvention(), getTypeRegistry())\n-            .append(interpreter).getFirst();\n       }\n       abstractInterpreter = interpreter;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1611/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:40:18.646492759 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckGlobalNames.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1611/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckGlobalNames.java\t2018-12-02 07:40:18.646492759 -0500\n@@ -64,7 +64,6 @@\n    * can be re-used for multiple check passes. Returns this for easy chaining.\n    */\n   CheckGlobalNames injectNamespace(GlobalNamespace namespace) {\n-    this.namespace = namespace;\n     return this;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1611/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:40:18.646492759 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckGlobalNames.java", 
          "line": 67, 
          "faulty": "this.namespace=namespace;", 
          "type": "Delete", 
          "seed": "this.level=level;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/Compiler.java", 
          "line": 1100, 
          "faulty": "interpreter=new ClosureReverseAbstractInterpreter(getCodingConvention(),getTypeRegistry()).append(interpreter).getFirst();", 
          "type": "Delete", 
          "seed": "boolean valid=false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1844/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:43:53.359982201 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1844/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:43:53.363982374 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1844/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:43:53.363982374 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-02 07:03:01.186376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1844/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-02 07:43:53.367982549 -0500\n@@ -932,7 +932,8 @@\n       if (current.getType() == Token.NAME) {\n         return new Assign(assignNode, current, isPropAssign);\n       }\n-      return null;\n+      boolean valid = false;\n+\treturn null;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1844/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:43:53.367982549 -0500\n@@ -233,7 +233,6 @@\n     }\n \n     if (options.aggressiveVarCheck.isOn()) {\n-      checks.add(checkVariableReferences);\n     }\n \n     // This pass should run before types are assigned.\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java", 
          "line": 236, 
          "faulty": "checks.add(checkVariableReferences);", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 935, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "boolean valid=false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_501/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:20:39.082487482 -0500\n@@ -76,7 +76,6 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java\t2018-12-02 07:03:01.150376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_501/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java\t2018-12-02 07:20:39.086487653 -0500\n@@ -193,7 +193,6 @@\n       Node lhs = assign.getFirstChild();\n \n       if (!NodeUtil.isName(lhs)) {\n-        return false;\n       }\n \n       Var var = s.getVar(lhs.getString());\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_501/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:20:39.086487653 -0500\n@@ -159,7 +159,8 @@\n \n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n-    if (returnType == null) {\n+    Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n+\tif (returnType == null) {\n       return null;\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 162, 
          "faulty": "if (returnType == null) {\n  return null;\n}", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseVariableDeclarations.java", 
          "line": 196, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_873/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:27:21.539778189 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/ExploitAssigns.java\t2018-12-02 07:03:01.162376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_873/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/ExploitAssigns.java\t2018-12-02 07:27:21.539778189 -0500\n@@ -76,11 +76,7 @@\n   private boolean isCollapsibleValue(Node value, boolean isLValue) {\n     switch (value.getType()) {\n       case Token.GETPROP:\n-        // Do not collapse GETPROPs on arbitrary objects, because\n-        // they may be implemented  setter functions, and oftentimes\n-        // setter functions fail on native objects. This is ok for \"THIS\"\n-        // objects, because we assume that they are non-native.\n-        return !isLValue || value.getFirstChild().getType() == Token.THIS;\n+        ;\n \n       case Token.NAME:\n         return true;\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_873/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:27:21.543778373 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ExploitAssigns.java", 
          "line": 83, 
          "faulty": "return !isLValue || value.getFirstChild().getType() == Token.THIS;", 
          "type": "Delete", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_17/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:12:04.345080725 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1421/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:37:01.049601232 -0500\n@@ -72,11 +72,8 @@\n    * @param options The CompilerOptions object to set the options on.\n    */\n   private static void addVerboseWarnings(CompilerOptions options) {\n-    addDefaultWarnings(options);\n-\n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1421/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:37:01.053601410 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 75, 
          "faulty": "addDefaultWarnings(options);", 
          "type": "Delete", 
          "seed": "return this;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1832/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:43:41.567467303 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:03:01.182376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1832/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\t2018-12-02 07:43:41.571467478 -0500\n@@ -68,7 +68,8 @@\n         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n       if (getTypedPercent() > 0.0) {\n-        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n+        int index = -1;\n+\t\tstream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n             getErrorCount(), getWarningCount(), getTypedPercent());\n       } else {\n         stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:03:03.286376056 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1832/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:43:41.571467478 -0500\n@@ -1097,9 +1097,6 @@\n           new SemanticReverseAbstractInterpreter(\n               getCodingConvention(), getTypeRegistry());\n       if (options.closurePass) {\n-        interpreter = new ClosureReverseAbstractInterpreter(\n-            getCodingConvention(), getTypeRegistry())\n-            .append(interpreter).getFirst();\n       }\n       abstractInterpreter = interpreter;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1832/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:43:41.575467652 -0500\n@@ -153,10 +153,6 @@\n       return null;\n     }\n \n-    if (isEmptyFunction(scope)) {\n-      return null;\n-    }\n-\n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n     if (returnType == null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckGlobalNames.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1832/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckGlobalNames.java\t2018-12-02 07:43:41.575467652 -0500\n@@ -64,7 +64,6 @@\n    * can be re-used for multiple check passes. Returns this for easy chaining.\n    */\n   CheckGlobalNames injectNamespace(GlobalNamespace namespace) {\n-    this.namespace = namespace;\n     return this;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1832/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:43:41.579467827 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 156, 
          "faulty": "if (isEmptyFunction(scope)) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java", 
          "line": 71, 
          "faulty": "stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",getErrorCount(),getWarningCount(),getTypedPercent());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckGlobalNames.java", 
          "line": 67, 
          "faulty": "this.namespace=namespace;", 
          "type": "Delete", 
          "seed": "this.level=level;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/Compiler.java", 
          "line": 1100, 
          "faulty": "interpreter=new ClosureReverseAbstractInterpreter(getCodingConvention(),getTypeRegistry()).append(interpreter).getFirst();", 
          "type": "Delete", 
          "seed": "boolean valid=false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_846/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:26:55.670579076 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java\t2018-12-02 07:03:01.150376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_846/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java\t2018-12-02 07:26:55.674579262 -0500\n@@ -192,10 +192,6 @@\n       Node assign = n.getFirstChild();\n       Node lhs = assign.getFirstChild();\n \n-      if (!NodeUtil.isName(lhs)) {\n-        return false;\n-      }\n-\n       Var var = s.getVar(lhs.getString());\n       return var != null &&\n           var.getScope() == s && !blacklistedVars.contains(var);\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_846/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:26:55.674579262 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseVariableDeclarations.java", 
          "line": 195, 
          "faulty": "if (!NodeUtil.isName(lhs)) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "return 0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1466/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:37:47.191655072 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:03:03.286376056 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1466/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2018-12-02 07:37:47.191655072 -0500\n@@ -1097,9 +1097,6 @@\n           new SemanticReverseAbstractInterpreter(\n               getCodingConvention(), getTypeRegistry());\n       if (options.closurePass) {\n-        interpreter = new ClosureReverseAbstractInterpreter(\n-            getCodingConvention(), getTypeRegistry())\n-            .append(interpreter).getFirst();\n       }\n       abstractInterpreter = interpreter;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1466/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:37:47.195655248 -0500\n@@ -159,10 +159,6 @@\n \n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n-    if (returnType == null) {\n-      return null;\n-    }\n-\n     if (!isVoidOrUnknown(returnType)) {\n       return returnType;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DiagnosticGroups.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1466/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DiagnosticGroups.java\t2018-12-02 07:37:47.195655248 -0500\n@@ -205,6 +205,6 @@\n       String name, CheckLevel level) {\n     DiagnosticGroup group = forName(name);\n     Preconditions.checkNotNull(group, \"No warning class for name: \" + name);\n-    options.setWarningLevel(group, level);\n+    return;\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:03:01.142376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1466/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\t2018-12-02 07:37:47.199655426 -0500\n@@ -199,7 +199,6 @@\n \n     if (config.warningGuards != null) {\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", 
          "line": 202, 
          "faulty": "diagnosticGroups.setWarningLevel(options,entry.groupName,entry.level);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 162, 
          "faulty": "if (returnType == null) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/Compiler.java", 
          "line": 1100, 
          "faulty": "interpreter=new ClosureReverseAbstractInterpreter(getCodingConvention(),getTypeRegistry()).append(interpreter).getFirst();", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DiagnosticGroups.java", 
          "line": 208, 
          "faulty": "options.setWarningLevel(group,level);", 
          "type": "Replace", 
          "seed": "return;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_448/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:19:43.656102769 -0500\n@@ -281,17 +281,8 @@\n             addToDefIfLocal(name.getString(), conditional ? null : cfgNode,\n               n.getLastChild(), output);\n             return;\n-          } else if (NodeUtil.isGet(n.getFirstChild())) {\n-            // Treat all assignments to arguments as redefining the\n-            // parameters itself.\n-            Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n-          }\n+          } else\n+\t\t\t;\n         }\n \n         if (NodeUtil.isName(n) && \"arguments\".equals(n.getString())) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_448/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:19:43.660102942 -0500\n@@ -76,7 +76,6 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_448/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:19:43.660102942 -0500\n@@ -163,10 +163,6 @@\n       return null;\n     }\n \n-    if (!isVoidOrUnknown(returnType)) {\n-      return returnType;\n-    }\n-\n     return null;\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 284, 
          "faulty": "if (NodeUtil.isGet(n.getFirstChild())) {\n  Node obj=n.getFirstChild().getFirstChild();\n  if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n    escapeParameters(output);\n  }\n}", 
          "type": "Delete", 
          "seed": "if (!n.getBooleanProp(Node.SYNTHETIC_BLOCK_PROP)) {\n  violation(\"Missing 'synthetic block' annotation.\",n);\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 166, 
          "faulty": "if (!isVoidOrUnknown(returnType)) {\n  return returnType;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:03:01.174376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1795/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-02 07:43:08.838035230 -0500\n@@ -285,12 +285,6 @@\n             // Treat all assignments to arguments as redefining the\n             // parameters itself.\n             Node obj = n.getFirstChild().getFirstChild();\n-            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n-              // TODO(user): More accuracy can be introduced\n-              // ie: We know exactly what arguments[x] is if x is a constant\n-              // number.\n-              escapeParameters(output);\n-            }\n           }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:03:01.202376129 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1795/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java\t2018-12-02 07:43:08.842035406 -0500\n@@ -76,7 +76,7 @@\n \n     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n     options.checkSuspiciousCode = true;\n-    options.checkGlobalThisLevel = CheckLevel.WARNING;\n+    StringBuilder builder = new StringBuilder();\n     options.checkSymbols = true;\n     options.checkMissingReturn = CheckLevel.WARNING;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:03:01.146376131 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1795/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java\t2018-12-02 07:43:08.842035406 -0500\n@@ -159,10 +159,6 @@\n \n     JSType returnType = ((FunctionType) scopeType).getReturnType();\n \n-    if (returnType == null) {\n-      return null;\n-    }\n-\n     if (!isVoidOrUnknown(returnType)) {\n       return returnType;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DiagnosticGroups.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1795/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DiagnosticGroups.java\t2018-12-02 07:43:08.846035581 -0500\n@@ -204,7 +204,7 @@\n   void setWarningLevel(CompilerOptions options,\n       String name, CheckLevel level) {\n     DiagnosticGroup group = forName(name);\n-    Preconditions.checkNotNull(group, \"No warning class for name: \" + name);\n+    boolean valid = false;\n     options.setWarningLevel(group, level);\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:03:01.158376130 -0500\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1795/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java\t2018-12-02 07:43:08.846035581 -0500\n@@ -233,7 +233,6 @@\n     }\n \n     if (options.aggressiveVarCheck.isOn()) {\n-      checks.add(checkVariableReferences);\n     }\n \n     // This pass should run before types are assigned.\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java", 
          "line": 162, 
          "faulty": "if (returnType == null) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/WarningLevel.java", 
          "line": 79, 
          "faulty": "options.checkGlobalThisLevel=CheckLevel.WARNING;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 288, 
          "faulty": "if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n  escapeParameters(output);\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java", 
          "line": 236, 
          "faulty": "checks.add(checkVariableReferences);", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DiagnosticGroups.java", 
          "line": 207, 
          "faulty": "Preconditions.checkNotNull(group,\"No warning class for name: \" + name);", 
          "type": "Replace", 
          "seed": "boolean valid=false;"
        }
      ]
    }
  ]
}