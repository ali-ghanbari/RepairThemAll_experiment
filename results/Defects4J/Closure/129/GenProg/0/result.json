{
  "repair_end": "2018-12-02 12:06:05.452012", 
  "repair_begin": "2018-12-02 11:32:41.329680", 
  "patches": [
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_683/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:50:01.310598836 -0500\n@@ -1454,7 +1454,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1543,6 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "int c=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1401/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:59:34.283826229 -0500\n@@ -1425,7 +1425,13 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n@@ -1454,7 +1460,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1549,9 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {\n+\t\t\treturn false;\n+\t\t}\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1401/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:59:34.287826237 -0500\n@@ -529,7 +529,6 @@\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n           addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:32:20.212016881 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1401/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:59:34.287826237 -0500\n@@ -56,13 +56,7 @@\n       case Token.GETELEM:\n         Node left = n.getFirstChild();\n         Node right = left.getNext();\n-        if (right.isString() &&\n-            NodeUtil.isValidPropertyName(right.getString())) {\n-          n.removeChild(left);\n-          n.removeChild(right);\n-          parent.replaceChild(n, IR.getprop(left, right));\n-          compiler.reportCodeChange();\n-        }\n+        StringBuilder builder = new StringBuilder();\n         break;\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 59, 
          "faulty": "if (right.isString() && NodeUtil.isValidPropertyName(right.getString())) {\n  n.removeChild(left);\n  n.removeChild(right);\n  parent.replaceChild(n,IR.getprop(left,right));\n  compiler.reportCodeChange();\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1395/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:59:29.951816829 -0500\n@@ -3162,7 +3162,7 @@\n       case Token.EXPR_RESULT:\n         return false;\n       case Token.CAST:\n-        return isExpressionResultUsed(parent);\n+        ;\n       case Token.HOOK:\n       case Token.AND:\n       case Token.OR:\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1395/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:59:29.951816829 -0500\n@@ -1425,7 +1425,13 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n@@ -1454,7 +1460,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1549,9 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {\n+\t\t\treturn false;\n+\t\t}\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1395/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:59:29.955816838 -0500\n@@ -529,7 +529,6 @@\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n           addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:32:20.212016881 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1395/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:59:29.955816838 -0500\n@@ -56,13 +56,7 @@\n       case Token.GETELEM:\n         Node left = n.getFirstChild();\n         Node right = left.getNext();\n-        if (right.isString() &&\n-            NodeUtil.isValidPropertyName(right.getString())) {\n-          n.removeChild(left);\n-          n.removeChild(right);\n-          parent.replaceChild(n, IR.getprop(left, right));\n-          compiler.reportCodeChange();\n-        }\n+        StringBuilder builder = new StringBuilder();\n         break;\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 3165, 
          "faulty": "return isExpressionResultUsed(parent);", 
          "type": "Delete", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 3165, 
          "faulty": "return isExpressionResultUsed(parent);", 
          "type": "Delete", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 59, 
          "faulty": "if (right.isString() && NodeUtil.isValidPropertyName(right.getString())) {\n  n.removeChild(left);\n  n.removeChild(right);\n  parent.replaceChild(n,IR.getprop(left,right));\n  compiler.reportCodeChange();\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 62, 
          "faulty": "n.removeChild(right);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1289/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:58:12.699649404 -0500\n@@ -3162,7 +3162,10 @@\n       case Token.EXPR_RESULT:\n         return false;\n       case Token.CAST:\n-        return isExpressionResultUsed(parent);\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn isExpressionResultUsed(parent);\n+\t\t}\n       case Token.HOOK:\n       case Token.AND:\n       case Token.OR:\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1289/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:58:12.699649404 -0500\n@@ -1425,7 +1425,13 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n@@ -1454,7 +1460,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1289/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:58:12.703649412 -0500\n@@ -529,7 +529,6 @@\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n           addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:32:20.212016881 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1289/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:58:12.703649412 -0500\n@@ -61,7 +61,6 @@\n           n.removeChild(left);\n           n.removeChild(right);\n           parent.replaceChild(n, IR.getprop(left, right));\n-          compiler.reportCodeChange();\n         }\n         break;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 64, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 3165, 
          "faulty": "return isExpressionResultUsed(parent);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1282/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:58:09.111641637 -0500\n@@ -3162,7 +3162,7 @@\n       case Token.EXPR_RESULT:\n         return false;\n       case Token.CAST:\n-        return isExpressionResultUsed(parent);\n+        ;\n       case Token.HOOK:\n       case Token.AND:\n       case Token.OR:\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1282/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:58:09.115641645 -0500\n@@ -1425,7 +1425,13 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n@@ -1454,7 +1460,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1549,9 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {\n+\t\t\treturn false;\n+\t\t}\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 3165, 
          "faulty": "return isExpressionResultUsed(parent);", 
          "type": "Delete", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1682/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:03:09.084276032 -0500\n@@ -3162,7 +3162,7 @@\n       case Token.EXPR_RESULT:\n         return false;\n       case Token.CAST:\n-        return isExpressionResultUsed(parent);\n+        ;\n       case Token.HOOK:\n       case Token.AND:\n       case Token.OR:\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1682/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:03:09.088276040 -0500\n@@ -1425,7 +1425,19 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\tif (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n@@ -1454,7 +1466,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1555,9 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {\n+\t\t\treturn false;\n+\t\t}\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1682/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:03:09.088276040 -0500\n@@ -529,7 +529,6 @@\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n           addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:32:20.212016881 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1682/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 06:03:09.088276040 -0500\n@@ -61,7 +61,6 @@\n           n.removeChild(left);\n           n.removeChild(right);\n           parent.replaceChild(n, IR.getprop(left, right));\n-          compiler.reportCodeChange();\n         }\n         break;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 3165, 
          "faulty": "return isExpressionResultUsed(parent);", 
          "type": "Delete", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 64, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_714/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:50:27.338653349 -0500\n@@ -129,7 +129,7 @@\n         case IS_DISPATCHER:      return \"is_dispatcher\";\n         case DIRECTIVES:         return \"directives\";\n         case DIRECT_EVAL:        return \"direct_eval\";\n-        case FREE_CALL:          return \"free_call\";\n+        case FREE_CALL:          ;\n         case STATIC_SOURCE_FILE:    return \"source_file\";\n         case INPUT_ID:  return \"input_id\";\n         case LENGTH:    return \"length\";\n@@ -1454,7 +1454,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1543,6 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 132, 
          "faulty": "return \"free_call\";", 
          "type": "Delete", 
          "seed": "return true;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1555/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:01:33.896075212 -0500\n@@ -3162,7 +3162,7 @@\n       case Token.EXPR_RESULT:\n         return false;\n       case Token.CAST:\n-        return isExpressionResultUsed(parent);\n+        ;\n       case Token.HOOK:\n       case Token.AND:\n       case Token.OR:\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1555/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:01:33.896075212 -0500\n@@ -129,7 +129,7 @@\n         case IS_DISPATCHER:      return \"is_dispatcher\";\n         case DIRECTIVES:         return \"directives\";\n         case DIRECT_EVAL:        return \"direct_eval\";\n-        case FREE_CALL:          return \"free_call\";\n+        case FREE_CALL:          ;\n         case STATIC_SOURCE_FILE:    return \"source_file\";\n         case INPUT_ID:  return \"input_id\";\n         case LENGTH:    return \"length\";\n@@ -1454,7 +1454,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1543,9 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {\n+\t\t\treturn false;\n+\t\t}\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 3165, 
          "faulty": "return isExpressionResultUsed(parent);", 
          "type": "Delete", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 3165, 
          "faulty": "return isExpressionResultUsed(parent);", 
          "type": "Delete", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 132, 
          "faulty": "return \"free_call\";", 
          "type": "Delete", 
          "seed": "int post1=this.getIntProp(INCRDECR_PROP);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1476/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:00:32.891947887 -0500\n@@ -1425,7 +1425,13 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n@@ -1454,7 +1460,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1549,9 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {\n+\t\t\treturn false;\n+\t\t}\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1476/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:00:32.891947887 -0500\n@@ -529,7 +529,6 @@\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n           addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:32:20.212016881 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1476/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 06:00:32.895947894 -0500\n@@ -61,7 +61,7 @@\n           n.removeChild(left);\n           n.removeChild(right);\n           parent.replaceChild(n, IR.getprop(left, right));\n-          compiler.reportCodeChange();\n+          int index = -1;\n         }\n         break;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/Normalize.java\t2018-12-02 05:32:20.232016880 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1476/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/Normalize.java\t2018-12-02 06:00:32.895947894 -0500\n@@ -411,7 +411,7 @@\n           break;\n \n         case Token.CAST:\n-          parent.replaceChild(n, n.removeFirstChild());\n+          ;\n           break;\n       }\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/Normalize.java", 
          "line": 414, 
          "faulty": "parent.replaceChild(n,n.removeFirstChild());", 
          "type": "Delete", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 64, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1104/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:55:46.291333436 -0500\n@@ -1454,7 +1454,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:32:20.212016881 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1104/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:55:46.295333445 -0500\n@@ -61,7 +61,6 @@\n           n.removeChild(left);\n           n.removeChild(right);\n           parent.replaceChild(n, IR.getprop(left, right));\n-          compiler.reportCodeChange();\n         }\n         break;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 64, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1540/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:01:23.156052707 -0500\n@@ -3162,7 +3162,10 @@\n       case Token.EXPR_RESULT:\n         return false;\n       case Token.CAST:\n-        return isExpressionResultUsed(parent);\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn isExpressionResultUsed(parent);\n+\t\t}\n       case Token.HOOK:\n       case Token.AND:\n       case Token.OR:\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1540/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:01:23.156052707 -0500\n@@ -1425,7 +1425,13 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n@@ -1454,7 +1460,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 3165, 
          "faulty": "return isExpressionResultUsed(parent);", 
          "type": "Delete", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 3165, 
          "faulty": "return isExpressionResultUsed(parent);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1427/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:59:54.035867506 -0500\n@@ -1454,7 +1454,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:32:20.212016881 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1427/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:59:54.035867506 -0500\n@@ -61,7 +61,6 @@\n           n.removeChild(left);\n           n.removeChild(right);\n           parent.replaceChild(n, IR.getprop(left, right));\n-          compiler.reportCodeChange();\n         }\n         break;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/Normalize.java\t2018-12-02 05:32:20.232016880 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1427/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/Normalize.java\t2018-12-02 05:59:54.039867513 -0500\n@@ -411,7 +411,7 @@\n           break;\n \n         case Token.CAST:\n-          parent.replaceChild(n, n.removeFirstChild());\n+          ;\n           break;\n       }\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 64, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/Normalize.java", 
          "line": 414, 
          "faulty": "parent.replaceChild(n,n.removeFirstChild());", 
          "type": "Delete", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1787/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:04:25.836439364 -0500\n@@ -1454,7 +1454,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1787/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:04:25.840439373 -0500\n@@ -529,7 +529,6 @@\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n           addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:32:20.212016881 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1787/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 06:04:25.840439373 -0500\n@@ -61,7 +61,6 @@\n           n.removeChild(left);\n           n.removeChild(right);\n           parent.replaceChild(n, IR.getprop(left, right));\n-          compiler.reportCodeChange();\n         }\n         break;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1787/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:04:25.840439373 -0500\n@@ -1320,8 +1320,6 @@\n    * Try to fold array-element. e.g [1, 2, 3][10];\n    */\n   private Node tryFoldGetElem(Node n, Node left, Node right) {\n-    Preconditions.checkArgument(n.isGetElem());\n-\n     if (left.isObjectLit()) {\n       return tryFoldObjectPropAccess(n, left, right);\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 64, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 1323, 
          "faulty": "Preconditions.checkArgument(n.isGetElem());", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1675/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:03:04.404266108 -0500\n@@ -129,7 +129,7 @@\n         case IS_DISPATCHER:      return \"is_dispatcher\";\n         case DIRECTIVES:         return \"directives\";\n         case DIRECT_EVAL:        return \"direct_eval\";\n-        case FREE_CALL:          return \"free_call\";\n+        case FREE_CALL:          ;\n         case STATIC_SOURCE_FILE:    return \"source_file\";\n         case INPUT_ID:  return \"input_id\";\n         case LENGTH:    return \"length\";\n@@ -1425,7 +1425,19 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\tif (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n@@ -1454,7 +1466,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1555,9 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {\n+\t\t\treturn false;\n+\t\t}\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/Normalize.java\t2018-12-02 05:32:20.232016880 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1675/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/Normalize.java\t2018-12-02 06:03:04.408266117 -0500\n@@ -411,7 +411,7 @@\n           break;\n \n         case Token.CAST:\n-          parent.replaceChild(n, n.removeFirstChild());\n+          ;\n           break;\n       }\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/Normalize.java", 
          "line": 414, 
          "faulty": "parent.replaceChild(n,n.removeFirstChild());", 
          "type": "Delete", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 132, 
          "faulty": "return \"free_call\";", 
          "type": "Delete", 
          "seed": "switch (getType()) {\ncase Token.NAME:\n  return getString().isEmpty() ? false : true;\ncase Token.THIS:\nreturn true;\ncase Token.GETPROP:\nreturn getFirstChild().isQualifiedName();\ndefault :\nreturn false;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1821/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:04:51.916495084 -0500\n@@ -129,7 +129,7 @@\n         case IS_DISPATCHER:      return \"is_dispatcher\";\n         case DIRECTIVES:         return \"directives\";\n         case DIRECT_EVAL:        return \"direct_eval\";\n-        case FREE_CALL:          return \"free_call\";\n+        case FREE_CALL:          ;\n         case STATIC_SOURCE_FILE:    return \"source_file\";\n         case INPUT_ID:  return \"input_id\";\n         case LENGTH:    return \"length\";\n@@ -1454,7 +1454,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1543,9 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {\n+\t\t\treturn false;\n+\t\t}\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1821/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:04:51.920495093 -0500\n@@ -529,7 +529,6 @@\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n           addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/Normalize.java\t2018-12-02 05:32:20.232016880 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1821/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/Normalize.java\t2018-12-02 06:04:51.920495093 -0500\n@@ -411,7 +411,7 @@\n           break;\n \n         case Token.CAST:\n-          parent.replaceChild(n, n.removeFirstChild());\n+          ;\n           break;\n       }\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/Normalize.java", 
          "line": 414, 
          "faulty": "parent.replaceChild(n,n.removeFirstChild());", 
          "type": "Delete", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 132, 
          "faulty": "return \"free_call\";", 
          "type": "Delete", 
          "seed": "switch (getType()) {\ncase Token.NAME:\n  return getString().isEmpty() ? false : true;\ncase Token.THIS:\nreturn true;\ncase Token.GETPROP:\nreturn getFirstChild().isQualifiedName();\ndefault :\nreturn false;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1271/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:58:00.275622516 -0500\n@@ -1425,7 +1425,13 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n@@ -1454,7 +1460,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1549,9 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {\n+\t\t\treturn false;\n+\t\t}\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:32:20.212016881 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1271/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:58:00.275622516 -0500\n@@ -61,7 +61,6 @@\n           n.removeChild(left);\n           n.removeChild(right);\n           parent.replaceChild(n, IR.getprop(left, right));\n-          compiler.reportCodeChange();\n         }\n         break;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 64, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Delete", 
          "seed": "return 0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_135/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:42:10.525485016 -0500\n@@ -3162,7 +3162,7 @@\n       case Token.EXPR_RESULT:\n         return false;\n       case Token.CAST:\n-        return isExpressionResultUsed(parent);\n+        StringBuilder builder = new StringBuilder();\n       case Token.HOOK:\n       case Token.AND:\n       case Token.OR:\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_135/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\t2018-12-02 05:42:10.529485026 -0500\n@@ -400,7 +400,6 @@\n     Node right = callTarget.getNext();\n     if (right != null) {\n       if (right.getNext() != null || !NodeUtil.isImmutableValue(right)) {\n-        return n;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_135/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:42:10.529485026 -0500\n@@ -1543,7 +1543,6 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 3165, 
          "faulty": "return isExpressionResultUsed(parent);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "if (type == Token.STRING_KEY) {\n  int quoted1=this.getIntProp(QUOTED_PROP);\n  int quoted2=node.getIntProp(QUOTED_PROP);\n  if (quoted1 != quoted2) {\n    return false;\n  }\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java", 
          "line": 403, 
          "faulty": "return n;", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1773/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:04:16.716419904 -0500\n@@ -129,7 +129,7 @@\n         case IS_DISPATCHER:      return \"is_dispatcher\";\n         case DIRECTIVES:         return \"directives\";\n         case DIRECT_EVAL:        return \"direct_eval\";\n-        case FREE_CALL:          return \"free_call\";\n+        case FREE_CALL:          ;\n         case STATIC_SOURCE_FILE:    return \"source_file\";\n         case INPUT_ID:  return \"input_id\";\n         case LENGTH:    return \"length\";\n@@ -1425,7 +1425,19 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\tif (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n@@ -1454,7 +1466,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1555,9 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {\n+\t\t\treturn false;\n+\t\t}\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1773/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:04:16.720419913 -0500\n@@ -529,7 +529,6 @@\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n           addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1773/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:04:16.720419913 -0500\n@@ -1322,9 +1322,7 @@\n   private Node tryFoldGetElem(Node n, Node left, Node right) {\n     Preconditions.checkArgument(n.isGetElem());\n \n-    if (left.isObjectLit()) {\n-      return tryFoldObjectPropAccess(n, left, right);\n-    }\n+    StringBuilder builder = new StringBuilder();\n \n     if (left.isArrayLit()) {\n       return tryFoldArrayAccess(n, left, right);\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 132, 
          "faulty": "return \"free_call\";", 
          "type": "Delete", 
          "seed": "int post1=this.getIntProp(INCRDECR_PROP);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 1325, 
          "faulty": "if (left.isObjectLit()) {\n  return tryFoldObjectPropAccess(n,left,right);\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1542/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:01:24.036054550 -0500\n@@ -1425,7 +1425,13 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n@@ -1454,7 +1460,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1549,9 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {\n+\t\t\treturn false;\n+\t\t}\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1542/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:01:24.040054559 -0500\n@@ -529,7 +529,6 @@\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n           addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:32:20.212016881 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1542/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 06:01:24.040054559 -0500\n@@ -61,7 +61,6 @@\n           n.removeChild(left);\n           n.removeChild(right);\n           parent.replaceChild(n, IR.getprop(left, right));\n-          compiler.reportCodeChange();\n         }\n         break;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 64, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 64, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1264/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:57:55.711612641 -0500\n@@ -3162,7 +3162,10 @@\n       case Token.EXPR_RESULT:\n         return false;\n       case Token.CAST:\n-        return isExpressionResultUsed(parent);\n+        {\n+\t\t\tfinal String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\treturn isExpressionResultUsed(parent);\n+\t\t}\n       case Token.HOOK:\n       case Token.AND:\n       case Token.OR:\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1264/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:57:55.715612650 -0500\n@@ -1454,7 +1454,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1543,6 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "String name=getString();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "JSDocInfo jsDocInfo=getJSDocInfo();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 3165, 
          "faulty": "return isExpressionResultUsed(parent);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1800/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:04:34.824458556 -0500\n@@ -1425,7 +1425,13 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n@@ -1454,7 +1460,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1800/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:04:34.824458556 -0500\n@@ -528,8 +528,6 @@\n         if (isIndirectEval(first)\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n-          addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 531, 
          "faulty": "addExpr(first,NodeUtil.precedence(Token.COMMA),Context.OTHER);", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_898/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\t2018-12-02 05:52:59.578976200 -0500\n@@ -400,7 +400,8 @@\n     Node right = callTarget.getNext();\n     if (right != null) {\n       if (right.getNext() != null || !NodeUtil.isImmutableValue(right)) {\n-        return n;\n+        int index = -1;\n+\t\treturn n;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_898/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:52:59.578976200 -0500\n@@ -1454,7 +1454,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:32:20.212016881 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_898/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:52:59.582976208 -0500\n@@ -61,7 +61,7 @@\n           n.removeChild(left);\n           n.removeChild(right);\n           parent.replaceChild(n, IR.getprop(left, right));\n-          compiler.reportCodeChange();\n+          int type = n.getType();\n         }\n         break;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java", 
          "line": 403, 
          "faulty": "return n;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 64, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1284/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:58:09.999643559 -0500\n@@ -1454,7 +1454,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1543,6 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1284/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:58:09.999643559 -0500\n@@ -529,7 +529,6 @@\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n           addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:32:20.212016881 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1284/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:58:10.003643568 -0500\n@@ -61,7 +61,6 @@\n           n.removeChild(left);\n           n.removeChild(right);\n           parent.replaceChild(n, IR.getprop(left, right));\n-          compiler.reportCodeChange();\n         }\n         break;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 64, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "String name=getString();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "JSDocInfo jsDocInfo=getJSDocInfo();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_605/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:48:54.770453642 -0500\n@@ -1454,7 +1454,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_605/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 05:48:54.774453650 -0500\n@@ -1322,10 +1322,6 @@\n   private Node tryFoldGetElem(Node n, Node left, Node right) {\n     Preconditions.checkArgument(n.isGetElem());\n \n-    if (left.isObjectLit()) {\n-      return tryFoldObjectPropAccess(n, left, right);\n-    }\n-\n     if (left.isArrayLit()) {\n       return tryFoldArrayAccess(n, left, right);\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 1325, 
          "faulty": "if (left.isObjectLit()) {\n  return tryFoldObjectPropAccess(n,left,right);\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1454/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:00:14.779910341 -0500\n@@ -3162,7 +3162,7 @@\n       case Token.EXPR_RESULT:\n         return false;\n       case Token.CAST:\n-        return isExpressionResultUsed(parent);\n+        ;\n       case Token.HOOK:\n       case Token.AND:\n       case Token.OR:\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1454/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:00:14.783910350 -0500\n@@ -1454,7 +1454,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1454/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:00:14.783910350 -0500\n@@ -529,7 +529,6 @@\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n           addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1454/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:00:14.783910350 -0500\n@@ -1322,7 +1322,8 @@\n   private Node tryFoldGetElem(Node n, Node left, Node right) {\n     Preconditions.checkArgument(n.isGetElem());\n \n-    if (left.isObjectLit()) {\n+    StringBuilder builder = new StringBuilder();\n+\tif (left.isObjectLit()) {\n       return tryFoldObjectPropAccess(n, left, right);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 1325, 
          "faulty": "if (left.isObjectLit()) {\n  return tryFoldObjectPropAccess(n,left,right);\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 3165, 
          "faulty": "return isExpressionResultUsed(parent);", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1780/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:04:21.176429420 -0500\n@@ -1454,7 +1454,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1543,9 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {\n+\t\t\treturn false;\n+\t\t}\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1713/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:03:32.344325418 -0500\n@@ -3162,7 +3162,7 @@\n       case Token.EXPR_RESULT:\n         return false;\n       case Token.CAST:\n-        return isExpressionResultUsed(parent);\n+        ;\n       case Token.HOOK:\n       case Token.AND:\n       case Token.OR:\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1713/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:03:32.348325426 -0500\n@@ -129,7 +129,7 @@\n         case IS_DISPATCHER:      return \"is_dispatcher\";\n         case DIRECTIVES:         return \"directives\";\n         case DIRECT_EVAL:        return \"direct_eval\";\n-        case FREE_CALL:          return \"free_call\";\n+        case FREE_CALL:          ;\n         case STATIC_SOURCE_FILE:    return \"source_file\";\n         case INPUT_ID:  return \"input_id\";\n         case LENGTH:    return \"length\";\n@@ -1425,7 +1425,31 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\tif (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\tif (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\tif (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n@@ -1454,7 +1478,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1567,9 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {\n+\t\t\treturn false;\n+\t\t}\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1713/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:03:32.348325426 -0500\n@@ -529,7 +529,6 @@\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n           addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1713/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:03:32.352325435 -0500\n@@ -1322,9 +1322,7 @@\n   private Node tryFoldGetElem(Node n, Node left, Node right) {\n     Preconditions.checkArgument(n.isGetElem());\n \n-    if (left.isObjectLit()) {\n-      return tryFoldObjectPropAccess(n, left, right);\n-    }\n+    StringBuilder builder = new StringBuilder();\n \n     if (left.isArrayLit()) {\n       return tryFoldArrayAccess(n, left, right);\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 3165, 
          "faulty": "return isExpressionResultUsed(parent);", 
          "type": "Delete", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 132, 
          "faulty": "return \"free_call\";", 
          "type": "Delete", 
          "seed": "int post1=this.getIntProp(INCRDECR_PROP);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 1325, 
          "faulty": "if (left.isObjectLit()) {\n  return tryFoldObjectPropAccess(n,left,right);\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1313/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:58:31.523690164 -0500\n@@ -3162,7 +3162,10 @@\n       case Token.EXPR_RESULT:\n         return false;\n       case Token.CAST:\n-        return isExpressionResultUsed(parent);\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn isExpressionResultUsed(parent);\n+\t\t}\n       case Token.HOOK:\n       case Token.AND:\n       case Token.OR:\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1313/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:58:31.527690173 -0500\n@@ -1425,7 +1425,13 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n@@ -1454,7 +1460,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:32:20.212016881 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1313/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:58:31.527690173 -0500\n@@ -61,7 +61,6 @@\n           n.removeChild(left);\n           n.removeChild(right);\n           parent.replaceChild(n, IR.getprop(left, right));\n-          compiler.reportCodeChange();\n         }\n         break;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 64, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 3165, 
          "faulty": "return isExpressionResultUsed(parent);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 64, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Delete", 
          "seed": "return 0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1680/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:03:08.176274105 -0500\n@@ -1454,7 +1454,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:32:20.212016881 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1680/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 06:03:08.176274105 -0500\n@@ -56,13 +56,7 @@\n       case Token.GETELEM:\n         Node left = n.getFirstChild();\n         Node right = left.getNext();\n-        if (right.isString() &&\n-            NodeUtil.isValidPropertyName(right.getString())) {\n-          n.removeChild(left);\n-          n.removeChild(right);\n-          parent.replaceChild(n, IR.getprop(left, right));\n-          compiler.reportCodeChange();\n-        }\n+        StringBuilder builder = new StringBuilder();\n         break;\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 59, 
          "faulty": "if (right.isString() && NodeUtil.isValidPropertyName(right.getString())) {\n  n.removeChild(left);\n  n.removeChild(right);\n  parent.replaceChild(n,IR.getprop(left,right));\n  compiler.reportCodeChange();\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 62, 
          "faulty": "n.removeChild(right);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1354/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:59:01.739755643 -0500\n@@ -3162,7 +3162,7 @@\n       case Token.EXPR_RESULT:\n         return false;\n       case Token.CAST:\n-        return isExpressionResultUsed(parent);\n+        ;\n       case Token.HOOK:\n       case Token.AND:\n       case Token.OR:\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1354/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:59:01.739755643 -0500\n@@ -1454,7 +1454,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1543,6 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1354/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:59:01.743755652 -0500\n@@ -529,7 +529,6 @@\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n           addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 3165, 
          "faulty": "return isExpressionResultUsed(parent);", 
          "type": "Delete", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "JSDocInfo jsDocInfo=getJSDocInfo();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1566/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:01:41.068090260 -0500\n@@ -3162,7 +3162,7 @@\n       case Token.EXPR_RESULT:\n         return false;\n       case Token.CAST:\n-        return isExpressionResultUsed(parent);\n+        ;\n       case Token.HOOK:\n       case Token.AND:\n       case Token.OR:\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1566/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:01:41.068090260 -0500\n@@ -1425,7 +1425,25 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\tif (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\tif (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n@@ -1454,7 +1472,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1561,9 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {\n+\t\t\treturn false;\n+\t\t}\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1566/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:01:41.072090268 -0500\n@@ -528,8 +528,6 @@\n         if (isIndirectEval(first)\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n-          addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 3165, 
          "faulty": "return isExpressionResultUsed(parent);", 
          "type": "Delete", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 531, 
          "faulty": "addExpr(first,NodeUtil.precedence(Token.COMMA),Context.OTHER);", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1222/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:57:24.563545294 -0500\n@@ -3162,7 +3162,7 @@\n       case Token.EXPR_RESULT:\n         return false;\n       case Token.CAST:\n-        return isExpressionResultUsed(parent);\n+        ;\n       case Token.HOOK:\n       case Token.AND:\n       case Token.OR:\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1222/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:57:24.563545294 -0500\n@@ -1454,7 +1454,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1543,6 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "String name=getString();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "JSDocInfo jsDocInfo=getJSDocInfo();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 3165, 
          "faulty": "return isExpressionResultUsed(parent);", 
          "type": "Delete", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_586/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:48:39.178418044 -0500\n@@ -3162,7 +3162,7 @@\n       case Token.EXPR_RESULT:\n         return false;\n       case Token.CAST:\n-        return isExpressionResultUsed(parent);\n+        ;\n       case Token.HOOK:\n       case Token.AND:\n       case Token.OR:\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_586/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:48:39.178418044 -0500\n@@ -1454,7 +1454,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 3165, 
          "faulty": "return isExpressionResultUsed(parent);", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1688/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:03:12.640283575 -0500\n@@ -1425,7 +1425,13 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n@@ -1454,7 +1460,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1549,9 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {\n+\t\t\treturn false;\n+\t\t}\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1688/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:03:12.644283583 -0500\n@@ -528,8 +528,6 @@\n         if (isIndirectEval(first)\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n-          addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:32:20.212016881 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1688/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 06:03:12.644283583 -0500\n@@ -61,7 +61,6 @@\n           n.removeChild(left);\n           n.removeChild(right);\n           parent.replaceChild(n, IR.getprop(left, right));\n-          compiler.reportCodeChange();\n         }\n         break;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 64, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 531, 
          "faulty": "addExpr(first,NodeUtil.precedence(Token.COMMA),Context.OTHER);", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1526/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:01:14.124033808 -0500\n@@ -3162,7 +3162,7 @@\n       case Token.EXPR_RESULT:\n         return false;\n       case Token.CAST:\n-        return isExpressionResultUsed(parent);\n+        ;\n       case Token.HOOK:\n       case Token.AND:\n       case Token.OR:\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1526/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:01:14.128033817 -0500\n@@ -1454,7 +1454,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1526/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:01:14.128033817 -0500\n@@ -529,7 +529,6 @@\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n           addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:32:20.212016881 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1526/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 06:01:14.128033817 -0500\n@@ -61,7 +61,6 @@\n           n.removeChild(left);\n           n.removeChild(right);\n           parent.replaceChild(n, IR.getprop(left, right));\n-          compiler.reportCodeChange();\n         }\n         break;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1526/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:01:14.128033817 -0500\n@@ -1322,7 +1322,8 @@\n   private Node tryFoldGetElem(Node n, Node left, Node right) {\n     Preconditions.checkArgument(n.isGetElem());\n \n-    if (left.isObjectLit()) {\n+    StringBuilder builder = new StringBuilder();\n+\tif (left.isObjectLit()) {\n       return tryFoldObjectPropAccess(n, left, right);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 64, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 3165, 
          "faulty": "return isExpressionResultUsed(parent);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 1325, 
          "faulty": "if (left.isObjectLit()) {\n  return tryFoldObjectPropAccess(n,left,right);\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 3165, 
          "faulty": "return isExpressionResultUsed(parent);", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1315/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:58:32.427692122 -0500\n@@ -3162,7 +3162,10 @@\n       case Token.EXPR_RESULT:\n         return false;\n       case Token.CAST:\n-        return isExpressionResultUsed(parent);\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn isExpressionResultUsed(parent);\n+\t\t}\n       case Token.HOOK:\n       case Token.AND:\n       case Token.OR:\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1315/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:58:32.431692130 -0500\n@@ -1454,7 +1454,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1315/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:58:32.431692130 -0500\n@@ -529,7 +529,6 @@\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n           addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:32:20.212016881 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1315/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:58:32.435692140 -0500\n@@ -59,9 +59,9 @@\n         if (right.isString() &&\n             NodeUtil.isValidPropertyName(right.getString())) {\n           n.removeChild(left);\n-          n.removeChild(right);\n+          int start = 0;\n+\t\tn.removeChild(right);\n           parent.replaceChild(n, IR.getprop(left, right));\n-          compiler.reportCodeChange();\n         }\n         break;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 64, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 3165, 
          "faulty": "return isExpressionResultUsed(parent);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 62, 
          "faulty": "n.removeChild(right);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1686/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:03:11.744281674 -0500\n@@ -1425,7 +1425,13 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n@@ -1454,7 +1460,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1549,9 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {\n+\t\t\treturn false;\n+\t\t}\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1686/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:03:11.744281674 -0500\n@@ -1322,9 +1322,7 @@\n   private Node tryFoldGetElem(Node n, Node left, Node right) {\n     Preconditions.checkArgument(n.isGetElem());\n \n-    if (left.isObjectLit()) {\n-      return tryFoldObjectPropAccess(n, left, right);\n-    }\n+    StringBuilder builder = new StringBuilder();\n \n     if (left.isArrayLit()) {\n       return tryFoldArrayAccess(n, left, right);\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 1325, 
          "faulty": "if (left.isObjectLit()) {\n  return tryFoldObjectPropAccess(n,left,right);\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_971/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:54:00.191106136 -0500\n@@ -3162,7 +3162,10 @@\n       case Token.EXPR_RESULT:\n         return false;\n       case Token.CAST:\n-        return isExpressionResultUsed(parent);\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn isExpressionResultUsed(parent);\n+\t\t}\n       case Token.HOOK:\n       case Token.AND:\n       case Token.OR:\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_971/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:54:00.195106144 -0500\n@@ -1454,7 +1454,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_971/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:54:00.199106153 -0500\n@@ -529,7 +529,6 @@\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n           addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 3165, 
          "faulty": "return isExpressionResultUsed(parent);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1357/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:59:03.539759546 -0500\n@@ -1425,7 +1425,13 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n@@ -1454,7 +1460,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1549,9 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {\n+\t\t\treturn false;\n+\t\t}\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1357/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:59:03.543759554 -0500\n@@ -529,7 +529,6 @@\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n           addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:32:20.212016881 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1357/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:59:03.543759554 -0500\n@@ -56,13 +56,7 @@\n       case Token.GETELEM:\n         Node left = n.getFirstChild();\n         Node right = left.getNext();\n-        if (right.isString() &&\n-            NodeUtil.isValidPropertyName(right.getString())) {\n-          n.removeChild(left);\n-          n.removeChild(right);\n-          parent.replaceChild(n, IR.getprop(left, right));\n-          compiler.reportCodeChange();\n-        }\n+        StringBuilder builder = new StringBuilder();\n         break;\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 59, 
          "faulty": "if (right.isString() && NodeUtil.isValidPropertyName(right.getString())) {\n  n.removeChild(left);\n  n.removeChild(right);\n  parent.replaceChild(n,IR.getprop(left,right));\n  compiler.reportCodeChange();\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 62, 
          "faulty": "n.removeChild(right);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1367/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:59:09.063771522 -0500\n@@ -1454,7 +1454,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1543,9 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {\n+\t\t\treturn false;\n+\t\t}\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1367/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:59:09.067771532 -0500\n@@ -529,7 +529,6 @@\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n           addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1249/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:57:44.095587516 -0500\n@@ -1454,7 +1454,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1249/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:57:44.095587516 -0500\n@@ -527,7 +527,6 @@\n         // that must be preserved.\n         if (isIndirectEval(first)\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n-          add(\"(0,\");\n           addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n           add(\")\");\n         } else {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 530, 
          "faulty": "add(\"(0,\");", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1392/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:59:28.027812655 -0500\n@@ -3162,7 +3162,10 @@\n       case Token.EXPR_RESULT:\n         return false;\n       case Token.CAST:\n-        return isExpressionResultUsed(parent);\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn isExpressionResultUsed(parent);\n+\t\t}\n       case Token.HOOK:\n       case Token.AND:\n       case Token.OR:\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1392/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:59:28.027812655 -0500\n@@ -1425,7 +1425,13 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n@@ -1454,7 +1460,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1549,6 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:32:20.212016881 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1392/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:59:28.031812663 -0500\n@@ -61,7 +61,6 @@\n           n.removeChild(left);\n           n.removeChild(right);\n           parent.replaceChild(n, IR.getprop(left, right));\n-          compiler.reportCodeChange();\n         }\n         break;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "String name=getString();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "JSDocInfo jsDocInfo=getJSDocInfo();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 64, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 64, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 3165, 
          "faulty": "return isExpressionResultUsed(parent);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1449/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:00:11.175902886 -0500\n@@ -3162,7 +3162,7 @@\n       case Token.EXPR_RESULT:\n         return false;\n       case Token.CAST:\n-        return isExpressionResultUsed(parent);\n+        ;\n       case Token.HOOK:\n       case Token.AND:\n       case Token.OR:\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1449/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:00:11.179902894 -0500\n@@ -1454,7 +1454,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:32:20.212016881 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1449/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 06:00:11.179902894 -0500\n@@ -61,7 +61,6 @@\n           n.removeChild(left);\n           n.removeChild(right);\n           parent.replaceChild(n, IR.getprop(left, right));\n-          compiler.reportCodeChange();\n         }\n         break;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1449/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:00:11.183902903 -0500\n@@ -1322,7 +1322,8 @@\n   private Node tryFoldGetElem(Node n, Node left, Node right) {\n     Preconditions.checkArgument(n.isGetElem());\n \n-    if (left.isObjectLit()) {\n+    StringBuilder builder = new StringBuilder();\n+\tif (left.isObjectLit()) {\n       return tryFoldObjectPropAccess(n, left, right);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 64, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 3165, 
          "faulty": "return isExpressionResultUsed(parent);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 1325, 
          "faulty": "if (left.isObjectLit()) {\n  return tryFoldObjectPropAccess(n,left,right);\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 3165, 
          "faulty": "return isExpressionResultUsed(parent);", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1558/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:01:35.660078913 -0500\n@@ -1454,7 +1454,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1543,7 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        NodeMismatch res = null;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1558/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:01:35.664078920 -0500\n@@ -529,7 +529,6 @@\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n           addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:32:20.212016881 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1558/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 06:01:35.664078920 -0500\n@@ -61,7 +61,6 @@\n           n.removeChild(left);\n           n.removeChild(right);\n           parent.replaceChild(n, IR.getprop(left, right));\n-          compiler.reportCodeChange();\n         }\n         break;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 64, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "NodeMismatch res=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_990/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:54:14.091135816 -0500\n@@ -3162,7 +3162,7 @@\n       case Token.EXPR_RESULT:\n         return false;\n       case Token.CAST:\n-        return isExpressionResultUsed(parent);\n+        ;\n       case Token.HOOK:\n       case Token.AND:\n       case Token.OR:\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_990/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:54:14.095135824 -0500\n@@ -1454,7 +1454,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_990/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:54:14.095135824 -0500\n@@ -529,7 +529,6 @@\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n           addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 3165, 
          "faulty": "return isExpressionResultUsed(parent);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1798/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:04:33.940456668 -0500\n@@ -3162,7 +3162,7 @@\n       case Token.EXPR_RESULT:\n         return false;\n       case Token.CAST:\n-        return isExpressionResultUsed(parent);\n+        ;\n       case Token.HOOK:\n       case Token.AND:\n       case Token.OR:\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1798/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:04:33.940456668 -0500\n@@ -129,7 +129,7 @@\n         case IS_DISPATCHER:      return \"is_dispatcher\";\n         case DIRECTIVES:         return \"directives\";\n         case DIRECT_EVAL:        return \"direct_eval\";\n-        case FREE_CALL:          return \"free_call\";\n+        case FREE_CALL:          ;\n         case STATIC_SOURCE_FILE:    return \"source_file\";\n         case INPUT_ID:  return \"input_id\";\n         case LENGTH:    return \"length\";\n@@ -1425,7 +1425,31 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\tif (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\tif (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\tif (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n@@ -1454,7 +1478,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1567,9 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {\n+\t\t\treturn false;\n+\t\t}\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1798/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:04:33.944456676 -0500\n@@ -529,7 +529,6 @@\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n           addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/Normalize.java\t2018-12-02 05:32:20.232016880 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1798/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/Normalize.java\t2018-12-02 06:04:33.944456676 -0500\n@@ -411,7 +411,7 @@\n           break;\n \n         case Token.CAST:\n-          parent.replaceChild(n, n.removeFirstChild());\n+          ;\n           break;\n       }\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 3165, 
          "faulty": "return isExpressionResultUsed(parent);", 
          "type": "Delete", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/Normalize.java", 
          "line": 414, 
          "faulty": "parent.replaceChild(n,n.removeFirstChild());", 
          "type": "Delete", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 132, 
          "faulty": "return \"free_call\";", 
          "type": "Delete", 
          "seed": "switch (getType()) {\ncase Token.NAME:\n  return getString().isEmpty() ? false : true;\ncase Token.THIS:\nreturn true;\ncase Token.GETPROP:\nreturn getFirstChild().isQualifiedName();\ndefault :\nreturn false;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_974/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:54:02.119110259 -0500\n@@ -1454,7 +1454,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_974/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:54:02.119110259 -0500\n@@ -527,9 +527,7 @@\n         // that must be preserved.\n         if (isIndirectEval(first)\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n-          add(\"(0,\");\n           addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 530, 
          "faulty": "add(\"(0,\");", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1244/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:57:40.611579982 -0500\n@@ -1454,7 +1454,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1244/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:57:40.615579990 -0500\n@@ -529,7 +529,6 @@\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n           addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:32:20.212016881 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1244/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:57:40.615579990 -0500\n@@ -61,7 +61,6 @@\n           n.removeChild(left);\n           n.removeChild(right);\n           parent.replaceChild(n, IR.getprop(left, right));\n-          compiler.reportCodeChange();\n         }\n         break;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 64, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1410/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:59:41.311841325 -0500\n@@ -3162,7 +3162,7 @@\n       case Token.EXPR_RESULT:\n         return false;\n       case Token.CAST:\n-        return isExpressionResultUsed(parent);\n+        final String PARAM_NAME = \"jscomp_throw_param\";\n       case Token.HOOK:\n       case Token.AND:\n       case Token.OR:\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1410/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:59:41.311841325 -0500\n@@ -1454,7 +1454,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1543,9 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {\n+\t\t\treturn false;\n+\t\t}\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:32:20.212016881 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1410/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:59:41.315841332 -0500\n@@ -56,13 +56,16 @@\n       case Token.GETELEM:\n         Node left = n.getFirstChild();\n         Node right = left.getNext();\n-        if (right.isString() &&\n-            NodeUtil.isValidPropertyName(right.getString())) {\n-          n.removeChild(left);\n-          n.removeChild(right);\n-          parent.replaceChild(n, IR.getprop(left, right));\n-          compiler.reportCodeChange();\n-        }\n+        {\n+\t\t\tint start = 0;\n+\t\t\tif (right.isString()\n+\t\t\t\t\t&& NodeUtil.isValidPropertyName(right.getString())) {\n+\t\t\t\tn.removeChild(left);\n+\t\t\t\tn.removeChild(right);\n+\t\t\t\tparent.replaceChild(n, IR.getprop(left, right));\n+\t\t\t\tcompiler.reportCodeChange();\n+\t\t\t}\n+\t\t}\n         break;\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 3165, 
          "faulty": "return isExpressionResultUsed(parent);", 
          "type": "Replace", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 59, 
          "faulty": "if (right.isString() && NodeUtil.isValidPropertyName(right.getString())) {\n  n.removeChild(left);\n  n.removeChild(right);\n  parent.replaceChild(n,IR.getprop(left,right));\n  compiler.reportCodeChange();\n}", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1733/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:03:46.948356478 -0500\n@@ -1425,7 +1425,13 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n@@ -1454,7 +1460,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1549,9 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {\n+\t\t\treturn false;\n+\t\t}\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1733/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:03:46.948356478 -0500\n@@ -529,7 +529,7 @@\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n           addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n+          StringBuilder builder = new StringBuilder();\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/Normalize.java\t2018-12-02 05:32:20.232016880 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1733/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/Normalize.java\t2018-12-02 06:03:46.948356478 -0500\n@@ -411,7 +411,7 @@\n           break;\n \n         case Token.CAST:\n-          parent.replaceChild(n, n.removeFirstChild());\n+          ;\n           break;\n       }\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/Normalize.java", 
          "line": 414, 
          "faulty": "parent.replaceChild(n,n.removeFirstChild());", 
          "type": "Delete", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1201/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:57:07.235507866 -0500\n@@ -1454,7 +1454,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1201/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:57:07.239507875 -0500\n@@ -527,9 +527,7 @@\n         // that must be preserved.\n         if (isIndirectEval(first)\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n-          add(\"(0,\");\n           addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1201/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 05:57:07.239507875 -0500\n@@ -1320,8 +1320,6 @@\n    * Try to fold array-element. e.g [1, 2, 3][10];\n    */\n   private Node tryFoldGetElem(Node n, Node left, Node right) {\n-    Preconditions.checkArgument(n.isGetElem());\n-\n     if (left.isObjectLit()) {\n       return tryFoldObjectPropAccess(n, left, right);\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 1323, 
          "faulty": "Preconditions.checkArgument(n.isGetElem());", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 530, 
          "faulty": "add(\"(0,\");", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_10/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:40:19.713188322 -0500\n@@ -1543,7 +1543,6 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "return toStringTreeImpl();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1423/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:59:52.251863831 -0500\n@@ -3162,7 +3162,7 @@\n       case Token.EXPR_RESULT:\n         return false;\n       case Token.CAST:\n-        return isExpressionResultUsed(parent);\n+        ;\n       case Token.HOOK:\n       case Token.AND:\n       case Token.OR:\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1423/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:59:52.255863838 -0500\n@@ -1425,7 +1425,13 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n@@ -1454,7 +1460,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:32:20.212016881 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1423/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:59:52.255863838 -0500\n@@ -61,7 +61,6 @@\n           n.removeChild(left);\n           n.removeChild(right);\n           parent.replaceChild(n, IR.getprop(left, right));\n-          compiler.reportCodeChange();\n         }\n         break;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1423/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 05:59:52.255863838 -0500\n@@ -1322,7 +1322,8 @@\n   private Node tryFoldGetElem(Node n, Node left, Node right) {\n     Preconditions.checkArgument(n.isGetElem());\n \n-    if (left.isObjectLit()) {\n+    StringBuilder builder = new StringBuilder();\n+\tif (left.isObjectLit()) {\n       return tryFoldObjectPropAccess(n, left, right);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 64, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 64, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 3165, 
          "faulty": "return isExpressionResultUsed(parent);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 1325, 
          "faulty": "if (left.isObjectLit()) {\n  return tryFoldObjectPropAccess(n,left,right);\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 3165, 
          "faulty": "return isExpressionResultUsed(parent);", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1561/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:01:37.528082830 -0500\n@@ -3162,7 +3162,7 @@\n       case Token.EXPR_RESULT:\n         return false;\n       case Token.CAST:\n-        return isExpressionResultUsed(parent);\n+        ;\n       case Token.HOOK:\n       case Token.AND:\n       case Token.OR:\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1561/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:01:37.532082839 -0500\n@@ -1425,7 +1425,13 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n@@ -1454,7 +1460,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1561/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:01:37.532082839 -0500\n@@ -529,7 +529,6 @@\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n           addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:32:20.212016881 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1561/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 06:01:37.532082839 -0500\n@@ -61,7 +61,6 @@\n           n.removeChild(left);\n           n.removeChild(right);\n           parent.replaceChild(n, IR.getprop(left, right));\n-          compiler.reportCodeChange();\n         }\n         break;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1561/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:01:37.532082839 -0500\n@@ -1322,7 +1322,8 @@\n   private Node tryFoldGetElem(Node n, Node left, Node right) {\n     Preconditions.checkArgument(n.isGetElem());\n \n-    if (left.isObjectLit()) {\n+    StringBuilder builder = new StringBuilder();\n+\tif (left.isObjectLit()) {\n       return tryFoldObjectPropAccess(n, left, right);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 64, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 64, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 3165, 
          "faulty": "return isExpressionResultUsed(parent);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 1325, 
          "faulty": "if (left.isObjectLit()) {\n  return tryFoldObjectPropAccess(n,left,right);\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 3165, 
          "faulty": "return isExpressionResultUsed(parent);", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_856/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:52:25.866904222 -0500\n@@ -1454,7 +1454,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_856/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 05:52:25.870904231 -0500\n@@ -1320,8 +1320,6 @@\n    * Try to fold array-element. e.g [1, 2, 3][10];\n    */\n   private Node tryFoldGetElem(Node n, Node left, Node right) {\n-    Preconditions.checkArgument(n.isGetElem());\n-\n     if (left.isObjectLit()) {\n       return tryFoldObjectPropAccess(n, left, right);\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 1323, 
          "faulty": "Preconditions.checkArgument(n.isGetElem());", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1587/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:01:56.204122066 -0500\n@@ -3162,7 +3162,10 @@\n       case Token.EXPR_RESULT:\n         return false;\n       case Token.CAST:\n-        return isExpressionResultUsed(parent);\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn isExpressionResultUsed(parent);\n+\t\t}\n       case Token.HOOK:\n       case Token.AND:\n       case Token.OR:\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1587/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:01:56.204122066 -0500\n@@ -1454,7 +1454,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1587/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:01:56.208122074 -0500\n@@ -528,8 +528,8 @@\n         if (isIndirectEval(first)\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n-          addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n+          final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\taddExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 3165, 
          "faulty": "return isExpressionResultUsed(parent);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 531, 
          "faulty": "addExpr(first,NodeUtil.precedence(Token.COMMA),Context.OTHER);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1363/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:59:07.147767367 -0500\n@@ -3162,7 +3162,7 @@\n       case Token.EXPR_RESULT:\n         return false;\n       case Token.CAST:\n-        return isExpressionResultUsed(parent);\n+        final String PARAM_NAME = \"jscomp_throw_param\";\n       case Token.HOOK:\n       case Token.AND:\n       case Token.OR:\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1363/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:59:07.155767386 -0500\n@@ -1425,7 +1425,13 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n@@ -1454,7 +1460,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1549,9 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {\n+\t\t\treturn false;\n+\t\t}\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1363/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:59:07.155767386 -0500\n@@ -529,7 +529,6 @@\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n           addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:32:20.212016881 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1363/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:59:07.155767386 -0500\n@@ -56,13 +56,16 @@\n       case Token.GETELEM:\n         Node left = n.getFirstChild();\n         Node right = left.getNext();\n-        if (right.isString() &&\n-            NodeUtil.isValidPropertyName(right.getString())) {\n-          n.removeChild(left);\n-          n.removeChild(right);\n-          parent.replaceChild(n, IR.getprop(left, right));\n-          compiler.reportCodeChange();\n-        }\n+        {\n+\t\t\tint start = 0;\n+\t\t\tif (right.isString()\n+\t\t\t\t\t&& NodeUtil.isValidPropertyName(right.getString())) {\n+\t\t\t\tn.removeChild(left);\n+\t\t\t\tn.removeChild(right);\n+\t\t\t\tparent.replaceChild(n, IR.getprop(left, right));\n+\t\t\t\tcompiler.reportCodeChange();\n+\t\t\t}\n+\t\t}\n         break;\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 3165, 
          "faulty": "return isExpressionResultUsed(parent);", 
          "type": "Replace", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 59, 
          "faulty": "if (right.isString() && NodeUtil.isValidPropertyName(right.getString())) {\n  n.removeChild(left);\n  n.removeChild(right);\n  parent.replaceChild(n,IR.getprop(left,right));\n  compiler.reportCodeChange();\n}", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1238/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:57:36.023570064 -0500\n@@ -3162,7 +3162,7 @@\n       case Token.EXPR_RESULT:\n         return false;\n       case Token.CAST:\n-        return isExpressionResultUsed(parent);\n+        ;\n       case Token.HOOK:\n       case Token.AND:\n       case Token.OR:\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1238/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:57:36.023570064 -0500\n@@ -1425,7 +1425,13 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n@@ -1454,7 +1460,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1549,9 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {\n+\t\t\treturn false;\n+\t\t}\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1238/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:57:36.027570072 -0500\n@@ -529,7 +529,6 @@\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n           addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 3165, 
          "faulty": "return isExpressionResultUsed(parent);", 
          "type": "Delete", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1261/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:57:53.907608739 -0500\n@@ -1425,7 +1425,13 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n@@ -1543,7 +1549,9 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {\n+\t\t\treturn false;\n+\t\t}\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1596/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:02:03.356137117 -0500\n@@ -129,7 +129,7 @@\n         case IS_DISPATCHER:      return \"is_dispatcher\";\n         case DIRECTIVES:         return \"directives\";\n         case DIRECT_EVAL:        return \"direct_eval\";\n-        case FREE_CALL:          return \"free_call\";\n+        case FREE_CALL:          ;\n         case STATIC_SOURCE_FILE:    return \"source_file\";\n         case INPUT_ID:  return \"input_id\";\n         case LENGTH:    return \"length\";\n@@ -1425,7 +1425,19 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\tif (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n@@ -1454,7 +1466,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n@@ -1543,7 +1554,9 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {\n+\t\t\treturn false;\n+\t\t}\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1596/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:02:03.356137117 -0500\n@@ -529,7 +529,6 @@\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n           addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 132, 
          "faulty": "return \"free_call\";", 
          "type": "Delete", 
          "seed": "int post1=this.getIntProp(INCRDECR_PROP);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return new Node(Token.RETURN);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1340/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:58:51.183732762 -0500\n@@ -3162,7 +3162,7 @@\n       case Token.EXPR_RESULT:\n         return false;\n       case Token.CAST:\n-        return isExpressionResultUsed(parent);\n+        ;\n       case Token.HOOK:\n       case Token.AND:\n       case Token.OR:\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1340/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:58:51.183732762 -0500\n@@ -1454,7 +1454,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1543,9 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {\n+\t\t\treturn false;\n+\t\t}\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1340/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:58:51.187732770 -0500\n@@ -529,7 +529,6 @@\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n           addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 3165, 
          "faulty": "return isExpressionResultUsed(parent);", 
          "type": "Delete", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1381/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:59:20.787796950 -0500\n@@ -129,7 +129,7 @@\n         case IS_DISPATCHER:      return \"is_dispatcher\";\n         case DIRECTIVES:         return \"directives\";\n         case DIRECT_EVAL:        return \"direct_eval\";\n-        case FREE_CALL:          return \"free_call\";\n+        case FREE_CALL:          ;\n         case STATIC_SOURCE_FILE:    return \"source_file\";\n         case INPUT_ID:  return \"input_id\";\n         case LENGTH:    return \"length\";\n@@ -1425,7 +1425,19 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\tif (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n@@ -1454,7 +1466,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        StringBuilder sb = new StringBuilder();\n       }\n     }\n     return res;\n@@ -1543,7 +1555,9 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {\n+\t\t\treturn false;\n+\t\t}\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1381/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:59:20.787796950 -0500\n@@ -529,7 +529,6 @@\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n           addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 132, 
          "faulty": "return \"free_call\";", 
          "type": "Delete", 
          "seed": "return getIntProp(propType) != 0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "StringBuilder sb=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1834/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:05:01.868516371 -0500\n@@ -1454,7 +1454,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:32:20.212016881 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1834/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 06:05:01.872516380 -0500\n@@ -61,7 +61,6 @@\n           n.removeChild(left);\n           n.removeChild(right);\n           parent.replaceChild(n, IR.getprop(left, right));\n-          compiler.reportCodeChange();\n         }\n         break;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1834/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:05:01.872516380 -0500\n@@ -1320,8 +1320,6 @@\n    * Try to fold array-element. e.g [1, 2, 3][10];\n    */\n   private Node tryFoldGetElem(Node n, Node left, Node right) {\n-    Preconditions.checkArgument(n.isGetElem());\n-\n     if (left.isObjectLit()) {\n       return tryFoldObjectPropAccess(n, left, right);\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 64, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 1323, 
          "faulty": "Preconditions.checkArgument(n.isGetElem());", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1735/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:03:47.828358351 -0500\n@@ -1425,7 +1425,19 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\tif (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n@@ -1454,7 +1466,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1555,9 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {\n+\t\t\treturn false;\n+\t\t}\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1735/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:03:47.828358351 -0500\n@@ -528,7 +528,6 @@\n         if (isIndirectEval(first)\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n-          addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n           add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 531, 
          "faulty": "addExpr(first,NodeUtil.precedence(Token.COMMA),Context.OTHER);", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1727/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:03:42.464346938 -0500\n@@ -3162,7 +3162,7 @@\n       case Token.EXPR_RESULT:\n         return false;\n       case Token.CAST:\n-        return isExpressionResultUsed(parent);\n+        ;\n       case Token.HOOK:\n       case Token.AND:\n       case Token.OR:\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1727/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:03:42.464346938 -0500\n@@ -1425,7 +1425,13 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n@@ -1454,7 +1460,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1549,9 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {\n+\t\t\treturn false;\n+\t\t}\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1727/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:03:42.468346946 -0500\n@@ -529,7 +529,6 @@\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n           addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:32:20.212016881 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1727/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 06:03:42.468346946 -0500\n@@ -56,13 +56,7 @@\n       case Token.GETELEM:\n         Node left = n.getFirstChild();\n         Node right = left.getNext();\n-        if (right.isString() &&\n-            NodeUtil.isValidPropertyName(right.getString())) {\n-          n.removeChild(left);\n-          n.removeChild(right);\n-          parent.replaceChild(n, IR.getprop(left, right));\n-          compiler.reportCodeChange();\n-        }\n+        StringBuilder builder = new StringBuilder();\n         break;\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 3165, 
          "faulty": "return isExpressionResultUsed(parent);", 
          "type": "Delete", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 59, 
          "faulty": "if (right.isString() && NodeUtil.isValidPropertyName(right.getString())) {\n  n.removeChild(left);\n  n.removeChild(right);\n  parent.replaceChild(n,IR.getprop(left,right));\n  compiler.reportCodeChange();\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 62, 
          "faulty": "n.removeChild(right);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 62, 
          "faulty": "n.removeChild(right);", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1128/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:56:06.463376836 -0500\n@@ -1425,7 +1425,13 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n@@ -1454,7 +1460,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1549,9 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {\n+\t\t\treturn false;\n+\t\t}\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1469/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:00:27.627936961 -0500\n@@ -129,7 +129,7 @@\n         case IS_DISPATCHER:      return \"is_dispatcher\";\n         case DIRECTIVES:         return \"directives\";\n         case DIRECT_EVAL:        return \"direct_eval\";\n-        case FREE_CALL:          return \"free_call\";\n+        case FREE_CALL:          ;\n         case STATIC_SOURCE_FILE:    return \"source_file\";\n         case INPUT_ID:  return \"input_id\";\n         case LENGTH:    return \"length\";\n@@ -1454,7 +1454,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1543,9 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {\n+\t\t\treturn false;\n+\t\t}\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1469/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:00:27.631936970 -0500\n@@ -529,7 +529,6 @@\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n           addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 132, 
          "faulty": "return \"free_call\";", 
          "type": "Delete", 
          "seed": "int post1=this.getIntProp(INCRDECR_PROP);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1609/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:02:12.256155867 -0500\n@@ -1425,7 +1425,19 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\tif (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n@@ -1454,7 +1466,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1609/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:02:12.260155874 -0500\n@@ -529,7 +529,6 @@\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n           addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:32:20.212016881 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1609/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 06:02:12.260155874 -0500\n@@ -61,7 +61,6 @@\n           n.removeChild(left);\n           n.removeChild(right);\n           parent.replaceChild(n, IR.getprop(left, right));\n-          compiler.reportCodeChange();\n         }\n         break;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 64, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1331/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:58:44.027717254 -0500\n@@ -129,7 +129,7 @@\n         case IS_DISPATCHER:      return \"is_dispatcher\";\n         case DIRECTIVES:         return \"directives\";\n         case DIRECT_EVAL:        return \"direct_eval\";\n-        case FREE_CALL:          return \"free_call\";\n+        case FREE_CALL:          ;\n         case STATIC_SOURCE_FILE:    return \"source_file\";\n         case INPUT_ID:  return \"input_id\";\n         case LENGTH:    return \"length\";\n@@ -1425,7 +1425,13 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n@@ -1454,7 +1460,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1549,9 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {\n+\t\t\treturn false;\n+\t\t}\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1331/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:58:44.027717254 -0500\n@@ -529,7 +529,6 @@\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n           addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 132, 
          "faulty": "return \"free_call\";", 
          "type": "Delete", 
          "seed": "return getIntProp(propType) != 0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1535/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:01:20.352046837 -0500\n@@ -1454,7 +1454,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1535/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:01:20.352046837 -0500\n@@ -529,7 +529,7 @@\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n           addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n+          final String PARAM_NAME = \"jscomp_throw_param\";\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:32:20.212016881 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1535/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 06:01:20.352046837 -0500\n@@ -61,7 +61,6 @@\n           n.removeChild(left);\n           n.removeChild(right);\n           parent.replaceChild(n, IR.getprop(left, right));\n-          compiler.reportCodeChange();\n         }\n         break;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 64, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Replace", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1755/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\t2018-12-02 06:04:03.168391019 -0500\n@@ -400,7 +400,6 @@\n     Node right = callTarget.getNext();\n     if (right != null) {\n       if (right.getNext() != null || !NodeUtil.isImmutableValue(right)) {\n-        return n;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1755/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:04:03.168391019 -0500\n@@ -129,7 +129,7 @@\n         case IS_DISPATCHER:      return \"is_dispatcher\";\n         case DIRECTIVES:         return \"directives\";\n         case DIRECT_EVAL:        return \"direct_eval\";\n-        case FREE_CALL:          return \"free_call\";\n+        case FREE_CALL:          ;\n         case STATIC_SOURCE_FILE:    return \"source_file\";\n         case INPUT_ID:  return \"input_id\";\n         case LENGTH:    return \"length\";\n@@ -1425,7 +1425,19 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\tif (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n@@ -1454,7 +1466,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1555,9 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {\n+\t\t\treturn false;\n+\t\t}\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 132, 
          "faulty": "return \"free_call\";", 
          "type": "Delete", 
          "seed": "switch (getType()) {\ncase Token.NAME:\n  return getString().isEmpty() ? false : true;\ncase Token.THIS:\nreturn true;\ncase Token.GETPROP:\nreturn getFirstChild().isQualifiedName();\ndefault :\nreturn false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java", 
          "line": 403, 
          "faulty": "return n;", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_917/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:53:15.155009531 -0500\n@@ -1425,7 +1425,13 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n@@ -1454,7 +1460,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1488/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:00:42.847968577 -0500\n@@ -3162,7 +3162,7 @@\n       case Token.EXPR_RESULT:\n         return false;\n       case Token.CAST:\n-        return isExpressionResultUsed(parent);\n+        ;\n       case Token.HOOK:\n       case Token.AND:\n       case Token.OR:\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1488/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:00:42.847968577 -0500\n@@ -129,7 +129,7 @@\n         case IS_DISPATCHER:      return \"is_dispatcher\";\n         case DIRECTIVES:         return \"directives\";\n         case DIRECT_EVAL:        return \"direct_eval\";\n-        case FREE_CALL:          return \"free_call\";\n+        case FREE_CALL:          ;\n         case STATIC_SOURCE_FILE:    return \"source_file\";\n         case INPUT_ID:  return \"input_id\";\n         case LENGTH:    return \"length\";\n@@ -1425,7 +1425,13 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n@@ -1454,7 +1460,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1549,9 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {\n+\t\t\treturn false;\n+\t\t}\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 3165, 
          "faulty": "return isExpressionResultUsed(parent);", 
          "type": "Delete", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 3165, 
          "faulty": "return isExpressionResultUsed(parent);", 
          "type": "Delete", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 132, 
          "faulty": "return \"free_call\";", 
          "type": "Delete", 
          "seed": "int post1=this.getIntProp(INCRDECR_PROP);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1568/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:01:41.940092090 -0500\n@@ -1425,7 +1425,13 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n@@ -1454,7 +1460,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1549,9 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {\n+\t\t\treturn false;\n+\t\t}\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:32:20.212016881 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1568/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 06:01:41.944092099 -0500\n@@ -56,13 +56,7 @@\n       case Token.GETELEM:\n         Node left = n.getFirstChild();\n         Node right = left.getNext();\n-        if (right.isString() &&\n-            NodeUtil.isValidPropertyName(right.getString())) {\n-          n.removeChild(left);\n-          n.removeChild(right);\n-          parent.replaceChild(n, IR.getprop(left, right));\n-          compiler.reportCodeChange();\n-        }\n+        StringBuilder builder = new StringBuilder();\n         break;\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 59, 
          "faulty": "if (right.isString() && NodeUtil.isValidPropertyName(right.getString())) {\n  n.removeChild(left);\n  n.removeChild(right);\n  parent.replaceChild(n,IR.getprop(left,right));\n  compiler.reportCodeChange();\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 62, 
          "faulty": "n.removeChild(right);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 62, 
          "faulty": "n.removeChild(right);", 
          "type": "Delete", 
          "seed": "int keyParent=key(parent);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1431/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:59:56.743873087 -0500\n@@ -1425,7 +1425,13 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n@@ -1543,7 +1549,9 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {\n+\t\t\treturn false;\n+\t\t}\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1431/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 05:59:56.747873095 -0500\n@@ -1322,7 +1322,8 @@\n   private Node tryFoldGetElem(Node n, Node left, Node right) {\n     Preconditions.checkArgument(n.isGetElem());\n \n-    if (left.isObjectLit()) {\n+    int index = -1;\n+\tif (left.isObjectLit()) {\n       return tryFoldObjectPropAccess(n, left, right);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 1325, 
          "faulty": "if (left.isObjectLit()) {\n  return tryFoldObjectPropAccess(n,left,right);\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1778/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:04:20.344427644 -0500\n@@ -129,7 +129,7 @@\n         case IS_DISPATCHER:      return \"is_dispatcher\";\n         case DIRECTIVES:         return \"directives\";\n         case DIRECT_EVAL:        return \"direct_eval\";\n-        case FREE_CALL:          return \"free_call\";\n+        case FREE_CALL:          ;\n         case STATIC_SOURCE_FILE:    return \"source_file\";\n         case INPUT_ID:  return \"input_id\";\n         case LENGTH:    return \"length\";\n@@ -1425,7 +1425,19 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\tif (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n@@ -1454,7 +1466,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1555,9 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {\n+\t\t\treturn false;\n+\t\t}\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1778/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:04:20.344427644 -0500\n@@ -529,7 +529,6 @@\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n           addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/Normalize.java\t2018-12-02 05:32:20.232016880 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1778/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/Normalize.java\t2018-12-02 06:04:20.344427644 -0500\n@@ -411,7 +411,7 @@\n           break;\n \n         case Token.CAST:\n-          parent.replaceChild(n, n.removeFirstChild());\n+          ;\n           break;\n       }\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/Normalize.java", 
          "line": 414, 
          "faulty": "parent.replaceChild(n,n.removeFirstChild());", 
          "type": "Delete", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 132, 
          "faulty": "return \"free_call\";", 
          "type": "Delete", 
          "seed": "switch (getType()) {\ncase Token.NAME:\n  return getString().isEmpty() ? false : true;\ncase Token.THIS:\nreturn true;\ncase Token.GETPROP:\nreturn getFirstChild().isQualifiedName();\ndefault :\nreturn false;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1671/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:03:01.704260385 -0500\n@@ -1425,7 +1425,13 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n@@ -1454,7 +1460,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1549,9 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {\n+\t\t\treturn false;\n+\t\t}\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1671/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:03:01.704260385 -0500\n@@ -527,9 +527,7 @@\n         // that must be preserved.\n         if (isIndirectEval(first)\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n-          add(\"(0,\");\n           addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1671/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:03:01.708260393 -0500\n@@ -1322,9 +1322,7 @@\n   private Node tryFoldGetElem(Node n, Node left, Node right) {\n     Preconditions.checkArgument(n.isGetElem());\n \n-    if (left.isObjectLit()) {\n-      return tryFoldObjectPropAccess(n, left, right);\n-    }\n+    StringBuilder builder = new StringBuilder();\n \n     if (left.isArrayLit()) {\n       return tryFoldArrayAccess(n, left, right);\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 1325, 
          "faulty": "if (left.isObjectLit()) {\n  return tryFoldObjectPropAccess(n,left,right);\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 530, 
          "faulty": "add(\"(0,\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1215/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:57:18.635532487 -0500\n@@ -1454,7 +1454,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1543,6 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:32:20.212016881 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1215/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:57:18.639532496 -0500\n@@ -61,7 +61,6 @@\n           n.removeChild(left);\n           n.removeChild(right);\n           parent.replaceChild(n, IR.getprop(left, right));\n-          compiler.reportCodeChange();\n         }\n         break;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 64, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "String name=getString();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "JSDocInfo jsDocInfo=getJSDocInfo();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1073/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:55:23.023283442 -0500\n@@ -3162,7 +3162,7 @@\n       case Token.EXPR_RESULT:\n         return false;\n       case Token.CAST:\n-        return isExpressionResultUsed(parent);\n+        ;\n       case Token.HOOK:\n       case Token.AND:\n       case Token.OR:\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1073/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:55:23.027283451 -0500\n@@ -1454,7 +1454,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1073/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:55:23.027283451 -0500\n@@ -527,9 +527,7 @@\n         // that must be preserved.\n         if (isIndirectEval(first)\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n-          add(\"(0,\");\n           addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 3165, 
          "faulty": "return isExpressionResultUsed(parent);", 
          "type": "Delete", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 530, 
          "faulty": "add(\"(0,\");", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1816/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:04:48.324487404 -0500\n@@ -1543,7 +1543,9 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {\n+\t\t\treturn false;\n+\t\t}\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1816/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:04:48.328487412 -0500\n@@ -528,7 +528,6 @@\n         if (isIndirectEval(first)\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n-          addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n           add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 531, 
          "faulty": "addExpr(first,NodeUtil.precedence(Token.COMMA),Context.OTHER);", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1605/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:02:09.564150192 -0500\n@@ -1425,7 +1425,13 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n@@ -1454,7 +1460,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1549,9 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {\n+\t\t\treturn false;\n+\t\t}\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1605/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:02:09.568150201 -0500\n@@ -529,7 +529,6 @@\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n           addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1605/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:02:09.568150201 -0500\n@@ -1322,9 +1322,7 @@\n   private Node tryFoldGetElem(Node n, Node left, Node right) {\n     Preconditions.checkArgument(n.isGetElem());\n \n-    if (left.isObjectLit()) {\n-      return tryFoldObjectPropAccess(n, left, right);\n-    }\n+    StringBuilder builder = new StringBuilder();\n \n     if (left.isArrayLit()) {\n       return tryFoldArrayAccess(n, left, right);\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 1325, 
          "faulty": "if (left.isObjectLit()) {\n  return tryFoldObjectPropAccess(n,left,right);\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1621/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:02:22.432177327 -0500\n@@ -3162,7 +3162,7 @@\n       case Token.EXPR_RESULT:\n         return false;\n       case Token.CAST:\n-        return isExpressionResultUsed(parent);\n+        ;\n       case Token.HOOK:\n       case Token.AND:\n       case Token.OR:\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1621/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:02:22.432177327 -0500\n@@ -129,7 +129,7 @@\n         case IS_DISPATCHER:      return \"is_dispatcher\";\n         case DIRECTIVES:         return \"directives\";\n         case DIRECT_EVAL:        return \"direct_eval\";\n-        case FREE_CALL:          return \"free_call\";\n+        case FREE_CALL:          ;\n         case STATIC_SOURCE_FILE:    return \"source_file\";\n         case INPUT_ID:  return \"input_id\";\n         case LENGTH:    return \"length\";\n@@ -1425,7 +1425,19 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\tif (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n@@ -1454,7 +1466,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n@@ -1543,7 +1554,9 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {\n+\t\t\treturn false;\n+\t\t}\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1621/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:02:22.436177336 -0500\n@@ -529,7 +529,6 @@\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n           addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 3165, 
          "faulty": "return isExpressionResultUsed(parent);", 
          "type": "Delete", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 132, 
          "faulty": "return \"free_call\";", 
          "type": "Delete", 
          "seed": "int post1=this.getIntProp(INCRDECR_PROP);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return new Node(Token.RETURN);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1648/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:02:43.076220944 -0500\n@@ -1425,7 +1425,13 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n@@ -1454,7 +1460,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1549,9 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {\n+\t\t\treturn false;\n+\t\t}\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1648/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:02:43.080220953 -0500\n@@ -529,7 +529,6 @@\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n           addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:32:20.212016881 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1648/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 06:02:43.080220953 -0500\n@@ -61,7 +61,6 @@\n           n.removeChild(left);\n           n.removeChild(right);\n           parent.replaceChild(n, IR.getprop(left, right));\n-          compiler.reportCodeChange();\n         }\n         break;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1648/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:02:43.080220953 -0500\n@@ -1322,9 +1322,7 @@\n   private Node tryFoldGetElem(Node n, Node left, Node right) {\n     Preconditions.checkArgument(n.isGetElem());\n \n-    if (left.isObjectLit()) {\n-      return tryFoldObjectPropAccess(n, left, right);\n-    }\n+    StringBuilder builder = new StringBuilder();\n \n     if (left.isArrayLit()) {\n       return tryFoldArrayAccess(n, left, right);\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 64, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 1325, 
          "faulty": "if (left.isObjectLit()) {\n  return tryFoldObjectPropAccess(n,left,right);\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1524/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:01:13.204031885 -0500\n@@ -1425,7 +1425,13 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n@@ -1454,7 +1460,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:32:20.212016881 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1524/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 06:01:13.208031893 -0500\n@@ -61,7 +61,6 @@\n           n.removeChild(left);\n           n.removeChild(right);\n           parent.replaceChild(n, IR.getprop(left, right));\n-          compiler.reportCodeChange();\n         }\n         break;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 64, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 64, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1856/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:05:19.200553476 -0500\n@@ -1454,7 +1454,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1856/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:05:19.200553476 -0500\n@@ -529,7 +529,7 @@\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n           addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n+          break;\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:32:20.212016881 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1856/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 06:05:19.204553485 -0500\n@@ -61,7 +61,6 @@\n           n.removeChild(left);\n           n.removeChild(right);\n           parent.replaceChild(n, IR.getprop(left, right));\n-          compiler.reportCodeChange();\n         }\n         break;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1856/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:05:19.204553485 -0500\n@@ -1320,8 +1320,6 @@\n    * Try to fold array-element. e.g [1, 2, 3][10];\n    */\n   private Node tryFoldGetElem(Node n, Node left, Node right) {\n-    Preconditions.checkArgument(n.isGetElem());\n-\n     if (left.isObjectLit()) {\n       return tryFoldObjectPropAccess(n, left, right);\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 64, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 1323, 
          "faulty": "Preconditions.checkArgument(n.isGetElem());", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Replace", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1084/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:55:30.127298698 -0500\n@@ -1454,7 +1454,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1084/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:55:30.131298707 -0500\n@@ -529,7 +529,6 @@\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n           addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1084/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 05:55:30.131298707 -0500\n@@ -1326,9 +1326,6 @@\n       return tryFoldObjectPropAccess(n, left, right);\n     }\n \n-    if (left.isArrayLit()) {\n-      return tryFoldArrayAccess(n, left, right);\n-    }\n     return n;\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 1329, 
          "faulty": "if (left.isArrayLit()) {\n  return tryFoldArrayAccess(n,left,right);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1721/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:03:37.968337374 -0500\n@@ -3162,7 +3162,7 @@\n       case Token.EXPR_RESULT:\n         return false;\n       case Token.CAST:\n-        return isExpressionResultUsed(parent);\n+        ;\n       case Token.HOOK:\n       case Token.AND:\n       case Token.OR:\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1721/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:03:37.972337383 -0500\n@@ -129,7 +129,7 @@\n         case IS_DISPATCHER:      return \"is_dispatcher\";\n         case DIRECTIVES:         return \"directives\";\n         case DIRECT_EVAL:        return \"direct_eval\";\n-        case FREE_CALL:          return \"free_call\";\n+        case FREE_CALL:          ;\n         case STATIC_SOURCE_FILE:    return \"source_file\";\n         case INPUT_ID:  return \"input_id\";\n         case LENGTH:    return \"length\";\n@@ -1425,7 +1425,19 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\tif (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n@@ -1454,7 +1466,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1555,9 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {\n+\t\t\treturn false;\n+\t\t}\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1721/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:03:37.972337383 -0500\n@@ -528,8 +528,6 @@\n         if (isIndirectEval(first)\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n-          addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 3165, 
          "faulty": "return isExpressionResultUsed(parent);", 
          "type": "Delete", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 531, 
          "faulty": "addExpr(first,NodeUtil.precedence(Token.COMMA),Context.OTHER);", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 132, 
          "faulty": "return \"free_call\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_482/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:47:10.250213303 -0500\n@@ -1454,7 +1454,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1350/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:58:59.035749781 -0500\n@@ -3162,7 +3162,10 @@\n       case Token.EXPR_RESULT:\n         return false;\n       case Token.CAST:\n-        return isExpressionResultUsed(parent);\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn isExpressionResultUsed(parent);\n+\t\t}\n       case Token.HOOK:\n       case Token.AND:\n       case Token.OR:\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1350/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:58:59.035749781 -0500\n@@ -1454,7 +1454,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1543,6 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:32:20.212016881 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1350/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:58:59.039749790 -0500\n@@ -59,9 +59,9 @@\n         if (right.isString() &&\n             NodeUtil.isValidPropertyName(right.getString())) {\n           n.removeChild(left);\n-          n.removeChild(right);\n+          int start = 0;\n+\t\tn.removeChild(right);\n           parent.replaceChild(n, IR.getprop(left, right));\n-          compiler.reportCodeChange();\n         }\n         break;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "String name=getString();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "JSDocInfo jsDocInfo=getJSDocInfo();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 64, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 3165, 
          "faulty": "return isExpressionResultUsed(parent);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 62, 
          "faulty": "n.removeChild(right);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1581/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:01:51.744112688 -0500\n@@ -3162,7 +3162,10 @@\n       case Token.EXPR_RESULT:\n         return false;\n       case Token.CAST:\n-        return isExpressionResultUsed(parent);\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn isExpressionResultUsed(parent);\n+\t\t}\n       case Token.HOOK:\n       case Token.AND:\n       case Token.OR:\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1581/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:01:51.748112695 -0500\n@@ -1425,7 +1425,13 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n@@ -1454,7 +1460,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1581/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:01:51.748112695 -0500\n@@ -529,7 +529,6 @@\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n           addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 3165, 
          "faulty": "return isExpressionResultUsed(parent);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1320/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:58:35.875699592 -0500\n@@ -1425,7 +1425,13 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n@@ -1454,7 +1460,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1549,6 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:32:20.212016881 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1320/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:58:35.879699600 -0500\n@@ -61,7 +61,6 @@\n           n.removeChild(left);\n           n.removeChild(right);\n           parent.replaceChild(n, IR.getprop(left, right));\n-          compiler.reportCodeChange();\n         }\n         break;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 64, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "String name=getString();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "JSDocInfo jsDocInfo=getJSDocInfo();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1287/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:58:11.787647430 -0500\n@@ -3162,7 +3162,10 @@\n       case Token.EXPR_RESULT:\n         return false;\n       case Token.CAST:\n-        return isExpressionResultUsed(parent);\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn isExpressionResultUsed(parent);\n+\t\t}\n       case Token.HOOK:\n       case Token.AND:\n       case Token.OR:\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1287/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:58:11.787647430 -0500\n@@ -1454,7 +1454,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:32:20.212016881 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1287/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:58:11.791647438 -0500\n@@ -59,9 +59,9 @@\n         if (right.isString() &&\n             NodeUtil.isValidPropertyName(right.getString())) {\n           n.removeChild(left);\n-          n.removeChild(right);\n+          int start = 0;\n+\t\tn.removeChild(right);\n           parent.replaceChild(n, IR.getprop(left, right));\n-          compiler.reportCodeChange();\n         }\n         break;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 64, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 3165, 
          "faulty": "return isExpressionResultUsed(parent);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 62, 
          "faulty": "n.removeChild(right);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1425/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:59:53.159865701 -0500\n@@ -3162,7 +3162,10 @@\n       case Token.EXPR_RESULT:\n         return false;\n       case Token.CAST:\n-        return isExpressionResultUsed(parent);\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn isExpressionResultUsed(parent);\n+\t\t}\n       case Token.HOOK:\n       case Token.AND:\n       case Token.OR:\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1425/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:59:53.159865701 -0500\n@@ -1425,7 +1425,25 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\tif (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\tif (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n@@ -1454,7 +1472,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1561,9 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {\n+\t\t\treturn false;\n+\t\t}\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:32:20.212016881 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1425/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:59:53.163865710 -0500\n@@ -61,7 +61,6 @@\n           n.removeChild(left);\n           n.removeChild(right);\n           parent.replaceChild(n, IR.getprop(left, right));\n-          compiler.reportCodeChange();\n         }\n         break;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 64, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 3165, 
          "faulty": "return isExpressionResultUsed(parent);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_804/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:51:42.746812520 -0500\n@@ -1454,7 +1454,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/Normalize.java\t2018-12-02 05:32:20.232016880 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_804/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/Normalize.java\t2018-12-02 05:51:42.746812520 -0500\n@@ -411,7 +411,10 @@\n           break;\n \n         case Token.CAST:\n-          parent.replaceChild(n, n.removeFirstChild());\n+          {\n+\t\t\tint type = n.getType();\n+\t\t\tparent.replaceChild(n, n.removeFirstChild());\n+\t\t}\n           break;\n       }\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/Normalize.java", 
          "line": 414, 
          "faulty": "parent.replaceChild(n,n.removeFirstChild());", 
          "type": "InsertBefore", 
          "seed": "int type=n.getType();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1785/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:04:24.948437469 -0500\n@@ -1454,7 +1454,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1543,9 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {\n+\t\t\treturn false;\n+\t\t}\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1785/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:04:24.952437477 -0500\n@@ -529,7 +529,6 @@\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n           addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1785/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:04:24.952437477 -0500\n@@ -1326,9 +1326,6 @@\n       return tryFoldObjectPropAccess(n, left, right);\n     }\n \n-    if (left.isArrayLit()) {\n-      return tryFoldArrayAccess(n, left, right);\n-    }\n     return n;\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 1329, 
          "faulty": "if (left.isArrayLit()) {\n  return tryFoldArrayAccess(n,left,right);\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1269/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:57:59.391620603 -0500\n@@ -3162,7 +3162,10 @@\n       case Token.EXPR_RESULT:\n         return false;\n       case Token.CAST:\n-        return isExpressionResultUsed(parent);\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn isExpressionResultUsed(parent);\n+\t\t}\n       case Token.HOOK:\n       case Token.AND:\n       case Token.OR:\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1269/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:57:59.391620603 -0500\n@@ -1454,7 +1454,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1269/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:57:59.395620611 -0500\n@@ -529,7 +529,6 @@\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n           addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 3165, 
          "faulty": "return isExpressionResultUsed(parent);", 
          "type": "Delete", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 3165, 
          "faulty": "return isExpressionResultUsed(parent);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1070/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:55:21.159279441 -0500\n@@ -1454,7 +1454,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:32:20.212016881 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1070/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:55:21.159279441 -0500\n@@ -58,7 +58,8 @@\n         Node right = left.getNext();\n         if (right.isString() &&\n             NodeUtil.isValidPropertyName(right.getString())) {\n-          n.removeChild(left);\n+          final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\tn.removeChild(left);\n           n.removeChild(right);\n           parent.replaceChild(n, IR.getprop(left, right));\n           compiler.reportCodeChange();\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 61, 
          "faulty": "n.removeChild(left);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1291/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:58:13.539651222 -0500\n@@ -1543,7 +1543,9 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {\n+\t\t\treturn false;\n+\t\t}\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1545/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:01:25.892058437 -0500\n@@ -1425,7 +1425,19 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\tif (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n@@ -1454,7 +1466,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1555,9 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {\n+\t\t\treturn false;\n+\t\t}\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1545/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:01:25.896058446 -0500\n@@ -528,8 +528,6 @@\n         if (isIndirectEval(first)\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n-          addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 531, 
          "faulty": "addExpr(first,NodeUtil.precedence(Token.COMMA),Context.OTHER);", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1640/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:02:37.844209880 -0500\n@@ -1425,11 +1425,12 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n       }\n       return null;\n   }\n@@ -1454,7 +1455,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1544,9 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {\n+\t\t\treturn false;\n+\t\t}\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1640/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:02:37.844209880 -0500\n@@ -529,7 +529,6 @@\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n           addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Delete", 
          "seed": "StaticSourceFile file=getStaticSourceFile();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_941/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:53:34.883051808 -0500\n@@ -1454,7 +1454,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1543,7 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        int post1 = this.getIntProp(INCRDECR_PROP);\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "int post1=this.getIntProp(INCRDECR_PROP);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1359/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:59:04.483761592 -0500\n@@ -3162,7 +3162,7 @@\n       case Token.EXPR_RESULT:\n         return false;\n       case Token.CAST:\n-        return isExpressionResultUsed(parent);\n+        final String PARAM_NAME = \"jscomp_throw_param\";\n       case Token.HOOK:\n       case Token.AND:\n       case Token.OR:\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1359/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:59:04.487761601 -0500\n@@ -1425,7 +1425,13 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n@@ -1454,7 +1460,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1549,9 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {\n+\t\t\treturn false;\n+\t\t}\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1359/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:59:04.487761601 -0500\n@@ -529,7 +529,6 @@\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n           addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 3165, 
          "faulty": "return isExpressionResultUsed(parent);", 
          "type": "Replace", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1657/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:02:50.228236077 -0500\n@@ -1425,7 +1425,13 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n@@ -1543,7 +1549,9 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {\n+\t\t\treturn false;\n+\t\t}\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1657/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:02:50.232236086 -0500\n@@ -529,7 +529,6 @@\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n           addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1437/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:00:01.275882435 -0500\n@@ -3162,7 +3162,10 @@\n       case Token.EXPR_RESULT:\n         return false;\n       case Token.CAST:\n-        return isExpressionResultUsed(parent);\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn isExpressionResultUsed(parent);\n+\t\t}\n       case Token.HOOK:\n       case Token.AND:\n       case Token.OR:\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1437/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:00:01.275882435 -0500\n@@ -1425,7 +1425,19 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\tif (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n@@ -1454,7 +1466,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1555,9 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {\n+\t\t\treturn false;\n+\t\t}\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1437/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:00:01.279882443 -0500\n@@ -529,7 +529,6 @@\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n           addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:32:20.212016881 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1437/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 06:00:01.279882443 -0500\n@@ -56,13 +56,7 @@\n       case Token.GETELEM:\n         Node left = n.getFirstChild();\n         Node right = left.getNext();\n-        if (right.isString() &&\n-            NodeUtil.isValidPropertyName(right.getString())) {\n-          n.removeChild(left);\n-          n.removeChild(right);\n-          parent.replaceChild(n, IR.getprop(left, right));\n-          compiler.reportCodeChange();\n-        }\n+        ;\n         break;\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 59, 
          "faulty": "if (right.isString() && NodeUtil.isValidPropertyName(right.getString())) {\n  n.removeChild(left);\n  n.removeChild(right);\n  parent.replaceChild(n,IR.getprop(left,right));\n  compiler.reportCodeChange();\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 64, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 3165, 
          "faulty": "return isExpressionResultUsed(parent);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 59, 
          "faulty": "if (right.isString() && NodeUtil.isValidPropertyName(right.getString())) {\n  n.removeChild(left);\n  n.removeChild(right);\n  parent.replaceChild(n,IR.getprop(left,right));\n  compiler.reportCodeChange();\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1138/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:56:14.543394234 -0500\n@@ -3162,7 +3162,10 @@\n       case Token.EXPR_RESULT:\n         return false;\n       case Token.CAST:\n-        return isExpressionResultUsed(parent);\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn isExpressionResultUsed(parent);\n+\t\t}\n       case Token.HOOK:\n       case Token.AND:\n       case Token.OR:\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1138/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:56:14.547394242 -0500\n@@ -1454,7 +1454,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:32:20.212016881 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1138/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:56:14.547394242 -0500\n@@ -61,7 +61,6 @@\n           n.removeChild(left);\n           n.removeChild(right);\n           parent.replaceChild(n, IR.getprop(left, right));\n-          compiler.reportCodeChange();\n         }\n         break;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 64, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 3165, 
          "faulty": "return isExpressionResultUsed(parent);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1600/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:02:06.032142752 -0500\n@@ -3162,7 +3162,7 @@\n       case Token.EXPR_RESULT:\n         return false;\n       case Token.CAST:\n-        return isExpressionResultUsed(parent);\n+        ;\n       case Token.HOOK:\n       case Token.AND:\n       case Token.OR:\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1600/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:02:06.036142761 -0500\n@@ -129,7 +129,7 @@\n         case IS_DISPATCHER:      return \"is_dispatcher\";\n         case DIRECTIVES:         return \"directives\";\n         case DIRECT_EVAL:        return \"direct_eval\";\n-        case FREE_CALL:          return \"free_call\";\n+        case FREE_CALL:          ;\n         case STATIC_SOURCE_FILE:    return \"source_file\";\n         case INPUT_ID:  return \"input_id\";\n         case LENGTH:    return \"length\";\n@@ -1425,7 +1425,25 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\tif (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\tif (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n@@ -1454,7 +1472,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1561,9 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {\n+\t\t\treturn false;\n+\t\t}\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1600/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:02:06.036142761 -0500\n@@ -529,7 +529,6 @@\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n           addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 3165, 
          "faulty": "return isExpressionResultUsed(parent);", 
          "type": "Delete", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 132, 
          "faulty": "return \"free_call\";", 
          "type": "Delete", 
          "seed": "int post1=this.getIntProp(INCRDECR_PROP);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1081/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:55:28.327294832 -0500\n@@ -1454,7 +1454,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1543,6 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1081/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:55:28.327294832 -0500\n@@ -529,7 +529,6 @@\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n           addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "String name=getString();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1365/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:59:08.159769563 -0500\n@@ -1425,7 +1425,19 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\tif (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n@@ -1454,7 +1466,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1555,9 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {\n+\t\t\treturn false;\n+\t\t}\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/Normalize.java\t2018-12-02 05:32:20.232016880 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1365/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/Normalize.java\t2018-12-02 05:59:08.159769563 -0500\n@@ -411,7 +411,7 @@\n           break;\n \n         case Token.CAST:\n-          parent.replaceChild(n, n.removeFirstChild());\n+          ;\n           break;\n       }\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/Normalize.java", 
          "line": 414, 
          "faulty": "parent.replaceChild(n,n.removeFirstChild());", 
          "type": "Delete", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1718/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:03:35.956333096 -0500\n@@ -3162,7 +3162,7 @@\n       case Token.EXPR_RESULT:\n         return false;\n       case Token.CAST:\n-        return isExpressionResultUsed(parent);\n+        ;\n       case Token.HOOK:\n       case Token.AND:\n       case Token.OR:\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1718/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:03:35.960333104 -0500\n@@ -1425,11 +1425,38 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\tif (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\tif (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\tif (type == Token.NAME) {\n+\t\t\tString name = getString();\n+\t\t\treturn name.isEmpty() ? null : name;\n+\t\t} else if (type == Token.GETPROP) {\n+\t\t\tString left = getFirstChild().getQualifiedName();\n+\t\t\tif (left == null) {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t\treturn left + \".\" + getLastChild().getString();\n+\t\t} else if (type == Token.THIS) {\n+\t\t\treturn \"this\";\n+\t\t} else {\n+\t\t\treturn null;\n+\t\t}\n       }\n       return null;\n   }\n@@ -1454,7 +1481,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1570,9 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {\n+\t\t\treturn false;\n+\t\t}\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1718/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:03:35.964333113 -0500\n@@ -529,7 +529,6 @@\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n           addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1718/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:03:35.964333113 -0500\n@@ -1322,9 +1322,7 @@\n   private Node tryFoldGetElem(Node n, Node left, Node right) {\n     Preconditions.checkArgument(n.isGetElem());\n \n-    if (left.isObjectLit()) {\n-      return tryFoldObjectPropAccess(n, left, right);\n-    }\n+    StringBuilder builder = new StringBuilder();\n \n     if (left.isArrayLit()) {\n       return tryFoldArrayAccess(n, left, right);\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 3165, 
          "faulty": "return isExpressionResultUsed(parent);", 
          "type": "Delete", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 1325, 
          "faulty": "if (left.isObjectLit()) {\n  return tryFoldObjectPropAccess(n,left,right);\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "if (type == Token.NAME) {\n  String name=getString();\n  return name.isEmpty() ? null : name;\n}\n else if (type == Token.GETPROP) {\n  String left=getFirstChild().getQualifiedName();\n  if (left == null) {\n    return null;\n  }\n  return left + \".\" + getLastChild().getString();\n}\n else if (type == Token.THIS) {\n  return \"this\";\n}\n else {\n  return null;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1826/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:04:55.520502791 -0500\n@@ -1454,7 +1454,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1826/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:04:55.520502791 -0500\n@@ -528,8 +528,6 @@\n         if (isIndirectEval(first)\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n-          addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 531, 
          "faulty": "addExpr(first,NodeUtil.precedence(Token.COMMA),Context.OTHER);", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1759/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:04:05.988397029 -0500\n@@ -1454,7 +1454,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1543,9 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {\n+\t\t\treturn false;\n+\t\t}\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1759/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:04:05.992397037 -0500\n@@ -528,8 +528,6 @@\n         if (isIndirectEval(first)\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n-          addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:32:20.212016881 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1759/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 06:04:05.992397037 -0500\n@@ -60,7 +60,8 @@\n             NodeUtil.isValidPropertyName(right.getString())) {\n           n.removeChild(left);\n           n.removeChild(right);\n-          parent.replaceChild(n, IR.getprop(left, right));\n+          final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\tparent.replaceChild(n, IR.getprop(left, right));\n           compiler.reportCodeChange();\n         }\n         break;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 531, 
          "faulty": "addExpr(first,NodeUtil.precedence(Token.COMMA),Context.OTHER);", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 63, 
          "faulty": "parent.replaceChild(n,IR.getprop(left,right));", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1224/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:57:25.447547205 -0500\n@@ -1454,7 +1454,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1224/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:57:25.451547213 -0500\n@@ -528,7 +528,7 @@\n         if (isIndirectEval(first)\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n-          addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n+          int start = 0;\n           add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:32:20.212016881 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1224/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:57:25.451547213 -0500\n@@ -61,7 +61,6 @@\n           n.removeChild(left);\n           n.removeChild(right);\n           parent.replaceChild(n, IR.getprop(left, right));\n-          compiler.reportCodeChange();\n         }\n         break;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 64, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 531, 
          "faulty": "addExpr(first,NodeUtil.precedence(Token.COMMA),Context.OTHER);", 
          "type": "Replace", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1217/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:57:19.535534431 -0500\n@@ -3162,7 +3162,10 @@\n       case Token.EXPR_RESULT:\n         return false;\n       case Token.CAST:\n-        return isExpressionResultUsed(parent);\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn isExpressionResultUsed(parent);\n+\t\t}\n       case Token.HOOK:\n       case Token.AND:\n       case Token.OR:\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1217/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:57:19.535534431 -0500\n@@ -1454,7 +1454,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 3165, 
          "faulty": "return isExpressionResultUsed(parent);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1531/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:01:17.716041321 -0500\n@@ -3162,7 +3162,10 @@\n       case Token.EXPR_RESULT:\n         return false;\n       case Token.CAST:\n-        return isExpressionResultUsed(parent);\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn isExpressionResultUsed(parent);\n+\t\t}\n       case Token.HOOK:\n       case Token.AND:\n       case Token.OR:\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1531/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:01:17.716041321 -0500\n@@ -1425,7 +1425,25 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\tif (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\tif (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n@@ -1454,7 +1472,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1561,9 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {\n+\t\t\treturn false;\n+\t\t}\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1531/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:01:17.720041329 -0500\n@@ -529,7 +529,6 @@\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n           addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:32:20.212016881 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1531/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 06:01:17.720041329 -0500\n@@ -61,7 +61,6 @@\n           n.removeChild(left);\n           n.removeChild(right);\n           parent.replaceChild(n, IR.getprop(left, right));\n-          compiler.reportCodeChange();\n         }\n         break;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 64, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 64, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 3165, 
          "faulty": "return isExpressionResultUsed(parent);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 64, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_839/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:52:11.862874393 -0500\n@@ -1454,7 +1454,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1543,32 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        if (type == Token.INC || type == Token.DEC) {\n+\t\t\tint post1 = this.getIntProp(INCRDECR_PROP);\n+\t\t\tint post2 = node.getIntProp(INCRDECR_PROP);\n+\t\t\tif (post1 != post2) {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t} else if (type == Token.STRING || type == Token.STRING_KEY) {\n+\t\t\tif (type == Token.STRING_KEY) {\n+\t\t\t\tint quoted1 = this.getIntProp(QUOTED_PROP);\n+\t\t\t\tint quoted2 = node.getIntProp(QUOTED_PROP);\n+\t\t\t\tif (quoted1 != quoted2) {\n+\t\t\t\t\treturn false;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tint slashV1 = this.getIntProp(SLASH_V);\n+\t\t\tint slashV2 = node.getIntProp(SLASH_V);\n+\t\t\tif (slashV1 != slashV2) {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t} else if (type == Token.CALL) {\n+\t\t\tif (this.getBooleanProp(FREE_CALL) != node\n+\t\t\t\t\t.getBooleanProp(FREE_CALL)) {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t}\n+\t\treturn false;\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "InsertBefore", 
          "seed": "if (type == Token.INC || type == Token.DEC) {\n  int post1=this.getIntProp(INCRDECR_PROP);\n  int post2=node.getIntProp(INCRDECR_PROP);\n  if (post1 != post2) {\n    return false;\n  }\n}\n else if (type == Token.STRING || type == Token.STRING_KEY) {\n  if (type == Token.STRING_KEY) {\n    int quoted1=this.getIntProp(QUOTED_PROP);\n    int quoted2=node.getIntProp(QUOTED_PROP);\n    if (quoted1 != quoted2) {\n      return false;\n    }\n  }\n  int slashV1=this.getIntProp(SLASH_V);\n  int slashV2=node.getIntProp(SLASH_V);\n  if (slashV1 != slashV2) {\n    return false;\n  }\n}\n else if (type == Token.CALL) {\n  if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n    return false;\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1386/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:59:24.455804906 -0500\n@@ -1425,7 +1425,13 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n@@ -1454,7 +1460,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1549,9 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {\n+\t\t\treturn false;\n+\t\t}\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1386/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:59:24.455804906 -0500\n@@ -529,7 +529,6 @@\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n           addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "String name=getString();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_876/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:52:42.106938868 -0500\n@@ -1454,7 +1454,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_876/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 05:52:42.110938876 -0500\n@@ -1326,9 +1326,6 @@\n       return tryFoldObjectPropAccess(n, left, right);\n     }\n \n-    if (left.isArrayLit()) {\n-      return tryFoldArrayAccess(n, left, right);\n-    }\n     return n;\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 1329, 
          "faulty": "if (left.isArrayLit()) {\n  return tryFoldArrayAccess(n,left,right);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_739/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:50:48.434697706 -0500\n@@ -1454,7 +1454,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_739/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:50:48.434697706 -0500\n@@ -529,7 +529,6 @@\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n           addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1751/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:04:00.532385402 -0500\n@@ -1425,7 +1425,19 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\tif (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n@@ -1454,7 +1466,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1555,9 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {\n+\t\t\treturn false;\n+\t\t}\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1751/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:04:00.536385411 -0500\n@@ -529,7 +529,6 @@\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n           addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:32:20.212016881 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1751/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 06:04:00.536385411 -0500\n@@ -61,7 +61,6 @@\n           n.removeChild(left);\n           n.removeChild(right);\n           parent.replaceChild(n, IR.getprop(left, right));\n-          compiler.reportCodeChange();\n         }\n         break;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/Normalize.java\t2018-12-02 05:32:20.232016880 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1751/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/Normalize.java\t2018-12-02 06:04:00.540385419 -0500\n@@ -411,7 +411,7 @@\n           break;\n \n         case Token.CAST:\n-          parent.replaceChild(n, n.removeFirstChild());\n+          ;\n           break;\n       }\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/Normalize.java", 
          "line": 414, 
          "faulty": "parent.replaceChild(n,n.removeFirstChild());", 
          "type": "Delete", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 64, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1883/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:05:43.468605491 -0500\n@@ -3162,7 +3162,7 @@\n       case Token.EXPR_RESULT:\n         return false;\n       case Token.CAST:\n-        return isExpressionResultUsed(parent);\n+        ;\n       case Token.HOOK:\n       case Token.AND:\n       case Token.OR:\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1883/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:05:43.468605491 -0500\n@@ -1425,7 +1425,31 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\tif (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\tif (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\tif (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n@@ -1454,7 +1478,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1567,9 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {\n+\t\t\treturn false;\n+\t\t}\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1883/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:05:43.468605491 -0500\n@@ -529,7 +529,6 @@\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n           addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1883/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:05:43.472605499 -0500\n@@ -1320,11 +1320,7 @@\n    * Try to fold array-element. e.g [1, 2, 3][10];\n    */\n   private Node tryFoldGetElem(Node n, Node left, Node right) {\n-    Preconditions.checkArgument(n.isGetElem());\n-\n-    if (left.isObjectLit()) {\n-      return tryFoldObjectPropAccess(n, left, right);\n-    }\n+    StringBuilder builder = new StringBuilder();\n \n     if (left.isArrayLit()) {\n       return tryFoldArrayAccess(n, left, right);\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 3165, 
          "faulty": "return isExpressionResultUsed(parent);", 
          "type": "Delete", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 1325, 
          "faulty": "if (left.isObjectLit()) {\n  return tryFoldObjectPropAccess(n,left,right);\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 1323, 
          "faulty": "Preconditions.checkArgument(n.isGetElem());", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1232/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:57:31.551560397 -0500\n@@ -1454,7 +1454,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1232/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:57:31.555560405 -0500\n@@ -529,7 +529,6 @@\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n           addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1232/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 05:57:31.555560405 -0500\n@@ -1320,8 +1320,6 @@\n    * Try to fold array-element. e.g [1, 2, 3][10];\n    */\n   private Node tryFoldGetElem(Node n, Node left, Node right) {\n-    Preconditions.checkArgument(n.isGetElem());\n-\n     if (left.isObjectLit()) {\n       return tryFoldObjectPropAccess(n, left, right);\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 1323, 
          "faulty": "Preconditions.checkArgument(n.isGetElem());", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1009/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:54:30.271170396 -0500\n@@ -1454,7 +1454,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1543,7 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        PropListItem x = propListHead;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1009/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:54:30.271170396 -0500\n@@ -529,7 +529,6 @@\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n           addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "PropListItem x=propListHead;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1537/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:01:21.348048922 -0500\n@@ -3162,7 +3162,7 @@\n       case Token.EXPR_RESULT:\n         return false;\n       case Token.CAST:\n-        return isExpressionResultUsed(parent);\n+        ;\n       case Token.HOOK:\n       case Token.AND:\n       case Token.OR:\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1537/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:01:21.348048922 -0500\n@@ -1425,7 +1425,13 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n@@ -1454,7 +1460,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1549,9 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {\n+\t\t\treturn false;\n+\t\t}\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1537/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:01:21.352048930 -0500\n@@ -528,7 +528,6 @@\n         if (isIndirectEval(first)\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n-          addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n           add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 3165, 
          "faulty": "return isExpressionResultUsed(parent);", 
          "type": "Delete", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 531, 
          "faulty": "addExpr(first,NodeUtil.precedence(Token.COMMA),Context.OTHER);", 
          "type": "Delete", 
          "seed": "return Token.name(type);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1838/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:05:04.660522345 -0500\n@@ -129,7 +129,7 @@\n         case IS_DISPATCHER:      return \"is_dispatcher\";\n         case DIRECTIVES:         return \"directives\";\n         case DIRECT_EVAL:        return \"direct_eval\";\n-        case FREE_CALL:          return \"free_call\";\n+        case FREE_CALL:          ;\n         case STATIC_SOURCE_FILE:    return \"source_file\";\n         case INPUT_ID:  return \"input_id\";\n         case LENGTH:    return \"length\";\n@@ -1425,7 +1425,13 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n@@ -1454,7 +1460,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1838/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:05:04.660522345 -0500\n@@ -528,8 +528,6 @@\n         if (isIndirectEval(first)\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n-          addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 132, 
          "faulty": "return \"free_call\";", 
          "type": "Delete", 
          "seed": "int post1=this.getIntProp(INCRDECR_PROP);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 531, 
          "faulty": "addExpr(first,NodeUtil.precedence(Token.COMMA),Context.OTHER);", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1739/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:03:50.572364191 -0500\n@@ -3162,7 +3162,7 @@\n       case Token.EXPR_RESULT:\n         return false;\n       case Token.CAST:\n-        return isExpressionResultUsed(parent);\n+        ;\n       case Token.HOOK:\n       case Token.AND:\n       case Token.OR:\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1739/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:03:50.576364200 -0500\n@@ -1425,7 +1425,25 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\tif (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\tif (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n@@ -1454,7 +1472,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1561,9 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {\n+\t\t\treturn false;\n+\t\t}\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1739/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:03:50.576364200 -0500\n@@ -529,7 +529,6 @@\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n           addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1739/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:03:50.576364200 -0500\n@@ -1322,9 +1322,7 @@\n   private Node tryFoldGetElem(Node n, Node left, Node right) {\n     Preconditions.checkArgument(n.isGetElem());\n \n-    if (left.isObjectLit()) {\n-      return tryFoldObjectPropAccess(n, left, right);\n-    }\n+    StringBuilder builder = new StringBuilder();\n \n     if (left.isArrayLit()) {\n       return tryFoldArrayAccess(n, left, right);\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 3165, 
          "faulty": "return isExpressionResultUsed(parent);", 
          "type": "Delete", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 1325, 
          "faulty": "if (left.isObjectLit()) {\n  return tryFoldObjectPropAccess(n,left,right);\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_889/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:52:52.434960928 -0500\n@@ -1454,7 +1454,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:32:20.212016881 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_889/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:52:52.438960937 -0500\n@@ -58,7 +58,8 @@\n         Node right = left.getNext();\n         if (right.isString() &&\n             NodeUtil.isValidPropertyName(right.getString())) {\n-          n.removeChild(left);\n+          final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\tn.removeChild(left);\n           n.removeChild(right);\n           parent.replaceChild(n, IR.getprop(left, right));\n           compiler.reportCodeChange();\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_889/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 05:52:52.438960937 -0500\n@@ -1320,8 +1320,6 @@\n    * Try to fold array-element. e.g [1, 2, 3][10];\n    */\n   private Node tryFoldGetElem(Node n, Node left, Node right) {\n-    Preconditions.checkArgument(n.isGetElem());\n-\n     if (left.isObjectLit()) {\n       return tryFoldObjectPropAccess(n, left, right);\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 1323, 
          "faulty": "Preconditions.checkArgument(n.isGetElem());", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 61, 
          "faulty": "n.removeChild(left);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1520/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:01:10.548026333 -0500\n@@ -3162,7 +3162,10 @@\n       case Token.EXPR_RESULT:\n         return false;\n       case Token.CAST:\n-        return isExpressionResultUsed(parent);\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn isExpressionResultUsed(parent);\n+\t\t}\n       case Token.HOOK:\n       case Token.AND:\n       case Token.OR:\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1520/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:01:10.552026342 -0500\n@@ -1425,7 +1425,19 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\tif (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n@@ -1454,7 +1466,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1555,9 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {\n+\t\t\treturn false;\n+\t\t}\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1520/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:01:10.552026342 -0500\n@@ -528,8 +528,8 @@\n         if (isIndirectEval(first)\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n-          addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n+          final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\taddExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 3165, 
          "faulty": "return isExpressionResultUsed(parent);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 531, 
          "faulty": "addExpr(first,NodeUtil.precedence(Token.COMMA),Context.OTHER);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1308/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:58:27.927682376 -0500\n@@ -3162,7 +3162,10 @@\n       case Token.EXPR_RESULT:\n         return false;\n       case Token.CAST:\n-        return isExpressionResultUsed(parent);\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn isExpressionResultUsed(parent);\n+\t\t}\n       case Token.HOOK:\n       case Token.AND:\n       case Token.OR:\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1308/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:58:27.931682385 -0500\n@@ -1454,7 +1454,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:32:20.212016881 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1308/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:58:27.931682385 -0500\n@@ -59,9 +59,9 @@\n         if (right.isString() &&\n             NodeUtil.isValidPropertyName(right.getString())) {\n           n.removeChild(left);\n-          n.removeChild(right);\n+          int start = 0;\n+\t\tn.removeChild(right);\n           parent.replaceChild(n, IR.getprop(left, right));\n-          compiler.reportCodeChange();\n         }\n         break;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 3165, 
          "faulty": "return isExpressionResultUsed(parent);", 
          "type": "Delete", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 64, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 3165, 
          "faulty": "return isExpressionResultUsed(parent);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 62, 
          "faulty": "n.removeChild(right);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1705/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:03:26.000311938 -0500\n@@ -1454,7 +1454,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1705/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:03:26.000311938 -0500\n@@ -529,7 +529,6 @@\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n           addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/Normalize.java\t2018-12-02 05:32:20.232016880 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1705/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/Normalize.java\t2018-12-02 06:03:26.004311946 -0500\n@@ -411,7 +411,7 @@\n           break;\n \n         case Token.CAST:\n-          parent.replaceChild(n, n.removeFirstChild());\n+          ;\n           break;\n       }\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/Normalize.java", 
          "line": 414, 
          "faulty": "parent.replaceChild(n,n.removeFirstChild());", 
          "type": "Delete", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1183/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:56:52.323475677 -0500\n@@ -1454,7 +1454,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1183/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:56:52.323475677 -0500\n@@ -529,7 +529,6 @@\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n           addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:32:20.212016881 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1183/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:56:52.327475687 -0500\n@@ -58,7 +58,8 @@\n         Node right = left.getNext();\n         if (right.isString() &&\n             NodeUtil.isValidPropertyName(right.getString())) {\n-          n.removeChild(left);\n+          final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\tn.removeChild(left);\n           n.removeChild(right);\n           parent.replaceChild(n, IR.getprop(left, right));\n           compiler.reportCodeChange();\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1183/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 05:56:52.327475687 -0500\n@@ -1320,12 +1320,6 @@\n    * Try to fold array-element. e.g [1, 2, 3][10];\n    */\n   private Node tryFoldGetElem(Node n, Node left, Node right) {\n-    Preconditions.checkArgument(n.isGetElem());\n-\n-    if (left.isObjectLit()) {\n-      return tryFoldObjectPropAccess(n, left, right);\n-    }\n-\n     if (left.isArrayLit()) {\n       return tryFoldArrayAccess(n, left, right);\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 1323, 
          "faulty": "Preconditions.checkArgument(n.isGetElem());", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 61, 
          "faulty": "n.removeChild(left);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 1325, 
          "faulty": "if (left.isObjectLit()) {\n  return tryFoldObjectPropAccess(n,left,right);\n}", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1022/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:54:40.775192870 -0500\n@@ -1454,7 +1454,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1022/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:54:40.779192878 -0500\n@@ -528,7 +528,6 @@\n         if (isIndirectEval(first)\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n-          addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n           add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:32:20.212016881 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1022/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:54:40.779192878 -0500\n@@ -61,7 +61,6 @@\n           n.removeChild(left);\n           n.removeChild(right);\n           parent.replaceChild(n, IR.getprop(left, right));\n-          compiler.reportCodeChange();\n         }\n         break;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 531, 
          "faulty": "addExpr(first,NodeUtil.precedence(Token.COMMA),Context.OTHER);", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 64, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Delete", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_622/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:49:08.738485466 -0500\n@@ -1425,7 +1425,8 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        int slashV1 = this.getIntProp(SLASH_V);\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n@@ -1454,7 +1455,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "int slashV1=this.getIntProp(SLASH_V);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1692/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:03:15.264289143 -0500\n@@ -1425,7 +1425,13 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n@@ -1543,7 +1549,9 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {\n+\t\t\treturn false;\n+\t\t}\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1692/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:03:15.268289151 -0500\n@@ -528,7 +528,6 @@\n         if (isIndirectEval(first)\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n-          addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n           add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 531, 
          "faulty": "addExpr(first,NodeUtil.precedence(Token.COMMA),Context.OTHER);", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1576/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:01:48.092105011 -0500\n@@ -1454,7 +1454,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1543,7 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        NodeMismatch res = null;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:32:20.212016881 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1576/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 06:01:48.096105020 -0500\n@@ -61,7 +61,6 @@\n           n.removeChild(left);\n           n.removeChild(right);\n           parent.replaceChild(n, IR.getprop(left, right));\n-          compiler.reportCodeChange();\n         }\n         break;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 64, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "NodeMismatch res=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1044/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:54:59.467232908 -0500\n@@ -1454,7 +1454,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1044/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:54:59.471232917 -0500\n@@ -528,8 +528,6 @@\n         if (isIndirectEval(first)\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n-          addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:32:20.212016881 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1044/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:54:59.471232917 -0500\n@@ -61,7 +61,6 @@\n           n.removeChild(left);\n           n.removeChild(right);\n           parent.replaceChild(n, IR.getprop(left, right));\n-          compiler.reportCodeChange();\n         }\n         break;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 531, 
          "faulty": "addExpr(first,NodeUtil.precedence(Token.COMMA),Context.OTHER);", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 64, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Delete", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_979/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:54:05.555117592 -0500\n@@ -1454,7 +1454,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1543,8 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        int slashV2 = node.getIntProp(SLASH_V);\n+\t\treturn false;\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "InsertBefore", 
          "seed": "int slashV2=node.getIntProp(SLASH_V);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1148/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:56:22.439411243 -0500\n@@ -1425,7 +1425,13 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n@@ -1454,7 +1460,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1549,9 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {\n+\t\t\treturn false;\n+\t\t}\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1148/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:56:22.439411243 -0500\n@@ -529,7 +529,6 @@\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n           addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1792/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:04:29.432447041 -0500\n@@ -3162,7 +3162,7 @@\n       case Token.EXPR_RESULT:\n         return false;\n       case Token.CAST:\n-        return isExpressionResultUsed(parent);\n+        ;\n       case Token.HOOK:\n       case Token.AND:\n       case Token.OR:\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1792/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:04:29.432447041 -0500\n@@ -1425,7 +1425,25 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\tif (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\tif (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n@@ -1454,7 +1472,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1561,9 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {\n+\t\t\treturn false;\n+\t\t}\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1792/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:04:29.436447050 -0500\n@@ -528,8 +528,7 @@\n         if (isIndirectEval(first)\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n-          addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n+          int index = -1;\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1792/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:04:29.436447050 -0500\n@@ -1322,9 +1322,7 @@\n   private Node tryFoldGetElem(Node n, Node left, Node right) {\n     Preconditions.checkArgument(n.isGetElem());\n \n-    if (left.isObjectLit()) {\n-      return tryFoldObjectPropAccess(n, left, right);\n-    }\n+    StringBuilder builder = new StringBuilder();\n \n     if (left.isArrayLit()) {\n       return tryFoldArrayAccess(n, left, right);\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 3165, 
          "faulty": "return isExpressionResultUsed(parent);", 
          "type": "Delete", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 3165, 
          "faulty": "return isExpressionResultUsed(parent);", 
          "type": "Delete", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 1325, 
          "faulty": "if (left.isObjectLit()) {\n  return tryFoldObjectPropAccess(n,left,right);\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 531, 
          "faulty": "addExpr(first,NodeUtil.precedence(Token.COMMA),Context.OTHER);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1851/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:05:15.668545911 -0500\n@@ -129,7 +129,7 @@\n         case IS_DISPATCHER:      return \"is_dispatcher\";\n         case DIRECTIVES:         return \"directives\";\n         case DIRECT_EVAL:        return \"direct_eval\";\n-        case FREE_CALL:          return \"free_call\";\n+        case FREE_CALL:          ;\n         case STATIC_SOURCE_FILE:    return \"source_file\";\n         case INPUT_ID:  return \"input_id\";\n         case LENGTH:    return \"length\";\n@@ -1454,7 +1454,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1851/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:05:15.672545920 -0500\n@@ -528,8 +528,6 @@\n         if (isIndirectEval(first)\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n-          addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 132, 
          "faulty": "return \"free_call\";", 
          "type": "Delete", 
          "seed": "int post1=this.getIntProp(INCRDECR_PROP);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 531, 
          "faulty": "addExpr(first,NodeUtil.precedence(Token.COMMA),Context.OTHER);", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1076/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:55:24.783287220 -0500\n@@ -1454,7 +1454,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1076/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:55:24.783287220 -0500\n@@ -529,7 +529,6 @@\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n           addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:32:20.212016881 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1076/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:55:24.783287220 -0500\n@@ -58,7 +58,8 @@\n         Node right = left.getNext();\n         if (right.isString() &&\n             NodeUtil.isValidPropertyName(right.getString())) {\n-          n.removeChild(left);\n+          final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\tn.removeChild(left);\n           n.removeChild(right);\n           parent.replaceChild(n, IR.getprop(left, right));\n           compiler.reportCodeChange();\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1076/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 05:55:24.787287230 -0500\n@@ -1320,8 +1320,6 @@\n    * Try to fold array-element. e.g [1, 2, 3][10];\n    */\n   private Node tryFoldGetElem(Node n, Node left, Node right) {\n-    Preconditions.checkArgument(n.isGetElem());\n-\n     if (left.isObjectLit()) {\n       return tryFoldObjectPropAccess(n, left, right);\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 1323, 
          "faulty": "Preconditions.checkArgument(n.isGetElem());", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 61, 
          "faulty": "n.removeChild(left);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1388/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 05:59:25.399806954 -0500\n@@ -3162,7 +3162,10 @@\n       case Token.EXPR_RESULT:\n         return false;\n       case Token.CAST:\n-        return isExpressionResultUsed(parent);\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn isExpressionResultUsed(parent);\n+\t\t}\n       case Token.HOOK:\n       case Token.AND:\n       case Token.OR:\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1388/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:59:25.403806962 -0500\n@@ -1425,7 +1425,13 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n@@ -1454,7 +1460,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:32:20.212016881 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1388/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:59:25.403806962 -0500\n@@ -61,7 +61,6 @@\n           n.removeChild(left);\n           n.removeChild(right);\n           parent.replaceChild(n, IR.getprop(left, right));\n-          compiler.reportCodeChange();\n         }\n         break;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1388/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 05:59:25.403806962 -0500\n@@ -1322,7 +1322,8 @@\n   private Node tryFoldGetElem(Node n, Node left, Node right) {\n     Preconditions.checkArgument(n.isGetElem());\n \n-    if (left.isObjectLit()) {\n+    StringBuilder builder = new StringBuilder();\n+\tif (left.isObjectLit()) {\n       return tryFoldObjectPropAccess(n, left, right);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 64, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 64, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 3165, 
          "faulty": "return isExpressionResultUsed(parent);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 1325, 
          "faulty": "if (left.isObjectLit()) {\n  return tryFoldObjectPropAccess(n,left,right);\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1636/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:02:35.220204334 -0500\n@@ -1425,7 +1425,13 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n@@ -1454,7 +1460,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1549,9 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {\n+\t\t\treturn false;\n+\t\t}\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1636/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:02:35.220204334 -0500\n@@ -528,7 +528,6 @@\n         if (isIndirectEval(first)\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n-          addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n           add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:32:20.212016881 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1636/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 06:02:35.220204334 -0500\n@@ -56,13 +56,7 @@\n       case Token.GETELEM:\n         Node left = n.getFirstChild();\n         Node right = left.getNext();\n-        if (right.isString() &&\n-            NodeUtil.isValidPropertyName(right.getString())) {\n-          n.removeChild(left);\n-          n.removeChild(right);\n-          parent.replaceChild(n, IR.getprop(left, right));\n-          compiler.reportCodeChange();\n-        }\n+        StringBuilder builder = new StringBuilder();\n         break;\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 59, 
          "faulty": "if (right.isString() && NodeUtil.isValidPropertyName(right.getString())) {\n  n.removeChild(left);\n  n.removeChild(right);\n  parent.replaceChild(n,IR.getprop(left,right));\n  compiler.reportCodeChange();\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 531, 
          "faulty": "addExpr(first,NodeUtil.precedence(Token.COMMA),Context.OTHER);", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1093/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:55:37.419314365 -0500\n@@ -1454,7 +1454,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1093/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:55:37.419314365 -0500\n@@ -529,7 +529,6 @@\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n           addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:32:20.212016881 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1093/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:55:37.423314374 -0500\n@@ -56,13 +56,7 @@\n       case Token.GETELEM:\n         Node left = n.getFirstChild();\n         Node right = left.getNext();\n-        if (right.isString() &&\n-            NodeUtil.isValidPropertyName(right.getString())) {\n-          n.removeChild(left);\n-          n.removeChild(right);\n-          parent.replaceChild(n, IR.getprop(left, right));\n-          compiler.reportCodeChange();\n-        }\n+        ;\n         break;\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 05:32:20.512016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1093/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 05:55:37.423314374 -0500\n@@ -1320,8 +1320,6 @@\n    * Try to fold array-element. e.g [1, 2, 3][10];\n    */\n   private Node tryFoldGetElem(Node n, Node left, Node right) {\n-    Preconditions.checkArgument(n.isGetElem());\n-\n     if (left.isObjectLit()) {\n       return tryFoldObjectPropAccess(n, left, right);\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 1323, 
          "faulty": "Preconditions.checkArgument(n.isGetElem());", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 61, 
          "faulty": "n.removeChild(left);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 59, 
          "faulty": "if (right.isString() && NodeUtil.isValidPropertyName(right.getString())) {\n  n.removeChild(left);\n  n.removeChild(right);\n  parent.replaceChild(n,IR.getprop(left,right));\n  compiler.reportCodeChange();\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1768/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:04:13.092412175 -0500\n@@ -1454,7 +1454,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1543,9 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {\n+\t\t\treturn false;\n+\t\t}\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1768/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:04:13.092412175 -0500\n@@ -529,7 +529,6 @@\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n           addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:32:20.212016881 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1768/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 06:04:13.096412183 -0500\n@@ -56,13 +56,7 @@\n       case Token.GETELEM:\n         Node left = n.getFirstChild();\n         Node right = left.getNext();\n-        if (right.isString() &&\n-            NodeUtil.isValidPropertyName(right.getString())) {\n-          n.removeChild(left);\n-          n.removeChild(right);\n-          parent.replaceChild(n, IR.getprop(left, right));\n-          compiler.reportCodeChange();\n-        }\n+        StringBuilder builder = new StringBuilder();\n         break;\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 59, 
          "faulty": "if (right.isString() && NodeUtil.isValidPropertyName(right.getString())) {\n  n.removeChild(left);\n  n.removeChild(right);\n  parent.replaceChild(n,IR.getprop(left,right));\n  compiler.reportCodeChange();\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 62, 
          "faulty": "n.removeChild(right);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1646/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:02:42.180219049 -0500\n@@ -1454,7 +1454,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1646/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:02:42.180219049 -0500\n@@ -529,7 +529,7 @@\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n           addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n+          final String PARAM_NAME = \"jscomp_throw_param\";\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Replace", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:20.528016873 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1327/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:58:41.279711300 -0500\n@@ -1425,7 +1425,13 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n@@ -1454,7 +1460,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n@@ -1543,7 +1549,9 @@\n       }\n     } else if (type == Token.CALL) {\n       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n-        return false;\n+        if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {\n+\t\t\treturn false;\n+\t\t}\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:32:20.500016874 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1327/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:58:41.279711300 -0500\n@@ -529,7 +529,6 @@\n             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n           add(\"(0,\");\n           addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n-          add(\")\");\n         } else {\n           addExpr(first, NodeUtil.precedence(type), context);\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:32:20.212016881 -0500\n+++ /tmp/GenProg_Defects4J_Closure_129/patches_qyo9/Patch_1327/patched/tmp/GenProg_Defects4J_Closure_129/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\t2018-12-02 05:58:41.283711308 -0500\n@@ -61,7 +61,6 @@\n           n.removeChild(left);\n           n.removeChild(right);\n           parent.replaceChild(n, IR.getprop(left, right));\n-          compiler.reportCodeChange();\n         }\n         break;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java", 
          "line": 64, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "String name=getString();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 532, 
          "faulty": "add(\")\");", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1546, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {\n  return false;\n}"
        }
      ]
    }
  ]
}