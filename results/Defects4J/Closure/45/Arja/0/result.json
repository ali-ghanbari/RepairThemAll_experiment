{
  "repair_end": "2018-12-01 15:57:01.506068", 
  "repair_begin": "2018-12-01 15:38:01.705865", 
  "patches": [
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 588, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  if ((!child.isEmpty()) && !isLiteralValue(child,includeFunctions)) {\n    return false;\n  }\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 962, 
          "faulty": "parent.replaceChild(assignNode,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1315/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:56:18.052832697 -0500\n@@ -585,13 +585,8 @@\n   static boolean isLiteralValue(Node n, boolean includeFunctions) {\n     switch (n.getType()) {\n       case Token.ARRAYLIT:\n-        for (Node child = n.getFirstChild(); child != null;\n-             child = child.getNext()) {\n-          if ((!child.isEmpty()) && !isLiteralValue(child, includeFunctions)) {\n-            return false;\n-          }\n-        }\n-        return true;\n+        ;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1315/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:56:18.052832697 -0500\n@@ -958,8 +958,6 @@\n             replacement.copyInformationFrom(current);\n           }\n         }\n-\n-        parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n         if (parent.isExprResult()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 962, 
          "faulty": "parent.replaceChild(assignNode,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_699/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:50:18.852079193 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_699/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:50:18.856079201 -0500\n@@ -958,8 +958,6 @@\n             replacement.copyInformationFrom(current);\n           }\n         }\n-\n-        parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n         if (parent.isExprResult()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 952, 
          "faulty": "for (Node current=assignNode.getFirstChild(); !current.isName(); current=current.getFirstChild()) {\n  if (current.isGetElem()) {\n    replacement=IR.comma(current.getLastChild().detachFromParent(),replacement);\n    replacement.copyInformationFrom(current);\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1433, 
          "faulty": "return res;", 
          "type": "InsertBefore", 
          "seed": "if (!isEquivalentTo(node2,false,false)) {\n  return new NodeMismatch(this,node2);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:37:41.728746509 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1349/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:56:37.768882196 -0500\n@@ -1430,7 +1430,10 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        if (!isEquivalentTo(node2, false, false)) {\n+\t\t\treturn new NodeMismatch(this, node2);\n+\t\t}\n+\t\treturn res;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1349/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:56:37.772882206 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1349/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:56:37.772882206 -0500\n@@ -948,17 +948,6 @@\n       if (mayHaveSecondarySideEffects) {\n         Node replacement = assignNode.getLastChild().detachFromParent();\n \n-        // Aggregate any expressions in GETELEMs.\n-        for (Node current = assignNode.getFirstChild();\n-             !current.isName();\n-             current = current.getFirstChild()) {\n-          if (current.isGetElem()) {\n-            replacement = IR.comma(\n-                current.getLastChild().detachFromParent(), replacement);\n-            replacement.copyInformationFrom(current);\n-          }\n-        }\n-\n         parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 952, 
          "faulty": "for (Node current=assignNode.getFirstChild(); !current.isName(); current=current.getFirstChild()) {\n  if (current.isGetElem()) {\n    replacement=IR.comma(current.getLastChild().detachFromParent(),replacement);\n    replacement.copyInformationFrom(current);\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1052/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:53:47.084496369 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1052/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:53:47.088496376 -0500\n@@ -948,17 +948,6 @@\n       if (mayHaveSecondarySideEffects) {\n         Node replacement = assignNode.getLastChild().detachFromParent();\n \n-        // Aggregate any expressions in GETELEMs.\n-        for (Node current = assignNode.getFirstChild();\n-             !current.isName();\n-             current = current.getFirstChild()) {\n-          if (current.isGetElem()) {\n-            replacement = IR.comma(\n-                current.getLastChild().detachFromParent(), replacement);\n-            replacement.copyInformationFrom(current);\n-          }\n-        }\n-\n         parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 962, 
          "faulty": "parent.replaceChild(assignNode,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1094/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:54:11.600544791 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1094/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:54:11.600544791 -0500\n@@ -958,8 +958,6 @@\n             replacement.copyInformationFrom(current);\n           }\n         }\n-\n-        parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n         if (parent.isExprResult()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 962, 
          "faulty": "parent.replaceChild(assignNode,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1087/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:54:07.668536835 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1087/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:54:07.668536835 -0500\n@@ -958,8 +958,6 @@\n             replacement.copyInformationFrom(current);\n           }\n         }\n-\n-        parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n         if (parent.isExprResult()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1420, 
          "faulty": "return new NodeMismatch(this,node2);", 
          "type": "InsertBefore", 
          "seed": "if (!isEquivalentTo(node2,false,false)) {\n  return new NodeMismatch(this,node2);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:37:41.728746509 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_179/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:45:09.331242365 -0500\n@@ -1417,7 +1417,10 @@\n    */\n   NodeMismatch checkTreeEqualsImpl(Node node2) {\n     if (!isEquivalentTo(node2, false, false)) {\n-      return new NodeMismatch(this, node2);\n+      if (!isEquivalentTo(node2, false, false)) {\n+\t\t\treturn new NodeMismatch(this, node2);\n+\t\t}\n+\treturn new NodeMismatch(this, node2);\n     }\n \n     NodeMismatch res = null;\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_179/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:45:09.331242365 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 962, 
          "faulty": "parent.replaceChild(assignNode,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1420, 
          "faulty": "return new NodeMismatch(this,node2);", 
          "type": "InsertBefore", 
          "seed": "if (!isEquivalentTo(node2,false,false)) {\n  return new NodeMismatch(this,node2);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:37:41.728746509 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_937/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:52:40.008373931 -0500\n@@ -1417,7 +1417,10 @@\n    */\n   NodeMismatch checkTreeEqualsImpl(Node node2) {\n     if (!isEquivalentTo(node2, false, false)) {\n-      return new NodeMismatch(this, node2);\n+      if (!isEquivalentTo(node2, false, false)) {\n+\t\t\treturn new NodeMismatch(this, node2);\n+\t\t}\n+\treturn new NodeMismatch(this, node2);\n     }\n \n     NodeMismatch res = null;\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_937/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:52:40.012373939 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_937/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:52:40.012373939 -0500\n@@ -958,8 +958,6 @@\n             replacement.copyInformationFrom(current);\n           }\n         }\n-\n-        parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n         if (parent.isExprResult()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 962, 
          "faulty": "parent.replaceChild(assignNode,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_836/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:51:40.352261571 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_836/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:51:40.352261571 -0500\n@@ -958,8 +958,6 @@\n             replacement.copyInformationFrom(current);\n           }\n         }\n-\n-        parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n         if (parent.isExprResult()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 952, 
          "faulty": "for (Node current=assignNode.getFirstChild(); !current.isName(); current=current.getFirstChild()) {\n  if (current.isGetElem()) {\n    replacement=IR.comma(current.getLastChild().detachFromParent(),replacement);\n    replacement.copyInformationFrom(current);\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1162/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:54:49.508624934 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1162/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:54:49.508624934 -0500\n@@ -948,17 +948,6 @@\n       if (mayHaveSecondarySideEffects) {\n         Node replacement = assignNode.getLastChild().detachFromParent();\n \n-        // Aggregate any expressions in GETELEMs.\n-        for (Node current = assignNode.getFirstChild();\n-             !current.isName();\n-             current = current.getFirstChild()) {\n-          if (current.isGetElem()) {\n-            replacement = IR.comma(\n-                current.getLastChild().detachFromParent(), replacement);\n-            replacement.copyInformationFrom(current);\n-          }\n-        }\n-\n         parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1433, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "if (!isEquivalentTo(node2,false,false)) {\n  return new NodeMismatch(this,node2);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:37:41.728746509 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_425/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:47:39.043721896 -0500\n@@ -1430,7 +1430,9 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        if (!isEquivalentTo(node2, false, false)) {\n+\t\t\treturn new NodeMismatch(this, node2);\n+\t\t}\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_425/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:47:39.043721896 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 952, 
          "faulty": "for (Node current=assignNode.getFirstChild(); !current.isName(); current=current.getFirstChild()) {\n  if (current.isGetElem()) {\n    replacement=IR.comma(current.getLastChild().detachFromParent(),replacement);\n    replacement.copyInformationFrom(current);\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_389/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:47:18.203654294 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_389/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:47:18.203654294 -0500\n@@ -948,17 +948,6 @@\n       if (mayHaveSecondarySideEffects) {\n         Node replacement = assignNode.getLastChild().detachFromParent();\n \n-        // Aggregate any expressions in GETELEMs.\n-        for (Node current = assignNode.getFirstChild();\n-             !current.isName();\n-             current = current.getFirstChild()) {\n-          if (current.isGetElem()) {\n-            replacement = IR.comma(\n-                current.getLastChild().detachFromParent(), replacement);\n-            replacement.copyInformationFrom(current);\n-          }\n-        }\n-\n         parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 952, 
          "faulty": "for (Node current=assignNode.getFirstChild(); !current.isName(); current=current.getFirstChild()) {\n  if (current.isGetElem()) {\n    replacement=IR.comma(current.getLastChild().detachFromParent(),replacement);\n    replacement.copyInformationFrom(current);\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 962, 
          "faulty": "parent.replaceChild(assignNode,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_557/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:48:56.471927784 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_557/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:48:56.471927784 -0500\n@@ -947,19 +947,6 @@\n       Node parent = assignNode.getParent();\n       if (mayHaveSecondarySideEffects) {\n         Node replacement = assignNode.getLastChild().detachFromParent();\n-\n-        // Aggregate any expressions in GETELEMs.\n-        for (Node current = assignNode.getFirstChild();\n-             !current.isName();\n-             current = current.getFirstChild()) {\n-          if (current.isGetElem()) {\n-            replacement = IR.comma(\n-                current.getLastChild().detachFromParent(), replacement);\n-            replacement.copyInformationFrom(current);\n-          }\n-        }\n-\n-        parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n         if (parent.isExprResult()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 952, 
          "faulty": "for (Node current=assignNode.getFirstChild(); !current.isName(); current=current.getFirstChild()) {\n  if (current.isGetElem()) {\n    replacement=IR.comma(current.getLastChild().detachFromParent(),replacement);\n    replacement.copyInformationFrom(current);\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_620/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:49:31.747987854 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_620/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:49:31.747987854 -0500\n@@ -948,17 +948,6 @@\n       if (mayHaveSecondarySideEffects) {\n         Node replacement = assignNode.getLastChild().detachFromParent();\n \n-        // Aggregate any expressions in GETELEMs.\n-        for (Node current = assignNode.getFirstChild();\n-             !current.isName();\n-             current = current.getFirstChild()) {\n-          if (current.isGetElem()) {\n-            replacement = IR.comma(\n-                current.getLastChild().detachFromParent(), replacement);\n-            replacement.copyInformationFrom(current);\n-          }\n-        }\n-\n         parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 962, 
          "faulty": "parent.replaceChild(assignNode,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_842/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:51:43.860270003 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_842/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:51:43.860270003 -0500\n@@ -958,8 +958,6 @@\n             replacement.copyInformationFrom(current);\n           }\n         }\n-\n-        parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n         if (parent.isExprResult()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 952, 
          "faulty": "for (Node current=assignNode.getFirstChild(); !current.isName(); current=current.getFirstChild()) {\n  if (current.isGetElem()) {\n    replacement=IR.comma(current.getLastChild().detachFromParent(),replacement);\n    replacement.copyInformationFrom(current);\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1335/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:56:30.660864232 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1335/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:56:30.664864242 -0500\n@@ -948,17 +948,6 @@\n       if (mayHaveSecondarySideEffects) {\n         Node replacement = assignNode.getLastChild().detachFromParent();\n \n-        // Aggregate any expressions in GETELEMs.\n-        for (Node current = assignNode.getFirstChild();\n-             !current.isName();\n-             current = current.getFirstChild()) {\n-          if (current.isGetElem()) {\n-            replacement = IR.comma(\n-                current.getLastChild().detachFromParent(), replacement);\n-            replacement.copyInformationFrom(current);\n-          }\n-        }\n-\n         parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 962, 
          "faulty": "parent.replaceChild(assignNode,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1381/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:56:55.336927141 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1381/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:56:55.336927141 -0500\n@@ -958,8 +958,6 @@\n             replacement.copyInformationFrom(current);\n           }\n         }\n-\n-        parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n         if (parent.isExprResult()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1433, 
          "faulty": "return res;", 
          "type": "InsertBefore", 
          "seed": "if (!isEquivalentTo(node2,false,false)) {\n  return new NodeMismatch(this,node2);\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 182, 
          "faulty": "return \"RETURN\";", 
          "type": "Delete", 
          "seed": "case BITOR:"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:37:41.728746509 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_940/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:52:41.320376370 -0500\n@@ -1430,7 +1430,10 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        if (!isEquivalentTo(node2, false, false)) {\n+\t\t\treturn new NodeMismatch(this, node2);\n+\t\t}\n+\t\treturn res;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_940/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:52:41.320376370 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:37:41.728746509 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_940/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:52:41.324376378 -0500\n@@ -179,7 +179,7 @@\n   public static String name(int token) {\n         switch (token) {\n           case ERROR:           return \"ERROR\";\n-          case RETURN:          return \"RETURN\";\n+          case RETURN:          ;\n           case BITOR:           return \"BITOR\";\n           case BITXOR:          return \"BITXOR\";\n           case BITAND:          return \"BITAND\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 588, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  if ((!child.isEmpty()) && !isLiteralValue(child,includeFunctions)) {\n    return false;\n  }\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 224, 
          "faulty": "return \"ARRAYLIT\";", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_983/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:53:06.376422734 -0500\n@@ -585,13 +585,8 @@\n   static boolean isLiteralValue(Node n, boolean includeFunctions) {\n     switch (n.getType()) {\n       case Token.ARRAYLIT:\n-        for (Node child = n.getFirstChild(); child != null;\n-             child = child.getNext()) {\n-          if ((!child.isEmpty()) && !isLiteralValue(child, includeFunctions)) {\n-            return false;\n-          }\n-        }\n-        return true;\n+        ;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:37:41.728746509 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_983/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:53:06.376422734 -0500\n@@ -221,7 +221,7 @@\n           case THROW:           return \"THROW\";\n           case IN:              return \"IN\";\n           case INSTANCEOF:      return \"INSTANCEOF\";\n-          case ARRAYLIT:        return \"ARRAYLIT\";\n+          case ARRAYLIT:        return null;\n           case OBJECTLIT:       return \"OBJECTLIT\";\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 952, 
          "faulty": "for (Node current=assignNode.getFirstChild(); !current.isName(); current=current.getFirstChild()) {\n  if (current.isGetElem()) {\n    replacement=IR.comma(current.getLastChild().detachFromParent(),replacement);\n    replacement.copyInformationFrom(current);\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1257/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:55:43.692749049 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1257/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:55:43.692749049 -0500\n@@ -948,17 +948,6 @@\n       if (mayHaveSecondarySideEffects) {\n         Node replacement = assignNode.getLastChild().detachFromParent();\n \n-        // Aggregate any expressions in GETELEMs.\n-        for (Node current = assignNode.getFirstChild();\n-             !current.isName();\n-             current = current.getFirstChild()) {\n-          if (current.isGetElem()) {\n-            replacement = IR.comma(\n-                current.getLastChild().detachFromParent(), replacement);\n-            replacement.copyInformationFrom(current);\n-          }\n-        }\n-\n         parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 962, 
          "faulty": "parent.replaceChild(assignNode,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1143/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:54:38.316600650 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1143/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:54:38.316600650 -0500\n@@ -958,8 +958,6 @@\n             replacement.copyInformationFrom(current);\n           }\n         }\n-\n-        parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n         if (parent.isExprResult()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 952, 
          "faulty": "for (Node current=assignNode.getFirstChild(); !current.isName(); current=current.getFirstChild()) {\n  if (current.isGetElem()) {\n    replacement=IR.comma(current.getLastChild().detachFromParent(),replacement);\n    replacement.copyInformationFrom(current);\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_812/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:51:27.584231252 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_812/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:51:27.588231262 -0500\n@@ -948,17 +948,6 @@\n       if (mayHaveSecondarySideEffects) {\n         Node replacement = assignNode.getLastChild().detachFromParent();\n \n-        // Aggregate any expressions in GETELEMs.\n-        for (Node current = assignNode.getFirstChild();\n-             !current.isName();\n-             current = current.getFirstChild()) {\n-          if (current.isGetElem()) {\n-            replacement = IR.comma(\n-                current.getLastChild().detachFromParent(), replacement);\n-            replacement.copyInformationFrom(current);\n-          }\n-        }\n-\n         parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 952, 
          "faulty": "for (Node current=assignNode.getFirstChild(); !current.isName(); current=current.getFirstChild()) {\n  if (current.isGetElem()) {\n    replacement=IR.comma(current.getLastChild().detachFromParent(),replacement);\n    replacement.copyInformationFrom(current);\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1106/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:54:18.088558071 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1106/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:54:18.092558079 -0500\n@@ -948,17 +948,6 @@\n       if (mayHaveSecondarySideEffects) {\n         Node replacement = assignNode.getLastChild().detachFromParent();\n \n-        // Aggregate any expressions in GETELEMs.\n-        for (Node current = assignNode.getFirstChild();\n-             !current.isName();\n-             current = current.getFirstChild()) {\n-          if (current.isGetElem()) {\n-            replacement = IR.comma(\n-                current.getLastChild().detachFromParent(), replacement);\n-            replacement.copyInformationFrom(current);\n-          }\n-        }\n-\n         parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 962, 
          "faulty": "parent.replaceChild(assignNode,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1229/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:55:26.552708687 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1229/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:55:26.556708697 -0500\n@@ -958,8 +958,6 @@\n             replacement.copyInformationFrom(current);\n           }\n         }\n-\n-        parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n         if (parent.isExprResult()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1404, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 208, 
          "faulty": "return \"GETELEM\";", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:37:41.728746509 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_608/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:49:25.819977226 -0500\n@@ -1401,11 +1401,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return \"ADD\";\n       }\n       return null;\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_608/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:49:25.819977226 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:37:41.728746509 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_608/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:49:25.823977233 -0500\n@@ -205,7 +205,7 @@\n           case DELPROP:         return \"DELPROP\";\n           case TYPEOF:          return \"TYPEOF\";\n           case GETPROP:         return \"GETPROP\";\n-          case GETELEM:         return \"GETELEM\";\n+          case GETELEM:         ;\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n           case LABEL_NAME:      return \"LABEL_NAME\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 952, 
          "faulty": "for (Node current=assignNode.getFirstChild(); !current.isName(); current=current.getFirstChild()) {\n  if (current.isGetElem()) {\n    replacement=IR.comma(current.getLastChild().detachFromParent(),replacement);\n    replacement.copyInformationFrom(current);\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_585/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:49:12.611954305 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_585/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:49:12.611954305 -0500\n@@ -948,17 +948,6 @@\n       if (mayHaveSecondarySideEffects) {\n         Node replacement = assignNode.getLastChild().detachFromParent();\n \n-        // Aggregate any expressions in GETELEMs.\n-        for (Node current = assignNode.getFirstChild();\n-             !current.isName();\n-             current = current.getFirstChild()) {\n-          if (current.isGetElem()) {\n-            replacement = IR.comma(\n-                current.getLastChild().detachFromParent(), replacement);\n-            replacement.copyInformationFrom(current);\n-          }\n-        }\n-\n         parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 588, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  if ((!child.isEmpty()) && !isLiteralValue(child,includeFunctions)) {\n    return false;\n  }\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1433, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "if (!isEquivalentTo(node2,false,false)) {\n  return new NodeMismatch(this,node2);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:37:41.728746509 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1166/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:54:51.640629617 -0500\n@@ -1430,7 +1430,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1166/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:54:51.644629625 -0500\n@@ -585,13 +585,8 @@\n   static boolean isLiteralValue(Node n, boolean includeFunctions) {\n     switch (n.getType()) {\n       case Token.ARRAYLIT:\n-        for (Node child = n.getFirstChild(); child != null;\n-             child = child.getNext()) {\n-          if ((!child.isEmpty()) && !isLiteralValue(child, includeFunctions)) {\n-            return false;\n-          }\n-        }\n-        return true;\n+        ;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 588, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  if ((!child.isEmpty()) && !isLiteralValue(child,includeFunctions)) {\n    return false;\n  }\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 962, 
          "faulty": "parent.replaceChild(assignNode,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1343/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:56:34.660874325 -0500\n@@ -585,13 +585,8 @@\n   static boolean isLiteralValue(Node n, boolean includeFunctions) {\n     switch (n.getType()) {\n       case Token.ARRAYLIT:\n-        for (Node child = n.getFirstChild(); child != null;\n-             child = child.getNext()) {\n-          if ((!child.isEmpty()) && !isLiteralValue(child, includeFunctions)) {\n-            return false;\n-          }\n-        }\n-        return true;\n+        ;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1343/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:56:34.660874325 -0500\n@@ -958,8 +958,6 @@\n             replacement.copyInformationFrom(current);\n           }\n         }\n-\n-        parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n         if (parent.isExprResult()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 588, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  if ((!child.isEmpty()) && !isLiteralValue(child,includeFunctions)) {\n    return false;\n  }\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 208, 
          "faulty": "return \"GETELEM\";", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_646/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:49:47.632017327 -0500\n@@ -585,13 +585,8 @@\n   static boolean isLiteralValue(Node n, boolean includeFunctions) {\n     switch (n.getType()) {\n       case Token.ARRAYLIT:\n-        for (Node child = n.getFirstChild(); child != null;\n-             child = child.getNext()) {\n-          if ((!child.isEmpty()) && !isLiteralValue(child, includeFunctions)) {\n-            return false;\n-          }\n-        }\n-        return true;\n+        ;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:37:41.728746509 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_646/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:49:47.632017327 -0500\n@@ -205,7 +205,7 @@\n           case DELPROP:         return \"DELPROP\";\n           case TYPEOF:          return \"TYPEOF\";\n           case GETPROP:         return \"GETPROP\";\n-          case GETELEM:         return \"GETELEM\";\n+          case GETELEM:         ;\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n           case LABEL_NAME:      return \"LABEL_NAME\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 962, 
          "faulty": "parent.replaceChild(assignNode,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1217/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:55:19.320691951 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1217/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:55:19.320691951 -0500\n@@ -958,8 +958,6 @@\n             replacement.copyInformationFrom(current);\n           }\n         }\n-\n-        parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n         if (parent.isExprResult()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 952, 
          "faulty": "for (Node current=assignNode.getFirstChild(); !current.isName(); current=current.getFirstChild()) {\n  if (current.isGetElem()) {\n    replacement=IR.comma(current.getLastChild().detachFromParent(),replacement);\n    replacement.copyInformationFrom(current);\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1433, 
          "faulty": "return res;", 
          "type": "InsertBefore", 
          "seed": "if (!isEquivalentTo(node2,false,false)) {\n  return new NodeMismatch(this,node2);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:37:41.728746509 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_569/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:49:03.115938496 -0500\n@@ -1430,7 +1430,10 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        if (!isEquivalentTo(node2, false, false)) {\n+\t\t\treturn new NodeMismatch(this, node2);\n+\t\t}\n+\t\treturn res;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_569/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:49:03.115938496 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_569/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:49:03.115938496 -0500\n@@ -948,17 +948,6 @@\n       if (mayHaveSecondarySideEffects) {\n         Node replacement = assignNode.getLastChild().detachFromParent();\n \n-        // Aggregate any expressions in GETELEMs.\n-        for (Node current = assignNode.getFirstChild();\n-             !current.isName();\n-             current = current.getFirstChild()) {\n-          if (current.isGetElem()) {\n-            replacement = IR.comma(\n-                current.getLastChild().detachFromParent(), replacement);\n-            replacement.copyInformationFrom(current);\n-          }\n-        }\n-\n         parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 224, 
          "faulty": "return \"ARRAYLIT\";", 
          "type": "Replace", 
          "seed": "return \"ADD\";"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_501/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:48:24.371869717 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:37:41.728746509 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_501/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:48:24.375869730 -0500\n@@ -221,7 +221,7 @@\n           case THROW:           return \"THROW\";\n           case IN:              return \"IN\";\n           case INSTANCEOF:      return \"INSTANCEOF\";\n-          case ARRAYLIT:        return \"ARRAYLIT\";\n+          case ARRAYLIT:        return \"ADD\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1404, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "sourcePosition=-1;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:37:41.728746509 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_350/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:46:54.383577336 -0500\n@@ -1401,7 +1401,8 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        sourcePosition = -1;\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_350/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:46:54.383577336 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 962, 
          "faulty": "parent.replaceChild(assignNode,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1073/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:54:00.100521722 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1073/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:54:00.100521722 -0500\n@@ -958,8 +958,6 @@\n             replacement.copyInformationFrom(current);\n           }\n         }\n-\n-        parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n         if (parent.isExprResult()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 588, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  if ((!child.isEmpty()) && !isLiteralValue(child,includeFunctions)) {\n    return false;\n  }\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 952, 
          "faulty": "for (Node current=assignNode.getFirstChild(); !current.isName(); current=current.getFirstChild()) {\n  if (current.isGetElem()) {\n    replacement=IR.comma(current.getLastChild().detachFromParent(),replacement);\n    replacement.copyInformationFrom(current);\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 962, 
          "faulty": "parent.replaceChild(assignNode,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1017/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:53:28.496461638 -0500\n@@ -585,13 +585,8 @@\n   static boolean isLiteralValue(Node n, boolean includeFunctions) {\n     switch (n.getType()) {\n       case Token.ARRAYLIT:\n-        for (Node child = n.getFirstChild(); child != null;\n-             child = child.getNext()) {\n-          if ((!child.isEmpty()) && !isLiteralValue(child, includeFunctions)) {\n-            return false;\n-          }\n-        }\n-        return true;\n+        ;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1017/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:53:28.496461638 -0500\n@@ -947,19 +947,6 @@\n       Node parent = assignNode.getParent();\n       if (mayHaveSecondarySideEffects) {\n         Node replacement = assignNode.getLastChild().detachFromParent();\n-\n-        // Aggregate any expressions in GETELEMs.\n-        for (Node current = assignNode.getFirstChild();\n-             !current.isName();\n-             current = current.getFirstChild()) {\n-          if (current.isGetElem()) {\n-            replacement = IR.comma(\n-                current.getLastChild().detachFromParent(), replacement);\n-            replacement.copyInformationFrom(current);\n-          }\n-        }\n-\n-        parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n         if (parent.isExprResult()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 962, 
          "faulty": "parent.replaceChild(assignNode,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1433, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "if (!isEquivalentTo(node2,false,false)) {\n  return new NodeMismatch(this,node2);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:37:41.728746509 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_974/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:53:02.500416204 -0500\n@@ -1430,7 +1430,9 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        if (!isEquivalentTo(node2, false, false)) {\n+\t\t\treturn new NodeMismatch(this, node2);\n+\t\t}\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_974/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:53:02.500416204 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_974/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:53:02.504416210 -0500\n@@ -958,8 +958,6 @@\n             replacement.copyInformationFrom(current);\n           }\n         }\n-\n-        parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n         if (parent.isExprResult()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 962, 
          "faulty": "parent.replaceChild(assignNode,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_564/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:48:59.815933139 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_564/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:48:59.819933146 -0500\n@@ -958,8 +958,6 @@\n             replacement.copyInformationFrom(current);\n           }\n         }\n-\n-        parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n         if (parent.isExprResult()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 962, 
          "faulty": "parent.replaceChild(assignNode,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_782/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:51:09.088188407 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_782/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:51:09.088188407 -0500\n@@ -958,8 +958,6 @@\n             replacement.copyInformationFrom(current);\n           }\n         }\n-\n-        parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n         if (parent.isExprResult()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 952, 
          "faulty": "for (Node current=assignNode.getFirstChild(); !current.isName(); current=current.getFirstChild()) {\n  if (current.isGetElem()) {\n    replacement=IR.comma(current.getLastChild().detachFromParent(),replacement);\n    replacement.copyInformationFrom(current);\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1045/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:53:43.020488624 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1045/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:53:43.024488631 -0500\n@@ -948,17 +948,6 @@\n       if (mayHaveSecondarySideEffects) {\n         Node replacement = assignNode.getLastChild().detachFromParent();\n \n-        // Aggregate any expressions in GETELEMs.\n-        for (Node current = assignNode.getFirstChild();\n-             !current.isName();\n-             current = current.getFirstChild()) {\n-          if (current.isGetElem()) {\n-            replacement = IR.comma(\n-                current.getLastChild().detachFromParent(), replacement);\n-            replacement.copyInformationFrom(current);\n-          }\n-        }\n-\n         parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 952, 
          "faulty": "for (Node current=assignNode.getFirstChild(); !current.isName(); current=current.getFirstChild()) {\n  if (current.isGetElem()) {\n    replacement=IR.comma(current.getLastChild().detachFromParent(),replacement);\n    replacement.copyInformationFrom(current);\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1196/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:55:06.664663101 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1196/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:55:06.664663101 -0500\n@@ -948,17 +948,6 @@\n       if (mayHaveSecondarySideEffects) {\n         Node replacement = assignNode.getLastChild().detachFromParent();\n \n-        // Aggregate any expressions in GETELEMs.\n-        for (Node current = assignNode.getFirstChild();\n-             !current.isName();\n-             current = current.getFirstChild()) {\n-          if (current.isGetElem()) {\n-            replacement = IR.comma(\n-                current.getLastChild().detachFromParent(), replacement);\n-            replacement.copyInformationFrom(current);\n-          }\n-        }\n-\n         parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 962, 
          "faulty": "parent.replaceChild(assignNode,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_679/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:50:07.276055673 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_679/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:50:07.276055673 -0500\n@@ -958,8 +958,6 @@\n             replacement.copyInformationFrom(current);\n           }\n         }\n-\n-        parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n         if (parent.isExprResult()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 952, 
          "faulty": "for (Node current=assignNode.getFirstChild(); !current.isName(); current=current.getFirstChild()) {\n  if (current.isGetElem()) {\n    replacement=IR.comma(current.getLastChild().detachFromParent(),replacement);\n    replacement.copyInformationFrom(current);\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_863/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:51:56.040297820 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_863/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:51:56.044297827 -0500\n@@ -948,17 +948,6 @@\n       if (mayHaveSecondarySideEffects) {\n         Node replacement = assignNode.getLastChild().detachFromParent();\n \n-        // Aggregate any expressions in GETELEMs.\n-        for (Node current = assignNode.getFirstChild();\n-             !current.isName();\n-             current = current.getFirstChild()) {\n-          if (current.isGetElem()) {\n-            replacement = IR.comma(\n-                current.getLastChild().detachFromParent(), replacement);\n-            replacement.copyInformationFrom(current);\n-          }\n-        }\n-\n         parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 962, 
          "faulty": "parent.replaceChild(assignNode,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_820/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:51:31.520240536 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_820/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:51:31.536240574 -0500\n@@ -958,8 +958,6 @@\n             replacement.copyInformationFrom(current);\n           }\n         }\n-\n-        parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n         if (parent.isExprResult()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 962, 
          "faulty": "parent.replaceChild(assignNode,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1108/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:54:18.780559498 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1108/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:54:18.780559498 -0500\n@@ -958,8 +958,6 @@\n             replacement.copyInformationFrom(current);\n           }\n         }\n-\n-        parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n         if (parent.isExprResult()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 962, 
          "faulty": "parent.replaceChild(assignNode,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_980/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:53:05.140420642 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_980/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:53:05.140420642 -0500\n@@ -958,8 +958,6 @@\n             replacement.copyInformationFrom(current);\n           }\n         }\n-\n-        parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n         if (parent.isExprResult()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 952, 
          "faulty": "for (Node current=assignNode.getFirstChild(); !current.isName(); current=current.getFirstChild()) {\n  if (current.isGetElem()) {\n    replacement=IR.comma(current.getLastChild().detachFromParent(),replacement);\n    replacement.copyInformationFrom(current);\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_422/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:47:37.707717556 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_422/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:47:37.711717568 -0500\n@@ -948,17 +948,6 @@\n       if (mayHaveSecondarySideEffects) {\n         Node replacement = assignNode.getLastChild().detachFromParent();\n \n-        // Aggregate any expressions in GETELEMs.\n-        for (Node current = assignNode.getFirstChild();\n-             !current.isName();\n-             current = current.getFirstChild()) {\n-          if (current.isGetElem()) {\n-            replacement = IR.comma(\n-                current.getLastChild().detachFromParent(), replacement);\n-            replacement.copyInformationFrom(current);\n-          }\n-        }\n-\n         parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1433, 
          "faulty": "return res;", 
          "type": "InsertBefore", 
          "seed": "if (!isEquivalentTo(node2,false,false)) {\n  return new NodeMismatch(this,node2);\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 208, 
          "faulty": "return \"GETELEM\";", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:37:41.728746509 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_579/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:49:09.303948732 -0500\n@@ -1430,7 +1430,10 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        if (!isEquivalentTo(node2, false, false)) {\n+\t\t\treturn new NodeMismatch(this, node2);\n+\t\t}\n+\t\treturn res;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_579/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:49:09.303948732 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:37:41.728746509 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_579/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:49:09.303948732 -0500\n@@ -205,7 +205,7 @@\n           case DELPROP:         return \"DELPROP\";\n           case TYPEOF:          return \"TYPEOF\";\n           case GETPROP:         return \"GETPROP\";\n-          case GETELEM:         return \"GETELEM\";\n+          case GETELEM:         ;\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n           case LABEL_NAME:      return \"LABEL_NAME\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 962, 
          "faulty": "parent.replaceChild(assignNode,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1339/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:56:32.668869293 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1339/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:56:32.668869293 -0500\n@@ -958,8 +958,6 @@\n             replacement.copyInformationFrom(current);\n           }\n         }\n-\n-        parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n         if (parent.isExprResult()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 962, 
          "faulty": "parent.replaceChild(assignNode,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_856/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:51:51.744289108 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_856/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:51:51.744289108 -0500\n@@ -958,8 +958,6 @@\n             replacement.copyInformationFrom(current);\n           }\n         }\n-\n-        parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n         if (parent.isExprResult()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 182, 
          "faulty": "return \"RETURN\";", 
          "type": "Delete", 
          "seed": "case BITOR:"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_461/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:48:01.411794715 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:37:41.728746509 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_461/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:48:01.415794728 -0500\n@@ -179,7 +179,7 @@\n   public static String name(int token) {\n         switch (token) {\n           case ERROR:           return \"ERROR\";\n-          case RETURN:          return \"RETURN\";\n+          case RETURN:          ;\n           case BITOR:           return \"BITOR\";\n           case BITXOR:          return \"BITXOR\";\n           case BITAND:          return \"BITAND\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 962, 
          "faulty": "parent.replaceChild(assignNode,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1116/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:54:22.940568125 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1116/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:54:22.940568125 -0500\n@@ -958,8 +958,6 @@\n             replacement.copyInformationFrom(current);\n           }\n         }\n-\n-        parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n         if (parent.isExprResult()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1433, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "if (!isEquivalentTo(node2,false,false)) {\n  return new NodeMismatch(this,node2);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:37:41.728746509 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_309/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:46:30.479500473 -0500\n@@ -1430,7 +1430,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_309/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:46:30.483500486 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 962, 
          "faulty": "parent.replaceChild(assignNode,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1145/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:54:38.960602034 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1145/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:54:38.964602042 -0500\n@@ -958,8 +958,6 @@\n             replacement.copyInformationFrom(current);\n           }\n         }\n-\n-        parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n         if (parent.isExprResult()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 952, 
          "faulty": "for (Node current=assignNode.getFirstChild(); !current.isName(); current=current.getFirstChild()) {\n  if (current.isGetElem()) {\n    replacement=IR.comma(current.getLastChild().detachFromParent(),replacement);\n    replacement.copyInformationFrom(current);\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_892/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:52:12.752325420 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_892/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:52:12.752325420 -0500\n@@ -948,17 +948,6 @@\n       if (mayHaveSecondarySideEffects) {\n         Node replacement = assignNode.getLastChild().detachFromParent();\n \n-        // Aggregate any expressions in GETELEMs.\n-        for (Node current = assignNode.getFirstChild();\n-             !current.isName();\n-             current = current.getFirstChild()) {\n-          if (current.isGetElem()) {\n-            replacement = IR.comma(\n-                current.getLastChild().detachFromParent(), replacement);\n-            replacement.copyInformationFrom(current);\n-          }\n-        }\n-\n         parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 588, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  if ((!child.isEmpty()) && !isLiteralValue(child,includeFunctions)) {\n    return false;\n  }\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1433, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "if (!isEquivalentTo(node2,false,false)) {\n  return new NodeMismatch(this,node2);\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 182, 
          "faulty": "return \"RETURN\";", 
          "type": "Delete", 
          "seed": "case BITOR:"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:37:41.728746509 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_543/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:48:49.431916754 -0500\n@@ -1430,7 +1430,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_543/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:48:49.431916754 -0500\n@@ -585,13 +585,8 @@\n   static boolean isLiteralValue(Node n, boolean includeFunctions) {\n     switch (n.getType()) {\n       case Token.ARRAYLIT:\n-        for (Node child = n.getFirstChild(); child != null;\n-             child = child.getNext()) {\n-          if ((!child.isEmpty()) && !isLiteralValue(child, includeFunctions)) {\n-            return false;\n-          }\n-        }\n-        return true;\n+        ;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:37:41.728746509 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_543/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:48:49.435916760 -0500\n@@ -179,7 +179,7 @@\n   public static String name(int token) {\n         switch (token) {\n           case ERROR:           return \"ERROR\";\n-          case RETURN:          return \"RETURN\";\n+          case RETURN:          ;\n           case BITOR:           return \"BITOR\";\n           case BITXOR:          return \"BITXOR\";\n           case BITAND:          return \"BITAND\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 962, 
          "faulty": "parent.replaceChild(assignNode,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1181/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:54:58.592645005 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1181/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:54:58.592645005 -0500\n@@ -958,8 +958,6 @@\n             replacement.copyInformationFrom(current);\n           }\n         }\n-\n-        parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n         if (parent.isExprResult()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 962, 
          "faulty": "parent.replaceChild(assignNode,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_618/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:49:31.103986689 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_618/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:49:31.107986697 -0500\n@@ -958,8 +958,6 @@\n             replacement.copyInformationFrom(current);\n           }\n         }\n-\n-        parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n         if (parent.isExprResult()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 952, 
          "faulty": "for (Node current=assignNode.getFirstChild(); !current.isName(); current=current.getFirstChild()) {\n  if (current.isGetElem()) {\n    replacement=IR.comma(current.getLastChild().detachFromParent(),replacement);\n    replacement.copyInformationFrom(current);\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1433, 
          "faulty": "return res;", 
          "type": "InsertBefore", 
          "seed": "if (!isEquivalentTo(node2,false,false)) {\n  return new NodeMismatch(this,node2);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:37:41.728746509 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1084/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:54:06.352534187 -0500\n@@ -1430,7 +1430,10 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        if (!isEquivalentTo(node2, false, false)) {\n+\t\t\treturn new NodeMismatch(this, node2);\n+\t\t}\n+\t\treturn res;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1084/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:54:06.352534187 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1084/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:54:06.356534195 -0500\n@@ -948,17 +948,6 @@\n       if (mayHaveSecondarySideEffects) {\n         Node replacement = assignNode.getLastChild().detachFromParent();\n \n-        // Aggregate any expressions in GETELEMs.\n-        for (Node current = assignNode.getFirstChild();\n-             !current.isName();\n-             current = current.getFirstChild()) {\n-          if (current.isGetElem()) {\n-            replacement = IR.comma(\n-                current.getLastChild().detachFromParent(), replacement);\n-            replacement.copyInformationFrom(current);\n-          }\n-        }\n-\n         parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 962, 
          "faulty": "parent.replaceChild(assignNode,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1325/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:56:24.252848151 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1325/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:56:24.252848151 -0500\n@@ -958,8 +958,6 @@\n             replacement.copyInformationFrom(current);\n           }\n         }\n-\n-        parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n         if (parent.isExprResult()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 182, 
          "faulty": "return \"RETURN\";", 
          "type": "Delete", 
          "seed": "case BITOR:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 208, 
          "faulty": "return \"GETELEM\";", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_844/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:51:44.520271594 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:37:41.728746509 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_844/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:51:44.524271604 -0500\n@@ -179,7 +179,7 @@\n   public static String name(int token) {\n         switch (token) {\n           case ERROR:           return \"ERROR\";\n-          case RETURN:          return \"RETURN\";\n+          case RETURN:          ;\n           case BITOR:           return \"BITOR\";\n           case BITXOR:          return \"BITXOR\";\n           case BITAND:          return \"BITAND\";\n@@ -205,7 +205,7 @@\n           case DELPROP:         return \"DELPROP\";\n           case TYPEOF:          return \"TYPEOF\";\n           case GETPROP:         return \"GETPROP\";\n-          case GETELEM:         return \"GETELEM\";\n+          case GETELEM:         return null;\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n           case LABEL_NAME:      return \"LABEL_NAME\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 962, 
          "faulty": "parent.replaceChild(assignNode,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 208, 
          "faulty": "return \"GETELEM\";", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1190/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:55:03.304655539 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1190/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:55:03.304655539 -0500\n@@ -958,8 +958,6 @@\n             replacement.copyInformationFrom(current);\n           }\n         }\n-\n-        parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n         if (parent.isExprResult()) {\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:37:41.728746509 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1190/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:55:03.304655539 -0500\n@@ -205,7 +205,7 @@\n           case DELPROP:         return \"DELPROP\";\n           case TYPEOF:          return \"TYPEOF\";\n           case GETPROP:         return \"GETPROP\";\n-          case GETELEM:         return \"GETELEM\";\n+          case GETELEM:         return null;\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n           case LABEL_NAME:      return \"LABEL_NAME\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 952, 
          "faulty": "for (Node current=assignNode.getFirstChild(); !current.isName(); current=current.getFirstChild()) {\n  if (current.isGetElem()) {\n    replacement=IR.comma(current.getLastChild().detachFromParent(),replacement);\n    replacement.copyInformationFrom(current);\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_676/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:50:05.896052914 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_676/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:50:05.896052914 -0500\n@@ -948,17 +948,6 @@\n       if (mayHaveSecondarySideEffects) {\n         Node replacement = assignNode.getLastChild().detachFromParent();\n \n-        // Aggregate any expressions in GETELEMs.\n-        for (Node current = assignNode.getFirstChild();\n-             !current.isName();\n-             current = current.getFirstChild()) {\n-          if (current.isGetElem()) {\n-            replacement = IR.comma(\n-                current.getLastChild().detachFromParent(), replacement);\n-            replacement.copyInformationFrom(current);\n-          }\n-        }\n-\n         parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 208, 
          "faulty": "return \"GETELEM\";", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_511/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:48:29.399886173 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:37:41.728746509 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_511/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:48:29.399886173 -0500\n@@ -205,7 +205,7 @@\n           case DELPROP:         return \"DELPROP\";\n           case TYPEOF:          return \"TYPEOF\";\n           case GETPROP:         return \"GETPROP\";\n-          case GETELEM:         return \"GETELEM\";\n+          case GETELEM:         ;\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n           case LABEL_NAME:      return \"LABEL_NAME\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 952, 
          "faulty": "for (Node current=assignNode.getFirstChild(); !current.isName(); current=current.getFirstChild()) {\n  if (current.isGetElem()) {\n    replacement=IR.comma(current.getLastChild().detachFromParent(),replacement);\n    replacement.copyInformationFrom(current);\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_591/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:49:15.899959911 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_591/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:49:15.903959917 -0500\n@@ -948,17 +948,6 @@\n       if (mayHaveSecondarySideEffects) {\n         Node replacement = assignNode.getLastChild().detachFromParent();\n \n-        // Aggregate any expressions in GETELEMs.\n-        for (Node current = assignNode.getFirstChild();\n-             !current.isName();\n-             current = current.getFirstChild()) {\n-          if (current.isGetElem()) {\n-            replacement = IR.comma(\n-                current.getLastChild().detachFromParent(), replacement);\n-            replacement.copyInformationFrom(current);\n-          }\n-        }\n-\n         parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 588, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  if ((!child.isEmpty()) && !isLiteralValue(child,includeFunctions)) {\n    return false;\n  }\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 962, 
          "faulty": "parent.replaceChild(assignNode,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_823/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:51:32.944243908 -0500\n@@ -585,13 +585,8 @@\n   static boolean isLiteralValue(Node n, boolean includeFunctions) {\n     switch (n.getType()) {\n       case Token.ARRAYLIT:\n-        for (Node child = n.getFirstChild(); child != null;\n-             child = child.getNext()) {\n-          if ((!child.isEmpty()) && !isLiteralValue(child, includeFunctions)) {\n-            return false;\n-          }\n-        }\n-        return true;\n+        ;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_823/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:51:32.948243918 -0500\n@@ -958,8 +958,6 @@\n             replacement.copyInformationFrom(current);\n           }\n         }\n-\n-        parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n         if (parent.isExprResult()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 588, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  if ((!child.isEmpty()) && !isLiteralValue(child,includeFunctions)) {\n    return false;\n  }\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 224, 
          "faulty": "return \"ARRAYLIT\";", 
          "type": "Replace", 
          "seed": "return \"BITOR\";"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1286/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:55:59.784787790 -0500\n@@ -585,13 +585,8 @@\n   static boolean isLiteralValue(Node n, boolean includeFunctions) {\n     switch (n.getType()) {\n       case Token.ARRAYLIT:\n-        for (Node child = n.getFirstChild(); child != null;\n-             child = child.getNext()) {\n-          if ((!child.isEmpty()) && !isLiteralValue(child, includeFunctions)) {\n-            return false;\n-          }\n-        }\n-        return true;\n+        ;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:37:41.728746509 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1286/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:55:59.788787799 -0500\n@@ -221,7 +221,7 @@\n           case THROW:           return \"THROW\";\n           case IN:              return \"IN\";\n           case INSTANCEOF:      return \"INSTANCEOF\";\n-          case ARRAYLIT:        return \"ARRAYLIT\";\n+          case ARRAYLIT:        return \"BITOR\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 588, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  if ((!child.isEmpty()) && !isLiteralValue(child,includeFunctions)) {\n    return false;\n  }\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_504/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:48:25.655873919 -0500\n@@ -585,13 +585,8 @@\n   static boolean isLiteralValue(Node n, boolean includeFunctions) {\n     switch (n.getType()) {\n       case Token.ARRAYLIT:\n-        for (Node child = n.getFirstChild(); child != null;\n-             child = child.getNext()) {\n-          if ((!child.isEmpty()) && !isLiteralValue(child, includeFunctions)) {\n-            return false;\n-          }\n-        }\n-        return true;\n+        ;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 952, 
          "faulty": "for (Node current=assignNode.getFirstChild(); !current.isName(); current=current.getFirstChild()) {\n  if (current.isGetElem()) {\n    replacement=IR.comma(current.getLastChild().detachFromParent(),replacement);\n    replacement.copyInformationFrom(current);\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 182, 
          "faulty": "return \"RETURN\";", 
          "type": "Delete", 
          "seed": "case BITOR:"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_553/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:48:54.531924711 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_553/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:48:54.531924711 -0500\n@@ -948,17 +948,6 @@\n       if (mayHaveSecondarySideEffects) {\n         Node replacement = assignNode.getLastChild().detachFromParent();\n \n-        // Aggregate any expressions in GETELEMs.\n-        for (Node current = assignNode.getFirstChild();\n-             !current.isName();\n-             current = current.getFirstChild()) {\n-          if (current.isGetElem()) {\n-            replacement = IR.comma(\n-                current.getLastChild().detachFromParent(), replacement);\n-            replacement.copyInformationFrom(current);\n-          }\n-        }\n-\n         parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:37:41.728746509 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_553/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:48:54.535924717 -0500\n@@ -179,7 +179,7 @@\n   public static String name(int token) {\n         switch (token) {\n           case ERROR:           return \"ERROR\";\n-          case RETURN:          return \"RETURN\";\n+          case RETURN:          ;\n           case BITOR:           return \"BITOR\";\n           case BITXOR:          return \"BITXOR\";\n           case BITAND:          return \"BITAND\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 952, 
          "faulty": "for (Node current=assignNode.getFirstChild(); !current.isName(); current=current.getFirstChild()) {\n  if (current.isGetElem()) {\n    replacement=IR.comma(current.getLastChild().detachFromParent(),replacement);\n    replacement.copyInformationFrom(current);\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1282/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:55:57.896783203 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1282/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:55:57.896783203 -0500\n@@ -948,17 +948,6 @@\n       if (mayHaveSecondarySideEffects) {\n         Node replacement = assignNode.getLastChild().detachFromParent();\n \n-        // Aggregate any expressions in GETELEMs.\n-        for (Node current = assignNode.getFirstChild();\n-             !current.isName();\n-             current = current.getFirstChild()) {\n-          if (current.isGetElem()) {\n-            replacement = IR.comma(\n-                current.getLastChild().detachFromParent(), replacement);\n-            replacement.copyInformationFrom(current);\n-          }\n-        }\n-\n         parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 588, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  if ((!child.isEmpty()) && !isLiteralValue(child,includeFunctions)) {\n    return false;\n  }\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 962, 
          "faulty": "parent.replaceChild(assignNode,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 208, 
          "faulty": "return \"GETELEM\";", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1038/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:53:39.744482442 -0500\n@@ -585,13 +585,8 @@\n   static boolean isLiteralValue(Node n, boolean includeFunctions) {\n     switch (n.getType()) {\n       case Token.ARRAYLIT:\n-        for (Node child = n.getFirstChild(); child != null;\n-             child = child.getNext()) {\n-          if ((!child.isEmpty()) && !isLiteralValue(child, includeFunctions)) {\n-            return false;\n-          }\n-        }\n-        return true;\n+        ;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1038/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:53:39.744482442 -0500\n@@ -958,8 +958,6 @@\n             replacement.copyInformationFrom(current);\n           }\n         }\n-\n-        parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n         if (parent.isExprResult()) {\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:37:41.728746509 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1038/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:53:39.744482442 -0500\n@@ -205,7 +205,7 @@\n           case DELPROP:         return \"DELPROP\";\n           case TYPEOF:          return \"TYPEOF\";\n           case GETPROP:         return \"GETPROP\";\n-          case GETELEM:         return \"GETELEM\";\n+          case GETELEM:         return null;\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n           case LABEL_NAME:      return \"LABEL_NAME\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 588, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  if ((!child.isEmpty()) && !isLiteralValue(child,includeFunctions)) {\n    return false;\n  }\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1404, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return toString(true,true,true);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:37:41.728746509 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_469/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:48:05.603808390 -0500\n@@ -1401,11 +1401,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return toString(true, true, true);\n       }\n       return null;\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_469/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:48:05.607808403 -0500\n@@ -585,13 +585,8 @@\n   static boolean isLiteralValue(Node n, boolean includeFunctions) {\n     switch (n.getType()) {\n       case Token.ARRAYLIT:\n-        for (Node child = n.getFirstChild(); child != null;\n-             child = child.getNext()) {\n-          if ((!child.isEmpty()) && !isLiteralValue(child, includeFunctions)) {\n-            return false;\n-          }\n-        }\n-        return true;\n+        ;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 962, 
          "faulty": "parent.replaceChild(assignNode,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1433, 
          "faulty": "return res;", 
          "type": "InsertBefore", 
          "seed": "if (!isEquivalentTo(node2,false,false)) {\n  return new NodeMismatch(this,node2);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:37:41.728746509 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_758/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:50:54.576155738 -0500\n@@ -1430,7 +1430,10 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        if (!isEquivalentTo(node2, false, false)) {\n+\t\t\treturn new NodeMismatch(this, node2);\n+\t\t}\n+\t\treturn res;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_758/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:50:54.580155746 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_758/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:50:54.580155746 -0500\n@@ -958,8 +958,6 @@\n             replacement.copyInformationFrom(current);\n           }\n         }\n-\n-        parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n         if (parent.isExprResult()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 962, 
          "faulty": "parent.replaceChild(assignNode,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1019/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:53:29.136462803 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1019/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:53:29.140462810 -0500\n@@ -958,8 +958,6 @@\n             replacement.copyInformationFrom(current);\n           }\n         }\n-\n-        parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n         if (parent.isExprResult()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1433, 
          "faulty": "return res;", 
          "type": "InsertBefore", 
          "seed": "if (!isEquivalentTo(node2,false,false)) {\n  return new NodeMismatch(this,node2);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:37:41.728746509 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_474/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:48:08.195816850 -0500\n@@ -1430,7 +1430,10 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        if (!isEquivalentTo(node2, false, false)) {\n+\t\t\treturn new NodeMismatch(this, node2);\n+\t\t}\n+\t\treturn res;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_474/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:48:08.199816863 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 588, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  if ((!child.isEmpty()) && !isLiteralValue(child,includeFunctions)) {\n    return false;\n  }\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1433, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "if (!isEquivalentTo(node2,false,false)) {\n  return new NodeMismatch(this,node2);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:37:41.728746509 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1112/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:54:20.892563869 -0500\n@@ -1430,7 +1430,9 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        if (!isEquivalentTo(node2, false, false)) {\n+\t\t\treturn new NodeMismatch(this, node2);\n+\t\t}\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1112/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:54:20.896563877 -0500\n@@ -585,13 +585,8 @@\n   static boolean isLiteralValue(Node n, boolean includeFunctions) {\n     switch (n.getType()) {\n       case Token.ARRAYLIT:\n-        for (Node child = n.getFirstChild(); child != null;\n-             child = child.getNext()) {\n-          if ((!child.isEmpty()) && !isLiteralValue(child, includeFunctions)) {\n-            return false;\n-          }\n-        }\n-        return true;\n+        ;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 962, 
          "faulty": "parent.replaceChild(assignNode,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1375/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:56:51.968918466 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1375/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:56:51.968918466 -0500\n@@ -958,8 +958,6 @@\n             replacement.copyInformationFrom(current);\n           }\n         }\n-\n-        parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n         if (parent.isExprResult()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 952, 
          "faulty": "for (Node current=assignNode.getFirstChild(); !current.isName(); current=current.getFirstChild()) {\n  if (current.isGetElem()) {\n    replacement=IR.comma(current.getLastChild().detachFromParent(),replacement);\n    replacement.copyInformationFrom(current);\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1370/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:56:48.984910803 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1370/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:56:49.008910864 -0500\n@@ -948,17 +948,6 @@\n       if (mayHaveSecondarySideEffects) {\n         Node replacement = assignNode.getLastChild().detachFromParent();\n \n-        // Aggregate any expressions in GETELEMs.\n-        for (Node current = assignNode.getFirstChild();\n-             !current.isName();\n-             current = current.getFirstChild()) {\n-          if (current.isGetElem()) {\n-            replacement = IR.comma(\n-                current.getLastChild().detachFromParent(), replacement);\n-            replacement.copyInformationFrom(current);\n-          }\n-        }\n-\n         parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 962, 
          "faulty": "parent.replaceChild(assignNode,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1172/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:54:54.716636403 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1172/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:54:54.716636403 -0500\n@@ -958,8 +958,6 @@\n             replacement.copyInformationFrom(current);\n           }\n         }\n-\n-        parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n         if (parent.isExprResult()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 962, 
          "faulty": "parent.replaceChild(assignNode,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1099/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:54:14.168550025 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1099/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:54:14.168550025 -0500\n@@ -958,8 +958,6 @@\n             replacement.copyInformationFrom(current);\n           }\n         }\n-\n-        parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n         if (parent.isExprResult()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 208, 
          "faulty": "return \"GETELEM\";", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 224, 
          "faulty": "return \"ARRAYLIT\";", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_830/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:51:36.808253097 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:37:41.728746509 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_830/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:51:36.812253107 -0500\n@@ -205,7 +205,7 @@\n           case DELPROP:         return \"DELPROP\";\n           case TYPEOF:          return \"TYPEOF\";\n           case GETPROP:         return \"GETPROP\";\n-          case GETELEM:         return \"GETELEM\";\n+          case GETELEM:         ;\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n           case LABEL_NAME:      return \"LABEL_NAME\";\n@@ -221,7 +221,7 @@\n           case THROW:           return \"THROW\";\n           case IN:              return \"IN\";\n           case INSTANCEOF:      return \"INSTANCEOF\";\n-          case ARRAYLIT:        return \"ARRAYLIT\";\n+          case ARRAYLIT:        return null;\n           case OBJECTLIT:       return \"OBJECTLIT\";\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 962, 
          "faulty": "parent.replaceChild(assignNode,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 182, 
          "faulty": "return \"RETURN\";", 
          "type": "Delete", 
          "seed": "switch (token) {\ncase ERROR:\n  return \"ERROR\";\ncase RETURN:\nreturn \"RETURN\";\ncase BITOR:\nreturn \"BITOR\";\ncase BITXOR:\nreturn \"BITXOR\";\ncase BITAND:\nreturn \"BITAND\";\ncase EQ:\nreturn \"EQ\";\ncase NE:\nreturn \"NE\";\ncase LT:\nreturn \"LT\";\ncase LE:\nreturn \"LE\";\ncase GT:\nreturn \"GT\";\ncase GE:\nreturn \"GE\";\ncase LSH:\nreturn \"LSH\";\ncase RSH:\nreturn \"RSH\";\ncase URSH:\nreturn \"URSH\";\ncase ADD:\nreturn \"ADD\";\ncase SUB:\nreturn \"SUB\";\ncase MUL:\nreturn \"MUL\";\ncase DIV:\nreturn \"DIV\";\ncase MOD:\nreturn \"MOD\";\ncase NOT:\nreturn \"NOT\";\ncase BITNOT:\nreturn \"BITNOT\";\ncase POS:\nreturn \"POS\";\ncase NEG:\nreturn \"NEG\";\ncase NEW:\nreturn \"NEW\";\ncase DELPROP:\nreturn \"DELPROP\";\ncase TYPEOF:\nreturn \"TYPEOF\";\ncase GETPROP:\nreturn \"GETPROP\";\ncase GETELEM:\nreturn \"GETELEM\";\ncase CALL:\nreturn \"CALL\";\ncase NAME:\nreturn \"NAME\";\ncase LABEL_NAME:\nreturn \"LABEL_NAME\";\ncase NUMBER:\nreturn \"NUMBER\";\ncase STRING:\nreturn \"STRING\";\ncase NULL:\nreturn \"NULL\";\ncase THIS:\nreturn \"THIS\";\ncase FALSE:\nreturn \"FALSE\";\ncase TRUE:\nreturn \"TRUE\";\ncase SHEQ:\nreturn \"SHEQ\";\ncase SHNE:\nreturn \"SHNE\";\ncase REGEXP:\nreturn \"REGEXP\";\ncase THROW:\nreturn \"THROW\";\ncase IN:\nreturn \"IN\";\ncase INSTANCEOF:\nreturn \"INSTANCEOF\";\ncase ARRAYLIT:\nreturn \"ARRAYLIT\";\ncase OBJECTLIT:\nreturn \"OBJECTLIT\";\ncase TRY:\nreturn \"TRY\";\ncase PARAM_LIST:\nreturn \"PARAM_LIST\";\ncase COMMA:\nreturn \"COMMA\";\ncase ASSIGN:\nreturn \"ASSIGN\";\ncase ASSIGN_BITOR:\nreturn \"ASSIGN_BITOR\";\ncase ASSIGN_BITXOR:\nreturn \"ASSIGN_BITXOR\";\ncase ASSIGN_BITAND:\nreturn \"ASSIGN_BITAND\";\ncase ASSIGN_LSH:\nreturn \"ASSIGN_LSH\";\ncase ASSIGN_RSH:\nreturn \"ASSIGN_RSH\";\ncase ASSIGN_URSH:\nreturn \"ASSIGN_URSH\";\ncase ASSIGN_ADD:\nreturn \"ASSIGN_ADD\";\ncase ASSIGN_SUB:\nreturn \"ASSIGN_SUB\";\ncase ASSIGN_MUL:\nreturn \"ASSIGN_MUL\";\ncase ASSIGN_DIV:\nreturn \"ASSIGN_DIV\";\ncase ASSIGN_MOD:\nreturn \"ASSIGN_MOD\";\ncase HOOK:\nreturn \"HOOK\";\ncase COLON:\nreturn \"COLON\";\ncase OR:\nreturn \"OR\";\ncase AND:\nreturn \"AND\";\ncase INC:\nreturn \"INC\";\ncase DEC:\nreturn \"DEC\";\ncase FUNCTION:\nreturn \"FUNCTION\";\ncase IF:\nreturn \"IF\";\ncase SWITCH:\nreturn \"SWITCH\";\ncase CASE:\nreturn \"CASE\";\ncase DEFAULT_CASE:\nreturn \"DEFAULT_CASE\";\ncase WHILE:\nreturn \"WHILE\";\ncase DO:\nreturn \"DO\";\ncase FOR:\nreturn \"FOR\";\ncase BREAK:\nreturn \"BREAK\";\ncase CONTINUE:\nreturn \"CONTINUE\";\ncase VAR:\nreturn \"VAR\";\ncase WITH:\nreturn \"WITH\";\ncase CATCH:\nreturn \"CATCH\";\ncase EMPTY:\nreturn \"EMPTY\";\ncase BLOCK:\nreturn \"BLOCK\";\ncase LABEL:\nreturn \"LABEL\";\ncase EXPR_RESULT:\nreturn \"EXPR_RESULT\";\ncase SCRIPT:\nreturn \"SCRIPT\";\ncase GETTER_DEF:\nreturn \"GETTER_DEF\";\ncase SETTER_DEF:\nreturn \"SETTER_DEF\";\ncase CONST:\nreturn \"CONST\";\ncase DEBUGGER:\nreturn \"DEBUGGER\";\ncase ANNOTATION:\nreturn \"ANNOTATION\";\ncase PIPE:\nreturn \"PIPE\";\ncase STAR:\nreturn \"STAR\";\ncase EOC:\nreturn \"EOC\";\ncase QMARK:\nreturn \"QMARK\";\ncase ELLIPSIS:\nreturn \"ELLIPSIS\";\ncase BANG:\nreturn \"BANG\";\ncase VOID:\nreturn \"VOID\";\ncase EQUALS:\nreturn \"EQUALS\";\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_337/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:46:46.751552754 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_337/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:46:46.751552754 -0500\n@@ -958,8 +958,6 @@\n             replacement.copyInformationFrom(current);\n           }\n         }\n-\n-        parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n         if (parent.isExprResult()) {\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:37:41.728746509 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_337/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:46:46.751552754 -0500\n@@ -179,7 +179,7 @@\n   public static String name(int token) {\n         switch (token) {\n           case ERROR:           return \"ERROR\";\n-          case RETURN:          return \"RETURN\";\n+          case RETURN:          ;\n           case BITOR:           return \"BITOR\";\n           case BITXOR:          return \"BITXOR\";\n           case BITAND:          return \"BITAND\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1420, 
          "faulty": "return new NodeMismatch(this,node2);", 
          "type": "InsertBefore", 
          "seed": "if (!isEquivalentTo(node2,false,false)) {\n  return new NodeMismatch(this,node2);\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 208, 
          "faulty": "return \"GETELEM\";", 
          "type": "Delete", 
          "seed": "case BLOCK:"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:37:41.728746509 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1175/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:54:56.028639307 -0500\n@@ -1417,7 +1417,10 @@\n    */\n   NodeMismatch checkTreeEqualsImpl(Node node2) {\n     if (!isEquivalentTo(node2, false, false)) {\n-      return new NodeMismatch(this, node2);\n+      if (!isEquivalentTo(node2, false, false)) {\n+\t\t\treturn new NodeMismatch(this, node2);\n+\t\t}\n+\treturn new NodeMismatch(this, node2);\n     }\n \n     NodeMismatch res = null;\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1175/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:54:56.032639317 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:37:41.728746509 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1175/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:54:56.032639317 -0500\n@@ -205,7 +205,7 @@\n           case DELPROP:         return \"DELPROP\";\n           case TYPEOF:          return \"TYPEOF\";\n           case GETPROP:         return \"GETPROP\";\n-          case GETELEM:         return \"GETELEM\";\n+          case GETELEM:         ;\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n           case LABEL_NAME:      return \"LABEL_NAME\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1420, 
          "faulty": "return new NodeMismatch(this,node2);", 
          "type": "InsertBefore", 
          "seed": "if (!isEquivalentTo(node2,false,false)) {\n  return new NodeMismatch(this,node2);\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1433, 
          "faulty": "return res;", 
          "type": "InsertBefore", 
          "seed": "if (!isEquivalentTo(node2,false,false)) {\n  return new NodeMismatch(this,node2);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:37:41.728746509 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_48/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:43:45.426919993 -0500\n@@ -1417,7 +1417,10 @@\n    */\n   NodeMismatch checkTreeEqualsImpl(Node node2) {\n     if (!isEquivalentTo(node2, false, false)) {\n-      return new NodeMismatch(this, node2);\n+      if (!isEquivalentTo(node2, false, false)) {\n+\t\t\treturn new NodeMismatch(this, node2);\n+\t\t}\n+\treturn new NodeMismatch(this, node2);\n     }\n \n     NodeMismatch res = null;\n@@ -1430,7 +1433,10 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        if (!isEquivalentTo(node2, false, false)) {\n+\t\t\treturn new NodeMismatch(this, node2);\n+\t\t}\n+\t\treturn res;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_48/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:43:45.466920149 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 588, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  if ((!child.isEmpty()) && !isLiteralValue(child,includeFunctions)) {\n    return false;\n  }\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 952, 
          "faulty": "for (Node current=assignNode.getFirstChild(); !current.isName(); current=current.getFirstChild()) {\n  if (current.isGetElem()) {\n    replacement=IR.comma(current.getLastChild().detachFromParent(),replacement);\n    replacement.copyInformationFrom(current);\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1358/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:56:42.476894166 -0500\n@@ -585,13 +585,8 @@\n   static boolean isLiteralValue(Node n, boolean includeFunctions) {\n     switch (n.getType()) {\n       case Token.ARRAYLIT:\n-        for (Node child = n.getFirstChild(); child != null;\n-             child = child.getNext()) {\n-          if ((!child.isEmpty()) && !isLiteralValue(child, includeFunctions)) {\n-            return false;\n-          }\n-        }\n-        return true;\n+        ;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1358/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:56:42.476894166 -0500\n@@ -948,17 +948,6 @@\n       if (mayHaveSecondarySideEffects) {\n         Node replacement = assignNode.getLastChild().detachFromParent();\n \n-        // Aggregate any expressions in GETELEMs.\n-        for (Node current = assignNode.getFirstChild();\n-             !current.isName();\n-             current = current.getFirstChild()) {\n-          if (current.isGetElem()) {\n-            replacement = IR.comma(\n-                current.getLastChild().detachFromParent(), replacement);\n-            replacement.copyInformationFrom(current);\n-          }\n-        }\n-\n         parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1433, 
          "faulty": "return res;", 
          "type": "InsertBefore", 
          "seed": "if (!isEquivalentTo(node2,false,false)) {\n  return new NodeMismatch(this,node2);\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 224, 
          "faulty": "return \"ARRAYLIT\";", 
          "type": "Replace", 
          "seed": "return \"ADD\";"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:37:41.728746509 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1248/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:55:38.492736703 -0500\n@@ -1430,7 +1430,10 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        if (!isEquivalentTo(node2, false, false)) {\n+\t\t\treturn new NodeMismatch(this, node2);\n+\t\t}\n+\t\treturn res;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1248/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:55:38.492736703 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:37:41.728746509 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1248/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:55:38.496736712 -0500\n@@ -221,7 +221,7 @@\n           case THROW:           return \"THROW\";\n           case IN:              return \"IN\";\n           case INSTANCEOF:      return \"INSTANCEOF\";\n-          case ARRAYLIT:        return \"ARRAYLIT\";\n+          case ARRAYLIT:        return \"ADD\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 962, 
          "faulty": "parent.replaceChild(assignNode,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 208, 
          "faulty": "return \"GETELEM\";", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1178/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:54:57.352642247 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1178/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:54:57.356642256 -0500\n@@ -958,8 +958,6 @@\n             replacement.copyInformationFrom(current);\n           }\n         }\n-\n-        parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n         if (parent.isExprResult()) {\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:37:41.728746509 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1178/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:54:57.356642256 -0500\n@@ -205,7 +205,7 @@\n           case DELPROP:         return \"DELPROP\";\n           case TYPEOF:          return \"TYPEOF\";\n           case GETPROP:         return \"GETPROP\";\n-          case GETELEM:         return \"GETELEM\";\n+          case GETELEM:         ;\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n           case LABEL_NAME:      return \"LABEL_NAME\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 962, 
          "faulty": "parent.replaceChild(assignNode,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1433, 
          "faulty": "return res;", 
          "type": "InsertBefore", 
          "seed": "if (!isEquivalentTo(node2,false,false)) {\n  return new NodeMismatch(this,node2);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:37:41.728746509 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1202/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:55:10.148670985 -0500\n@@ -1430,7 +1430,10 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        if (!isEquivalentTo(node2, false, false)) {\n+\t\t\treturn new NodeMismatch(this, node2);\n+\t\t}\n+\t\treturn res;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1202/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:55:10.148670985 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1202/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:55:10.148670985 -0500\n@@ -958,8 +958,6 @@\n             replacement.copyInformationFrom(current);\n           }\n         }\n-\n-        parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n         if (parent.isExprResult()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 952, 
          "faulty": "for (Node current=assignNode.getFirstChild(); !current.isName(); current=current.getFirstChild()) {\n  if (current.isGetElem()) {\n    replacement=IR.comma(current.getLastChild().detachFromParent(),replacement);\n    replacement.copyInformationFrom(current);\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1433, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "if (!isEquivalentTo(node2,false,false)) {\n  return new NodeMismatch(this,node2);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:37:41.728746509 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_867/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:51:57.956300897 -0500\n@@ -1430,7 +1430,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_867/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:51:57.960300904 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_867/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:51:57.960300904 -0500\n@@ -948,17 +948,6 @@\n       if (mayHaveSecondarySideEffects) {\n         Node replacement = assignNode.getLastChild().detachFromParent();\n \n-        // Aggregate any expressions in GETELEMs.\n-        for (Node current = assignNode.getFirstChild();\n-             !current.isName();\n-             current = current.getFirstChild()) {\n-          if (current.isGetElem()) {\n-            replacement = IR.comma(\n-                current.getLastChild().detachFromParent(), replacement);\n-            replacement.copyInformationFrom(current);\n-          }\n-        }\n-\n         parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 952, 
          "faulty": "for (Node current=assignNode.getFirstChild(); !current.isName(); current=current.getFirstChild()) {\n  if (current.isGetElem()) {\n    replacement=IR.comma(current.getLastChild().detachFromParent(),replacement);\n    replacement.copyInformationFrom(current);\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1352/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:56:39.040885424 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1352/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:56:39.040885424 -0500\n@@ -948,17 +948,6 @@\n       if (mayHaveSecondarySideEffects) {\n         Node replacement = assignNode.getLastChild().detachFromParent();\n \n-        // Aggregate any expressions in GETELEMs.\n-        for (Node current = assignNode.getFirstChild();\n-             !current.isName();\n-             current = current.getFirstChild()) {\n-          if (current.isGetElem()) {\n-            replacement = IR.comma(\n-                current.getLastChild().detachFromParent(), replacement);\n-            replacement.copyInformationFrom(current);\n-          }\n-        }\n-\n         parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1433, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 182, 
          "faulty": "return \"RETURN\";", 
          "type": "Delete", 
          "seed": "case BITOR:"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:37:41.728746509 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_730/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:50:36.320115902 -0500\n@@ -1430,7 +1430,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_730/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:50:36.320115902 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:37:41.728746509 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_730/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:50:36.324115911 -0500\n@@ -179,7 +179,7 @@\n   public static String name(int token) {\n         switch (token) {\n           case ERROR:           return \"ERROR\";\n-          case RETURN:          return \"RETURN\";\n+          case RETURN:          ;\n           case BITOR:           return \"BITOR\";\n           case BITXOR:          return \"BITXOR\";\n           case BITAND:          return \"BITAND\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 952, 
          "faulty": "for (Node current=assignNode.getFirstChild(); !current.isName(); current=current.getFirstChild()) {\n  if (current.isGetElem()) {\n    replacement=IR.comma(current.getLastChild().detachFromParent(),replacement);\n    replacement.copyInformationFrom(current);\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_682/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:50:08.588058305 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_682/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:50:08.588058305 -0500\n@@ -948,17 +948,6 @@\n       if (mayHaveSecondarySideEffects) {\n         Node replacement = assignNode.getLastChild().detachFromParent();\n \n-        // Aggregate any expressions in GETELEMs.\n-        for (Node current = assignNode.getFirstChild();\n-             !current.isName();\n-             current = current.getFirstChild()) {\n-          if (current.isGetElem()) {\n-            replacement = IR.comma(\n-                current.getLastChild().detachFromParent(), replacement);\n-            replacement.copyInformationFrom(current);\n-          }\n-        }\n-\n         parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 962, 
          "faulty": "parent.replaceChild(assignNode,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 182, 
          "faulty": "return \"RETURN\";", 
          "type": "Delete", 
          "seed": "case BITOR:"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_596/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:49:18.675964696 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_596/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:49:18.675964696 -0500\n@@ -958,8 +958,6 @@\n             replacement.copyInformationFrom(current);\n           }\n         }\n-\n-        parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n         if (parent.isExprResult()) {\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:37:41.728746509 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_596/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:49:18.679964703 -0500\n@@ -179,7 +179,7 @@\n   public static String name(int token) {\n         switch (token) {\n           case ERROR:           return \"ERROR\";\n-          case RETURN:          return \"RETURN\";\n+          case RETURN:          ;\n           case BITOR:           return \"BITOR\";\n           case BITXOR:          return \"BITXOR\";\n           case BITAND:          return \"BITAND\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 962, 
          "faulty": "parent.replaceChild(assignNode,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_787/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:51:11.840194699 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_787/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:51:11.844194708 -0500\n@@ -958,8 +958,6 @@\n             replacement.copyInformationFrom(current);\n           }\n         }\n-\n-        parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n         if (parent.isExprResult()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 962, 
          "faulty": "parent.replaceChild(assignNode,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1169/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:54:53.444633592 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1169/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:54:53.444633592 -0500\n@@ -958,8 +958,6 @@\n             replacement.copyInformationFrom(current);\n           }\n         }\n-\n-        parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n         if (parent.isExprResult()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 962, 
          "faulty": "parent.replaceChild(assignNode,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_722/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:50:32.164107039 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_722/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:50:32.168107048 -0500\n@@ -958,8 +958,6 @@\n             replacement.copyInformationFrom(current);\n           }\n         }\n-\n-        parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n         if (parent.isExprResult()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 229, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Replace", 
          "seed": "return \"SUB\";"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_611/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:49:27.083979475 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:37:41.728746509 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_611/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:49:27.087979481 -0500\n@@ -226,7 +226,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          return \"SUB\";\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 588, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  if ((!child.isEmpty()) && !isLiteralValue(child,includeFunctions)) {\n    return false;\n  }\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 182, 
          "faulty": "return \"RETURN\";", 
          "type": "Delete", 
          "seed": "case BITOR:"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_727/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:50:34.888112840 -0500\n@@ -585,13 +585,8 @@\n   static boolean isLiteralValue(Node n, boolean includeFunctions) {\n     switch (n.getType()) {\n       case Token.ARRAYLIT:\n-        for (Node child = n.getFirstChild(); child != null;\n-             child = child.getNext()) {\n-          if ((!child.isEmpty()) && !isLiteralValue(child, includeFunctions)) {\n-            return false;\n-          }\n-        }\n-        return true;\n+        ;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:37:41.728746509 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_727/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:50:34.892112848 -0500\n@@ -179,7 +179,7 @@\n   public static String name(int token) {\n         switch (token) {\n           case ERROR:           return \"ERROR\";\n-          case RETURN:          return \"RETURN\";\n+          case RETURN:          ;\n           case BITOR:           return \"BITOR\";\n           case BITXOR:          return \"BITXOR\";\n           case BITAND:          return \"BITAND\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1433, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "if (!isEquivalentTo(node2,false,false)) {\n  return new NodeMismatch(this,node2);\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 224, 
          "faulty": "return \"ARRAYLIT\";", 
          "type": "Replace", 
          "seed": "return \"BITOR\";"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:37:41.728746509 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_391/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:47:18.911656587 -0500\n@@ -1430,7 +1430,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_391/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:47:18.911656587 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:37:41.728746509 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_391/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:47:18.911656587 -0500\n@@ -221,7 +221,7 @@\n           case THROW:           return \"THROW\";\n           case IN:              return \"IN\";\n           case INSTANCEOF:      return \"INSTANCEOF\";\n-          case ARRAYLIT:        return \"ARRAYLIT\";\n+          case ARRAYLIT:        return \"BITOR\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 962, 
          "faulty": "parent.replaceChild(assignNode,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1077/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:54:02.304526095 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1077/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:54:02.308526103 -0500\n@@ -958,8 +958,6 @@\n             replacement.copyInformationFrom(current);\n           }\n         }\n-\n-        parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n         if (parent.isExprResult()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1404, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return toString(true,true,true);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:37:41.728746509 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1265/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:55:48.408760320 -0500\n@@ -1401,11 +1401,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return toString(true, true, true);\n       }\n       return null;\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1265/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:55:48.408760320 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 588, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  if ((!child.isEmpty()) && !isLiteralValue(child,includeFunctions)) {\n    return false;\n  }\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 962, 
          "faulty": "parent.replaceChild(assignNode,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1420, 
          "faulty": "return new NodeMismatch(this,node2);", 
          "type": "InsertBefore", 
          "seed": "if (!isEquivalentTo(node2,false,false)) {\n  return new NodeMismatch(this,node2);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:37:41.728746509 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1036/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:53:38.724480528 -0500\n@@ -1417,7 +1417,10 @@\n    */\n   NodeMismatch checkTreeEqualsImpl(Node node2) {\n     if (!isEquivalentTo(node2, false, false)) {\n-      return new NodeMismatch(this, node2);\n+      if (!isEquivalentTo(node2, false, false)) {\n+\t\t\treturn new NodeMismatch(this, node2);\n+\t\t}\n+\treturn new NodeMismatch(this, node2);\n     }\n \n     NodeMismatch res = null;\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1036/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:53:38.724480528 -0500\n@@ -585,13 +585,8 @@\n   static boolean isLiteralValue(Node n, boolean includeFunctions) {\n     switch (n.getType()) {\n       case Token.ARRAYLIT:\n-        for (Node child = n.getFirstChild(); child != null;\n-             child = child.getNext()) {\n-          if ((!child.isEmpty()) && !isLiteralValue(child, includeFunctions)) {\n-            return false;\n-          }\n-        }\n-        return true;\n+        ;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1036/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:53:38.728480536 -0500\n@@ -958,8 +958,6 @@\n             replacement.copyInformationFrom(current);\n           }\n         }\n-\n-        parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n         if (parent.isExprResult()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 952, 
          "faulty": "for (Node current=assignNode.getFirstChild(); !current.isName(); current=current.getFirstChild()) {\n  if (current.isGetElem()) {\n    replacement=IR.comma(current.getLastChild().detachFromParent(),replacement);\n    replacement.copyInformationFrom(current);\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1384/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:56:56.668930580 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1384/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:56:56.672930590 -0500\n@@ -948,17 +948,6 @@\n       if (mayHaveSecondarySideEffects) {\n         Node replacement = assignNode.getLastChild().detachFromParent();\n \n-        // Aggregate any expressions in GETELEMs.\n-        for (Node current = assignNode.getFirstChild();\n-             !current.isName();\n-             current = current.getFirstChild()) {\n-          if (current.isGetElem()) {\n-            replacement = IR.comma(\n-                current.getLastChild().detachFromParent(), replacement);\n-            replacement.copyInformationFrom(current);\n-          }\n-        }\n-\n         parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 952, 
          "faulty": "for (Node current=assignNode.getFirstChild(); !current.isName(); current=current.getFirstChild()) {\n  if (current.isGetElem()) {\n    replacement=IR.comma(current.getLastChild().detachFromParent(),replacement);\n    replacement.copyInformationFrom(current);\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_634/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:49:40.104003181 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_634/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:49:40.108003189 -0500\n@@ -948,17 +948,6 @@\n       if (mayHaveSecondarySideEffects) {\n         Node replacement = assignNode.getLastChild().detachFromParent();\n \n-        // Aggregate any expressions in GETELEMs.\n-        for (Node current = assignNode.getFirstChild();\n-             !current.isName();\n-             current = current.getFirstChild()) {\n-          if (current.isGetElem()) {\n-            replacement = IR.comma(\n-                current.getLastChild().detachFromParent(), replacement);\n-            replacement.copyInformationFrom(current);\n-          }\n-        }\n-\n         parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 962, 
          "faulty": "parent.replaceChild(assignNode,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1138/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:54:35.756595167 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1138/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:54:35.760595175 -0500\n@@ -958,8 +958,6 @@\n             replacement.copyInformationFrom(current);\n           }\n         }\n-\n-        parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n         if (parent.isExprResult()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 962, 
          "faulty": "parent.replaceChild(assignNode,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 208, 
          "faulty": "return \"GETELEM\";", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_885/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:52:08.628318451 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_885/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:52:08.628318451 -0500\n@@ -958,8 +958,6 @@\n             replacement.copyInformationFrom(current);\n           }\n         }\n-\n-        parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n         if (parent.isExprResult()) {\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:37:41.728746509 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_885/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:52:08.628318451 -0500\n@@ -205,7 +205,7 @@\n           case DELPROP:         return \"DELPROP\";\n           case TYPEOF:          return \"TYPEOF\";\n           case GETPROP:         return \"GETPROP\";\n-          case GETELEM:         return \"GETELEM\";\n+          case GETELEM:         ;\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n           case LABEL_NAME:      return \"LABEL_NAME\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 224, 
          "faulty": "return \"ARRAYLIT\";", 
          "type": "Replace", 
          "seed": "return \"BITOR\";"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_955/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:52:50.680394026 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:37:41.728746509 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_955/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:52:50.680394026 -0500\n@@ -221,7 +221,7 @@\n           case THROW:           return \"THROW\";\n           case IN:              return \"IN\";\n           case INSTANCEOF:      return \"INSTANCEOF\";\n-          case ARRAYLIT:        return \"ARRAYLIT\";\n+          case ARRAYLIT:        return \"BITOR\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 962, 
          "faulty": "parent.replaceChild(assignNode,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_702/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:50:20.120081810 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_702/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:50:20.124081817 -0500\n@@ -958,8 +958,6 @@\n             replacement.copyInformationFrom(current);\n           }\n         }\n-\n-        parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n         if (parent.isExprResult()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 952, 
          "faulty": "for (Node current=assignNode.getFirstChild(); !current.isName(); current=current.getFirstChild()) {\n  if (current.isGetElem()) {\n    replacement=IR.comma(current.getLastChild().detachFromParent(),replacement);\n    replacement.copyInformationFrom(current);\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1029/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:53:34.560472772 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1029/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:53:34.560472772 -0500\n@@ -948,17 +948,6 @@\n       if (mayHaveSecondarySideEffects) {\n         Node replacement = assignNode.getLastChild().detachFromParent();\n \n-        // Aggregate any expressions in GETELEMs.\n-        for (Node current = assignNode.getFirstChild();\n-             !current.isName();\n-             current = current.getFirstChild()) {\n-          if (current.isGetElem()) {\n-            replacement = IR.comma(\n-                current.getLastChild().detachFromParent(), replacement);\n-            replacement.copyInformationFrom(current);\n-          }\n-        }\n-\n         parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 962, 
          "faulty": "parent.replaceChild(assignNode,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1433, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "if (!isEquivalentTo(node2,false,false)) {\n  return new NodeMismatch(this,node2);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:37:41.728746509 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_920/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:52:30.232356054 -0500\n@@ -1430,7 +1430,9 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        if (!isEquivalentTo(node2, false, false)) {\n+\t\t\treturn new NodeMismatch(this, node2);\n+\t\t}\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_920/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:52:30.232356054 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_920/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:52:30.236356062 -0500\n@@ -958,8 +958,6 @@\n             replacement.copyInformationFrom(current);\n           }\n         }\n-\n-        parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n         if (parent.isExprResult()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 962, 
          "faulty": "parent.replaceChild(assignNode,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_881/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:52:06.620315095 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_881/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:52:06.624315102 -0500\n@@ -958,8 +958,6 @@\n             replacement.copyInformationFrom(current);\n           }\n         }\n-\n-        parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n         if (parent.isExprResult()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 208, 
          "faulty": "return \"GETELEM\";", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_458/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:47:59.895789771 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:37:41.728746509 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_458/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:47:59.895789771 -0500\n@@ -205,7 +205,7 @@\n           case DELPROP:         return \"DELPROP\";\n           case TYPEOF:          return \"TYPEOF\";\n           case GETPROP:         return \"GETPROP\";\n-          case GETELEM:         return \"GETELEM\";\n+          case GETELEM:         return null;\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n           case LABEL_NAME:      return \"LABEL_NAME\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 962, 
          "faulty": "parent.replaceChild(assignNode,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1123/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:54:26.388575332 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1123/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:54:26.388575332 -0500\n@@ -958,8 +958,6 @@\n             replacement.copyInformationFrom(current);\n           }\n         }\n-\n-        parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n         if (parent.isExprResult()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 952, 
          "faulty": "for (Node current=assignNode.getFirstChild(); !current.isName(); current=current.getFirstChild()) {\n  if (current.isGetElem()) {\n    replacement=IR.comma(current.getLastChild().detachFromParent(),replacement);\n    replacement.copyInformationFrom(current);\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1386/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:56:57.408932493 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1386/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:56:57.412932503 -0500\n@@ -948,17 +948,6 @@\n       if (mayHaveSecondarySideEffects) {\n         Node replacement = assignNode.getLastChild().detachFromParent();\n \n-        // Aggregate any expressions in GETELEMs.\n-        for (Node current = assignNode.getFirstChild();\n-             !current.isName();\n-             current = current.getFirstChild()) {\n-          if (current.isGetElem()) {\n-            replacement = IR.comma(\n-                current.getLastChild().detachFromParent(), replacement);\n-            replacement.copyInformationFrom(current);\n-          }\n-        }\n-\n         parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_292/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:46:20.443468320 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 952, 
          "faulty": "for (Node current=assignNode.getFirstChild(); !current.isName(); current=current.getFirstChild()) {\n  if (current.isGetElem()) {\n    replacement=IR.comma(current.getLastChild().detachFromParent(),replacement);\n    replacement.copyInformationFrom(current);\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_963/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:52:55.384403070 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_963/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:52:55.388403078 -0500\n@@ -948,17 +948,6 @@\n       if (mayHaveSecondarySideEffects) {\n         Node replacement = assignNode.getLastChild().detachFromParent();\n \n-        // Aggregate any expressions in GETELEMs.\n-        for (Node current = assignNode.getFirstChild();\n-             !current.isName();\n-             current = current.getFirstChild()) {\n-          if (current.isGetElem()) {\n-            replacement = IR.comma(\n-                current.getLastChild().detachFromParent(), replacement);\n-            replacement.copyInformationFrom(current);\n-          }\n-        }\n-\n         parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 588, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  if ((!child.isEmpty()) && !isLiteralValue(child,includeFunctions)) {\n    return false;\n  }\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 952, 
          "faulty": "for (Node current=assignNode.getFirstChild(); !current.isName(); current=current.getFirstChild()) {\n  if (current.isGetElem()) {\n    replacement=IR.comma(current.getLastChild().detachFromParent(),replacement);\n    replacement.copyInformationFrom(current);\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1276/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:55:55.304776925 -0500\n@@ -585,13 +585,8 @@\n   static boolean isLiteralValue(Node n, boolean includeFunctions) {\n     switch (n.getType()) {\n       case Token.ARRAYLIT:\n-        for (Node child = n.getFirstChild(); child != null;\n-             child = child.getNext()) {\n-          if ((!child.isEmpty()) && !isLiteralValue(child, includeFunctions)) {\n-            return false;\n-          }\n-        }\n-        return true;\n+        ;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1276/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:55:55.304776925 -0500\n@@ -948,17 +948,6 @@\n       if (mayHaveSecondarySideEffects) {\n         Node replacement = assignNode.getLastChild().detachFromParent();\n \n-        // Aggregate any expressions in GETELEMs.\n-        for (Node current = assignNode.getFirstChild();\n-             !current.isName();\n-             current = current.getFirstChild()) {\n-          if (current.isGetElem()) {\n-            replacement = IR.comma(\n-                current.getLastChild().detachFromParent(), replacement);\n-            replacement.copyInformationFrom(current);\n-          }\n-        }\n-\n         parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 952, 
          "faulty": "for (Node current=assignNode.getFirstChild(); !current.isName(); current=current.getFirstChild()) {\n  if (current.isGetElem()) {\n    replacement=IR.comma(current.getLastChild().detachFromParent(),replacement);\n    replacement.copyInformationFrom(current);\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1346/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:56:36.268878394 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1346/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:56:36.272878404 -0500\n@@ -948,17 +948,6 @@\n       if (mayHaveSecondarySideEffects) {\n         Node replacement = assignNode.getLastChild().detachFromParent();\n \n-        // Aggregate any expressions in GETELEMs.\n-        for (Node current = assignNode.getFirstChild();\n-             !current.isName();\n-             current = current.getFirstChild()) {\n-          if (current.isGetElem()) {\n-            replacement = IR.comma(\n-                current.getLastChild().detachFromParent(), replacement);\n-            replacement.copyInformationFrom(current);\n-          }\n-        }\n-\n         parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 588, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  if ((!child.isEmpty()) && !isLiteralValue(child,includeFunctions)) {\n    return false;\n  }\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 962, 
          "faulty": "parent.replaceChild(assignNode,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1404, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "sourcePosition=-1;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:37:41.728746509 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_651/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:49:50.220022261 -0500\n@@ -1401,7 +1401,8 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        sourcePosition = -1;\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_651/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:49:50.220022261 -0500\n@@ -585,13 +585,8 @@\n   static boolean isLiteralValue(Node n, boolean includeFunctions) {\n     switch (n.getType()) {\n       case Token.ARRAYLIT:\n-        for (Node child = n.getFirstChild(); child != null;\n-             child = child.getNext()) {\n-          if ((!child.isEmpty()) && !isLiteralValue(child, includeFunctions)) {\n-            return false;\n-          }\n-        }\n-        return true;\n+        ;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_651/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:49:50.224022269 -0500\n@@ -958,8 +958,6 @@\n             replacement.copyInformationFrom(current);\n           }\n         }\n-\n-        parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n         if (parent.isExprResult()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 229, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "case BLOCK:"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_818/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:51:30.876239013 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:37:41.728746509 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_818/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:51:30.880239022 -0500\n@@ -226,7 +226,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 952, 
          "faulty": "for (Node current=assignNode.getFirstChild(); !current.isName(); current=current.getFirstChild()) {\n  if (current.isGetElem()) {\n    replacement=IR.comma(current.getLastChild().detachFromParent(),replacement);\n    replacement.copyInformationFrom(current);\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1187/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:55:02.008652634 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1187/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:55:02.008652634 -0500\n@@ -948,17 +948,6 @@\n       if (mayHaveSecondarySideEffects) {\n         Node replacement = assignNode.getLastChild().detachFromParent();\n \n-        // Aggregate any expressions in GETELEMs.\n-        for (Node current = assignNode.getFirstChild();\n-             !current.isName();\n-             current = current.getFirstChild()) {\n-          if (current.isGetElem()) {\n-            replacement = IR.comma(\n-                current.getLastChild().detachFromParent(), replacement);\n-            replacement.copyInformationFrom(current);\n-          }\n-        }\n-\n         parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 224, 
          "faulty": "return \"ARRAYLIT\";", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1279/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:55:56.584780023 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:37:41.728746509 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1279/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:55:56.588780033 -0500\n@@ -221,7 +221,7 @@\n           case THROW:           return \"THROW\";\n           case IN:              return \"IN\";\n           case INSTANCEOF:      return \"INSTANCEOF\";\n-          case ARRAYLIT:        return \"ARRAYLIT\";\n+          case ARRAYLIT:        return null;\n           case OBJECTLIT:       return \"OBJECTLIT\";\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 224, 
          "faulty": "return \"ARRAYLIT\";", 
          "type": "Delete", 
          "seed": "return \"BITOR\";"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_561/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:48:58.519931056 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:37:41.728746509 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_561/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:48:58.523931061 -0500\n@@ -221,7 +221,7 @@\n           case THROW:           return \"THROW\";\n           case IN:              return \"IN\";\n           case INSTANCEOF:      return \"INSTANCEOF\";\n-          case ARRAYLIT:        return \"ARRAYLIT\";\n+          case ARRAYLIT:        ;\n           case OBJECTLIT:       return \"OBJECTLIT\";\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 962, 
          "faulty": "parent.replaceChild(assignNode,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 224, 
          "faulty": "return \"ARRAYLIT\";", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_929/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:52:35.300365258 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_929/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:52:35.304365265 -0500\n@@ -958,8 +958,6 @@\n             replacement.copyInformationFrom(current);\n           }\n         }\n-\n-        parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n         if (parent.isExprResult()) {\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:37:41.728746509 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_929/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:52:35.304365265 -0500\n@@ -221,7 +221,7 @@\n           case THROW:           return \"THROW\";\n           case IN:              return \"IN\";\n           case INSTANCEOF:      return \"INSTANCEOF\";\n-          case ARRAYLIT:        return \"ARRAYLIT\";\n+          case ARRAYLIT:        return null;\n           case OBJECTLIT:       return \"OBJECTLIT\";\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1433, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "if (!isEquivalentTo(node2,false,false)) {\n  return new NodeMismatch(this,node2);\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 208, 
          "faulty": "return \"GETELEM\";", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:37:41.728746509 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1042/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:53:41.656486044 -0500\n@@ -1430,7 +1430,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1042/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:53:41.656486044 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:37:41.728746509 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1042/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:53:41.656486044 -0500\n@@ -205,7 +205,7 @@\n           case DELPROP:         return \"DELPROP\";\n           case TYPEOF:          return \"TYPEOF\";\n           case GETPROP:         return \"GETPROP\";\n-          case GETELEM:         return \"GETELEM\";\n+          case GETELEM:         return null;\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n           case LABEL_NAME:      return \"LABEL_NAME\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1404, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return toStringTreeImpl();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:37:41.728746509 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1024/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:53:31.844467761 -0500\n@@ -1401,11 +1401,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return toStringTreeImpl();\n       }\n       return null;\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1024/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:53:31.844467761 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 962, 
          "faulty": "parent.replaceChild(assignNode,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_762/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:50:56.560160152 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_762/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:50:56.560160152 -0500\n@@ -958,8 +958,6 @@\n             replacement.copyInformationFrom(current);\n           }\n         }\n-\n-        parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n         if (parent.isExprResult()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 588, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  if ((!child.isEmpty()) && !isLiteralValue(child,includeFunctions)) {\n    return false;\n  }\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 962, 
          "faulty": "parent.replaceChild(assignNode,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1121/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:54:25.644573772 -0500\n@@ -585,13 +585,8 @@\n   static boolean isLiteralValue(Node n, boolean includeFunctions) {\n     switch (n.getType()) {\n       case Token.ARRAYLIT:\n-        for (Node child = n.getFirstChild(); child != null;\n-             child = child.getNext()) {\n-          if ((!child.isEmpty()) && !isLiteralValue(child, includeFunctions)) {\n-            return false;\n-          }\n-        }\n-        return true;\n+        ;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1121/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:54:25.648573781 -0500\n@@ -958,8 +958,6 @@\n             replacement.copyInformationFrom(current);\n           }\n         }\n-\n-        parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n         if (parent.isExprResult()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 962, 
          "faulty": "parent.replaceChild(assignNode,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_978/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:53:04.500419562 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_978/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:53:04.500419562 -0500\n@@ -958,8 +958,6 @@\n             replacement.copyInformationFrom(current);\n           }\n         }\n-\n-        parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n         if (parent.isExprResult()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 952, 
          "faulty": "for (Node current=assignNode.getFirstChild(); !current.isName(); current=current.getFirstChild()) {\n  if (current.isGetElem()) {\n    replacement=IR.comma(current.getLastChild().detachFromParent(),replacement);\n    replacement.copyInformationFrom(current);\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_632/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:49:39.460001986 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_632/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:49:39.464001994 -0500\n@@ -948,17 +948,6 @@\n       if (mayHaveSecondarySideEffects) {\n         Node replacement = assignNode.getLastChild().detachFromParent();\n \n-        // Aggregate any expressions in GETELEMs.\n-        for (Node current = assignNode.getFirstChild();\n-             !current.isName();\n-             current = current.getFirstChild()) {\n-          if (current.isGetElem()) {\n-            replacement = IR.comma(\n-                current.getLastChild().detachFromParent(), replacement);\n-            replacement.copyInformationFrom(current);\n-          }\n-        }\n-\n         parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 962, 
          "faulty": "parent.replaceChild(assignNode,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_545/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:48:50.075917748 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_545/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:48:50.075917748 -0500\n@@ -958,8 +958,6 @@\n             replacement.copyInformationFrom(current);\n           }\n         }\n-\n-        parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n         if (parent.isExprResult()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 962, 
          "faulty": "parent.replaceChild(assignNode,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1360/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:56:43.200896011 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1360/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:56:43.200896011 -0500\n@@ -958,8 +958,6 @@\n             replacement.copyInformationFrom(current);\n           }\n         }\n-\n-        parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n         if (parent.isExprResult()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1420, 
          "faulty": "return new NodeMismatch(this,node2);", 
          "type": "InsertBefore", 
          "seed": "if (!isEquivalentTo(node2,false,false)) {\n  return new NodeMismatch(this,node2);\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 224, 
          "faulty": "return \"ARRAYLIT\";", 
          "type": "Replace", 
          "seed": "return \"BITOR\";"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:37:41.728746509 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_495/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:48:20.991858661 -0500\n@@ -1417,7 +1417,10 @@\n    */\n   NodeMismatch checkTreeEqualsImpl(Node node2) {\n     if (!isEquivalentTo(node2, false, false)) {\n-      return new NodeMismatch(this, node2);\n+      if (!isEquivalentTo(node2, false, false)) {\n+\t\t\treturn new NodeMismatch(this, node2);\n+\t\t}\n+\treturn new NodeMismatch(this, node2);\n     }\n \n     NodeMismatch res = null;\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_495/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:48:20.991858661 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:37:41.728746509 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_495/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:48:20.991858661 -0500\n@@ -221,7 +221,7 @@\n           case THROW:           return \"THROW\";\n           case IN:              return \"IN\";\n           case INSTANCEOF:      return \"INSTANCEOF\";\n-          case ARRAYLIT:        return \"ARRAYLIT\";\n+          case ARRAYLIT:        return \"BITOR\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 962, 
          "faulty": "parent.replaceChild(assignNode,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1299/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:56:07.708807152 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_1299/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:56:07.724807191 -0500\n@@ -958,8 +958,6 @@\n             replacement.copyInformationFrom(current);\n           }\n         }\n-\n-        parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n         if (parent.isExprResult()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 962, 
          "faulty": "parent.replaceChild(assignNode,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 208, 
          "faulty": "return \"GETELEM\";", 
          "type": "Delete", 
          "seed": "case BITOR:"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_551/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:48:53.819923590 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_551/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:48:53.823923596 -0500\n@@ -958,8 +958,6 @@\n             replacement.copyInformationFrom(current);\n           }\n         }\n-\n-        parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n         if (parent.isExprResult()) {\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:37:41.728746509 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_551/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:48:53.823923596 -0500\n@@ -205,7 +205,7 @@\n           case DELPROP:         return \"DELPROP\";\n           case TYPEOF:          return \"TYPEOF\";\n           case GETPROP:         return \"GETPROP\";\n-          case GETELEM:         return \"GETELEM\";\n+          case GETELEM:         ;\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n           case LABEL_NAME:      return \"LABEL_NAME\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 952, 
          "faulty": "for (Node current=assignNode.getFirstChild(); !current.isName(); current=current.getFirstChild()) {\n  if (current.isGetElem()) {\n    replacement=IR.comma(current.getLastChild().detachFromParent(),replacement);\n    replacement.copyInformationFrom(current);\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_668/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:50:00.912043028 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_668/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:50:00.916043036 -0500\n@@ -948,17 +948,6 @@\n       if (mayHaveSecondarySideEffects) {\n         Node replacement = assignNode.getLastChild().detachFromParent();\n \n-        // Aggregate any expressions in GETELEMs.\n-        for (Node current = assignNode.getFirstChild();\n-             !current.isName();\n-             current = current.getFirstChild()) {\n-          if (current.isGetElem()) {\n-            replacement = IR.comma(\n-                current.getLastChild().detachFromParent(), replacement);\n-            replacement.copyInformationFrom(current);\n-          }\n-        }\n-\n         parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 594, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 952, 
          "faulty": "for (Node current=assignNode.getFirstChild(); !current.isName(); current=current.getFirstChild()) {\n  if (current.isGetElem()) {\n    replacement=IR.comma(current.getLastChild().detachFromParent(),replacement);\n    replacement.copyInformationFrom(current);\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1420, 
          "faulty": "return new NodeMismatch(this,node2);", 
          "type": "InsertBefore", 
          "seed": "if (!isEquivalentTo(node2,false,false)) {\n  return new NodeMismatch(this,node2);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:37:41.728746509 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_704/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:50:20.876083372 -0500\n@@ -1417,7 +1417,10 @@\n    */\n   NodeMismatch checkTreeEqualsImpl(Node node2) {\n     if (!isEquivalentTo(node2, false, false)) {\n-      return new NodeMismatch(this, node2);\n+      if (!isEquivalentTo(node2, false, false)) {\n+\t\t\treturn new NodeMismatch(this, node2);\n+\t\t}\n+\treturn new NodeMismatch(this, node2);\n     }\n \n     NodeMismatch res = null;\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:41.704746508 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_704/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:50:20.876083372 -0500\n@@ -591,7 +591,7 @@\n             return false;\n           }\n         }\n-        return true;\n+        return false;\n \n       case Token.REGEXP:\n         // Return true only if all children are const.\n\n\n--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:37:43.388746547 -0500\n+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_704/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 09:50:20.880083381 -0500\n@@ -948,17 +948,6 @@\n       if (mayHaveSecondarySideEffects) {\n         Node replacement = assignNode.getLastChild().detachFromParent();\n \n-        // Aggregate any expressions in GETELEMs.\n-        for (Node current = assignNode.getFirstChild();\n-             !current.isName();\n-             current = current.getFirstChild()) {\n-          if (current.isGetElem()) {\n-            replacement = IR.comma(\n-                current.getLastChild().detachFromParent(), replacement);\n-            replacement.copyInformationFrom(current);\n-          }\n-        }\n-\n         parent.replaceChild(assignNode, replacement);\n       } else {\n         Node gramps = parent.getParent();\n\n\n"
    }
  ]
}