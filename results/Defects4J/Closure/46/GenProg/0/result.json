{
  "repair_end": "2018-12-02 13:24:55.405847", 
  "repair_begin": "2018-12-02 13:13:39.345901", 
  "patches": [
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 378, 
          "faulty": "sb.append(property);", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 379, 
          "faulty": "sb.append(\": \");", 
          "type": "Delete", 
          "seed": "return FALSE;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 171, 
          "faulty": "builder.addProperty(property,getPropertyType(property),getPropertyNode(property));", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1101/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:24:19.726645631 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1101/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:24:19.726645631 -0500\n@@ -375,8 +375,6 @@\n           sb.append(\", \");\n         }\n \n-        sb.append(property);\n-        sb.append(\": \");\n         sb.append(getPropertyType(property).toString());\n \n         ++i;\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1101/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:24:19.726645631 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -167,9 +167,6 @@\n                 getPropertyType(property))) {\n           return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n         }\n-\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n       }\n \n       for (String property : thatRecord.properties.keySet()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 146, 
          "faulty": "for (String property : properties.keySet()) {\n  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n    builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n  }\n}", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 165, 
          "faulty": "if (thatRecord.hasProperty(property) && !thatRecord.getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n  return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 177, 
          "faulty": "builder.addProperty(property,thatRecord.getPropertyType(property),thatRecord.getPropertyNode(property));", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 375, 
          "faulty": "sb.append(\", \");", 
          "type": "Delete", 
          "seed": "case 2:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_815/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:22:48.338242637 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_815/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:22:48.342242655 -0500\n@@ -372,7 +372,6 @@\n       int i = 0;\n       for (String property : propertyNames) {\n         if (i > 0) {\n-          sb.append(\", \");\n         }\n \n         sb.append(property);\n@@ -380,10 +379,6 @@\n         sb.append(getPropertyType(property).toString());\n \n         ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n-        }\n       }\n \n       sb.append(\"}\");\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_815/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:22:48.342242655 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -143,14 +143,6 @@\n       return super.getLeastSupertype(that);\n     }\n     RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n-    for (String property : properties.keySet()) {\n-      if (that.toMaybeRecordType().hasProperty(property) &&\n-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n-              getPropertyType(property))) {\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n-      }\n-    }\n     return builder.build();\n   }\n   JSType getGreatestSubtypeHelper(JSType that) {\n@@ -162,20 +154,12 @@\n       // record types. If any property conflicts, then the NO_TYPE type\n       // is returned.\n       for (String property : properties.keySet()) {\n-        if (thatRecord.hasProperty(property) &&\n-            !thatRecord.getPropertyType(property).isEquivalentTo(\n-                getPropertyType(property))) {\n-          return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n-        }\n-\n         builder.addProperty(property, getPropertyType(property),\n             getPropertyNode(property));\n       }\n \n       for (String property : thatRecord.properties.keySet()) {\n         if (!hasProperty(property)) {\n-          builder.addProperty(property, thatRecord.getPropertyType(property),\n-              thatRecord.getPropertyNode(property));\n         }\n       }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 379, 
          "faulty": "sb.append(\": \");", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 378, 
          "faulty": "sb.append(property);", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 379, 
          "faulty": "sb.append(\": \");", 
          "type": "Delete", 
          "seed": "return FALSE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_953/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:23:34.486446788 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_953/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:23:34.490446806 -0500\n@@ -375,15 +375,9 @@\n           sb.append(\", \");\n         }\n \n-        sb.append(property);\n-        sb.append(\": \");\n         sb.append(getPropertyType(property).toString());\n \n         ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n-        }\n       }\n \n       sb.append(\"}\");\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_953/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:23:34.490446806 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 379, 
          "faulty": "sb.append(\": \");", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 146, 
          "faulty": "for (String property : properties.keySet()) {\n  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n    builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n  }\n}", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 165, 
          "faulty": "if (thatRecord.hasProperty(property) && !thatRecord.getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n  return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 182, 
          "faulty": "return builder.build();", 
          "type": "Delete", 
          "seed": "return FALSE;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 263, 
          "faulty": "for (String property : typeB.properties.keySet()) {\n  if (!typeA.hasProperty(property)) {\n    return false;\n  }\n  JSType propA=typeA.getPropertyType(property);\n  JSType propB=typeB.getPropertyType(property);\n  if (!propA.isUnknownType() && !propB.isUnknownType()) {\n    if (typeA.isPropertyTypeDeclared(property)) {\n      if (!propA.isEquivalentTo(propB)) {\n        return false;\n      }\n    }\n else {\n      if (!propA.isSubtype(propB)) {\n        return false;\n      }\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return true;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_667/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:22:00.846030872 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_667/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:22:00.850030890 -0500\n@@ -376,14 +376,9 @@\n         }\n \n         sb.append(property);\n-        sb.append(\": \");\n         sb.append(getPropertyType(property).toString());\n \n         ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n-        }\n       }\n \n       sb.append(\"}\");\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_667/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:22:00.850030890 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -143,14 +143,6 @@\n       return super.getLeastSupertype(that);\n     }\n     RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n-    for (String property : properties.keySet()) {\n-      if (that.toMaybeRecordType().hasProperty(property) &&\n-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n-              getPropertyType(property))) {\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n-      }\n-    }\n     return builder.build();\n   }\n   JSType getGreatestSubtypeHelper(JSType that) {\n@@ -162,12 +154,6 @@\n       // record types. If any property conflicts, then the NO_TYPE type\n       // is returned.\n       for (String property : properties.keySet()) {\n-        if (thatRecord.hasProperty(property) &&\n-            !thatRecord.getPropertyType(property).isEquivalentTo(\n-                getPropertyType(property))) {\n-          return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n-        }\n-\n         builder.addProperty(property, getPropertyType(property),\n             getPropertyNode(property));\n       }\n@@ -178,8 +164,6 @@\n               thatRecord.getPropertyNode(property));\n         }\n       }\n-\n-      return builder.build();\n     }\n \n     JSType greatestSubtype = registry.getNativeType(\n@@ -243,43 +227,6 @@\n \n   /** Determines if typeA is a subtype of typeB */\n   static boolean isSubtype(ObjectType typeA, RecordType typeB) {\n-    // typeA is a subtype of record type typeB iff:\n-    // 1) typeA has all the properties declared in typeB.\n-    // 2) And for each property of typeB,\n-    //    2a) if the property of typeA is declared, it must be equal\n-    //        to the type of the property of typeB,\n-    //    2b) otherwise, it must be a subtype of the property of typeB.\n-    //\n-    // To figure out why this is true, consider the following pseudo-code:\n-    // /** @type {{a: (Object,null)}} */ var x;\n-    // /** @type {{a: !Object}} */ var y;\n-    // var z = {a: {}};\n-    // x.a = null;\n-    //\n-    // y cannot be assigned to x, because line 4 would violate y's declared\n-    // properties. But z can be assigned to x. Even though z and y are the\n-    // same type, the properties of z are inferred--and so an assignment\n-    // to the property of z would not violate any restrictions on it.\n-    for (String property : typeB.properties.keySet()) {\n-      if (!typeA.hasProperty(property)) {\n-        return false;\n-      }\n-\n-      JSType propA = typeA.getPropertyType(property);\n-      JSType propB = typeB.getPropertyType(property);\n-      if (!propA.isUnknownType() && !propB.isUnknownType()) {\n-        if (typeA.isPropertyTypeDeclared(property)) {\n-          if (!propA.isEquivalentTo(propB)) {\n-            return false;\n-          }\n-        } else {\n-          if (!propA.isSubtype(propB)) {\n-            return false;\n-          }\n-        }\n-      }\n-    }\n-\n     return true;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 264, 
          "faulty": "if (!typeA.hasProperty(property)) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_308/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:20:01.217487490 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_308/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:20:01.217487490 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -261,10 +261,6 @@\n     // same type, the properties of z are inferred--and so an assignment\n     // to the property of z would not violate any restrictions on it.\n     for (String property : typeB.properties.keySet()) {\n-      if (!typeA.hasProperty(property)) {\n-        return false;\n-      }\n-\n       JSType propA = typeA.getPropertyType(property);\n       JSType propB = typeB.getPropertyType(property);\n       if (!propA.isUnknownType() && !propB.isUnknownType()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 146, 
          "faulty": "for (String property : properties.keySet()) {\n  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n    builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n  }\n}", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 177, 
          "faulty": "builder.addProperty(property,thatRecord.getPropertyType(property),thatRecord.getPropertyNode(property));", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 164, 
          "faulty": "for (String property : properties.keySet()) {\n  if (thatRecord.hasProperty(property) && !thatRecord.getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n    return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n  }\n  builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n}", 
          "type": "Delete", 
          "seed": "return TRUE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1030/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:23:57.182546690 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1030/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:23:57.182546690 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -143,14 +143,6 @@\n       return super.getLeastSupertype(that);\n     }\n     RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n-    for (String property : properties.keySet()) {\n-      if (that.toMaybeRecordType().hasProperty(property) &&\n-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n-              getPropertyType(property))) {\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n-      }\n-    }\n     return builder.build();\n   }\n   JSType getGreatestSubtypeHelper(JSType that) {\n@@ -158,24 +150,8 @@\n       RecordType thatRecord = that.toMaybeRecordType();\n       RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n \n-      // The greatest subtype consists of those *unique* properties of both\n-      // record types. If any property conflicts, then the NO_TYPE type\n-      // is returned.\n-      for (String property : properties.keySet()) {\n-        if (thatRecord.hasProperty(property) &&\n-            !thatRecord.getPropertyType(property).isEquivalentTo(\n-                getPropertyType(property))) {\n-          return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n-        }\n-\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n-      }\n-\n       for (String property : thatRecord.properties.keySet()) {\n         if (!hasProperty(property)) {\n-          builder.addProperty(property, thatRecord.getPropertyType(property),\n-              thatRecord.getPropertyNode(property));\n         }\n       }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 378, 
          "faulty": "sb.append(property);", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 380, 
          "faulty": "sb.append(getPropertyType(property).toString());", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 171, 
          "faulty": "builder.addProperty(property,getPropertyType(property),getPropertyNode(property));", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 165, 
          "faulty": "if (thatRecord.hasProperty(property) && !thatRecord.getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n  return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n}", 
          "type": "Delete", 
          "seed": "case 0:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1025/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:23:56.114541995 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1025/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:23:56.114541995 -0500\n@@ -375,10 +375,7 @@\n           sb.append(\", \");\n         }\n \n-        sb.append(property);\n         sb.append(\": \");\n-        sb.append(getPropertyType(property).toString());\n-\n         ++i;\n         if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n           sb.append(\", ...\");\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1025/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:23:56.118542013 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -162,14 +162,6 @@\n       // record types. If any property conflicts, then the NO_TYPE type\n       // is returned.\n       for (String property : properties.keySet()) {\n-        if (thatRecord.hasProperty(property) &&\n-            !thatRecord.getPropertyType(property).isEquivalentTo(\n-                getPropertyType(property))) {\n-          return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n-        }\n-\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n       }\n \n       for (String property : thatRecord.properties.keySet()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 146, 
          "faulty": "for (String property : properties.keySet()) {\n  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n    builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n  }\n}", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 171, 
          "faulty": "builder.addProperty(property,getPropertyType(property),getPropertyNode(property));", 
          "type": "Delete", 
          "seed": "return true;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1027/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:23:56.462543525 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1027/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:23:56.466543542 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -143,14 +143,6 @@\n       return super.getLeastSupertype(that);\n     }\n     RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n-    for (String property : properties.keySet()) {\n-      if (that.toMaybeRecordType().hasProperty(property) &&\n-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n-              getPropertyType(property))) {\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n-      }\n-    }\n     return builder.build();\n   }\n   JSType getGreatestSubtypeHelper(JSType that) {\n@@ -167,9 +159,6 @@\n                 getPropertyType(property))) {\n           return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n         }\n-\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n       }\n \n       for (String property : thatRecord.properties.keySet()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 146, 
          "faulty": "for (String property : properties.keySet()) {\n  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n    builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n  }\n}", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 379, 
          "faulty": "sb.append(\": \");", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 146, 
          "faulty": "for (String property : properties.keySet()) {\n  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n    builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n  }\n}", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 374, 
          "faulty": "if (i > 0) {\n  sb.append(\", \");\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 147, 
          "faulty": "if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n  builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n}", 
          "type": "InsertBefore", 
          "seed": "case 1:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_690/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:22:07.902062454 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_690/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:22:07.902062454 -0500\n@@ -371,19 +371,10 @@\n \n       int i = 0;\n       for (String property : propertyNames) {\n-        if (i > 0) {\n-          sb.append(\", \");\n-        }\n-\n         sb.append(property);\n-        sb.append(\": \");\n         sb.append(getPropertyType(property).toString());\n \n         ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n-        }\n       }\n \n       sb.append(\"}\");\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_690/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:22:07.902062454 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -143,14 +143,6 @@\n       return super.getLeastSupertype(that);\n     }\n     RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n-    for (String property : properties.keySet()) {\n-      if (that.toMaybeRecordType().hasProperty(property) &&\n-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n-              getPropertyType(property))) {\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n-      }\n-    }\n     return builder.build();\n   }\n   JSType getGreatestSubtypeHelper(JSType that) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 177, 
          "faulty": "builder.addProperty(property,thatRecord.getPropertyType(property),thatRecord.getPropertyNode(property));", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 458, 
          "faulty": "return RecordType.isSubtype(this,that.toMaybeRecordType());", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 182, 
          "faulty": "return builder.build();", 
          "type": "Delete", 
          "seed": "case 3:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_958/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:23:36.006453489 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_958/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:23:36.006453489 -0500\n@@ -380,10 +380,6 @@\n         sb.append(getPropertyType(property).toString());\n \n         ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n-        }\n       }\n \n       sb.append(\"}\");\n@@ -455,7 +451,6 @@\n \n     // record types\n     if (that.isRecordType()) {\n-      return RecordType.isSubtype(this, that.toMaybeRecordType());\n     }\n \n     // Interfaces\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_958/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:23:36.010453507 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -174,12 +174,8 @@\n \n       for (String property : thatRecord.properties.keySet()) {\n         if (!hasProperty(property)) {\n-          builder.addProperty(property, thatRecord.getPropertyType(property),\n-              thatRecord.getPropertyNode(property));\n         }\n       }\n-\n-      return builder.build();\n     }\n \n     JSType greatestSubtype = registry.getNativeType(\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 146, 
          "faulty": "for (String property : properties.keySet()) {\n  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n    builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n  }\n}", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 147, 
          "faulty": "if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n  builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n}", 
          "type": "InsertBefore", 
          "seed": "case 3:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_562/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:21:26.329875715 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_562/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:21:26.333875733 -0500\n@@ -380,10 +380,6 @@\n         sb.append(getPropertyType(property).toString());\n \n         ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n-        }\n       }\n \n       sb.append(\"}\");\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_562/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:21:26.333875733 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -143,14 +143,6 @@\n       return super.getLeastSupertype(that);\n     }\n     RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n-    for (String property : properties.keySet()) {\n-      if (that.toMaybeRecordType().hasProperty(property) &&\n-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n-              getPropertyType(property))) {\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n-      }\n-    }\n     return builder.build();\n   }\n   JSType getGreatestSubtypeHelper(JSType that) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 379, 
          "faulty": "sb.append(\": \");", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 146, 
          "faulty": "for (String property : properties.keySet()) {\n  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n    builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n  }\n}", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 177, 
          "faulty": "builder.addProperty(property,thatRecord.getPropertyType(property),thatRecord.getPropertyNode(property));", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_862/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:23:04.994316490 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_862/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:23:04.998316507 -0500\n@@ -376,14 +376,9 @@\n         }\n \n         sb.append(property);\n-        sb.append(\": \");\n         sb.append(getPropertyType(property).toString());\n \n         ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n-        }\n       }\n \n       sb.append(\"}\");\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_862/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:23:04.998316507 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -143,14 +143,6 @@\n       return super.getLeastSupertype(that);\n     }\n     RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n-    for (String property : properties.keySet()) {\n-      if (that.toMaybeRecordType().hasProperty(property) &&\n-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n-              getPropertyType(property))) {\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n-      }\n-    }\n     return builder.build();\n   }\n   JSType getGreatestSubtypeHelper(JSType that) {\n@@ -174,8 +166,6 @@\n \n       for (String property : thatRecord.properties.keySet()) {\n         if (!hasProperty(property)) {\n-          builder.addProperty(property, thatRecord.getPropertyType(property),\n-              thatRecord.getPropertyNode(property));\n         }\n       }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 458, 
          "faulty": "return RecordType.isSubtype(this,that.toMaybeRecordType());", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 165, 
          "faulty": "if (thatRecord.hasProperty(property) && !thatRecord.getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n  return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 150, 
          "faulty": "builder.addProperty(property,getPropertyType(property),getPropertyNode(property));", 
          "type": "Delete", 
          "seed": "case 1:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1106/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:24:21.190652047 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1106/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:24:21.190652047 -0500\n@@ -455,7 +455,6 @@\n \n     // record types\n     if (that.isRecordType()) {\n-      return RecordType.isSubtype(this, that.toMaybeRecordType());\n     }\n \n     // Interfaces\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1106/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:24:21.190652047 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -147,8 +147,6 @@\n       if (that.toMaybeRecordType().hasProperty(property) &&\n           that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n               getPropertyType(property))) {\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n       }\n     }\n     return builder.build();\n@@ -162,12 +160,6 @@\n       // record types. If any property conflicts, then the NO_TYPE type\n       // is returned.\n       for (String property : properties.keySet()) {\n-        if (thatRecord.hasProperty(property) &&\n-            !thatRecord.getPropertyType(property).isEquivalentTo(\n-                getPropertyType(property))) {\n-          return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n-        }\n-\n         builder.addProperty(property, getPropertyType(property),\n             getPropertyNode(property));\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 229, 
          "faulty": "if (registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE).isSubtype(that)) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 3:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 380, 
          "faulty": "sb.append(getPropertyType(property).toString());", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 265, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "return FALSE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1017/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:23:53.514530564 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1017/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:23:53.514530564 -0500\n@@ -377,8 +377,6 @@\n \n         sb.append(property);\n         sb.append(\": \");\n-        sb.append(getPropertyType(property).toString());\n-\n         ++i;\n         if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n           sb.append(\", ...\");\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1017/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:23:53.514530564 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -225,12 +225,6 @@\n       return true;\n     }\n \n-    // Top of the record types is the empty record, or OBJECT_TYPE.\n-    if (registry.getNativeObjectType(\n-            JSTypeNative.OBJECT_TYPE).isSubtype(that)) {\n-      return true;\n-    }\n-\n     // A type is a subtype of a record type if it itself is a record\n     // type and it has at least the same members as the parent record type\n     // with the same types.\n@@ -262,7 +256,6 @@\n     // to the property of z would not violate any restrictions on it.\n     for (String property : typeB.properties.keySet()) {\n       if (!typeA.hasProperty(property)) {\n-        return false;\n       }\n \n       JSType propA = typeA.getPropertyType(property);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 379, 
          "faulty": "sb.append(\": \");", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 146, 
          "faulty": "for (String property : properties.keySet()) {\n  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n    builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n  }\n}", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 165, 
          "faulty": "if (thatRecord.hasProperty(property) && !thatRecord.getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n  return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_701/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:22:11.270077513 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_701/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:22:11.274077531 -0500\n@@ -376,7 +376,6 @@\n         }\n \n         sb.append(property);\n-        sb.append(\": \");\n         sb.append(getPropertyType(property).toString());\n \n         ++i;\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_701/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:22:11.274077531 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -143,14 +143,6 @@\n       return super.getLeastSupertype(that);\n     }\n     RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n-    for (String property : properties.keySet()) {\n-      if (that.toMaybeRecordType().hasProperty(property) &&\n-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n-              getPropertyType(property))) {\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n-      }\n-    }\n     return builder.build();\n   }\n   JSType getGreatestSubtypeHelper(JSType that) {\n@@ -162,12 +154,6 @@\n       // record types. If any property conflicts, then the NO_TYPE type\n       // is returned.\n       for (String property : properties.keySet()) {\n-        if (thatRecord.hasProperty(property) &&\n-            !thatRecord.getPropertyType(property).isEquivalentTo(\n-                getPropertyType(property))) {\n-          return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n-        }\n-\n         builder.addProperty(property, getPropertyType(property),\n             getPropertyNode(property));\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 237, 
          "faulty": "if (!that.isRecordType()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 265, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "case 2:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_382/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:20:27.989610578 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_382/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:20:27.989610578 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -231,13 +231,6 @@\n       return true;\n     }\n \n-    // A type is a subtype of a record type if it itself is a record\n-    // type and it has at least the same members as the parent record type\n-    // with the same types.\n-    if (!that.isRecordType()) {\n-      return false;\n-    }\n-\n     return RecordType.isSubtype(this, that.toMaybeRecordType());\n   }\n \n@@ -262,7 +255,6 @@\n     // to the property of z would not violate any restrictions on it.\n     for (String property : typeB.properties.keySet()) {\n       if (!typeA.hasProperty(property)) {\n-        return false;\n       }\n \n       JSType propA = typeA.getPropertyType(property);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 146, 
          "faulty": "for (String property : properties.keySet()) {\n  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n    builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n  }\n}", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 378, 
          "faulty": "sb.append(property);", 
          "type": "Delete", 
          "seed": "case 1:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1008/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:23:50.938519237 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1008/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:23:50.942519253 -0500\n@@ -375,15 +375,10 @@\n           sb.append(\", \");\n         }\n \n-        sb.append(property);\n         sb.append(\": \");\n         sb.append(getPropertyType(property).toString());\n \n         ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n-        }\n       }\n \n       sb.append(\"}\");\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1008/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:23:50.942519253 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -143,14 +143,6 @@\n       return super.getLeastSupertype(that);\n     }\n     RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n-    for (String property : properties.keySet()) {\n-      if (that.toMaybeRecordType().hasProperty(property) &&\n-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n-              getPropertyType(property))) {\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n-      }\n-    }\n     return builder.build();\n   }\n   JSType getGreatestSubtypeHelper(JSType that) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 379, 
          "faulty": "sb.append(\": \");", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 146, 
          "faulty": "for (String property : properties.keySet()) {\n  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n    builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n  }\n}", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 379, 
          "faulty": "sb.append(\": \");", 
          "type": "Delete", 
          "seed": "return FALSE;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 379, 
          "faulty": "sb.append(\": \");", 
          "type": "Delete", 
          "seed": "return FALSE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_567/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:21:27.489880948 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_567/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:21:27.489880948 -0500\n@@ -376,14 +376,9 @@\n         }\n \n         sb.append(property);\n-        sb.append(\": \");\n         sb.append(getPropertyType(property).toString());\n \n         ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n-        }\n       }\n \n       sb.append(\"}\");\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_567/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:21:27.493880966 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -143,14 +143,6 @@\n       return super.getLeastSupertype(that);\n     }\n     RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n-    for (String property : properties.keySet()) {\n-      if (that.toMaybeRecordType().hasProperty(property) &&\n-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n-              getPropertyType(property))) {\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n-      }\n-    }\n     return builder.build();\n   }\n   JSType getGreatestSubtypeHelper(JSType that) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 146, 
          "faulty": "for (String property : properties.keySet()) {\n  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n    builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n  }\n}", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 177, 
          "faulty": "builder.addProperty(property,thatRecord.getPropertyType(property),thatRecord.getPropertyNode(property));", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 458, 
          "faulty": "return RecordType.isSubtype(this,that.toMaybeRecordType());", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 177, 
          "faulty": "builder.addProperty(property,thatRecord.getPropertyType(property),thatRecord.getPropertyNode(property));", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1047/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:24:01.658566356 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1047/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:24:01.658566356 -0500\n@@ -380,10 +380,6 @@\n         sb.append(getPropertyType(property).toString());\n \n         ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n-        }\n       }\n \n       sb.append(\"}\");\n@@ -455,7 +451,6 @@\n \n     // record types\n     if (that.isRecordType()) {\n-      return RecordType.isSubtype(this, that.toMaybeRecordType());\n     }\n \n     // Interfaces\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1047/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:24:01.662566374 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -143,14 +143,6 @@\n       return super.getLeastSupertype(that);\n     }\n     RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n-    for (String property : properties.keySet()) {\n-      if (that.toMaybeRecordType().hasProperty(property) &&\n-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n-              getPropertyType(property))) {\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n-      }\n-    }\n     return builder.build();\n   }\n   JSType getGreatestSubtypeHelper(JSType that) {\n@@ -174,8 +166,6 @@\n \n       for (String property : thatRecord.properties.keySet()) {\n         if (!hasProperty(property)) {\n-          builder.addProperty(property, thatRecord.getPropertyType(property),\n-              thatRecord.getPropertyNode(property));\n         }\n       }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 146, 
          "faulty": "for (String property : properties.keySet()) {\n  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n    builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n  }\n}", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 150, 
          "faulty": "builder.addProperty(property,getPropertyType(property),getPropertyNode(property));", 
          "type": "Replace", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 150, 
          "faulty": "builder.addProperty(property,getPropertyType(property),getPropertyNode(property));", 
          "type": "InsertBefore", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 150, 
          "faulty": "builder.addProperty(property,getPropertyType(property),getPropertyNode(property));", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 171, 
          "faulty": "builder.addProperty(property,getPropertyType(property),getPropertyNode(property));", 
          "type": "Delete", 
          "seed": "case 3:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_513/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:21:09.937801609 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_513/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:21:09.941801627 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -143,14 +143,6 @@\n       return super.getLeastSupertype(that);\n     }\n     RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n-    for (String property : properties.keySet()) {\n-      if (that.toMaybeRecordType().hasProperty(property) &&\n-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n-              getPropertyType(property))) {\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n-      }\n-    }\n     return builder.build();\n   }\n   JSType getGreatestSubtypeHelper(JSType that) {\n@@ -167,9 +159,6 @@\n                 getPropertyType(property))) {\n           return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n         }\n-\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n       }\n \n       for (String property : thatRecord.properties.keySet()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 378, 
          "faulty": "sb.append(property);", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 379, 
          "faulty": "sb.append(\": \");", 
          "type": "Delete", 
          "seed": "return FALSE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_965/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:23:38.314463660 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_965/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:23:38.318463678 -0500\n@@ -375,8 +375,6 @@\n           sb.append(\", \");\n         }\n \n-        sb.append(property);\n-        sb.append(\": \");\n         sb.append(getPropertyType(property).toString());\n \n         ++i;\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_965/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:23:38.318463678 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 165, 
          "faulty": "if (thatRecord.hasProperty(property) && !thatRecord.getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n  return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 177, 
          "faulty": "builder.addProperty(property,thatRecord.getPropertyType(property),thatRecord.getPropertyNode(property));", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 458, 
          "faulty": "return RecordType.isSubtype(this,that.toMaybeRecordType());", 
          "type": "Delete", 
          "seed": "case 1:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_713/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:22:15.278095422 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_713/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:22:15.278095422 -0500\n@@ -380,10 +380,6 @@\n         sb.append(getPropertyType(property).toString());\n \n         ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n-        }\n       }\n \n       sb.append(\"}\");\n@@ -455,7 +451,6 @@\n \n     // record types\n     if (that.isRecordType()) {\n-      return RecordType.isSubtype(this, that.toMaybeRecordType());\n     }\n \n     // Interfaces\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_713/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:22:15.278095422 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -162,20 +162,12 @@\n       // record types. If any property conflicts, then the NO_TYPE type\n       // is returned.\n       for (String property : properties.keySet()) {\n-        if (thatRecord.hasProperty(property) &&\n-            !thatRecord.getPropertyType(property).isEquivalentTo(\n-                getPropertyType(property))) {\n-          return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n-        }\n-\n         builder.addProperty(property, getPropertyType(property),\n             getPropertyNode(property));\n       }\n \n       for (String property : thatRecord.properties.keySet()) {\n         if (!hasProperty(property)) {\n-          builder.addProperty(property, thatRecord.getPropertyType(property),\n-              thatRecord.getPropertyNode(property));\n         }\n       }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 378, 
          "faulty": "sb.append(property);", 
          "type": "Delete", 
          "seed": "case 1:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_951/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:23:34.038444814 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_951/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:23:34.042444831 -0500\n@@ -375,7 +375,6 @@\n           sb.append(\", \");\n         }\n \n-        sb.append(property);\n         sb.append(\": \");\n         sb.append(getPropertyType(property).toString());\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_951/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:23:34.042444831 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 177, 
          "faulty": "builder.addProperty(property,thatRecord.getPropertyType(property),thatRecord.getPropertyNode(property));", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 103, 
          "faulty": "if (otherRecord == this) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return TRUE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1162/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:24:40.346735896 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1162/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:24:40.346735896 -0500\n@@ -100,14 +100,10 @@\n \n     // Compare properties.\n     RecordType otherRecord = other.toMaybeRecordType();\n-    if (otherRecord == this) {\n-      return true;\n-    }\n-\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -174,8 +170,6 @@\n \n       for (String property : thatRecord.properties.keySet()) {\n         if (!hasProperty(property)) {\n-          builder.addProperty(property, thatRecord.getPropertyType(property),\n-              thatRecord.getPropertyNode(property));\n         }\n       }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 177, 
          "faulty": "builder.addProperty(property,thatRecord.getPropertyType(property),thatRecord.getPropertyNode(property));", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 458, 
          "faulty": "return RecordType.isSubtype(this,that.toMaybeRecordType());", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 165, 
          "faulty": "if (thatRecord.hasProperty(property) && !thatRecord.getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n  return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 229, 
          "faulty": "if (registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE).isSubtype(that)) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 3:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 380, 
          "faulty": "sb.append(getPropertyType(property).toString());", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 176, 
          "faulty": "if (!hasProperty(property)) {\n  builder.addProperty(property,thatRecord.getPropertyType(property),thatRecord.getPropertyNode(property));\n}", 
          "type": "Delete", 
          "seed": "return true;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1039/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:23:59.798558185 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1039/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:23:59.798558185 -0500\n@@ -377,13 +377,7 @@\n \n         sb.append(property);\n         sb.append(\": \");\n-        sb.append(getPropertyType(property).toString());\n-\n         ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n-        }\n       }\n \n       sb.append(\"}\");\n@@ -455,7 +449,6 @@\n \n     // record types\n     if (that.isRecordType()) {\n-      return RecordType.isSubtype(this, that.toMaybeRecordType());\n     }\n \n     // Interfaces\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1039/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:23:59.798558185 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -162,21 +162,11 @@\n       // record types. If any property conflicts, then the NO_TYPE type\n       // is returned.\n       for (String property : properties.keySet()) {\n-        if (thatRecord.hasProperty(property) &&\n-            !thatRecord.getPropertyType(property).isEquivalentTo(\n-                getPropertyType(property))) {\n-          return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n-        }\n-\n         builder.addProperty(property, getPropertyType(property),\n             getPropertyNode(property));\n       }\n \n       for (String property : thatRecord.properties.keySet()) {\n-        if (!hasProperty(property)) {\n-          builder.addProperty(property, thatRecord.getPropertyType(property),\n-              thatRecord.getPropertyNode(property));\n-        }\n       }\n \n       return builder.build();\n@@ -225,12 +215,6 @@\n       return true;\n     }\n \n-    // Top of the record types is the empty record, or OBJECT_TYPE.\n-    if (registry.getNativeObjectType(\n-            JSTypeNative.OBJECT_TYPE).isSubtype(that)) {\n-      return true;\n-    }\n-\n     // A type is a subtype of a record type if it itself is a record\n     // type and it has at least the same members as the parent record type\n     // with the same types.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 146, 
          "faulty": "for (String property : properties.keySet()) {\n  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n    builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n  }\n}", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 177, 
          "faulty": "builder.addProperty(property,thatRecord.getPropertyType(property),thatRecord.getPropertyNode(property));", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_914/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:23:22.118392216 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_914/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:23:22.122392233 -0500\n@@ -380,10 +380,6 @@\n         sb.append(getPropertyType(property).toString());\n \n         ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n-        }\n       }\n \n       sb.append(\"}\");\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_914/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:23:22.122392233 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -143,14 +143,6 @@\n       return super.getLeastSupertype(that);\n     }\n     RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n-    for (String property : properties.keySet()) {\n-      if (that.toMaybeRecordType().hasProperty(property) &&\n-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n-              getPropertyType(property))) {\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n-      }\n-    }\n     return builder.build();\n   }\n   JSType getGreatestSubtypeHelper(JSType that) {\n@@ -174,8 +166,6 @@\n \n       for (String property : thatRecord.properties.keySet()) {\n         if (!hasProperty(property)) {\n-          builder.addProperty(property, thatRecord.getPropertyType(property),\n-              thatRecord.getPropertyNode(property));\n         }\n       }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 146, 
          "faulty": "for (String property : properties.keySet()) {\n  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n    builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n  }\n}", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 379, 
          "faulty": "sb.append(\": \");", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 182, 
          "faulty": "return builder.build();", 
          "type": "Delete", 
          "seed": "return FALSE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_613/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:21:42.973950676 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_613/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:21:42.973950676 -0500\n@@ -376,7 +376,6 @@\n         }\n \n         sb.append(property);\n-        sb.append(\": \");\n         sb.append(getPropertyType(property).toString());\n \n         ++i;\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_613/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:21:42.977950694 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -143,14 +143,6 @@\n       return super.getLeastSupertype(that);\n     }\n     RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n-    for (String property : properties.keySet()) {\n-      if (that.toMaybeRecordType().hasProperty(property) &&\n-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n-              getPropertyType(property))) {\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n-      }\n-    }\n     return builder.build();\n   }\n   JSType getGreatestSubtypeHelper(JSType that) {\n@@ -178,8 +170,6 @@\n               thatRecord.getPropertyNode(property));\n         }\n       }\n-\n-      return builder.build();\n     }\n \n     JSType greatestSubtype = registry.getNativeType(\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 229, 
          "faulty": "if (registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE).isSubtype(that)) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 3:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 380, 
          "faulty": "sb.append(getPropertyType(property).toString());", 
          "type": "Delete", 
          "seed": "case 2:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1042/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:24:00.518561348 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1042/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:24:00.518561348 -0500\n@@ -377,13 +377,7 @@\n \n         sb.append(property);\n         sb.append(\": \");\n-        sb.append(getPropertyType(property).toString());\n-\n         ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n-        }\n       }\n \n       sb.append(\"}\");\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1042/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:24:00.522561366 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -225,12 +225,6 @@\n       return true;\n     }\n \n-    // Top of the record types is the empty record, or OBJECT_TYPE.\n-    if (registry.getNativeObjectType(\n-            JSTypeNative.OBJECT_TYPE).isSubtype(that)) {\n-      return true;\n-    }\n-\n     // A type is a subtype of a record type if it itself is a record\n     // type and it has at least the same members as the parent record type\n     // with the same types.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 146, 
          "faulty": "for (String property : properties.keySet()) {\n  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n    builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n  }\n}", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 150, 
          "faulty": "builder.addProperty(property,getPropertyType(property),getPropertyNode(property));", 
          "type": "Replace", 
          "seed": "case 1:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_474/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:20:58.397749262 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_474/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:20:58.401749279 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -143,14 +143,6 @@\n       return super.getLeastSupertype(that);\n     }\n     RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n-    for (String property : properties.keySet()) {\n-      if (that.toMaybeRecordType().hasProperty(property) &&\n-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n-              getPropertyType(property))) {\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n-      }\n-    }\n     return builder.build();\n   }\n   JSType getGreatestSubtypeHelper(JSType that) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 379, 
          "faulty": "sb.append(\": \");", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 165, 
          "faulty": "if (thatRecord.hasProperty(property) && !thatRecord.getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n  return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 264, 
          "faulty": "if (!typeA.hasProperty(property)) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "return true;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_723/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:22:18.370109227 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_723/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:22:18.370109227 -0500\n@@ -376,14 +376,9 @@\n         }\n \n         sb.append(property);\n-        sb.append(\": \");\n         sb.append(getPropertyType(property).toString());\n \n         ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n-        }\n       }\n \n       sb.append(\"}\");\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_723/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:22:18.374109245 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -162,12 +162,6 @@\n       // record types. If any property conflicts, then the NO_TYPE type\n       // is returned.\n       for (String property : properties.keySet()) {\n-        if (thatRecord.hasProperty(property) &&\n-            !thatRecord.getPropertyType(property).isEquivalentTo(\n-                getPropertyType(property))) {\n-          return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n-        }\n-\n         builder.addProperty(property, getPropertyType(property),\n             getPropertyNode(property));\n       }\n@@ -261,10 +255,6 @@\n     // same type, the properties of z are inferred--and so an assignment\n     // to the property of z would not violate any restrictions on it.\n     for (String property : typeB.properties.keySet()) {\n-      if (!typeA.hasProperty(property)) {\n-        return false;\n-      }\n-\n       JSType propA = typeA.getPropertyType(property);\n       JSType propB = typeB.getPropertyType(property);\n       if (!propA.isUnknownType() && !propB.isUnknownType()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 229, 
          "faulty": "if (registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE).isSubtype(that)) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 3:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 380, 
          "faulty": "sb.append(getPropertyType(property).toString());", 
          "type": "Delete", 
          "seed": "case 2:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_985/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:23:44.022488801 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_985/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:23:44.026488819 -0500\n@@ -377,8 +377,6 @@\n \n         sb.append(property);\n         sb.append(\": \");\n-        sb.append(getPropertyType(property).toString());\n-\n         ++i;\n         if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n           sb.append(\", ...\");\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_985/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:23:44.026488819 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -225,12 +225,6 @@\n       return true;\n     }\n \n-    // Top of the record types is the empty record, or OBJECT_TYPE.\n-    if (registry.getNativeObjectType(\n-            JSTypeNative.OBJECT_TYPE).isSubtype(that)) {\n-      return true;\n-    }\n-\n     // A type is a subtype of a record type if it itself is a record\n     // type and it has at least the same members as the parent record type\n     // with the same types.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 177, 
          "faulty": "builder.addProperty(property,thatRecord.getPropertyType(property),thatRecord.getPropertyNode(property));", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_654/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:21:56.698012285 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_654/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:21:56.702012303 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -174,8 +174,6 @@\n \n       for (String property : thatRecord.properties.keySet()) {\n         if (!hasProperty(property)) {\n-          builder.addProperty(property, thatRecord.getPropertyType(property),\n-              thatRecord.getPropertyNode(property));\n         }\n       }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 379, 
          "faulty": "sb.append(\": \");", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 146, 
          "faulty": "for (String property : properties.keySet()) {\n  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n    builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n  }\n}", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 165, 
          "faulty": "if (thatRecord.hasProperty(property) && !thatRecord.getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n  return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 165, 
          "faulty": "if (thatRecord.hasProperty(property) && !thatRecord.getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n  return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 177, 
          "faulty": "builder.addProperty(property,thatRecord.getPropertyType(property),thatRecord.getPropertyNode(property));", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 182, 
          "faulty": "return builder.build();", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_791/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:22:40.158206292 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_791/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:22:40.162206309 -0500\n@@ -376,14 +376,9 @@\n         }\n \n         sb.append(property);\n-        sb.append(\": \");\n         sb.append(getPropertyType(property).toString());\n \n         ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n-        }\n       }\n \n       sb.append(\"}\");\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_791/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:22:40.162206309 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -143,14 +143,6 @@\n       return super.getLeastSupertype(that);\n     }\n     RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n-    for (String property : properties.keySet()) {\n-      if (that.toMaybeRecordType().hasProperty(property) &&\n-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n-              getPropertyType(property))) {\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n-      }\n-    }\n     return builder.build();\n   }\n   JSType getGreatestSubtypeHelper(JSType that) {\n@@ -162,24 +154,14 @@\n       // record types. If any property conflicts, then the NO_TYPE type\n       // is returned.\n       for (String property : properties.keySet()) {\n-        if (thatRecord.hasProperty(property) &&\n-            !thatRecord.getPropertyType(property).isEquivalentTo(\n-                getPropertyType(property))) {\n-          return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n-        }\n-\n         builder.addProperty(property, getPropertyType(property),\n             getPropertyNode(property));\n       }\n \n       for (String property : thatRecord.properties.keySet()) {\n         if (!hasProperty(property)) {\n-          builder.addProperty(property, thatRecord.getPropertyType(property),\n-              thatRecord.getPropertyNode(property));\n         }\n       }\n-\n-      return builder.build();\n     }\n \n     JSType greatestSubtype = registry.getNativeType(\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 177, 
          "faulty": "builder.addProperty(property,thatRecord.getPropertyType(property),thatRecord.getPropertyNode(property));", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 458, 
          "faulty": "return RecordType.isSubtype(this,that.toMaybeRecordType());", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 165, 
          "faulty": "if (thatRecord.hasProperty(property) && !thatRecord.getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n  return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 229, 
          "faulty": "if (registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE).isSubtype(that)) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 3:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 380, 
          "faulty": "sb.append(getPropertyType(property).toString());", 
          "type": "Delete", 
          "seed": "case 2:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1010/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:23:51.298520820 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1010/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:23:51.298520820 -0500\n@@ -377,8 +377,6 @@\n \n         sb.append(property);\n         sb.append(\": \");\n-        sb.append(getPropertyType(property).toString());\n-\n         ++i;\n         if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n           sb.append(\", ...\");\n@@ -455,7 +453,6 @@\n \n     // record types\n     if (that.isRecordType()) {\n-      return RecordType.isSubtype(this, that.toMaybeRecordType());\n     }\n \n     // Interfaces\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1010/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:23:51.302520837 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -162,20 +162,12 @@\n       // record types. If any property conflicts, then the NO_TYPE type\n       // is returned.\n       for (String property : properties.keySet()) {\n-        if (thatRecord.hasProperty(property) &&\n-            !thatRecord.getPropertyType(property).isEquivalentTo(\n-                getPropertyType(property))) {\n-          return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n-        }\n-\n         builder.addProperty(property, getPropertyType(property),\n             getPropertyNode(property));\n       }\n \n       for (String property : thatRecord.properties.keySet()) {\n         if (!hasProperty(property)) {\n-          builder.addProperty(property, thatRecord.getPropertyType(property),\n-              thatRecord.getPropertyNode(property));\n         }\n       }\n \n@@ -225,12 +217,6 @@\n       return true;\n     }\n \n-    // Top of the record types is the empty record, or OBJECT_TYPE.\n-    if (registry.getNativeObjectType(\n-            JSTypeNative.OBJECT_TYPE).isSubtype(that)) {\n-      return true;\n-    }\n-\n     // A type is a subtype of a record type if it itself is a record\n     // type and it has at least the same members as the parent record type\n     // with the same types.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 379, 
          "faulty": "sb.append(\": \");", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 146, 
          "faulty": "for (String property : properties.keySet()) {\n  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n    builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n  }\n}", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 378, 
          "faulty": "sb.append(property);", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 146, 
          "faulty": "for (String property : properties.keySet()) {\n  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n    builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n  }\n}", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 177, 
          "faulty": "builder.addProperty(property,thatRecord.getPropertyType(property),thatRecord.getPropertyNode(property));", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 458, 
          "faulty": "return RecordType.isSubtype(this,that.toMaybeRecordType());", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 378, 
          "faulty": "sb.append(property);", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 379, 
          "faulty": "sb.append(\": \");", 
          "type": "Delete", 
          "seed": "return FALSE;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 171, 
          "faulty": "builder.addProperty(property,getPropertyType(property),getPropertyNode(property));", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1164/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:24:40.698737434 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1164/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:24:40.698737434 -0500\n@@ -375,15 +375,9 @@\n           sb.append(\", \");\n         }\n \n-        sb.append(property);\n-        sb.append(\": \");\n         sb.append(getPropertyType(property).toString());\n \n         ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n-        }\n       }\n \n       sb.append(\"}\");\n@@ -455,7 +449,6 @@\n \n     // record types\n     if (that.isRecordType()) {\n-      return RecordType.isSubtype(this, that.toMaybeRecordType());\n     }\n \n     // Interfaces\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1164/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:24:40.702737453 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -143,14 +143,6 @@\n       return super.getLeastSupertype(that);\n     }\n     RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n-    for (String property : properties.keySet()) {\n-      if (that.toMaybeRecordType().hasProperty(property) &&\n-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n-              getPropertyType(property))) {\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n-      }\n-    }\n     return builder.build();\n   }\n   JSType getGreatestSubtypeHelper(JSType that) {\n@@ -167,15 +159,10 @@\n                 getPropertyType(property))) {\n           return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n         }\n-\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n       }\n \n       for (String property : thatRecord.properties.keySet()) {\n         if (!hasProperty(property)) {\n-          builder.addProperty(property, thatRecord.getPropertyType(property),\n-              thatRecord.getPropertyNode(property));\n         }\n       }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 379, 
          "faulty": "sb.append(\": \");", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_252/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:19:41.629396786 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_252/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:19:41.629396786 -0500\n@@ -376,7 +376,6 @@\n         }\n \n         sb.append(property);\n-        sb.append(\": \");\n         sb.append(getPropertyType(property).toString());\n \n         ++i;\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_252/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:19:41.629396786 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 264, 
          "faulty": "if (!typeA.hasProperty(property)) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 147, 
          "faulty": "if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n  builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_733/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:22:21.310122348 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_733/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:22:21.314122366 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -144,12 +144,6 @@\n     }\n     RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n     for (String property : properties.keySet()) {\n-      if (that.toMaybeRecordType().hasProperty(property) &&\n-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n-              getPropertyType(property))) {\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n-      }\n     }\n     return builder.build();\n   }\n@@ -261,10 +255,6 @@\n     // same type, the properties of z are inferred--and so an assignment\n     // to the property of z would not violate any restrictions on it.\n     for (String property : typeB.properties.keySet()) {\n-      if (!typeA.hasProperty(property)) {\n-        return false;\n-      }\n-\n       JSType propA = typeA.getPropertyType(property);\n       JSType propB = typeB.getPropertyType(property);\n       if (!propA.isUnknownType() && !propB.isUnknownType()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 237, 
          "faulty": "if (!that.isRecordType()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 260, 
          "faulty": "return p.getNode();", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_396/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:20:32.637631849 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_396/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:20:32.637631849 -0500\n@@ -257,7 +257,6 @@\n   public Node getPropertyNode(String propertyName) {\n     Property p = properties.get(propertyName);\n     if (p != null) {\n-      return p.getNode();\n     }\n     ObjectType implicitPrototype = getImplicitPrototype();\n     if (implicitPrototype != null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_396/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:20:32.637631849 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -231,13 +231,6 @@\n       return true;\n     }\n \n-    // A type is a subtype of a record type if it itself is a record\n-    // type and it has at least the same members as the parent record type\n-    // with the same types.\n-    if (!that.isRecordType()) {\n-      return false;\n-    }\n-\n     return RecordType.isSubtype(this, that.toMaybeRecordType());\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 237, 
          "faulty": "if (!that.isRecordType()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "case 3:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 147, 
          "faulty": "if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n  builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 146, 
          "faulty": "for (String property : properties.keySet()) {\n  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n    builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n  }\n}", 
          "type": "Delete", 
          "seed": "return FALSE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_447/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:20:49.877710517 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_447/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:20:49.881710535 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -143,14 +143,6 @@\n       return super.getLeastSupertype(that);\n     }\n     RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n-    for (String property : properties.keySet()) {\n-      if (that.toMaybeRecordType().hasProperty(property) &&\n-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n-              getPropertyType(property))) {\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n-      }\n-    }\n     return builder.build();\n   }\n   JSType getGreatestSubtypeHelper(JSType that) {\n@@ -231,13 +223,6 @@\n       return true;\n     }\n \n-    // A type is a subtype of a record type if it itself is a record\n-    // type and it has at least the same members as the parent record type\n-    // with the same types.\n-    if (!that.isRecordType()) {\n-      return false;\n-    }\n-\n     return RecordType.isSubtype(this, that.toMaybeRecordType());\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 379, 
          "faulty": "sb.append(\": \");", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 146, 
          "faulty": "for (String property : properties.keySet()) {\n  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n    builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n  }\n}", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 379, 
          "faulty": "sb.append(\": \");", 
          "type": "Delete", 
          "seed": "return FALSE;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 379, 
          "faulty": "sb.append(\": \");", 
          "type": "Delete", 
          "seed": "return FALSE;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 147, 
          "faulty": "if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n  builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n}", 
          "type": "InsertBefore", 
          "seed": "return true;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_650/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:21:55.522007013 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_650/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:21:55.522007013 -0500\n@@ -376,7 +376,6 @@\n         }\n \n         sb.append(property);\n-        sb.append(\": \");\n         sb.append(getPropertyType(property).toString());\n \n         ++i;\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_650/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:21:55.522007013 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -143,14 +143,6 @@\n       return super.getLeastSupertype(that);\n     }\n     RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n-    for (String property : properties.keySet()) {\n-      if (that.toMaybeRecordType().hasProperty(property) &&\n-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n-              getPropertyType(property))) {\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n-      }\n-    }\n     return builder.build();\n   }\n   JSType getGreatestSubtypeHelper(JSType that) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 177, 
          "faulty": "builder.addProperty(property,thatRecord.getPropertyType(property),thatRecord.getPropertyNode(property));", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 458, 
          "faulty": "return RecordType.isSubtype(this,that.toMaybeRecordType());", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 177, 
          "faulty": "builder.addProperty(property,thatRecord.getPropertyType(property),thatRecord.getPropertyNode(property));", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_977/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:23:42.206480804 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_977/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:23:42.206480804 -0500\n@@ -380,10 +380,6 @@\n         sb.append(getPropertyType(property).toString());\n \n         ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n-        }\n       }\n \n       sb.append(\"}\");\n@@ -455,7 +451,6 @@\n \n     // record types\n     if (that.isRecordType()) {\n-      return RecordType.isSubtype(this, that.toMaybeRecordType());\n     }\n \n     // Interfaces\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_977/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:23:42.210480823 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -174,8 +174,6 @@\n \n       for (String property : thatRecord.properties.keySet()) {\n         if (!hasProperty(property)) {\n-          builder.addProperty(property, thatRecord.getPropertyType(property),\n-              thatRecord.getPropertyNode(property));\n         }\n       }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 177, 
          "faulty": "builder.addProperty(property,thatRecord.getPropertyType(property),thatRecord.getPropertyNode(property));", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 458, 
          "faulty": "return RecordType.isSubtype(this,that.toMaybeRecordType());", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 165, 
          "faulty": "if (thatRecord.hasProperty(property) && !thatRecord.getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n  return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 378, 
          "faulty": "sb.append(property);", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 379, 
          "faulty": "sb.append(\": \");", 
          "type": "Delete", 
          "seed": "return FALSE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_987/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:23:44.382490386 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_987/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:23:44.386490403 -0500\n@@ -375,15 +375,9 @@\n           sb.append(\", \");\n         }\n \n-        sb.append(property);\n-        sb.append(\": \");\n         sb.append(getPropertyType(property).toString());\n \n         ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n-        }\n       }\n \n       sb.append(\"}\");\n@@ -455,7 +449,6 @@\n \n     // record types\n     if (that.isRecordType()) {\n-      return RecordType.isSubtype(this, that.toMaybeRecordType());\n     }\n \n     // Interfaces\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_987/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:23:44.386490403 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -162,20 +162,12 @@\n       // record types. If any property conflicts, then the NO_TYPE type\n       // is returned.\n       for (String property : properties.keySet()) {\n-        if (thatRecord.hasProperty(property) &&\n-            !thatRecord.getPropertyType(property).isEquivalentTo(\n-                getPropertyType(property))) {\n-          return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n-        }\n-\n         builder.addProperty(property, getPropertyType(property),\n             getPropertyNode(property));\n       }\n \n       for (String property : thatRecord.properties.keySet()) {\n         if (!hasProperty(property)) {\n-          builder.addProperty(property, thatRecord.getPropertyType(property),\n-              thatRecord.getPropertyNode(property));\n         }\n       }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 146, 
          "faulty": "for (String property : properties.keySet()) {\n  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n    builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n  }\n}", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 378, 
          "faulty": "sb.append(property);", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 379, 
          "faulty": "sb.append(\": \");", 
          "type": "Delete", 
          "seed": "return FALSE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_875/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:23:08.954334019 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_875/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:23:08.958334037 -0500\n@@ -375,8 +375,6 @@\n           sb.append(\", \");\n         }\n \n-        sb.append(property);\n-        sb.append(\": \");\n         sb.append(getPropertyType(property).toString());\n \n         ++i;\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_875/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:23:08.958334037 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -143,14 +143,6 @@\n       return super.getLeastSupertype(that);\n     }\n     RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n-    for (String property : properties.keySet()) {\n-      if (that.toMaybeRecordType().hasProperty(property) &&\n-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n-              getPropertyType(property))) {\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n-      }\n-    }\n     return builder.build();\n   }\n   JSType getGreatestSubtypeHelper(JSType that) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 379, 
          "faulty": "sb.append(\": \");", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 146, 
          "faulty": "for (String property : properties.keySet()) {\n  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n    builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n  }\n}", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 165, 
          "faulty": "if (thatRecord.hasProperty(property) && !thatRecord.getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n  return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_591/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:21:36.373920984 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_591/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:21:36.373920984 -0500\n@@ -376,14 +376,9 @@\n         }\n \n         sb.append(property);\n-        sb.append(\": \");\n         sb.append(getPropertyType(property).toString());\n \n         ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n-        }\n       }\n \n       sb.append(\"}\");\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_591/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:21:36.377921002 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -143,14 +143,6 @@\n       return super.getLeastSupertype(that);\n     }\n     RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n-    for (String property : properties.keySet()) {\n-      if (that.toMaybeRecordType().hasProperty(property) &&\n-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n-              getPropertyType(property))) {\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n-      }\n-    }\n     return builder.build();\n   }\n   JSType getGreatestSubtypeHelper(JSType that) {\n@@ -162,12 +154,6 @@\n       // record types. If any property conflicts, then the NO_TYPE type\n       // is returned.\n       for (String property : properties.keySet()) {\n-        if (thatRecord.hasProperty(property) &&\n-            !thatRecord.getPropertyType(property).isEquivalentTo(\n-                getPropertyType(property))) {\n-          return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n-        }\n-\n         builder.addProperty(property, getPropertyType(property),\n             getPropertyNode(property));\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 146, 
          "faulty": "for (String property : properties.keySet()) {\n  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n    builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n  }\n}", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 177, 
          "faulty": "builder.addProperty(property,thatRecord.getPropertyType(property),thatRecord.getPropertyNode(property));", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_979/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:23:42.598482531 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_979/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:23:42.598482531 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -143,14 +143,6 @@\n       return super.getLeastSupertype(that);\n     }\n     RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n-    for (String property : properties.keySet()) {\n-      if (that.toMaybeRecordType().hasProperty(property) &&\n-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n-              getPropertyType(property))) {\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n-      }\n-    }\n     return builder.build();\n   }\n   JSType getGreatestSubtypeHelper(JSType that) {\n@@ -174,8 +166,6 @@\n \n       for (String property : thatRecord.properties.keySet()) {\n         if (!hasProperty(property)) {\n-          builder.addProperty(property, thatRecord.getPropertyType(property),\n-              thatRecord.getPropertyNode(property));\n         }\n       }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 379, 
          "faulty": "sb.append(\": \");", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 146, 
          "faulty": "for (String property : properties.keySet()) {\n  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n    builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n  }\n}", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 165, 
          "faulty": "if (thatRecord.hasProperty(property) && !thatRecord.getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n  return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 165, 
          "faulty": "if (thatRecord.hasProperty(property) && !thatRecord.getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n  return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 177, 
          "faulty": "builder.addProperty(property,thatRecord.getPropertyType(property),thatRecord.getPropertyNode(property));", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_715/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:22:15.638097029 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_715/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:22:15.638097029 -0500\n@@ -376,14 +376,9 @@\n         }\n \n         sb.append(property);\n-        sb.append(\": \");\n         sb.append(getPropertyType(property).toString());\n \n         ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n-        }\n       }\n \n       sb.append(\"}\");\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_715/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:22:15.638097029 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -143,14 +143,6 @@\n       return super.getLeastSupertype(that);\n     }\n     RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n-    for (String property : properties.keySet()) {\n-      if (that.toMaybeRecordType().hasProperty(property) &&\n-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n-              getPropertyType(property))) {\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n-      }\n-    }\n     return builder.build();\n   }\n   JSType getGreatestSubtypeHelper(JSType that) {\n@@ -162,20 +154,12 @@\n       // record types. If any property conflicts, then the NO_TYPE type\n       // is returned.\n       for (String property : properties.keySet()) {\n-        if (thatRecord.hasProperty(property) &&\n-            !thatRecord.getPropertyType(property).isEquivalentTo(\n-                getPropertyType(property))) {\n-          return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n-        }\n-\n         builder.addProperty(property, getPropertyType(property),\n             getPropertyNode(property));\n       }\n \n       for (String property : thatRecord.properties.keySet()) {\n         if (!hasProperty(property)) {\n-          builder.addProperty(property, thatRecord.getPropertyType(property),\n-              thatRecord.getPropertyNode(property));\n         }\n       }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 146, 
          "faulty": "for (String property : properties.keySet()) {\n  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n    builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n  }\n}", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 378, 
          "faulty": "sb.append(property);", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 379, 
          "faulty": "sb.append(\": \");", 
          "type": "Delete", 
          "seed": "return FALSE;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 375, 
          "faulty": "sb.append(\", \");", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_939/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:23:30.218427967 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_939/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:23:30.218427967 -0500\n@@ -372,11 +372,8 @@\n       int i = 0;\n       for (String property : propertyNames) {\n         if (i > 0) {\n-          sb.append(\", \");\n         }\n \n-        sb.append(property);\n-        sb.append(\": \");\n         sb.append(getPropertyType(property).toString());\n \n         ++i;\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_939/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:23:30.222427985 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -143,14 +143,6 @@\n       return super.getLeastSupertype(that);\n     }\n     RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n-    for (String property : properties.keySet()) {\n-      if (that.toMaybeRecordType().hasProperty(property) &&\n-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n-              getPropertyType(property))) {\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n-      }\n-    }\n     return builder.build();\n   }\n   JSType getGreatestSubtypeHelper(JSType that) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 379, 
          "faulty": "sb.append(\": \");", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 146, 
          "faulty": "for (String property : properties.keySet()) {\n  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n    builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n  }\n}", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 165, 
          "faulty": "if (thatRecord.hasProperty(property) && !thatRecord.getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n  return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 264, 
          "faulty": "if (!typeA.hasProperty(property)) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_695/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:22:09.394069126 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_695/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:22:09.394069126 -0500\n@@ -376,14 +376,9 @@\n         }\n \n         sb.append(property);\n-        sb.append(\": \");\n         sb.append(getPropertyType(property).toString());\n \n         ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n-        }\n       }\n \n       sb.append(\"}\");\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_695/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:22:09.394069126 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -143,14 +143,6 @@\n       return super.getLeastSupertype(that);\n     }\n     RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n-    for (String property : properties.keySet()) {\n-      if (that.toMaybeRecordType().hasProperty(property) &&\n-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n-              getPropertyType(property))) {\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n-      }\n-    }\n     return builder.build();\n   }\n   JSType getGreatestSubtypeHelper(JSType that) {\n@@ -162,12 +154,6 @@\n       // record types. If any property conflicts, then the NO_TYPE type\n       // is returned.\n       for (String property : properties.keySet()) {\n-        if (thatRecord.hasProperty(property) &&\n-            !thatRecord.getPropertyType(property).isEquivalentTo(\n-                getPropertyType(property))) {\n-          return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n-        }\n-\n         builder.addProperty(property, getPropertyType(property),\n             getPropertyNode(property));\n       }\n@@ -261,10 +247,6 @@\n     // same type, the properties of z are inferred--and so an assignment\n     // to the property of z would not violate any restrictions on it.\n     for (String property : typeB.properties.keySet()) {\n-      if (!typeA.hasProperty(property)) {\n-        return false;\n-      }\n-\n       JSType propA = typeA.getPropertyType(property);\n       JSType propB = typeB.getPropertyType(property);\n       if (!propA.isUnknownType() && !propB.isUnknownType()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 164, 
          "faulty": "for (String property : properties.keySet()) {\n  if (thatRecord.hasProperty(property) && !thatRecord.getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n    return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n  }\n  builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_225/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:19:32.181349342 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_225/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:19:32.181349342 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -158,20 +158,6 @@\n       RecordType thatRecord = that.toMaybeRecordType();\n       RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n \n-      // The greatest subtype consists of those *unique* properties of both\n-      // record types. If any property conflicts, then the NO_TYPE type\n-      // is returned.\n-      for (String property : properties.keySet()) {\n-        if (thatRecord.hasProperty(property) &&\n-            !thatRecord.getPropertyType(property).isEquivalentTo(\n-                getPropertyType(property))) {\n-          return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n-        }\n-\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n-      }\n-\n       for (String property : thatRecord.properties.keySet()) {\n         if (!hasProperty(property)) {\n           builder.addProperty(property, thatRecord.getPropertyType(property),\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 379, 
          "faulty": "sb.append(\": \");", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 379, 
          "faulty": "sb.append(\": \");", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 146, 
          "faulty": "for (String property : properties.keySet()) {\n  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n    builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n  }\n}", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 378, 
          "faulty": "sb.append(property);", 
          "type": "Delete", 
          "seed": "case 1:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_981/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:23:42.954484098 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_981/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:23:42.954484098 -0500\n@@ -375,15 +375,9 @@\n           sb.append(\", \");\n         }\n \n-        sb.append(property);\n-        sb.append(\": \");\n         sb.append(getPropertyType(property).toString());\n \n         ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n-        }\n       }\n \n       sb.append(\"}\");\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_981/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:23:42.954484098 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -143,14 +143,6 @@\n       return super.getLeastSupertype(that);\n     }\n     RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n-    for (String property : properties.keySet()) {\n-      if (that.toMaybeRecordType().hasProperty(property) &&\n-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n-              getPropertyType(property))) {\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n-      }\n-    }\n     return builder.build();\n   }\n   JSType getGreatestSubtypeHelper(JSType that) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 146, 
          "faulty": "for (String property : properties.keySet()) {\n  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n    builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n  }\n}", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 177, 
          "faulty": "builder.addProperty(property,thatRecord.getPropertyType(property),thatRecord.getPropertyNode(property));", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 458, 
          "faulty": "return RecordType.isSubtype(this,that.toMaybeRecordType());", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 165, 
          "faulty": "if (thatRecord.hasProperty(property) && !thatRecord.getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n  return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 150, 
          "faulty": "builder.addProperty(property,getPropertyType(property),getPropertyNode(property));", 
          "type": "Delete", 
          "seed": "case 1:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1062/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:24:06.934589524 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1062/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:24:06.934589524 -0500\n@@ -455,7 +455,6 @@\n \n     // record types\n     if (that.isRecordType()) {\n-      return RecordType.isSubtype(this, that.toMaybeRecordType());\n     }\n \n     // Interfaces\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1062/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:24:06.934589524 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -143,14 +143,6 @@\n       return super.getLeastSupertype(that);\n     }\n     RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n-    for (String property : properties.keySet()) {\n-      if (that.toMaybeRecordType().hasProperty(property) &&\n-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n-              getPropertyType(property))) {\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n-      }\n-    }\n     return builder.build();\n   }\n   JSType getGreatestSubtypeHelper(JSType that) {\n@@ -162,20 +154,12 @@\n       // record types. If any property conflicts, then the NO_TYPE type\n       // is returned.\n       for (String property : properties.keySet()) {\n-        if (thatRecord.hasProperty(property) &&\n-            !thatRecord.getPropertyType(property).isEquivalentTo(\n-                getPropertyType(property))) {\n-          return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n-        }\n-\n         builder.addProperty(property, getPropertyType(property),\n             getPropertyNode(property));\n       }\n \n       for (String property : thatRecord.properties.keySet()) {\n         if (!hasProperty(property)) {\n-          builder.addProperty(property, thatRecord.getPropertyType(property),\n-              thatRecord.getPropertyNode(property));\n         }\n       }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 146, 
          "faulty": "for (String property : properties.keySet()) {\n  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n    builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n  }\n}", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 379, 
          "faulty": "sb.append(\": \");", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 146, 
          "faulty": "for (String property : properties.keySet()) {\n  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n    builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n  }\n}", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 374, 
          "faulty": "if (i > 0) {\n  sb.append(\", \");\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_672/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:22:02.346037590 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_672/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:22:02.346037590 -0500\n@@ -371,19 +371,10 @@\n \n       int i = 0;\n       for (String property : propertyNames) {\n-        if (i > 0) {\n-          sb.append(\", \");\n-        }\n-\n         sb.append(property);\n-        sb.append(\": \");\n         sb.append(getPropertyType(property).toString());\n \n         ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n-        }\n       }\n \n       sb.append(\"}\");\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_672/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:22:02.346037590 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -143,14 +143,6 @@\n       return super.getLeastSupertype(that);\n     }\n     RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n-    for (String property : properties.keySet()) {\n-      if (that.toMaybeRecordType().hasProperty(property) &&\n-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n-              getPropertyType(property))) {\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n-      }\n-    }\n     return builder.build();\n   }\n   JSType getGreatestSubtypeHelper(JSType that) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 177, 
          "faulty": "builder.addProperty(property,thatRecord.getPropertyType(property),thatRecord.getPropertyNode(property));", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 458, 
          "faulty": "return RecordType.isSubtype(this,that.toMaybeRecordType());", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 165, 
          "faulty": "if (thatRecord.hasProperty(property) && !thatRecord.getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n  return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_930/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:23:27.338415261 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_930/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:23:27.338415261 -0500\n@@ -455,7 +455,6 @@\n \n     // record types\n     if (that.isRecordType()) {\n-      return RecordType.isSubtype(this, that.toMaybeRecordType());\n     }\n \n     // Interfaces\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_930/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:23:27.342415277 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -162,20 +162,12 @@\n       // record types. If any property conflicts, then the NO_TYPE type\n       // is returned.\n       for (String property : properties.keySet()) {\n-        if (thatRecord.hasProperty(property) &&\n-            !thatRecord.getPropertyType(property).isEquivalentTo(\n-                getPropertyType(property))) {\n-          return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n-        }\n-\n         builder.addProperty(property, getPropertyType(property),\n             getPropertyNode(property));\n       }\n \n       for (String property : thatRecord.properties.keySet()) {\n         if (!hasProperty(property)) {\n-          builder.addProperty(property, thatRecord.getPropertyType(property),\n-              thatRecord.getPropertyNode(property));\n         }\n       }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 177, 
          "faulty": "builder.addProperty(property,thatRecord.getPropertyType(property),thatRecord.getPropertyNode(property));", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 458, 
          "faulty": "return RecordType.isSubtype(this,that.toMaybeRecordType());", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 165, 
          "faulty": "if (thatRecord.hasProperty(property) && !thatRecord.getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n  return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 229, 
          "faulty": "if (registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE).isSubtype(that)) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 3:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 380, 
          "faulty": "sb.append(getPropertyType(property).toString());", 
          "type": "Delete", 
          "seed": "case 2:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_887/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:23:13.006351945 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_887/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:23:13.006351945 -0500\n@@ -377,13 +377,7 @@\n \n         sb.append(property);\n         sb.append(\": \");\n-        sb.append(getPropertyType(property).toString());\n-\n         ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n-        }\n       }\n \n       sb.append(\"}\");\n@@ -455,7 +449,6 @@\n \n     // record types\n     if (that.isRecordType()) {\n-      return RecordType.isSubtype(this, that.toMaybeRecordType());\n     }\n \n     // Interfaces\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_887/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:23:13.010351962 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -162,20 +162,12 @@\n       // record types. If any property conflicts, then the NO_TYPE type\n       // is returned.\n       for (String property : properties.keySet()) {\n-        if (thatRecord.hasProperty(property) &&\n-            !thatRecord.getPropertyType(property).isEquivalentTo(\n-                getPropertyType(property))) {\n-          return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n-        }\n-\n         builder.addProperty(property, getPropertyType(property),\n             getPropertyNode(property));\n       }\n \n       for (String property : thatRecord.properties.keySet()) {\n         if (!hasProperty(property)) {\n-          builder.addProperty(property, thatRecord.getPropertyType(property),\n-              thatRecord.getPropertyNode(property));\n         }\n       }\n \n@@ -225,12 +217,6 @@\n       return true;\n     }\n \n-    // Top of the record types is the empty record, or OBJECT_TYPE.\n-    if (registry.getNativeObjectType(\n-            JSTypeNative.OBJECT_TYPE).isSubtype(that)) {\n-      return true;\n-    }\n-\n     // A type is a subtype of a record type if it itself is a record\n     // type and it has at least the same members as the parent record type\n     // with the same types.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 237, 
          "faulty": "if (!that.isRecordType()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "case 3:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 147, 
          "faulty": "if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n  builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_431/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:20:44.257684912 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_431/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:20:44.257684912 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -144,12 +144,6 @@\n     }\n     RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n     for (String property : properties.keySet()) {\n-      if (that.toMaybeRecordType().hasProperty(property) &&\n-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n-              getPropertyType(property))) {\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n-      }\n     }\n     return builder.build();\n   }\n@@ -231,13 +225,6 @@\n       return true;\n     }\n \n-    // A type is a subtype of a record type if it itself is a record\n-    // type and it has at least the same members as the parent record type\n-    // with the same types.\n-    if (!that.isRecordType()) {\n-      return false;\n-    }\n-\n     return RecordType.isSubtype(this, that.toMaybeRecordType());\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_186/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:19:18.301274114 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_186/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:19:18.337274310 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 379, 
          "faulty": "sb.append(\": \");", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 146, 
          "faulty": "for (String property : properties.keySet()) {\n  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n    builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n  }\n}", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 379, 
          "faulty": "sb.append(\": \");", 
          "type": "Delete", 
          "seed": "return FALSE;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 176, 
          "faulty": "if (!hasProperty(property)) {\n  builder.addProperty(property,thatRecord.getPropertyType(property),thatRecord.getPropertyNode(property));\n}", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_551/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:21:22.913860295 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_551/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:21:22.917860313 -0500\n@@ -376,7 +376,6 @@\n         }\n \n         sb.append(property);\n-        sb.append(\": \");\n         sb.append(getPropertyType(property).toString());\n \n         ++i;\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_551/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:21:22.917860313 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -143,14 +143,6 @@\n       return super.getLeastSupertype(that);\n     }\n     RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n-    for (String property : properties.keySet()) {\n-      if (that.toMaybeRecordType().hasProperty(property) &&\n-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n-              getPropertyType(property))) {\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n-      }\n-    }\n     return builder.build();\n   }\n   JSType getGreatestSubtypeHelper(JSType that) {\n@@ -173,10 +165,6 @@\n       }\n \n       for (String property : thatRecord.properties.keySet()) {\n-        if (!hasProperty(property)) {\n-          builder.addProperty(property, thatRecord.getPropertyType(property),\n-              thatRecord.getPropertyNode(property));\n-        }\n       }\n \n       return builder.build();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 237, 
          "faulty": "if (!that.isRecordType()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "case 3:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 0:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_506/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:21:07.721791568 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_506/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:21:07.725791586 -0500\n@@ -380,10 +380,6 @@\n         sb.append(getPropertyType(property).toString());\n \n         ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n-        }\n       }\n \n       sb.append(\"}\");\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_506/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:21:07.725791586 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -231,13 +231,6 @@\n       return true;\n     }\n \n-    // A type is a subtype of a record type if it itself is a record\n-    // type and it has at least the same members as the parent record type\n-    // with the same types.\n-    if (!that.isRecordType()) {\n-      return false;\n-    }\n-\n     return RecordType.isSubtype(this, that.toMaybeRecordType());\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 146, 
          "faulty": "for (String property : properties.keySet()) {\n  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n    builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n  }\n}", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 379, 
          "faulty": "sb.append(\": \");", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 146, 
          "faulty": "for (String property : properties.keySet()) {\n  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n    builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n  }\n}", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 165, 
          "faulty": "if (thatRecord.hasProperty(property) && !thatRecord.getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n  return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 177, 
          "faulty": "builder.addProperty(property,thatRecord.getPropertyType(property),thatRecord.getPropertyNode(property));", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 458, 
          "faulty": "return RecordType.isSubtype(this,that.toMaybeRecordType());", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 165, 
          "faulty": "if (thatRecord.hasProperty(property) && !thatRecord.getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n  return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_757/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:22:29.442158600 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_757/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:22:29.442158600 -0500\n@@ -376,14 +376,9 @@\n         }\n \n         sb.append(property);\n-        sb.append(\": \");\n         sb.append(getPropertyType(property).toString());\n \n         ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n-        }\n       }\n \n       sb.append(\"}\");\n@@ -455,7 +450,6 @@\n \n     // record types\n     if (that.isRecordType()) {\n-      return RecordType.isSubtype(this, that.toMaybeRecordType());\n     }\n \n     // Interfaces\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_757/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:22:29.446158618 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -143,14 +143,6 @@\n       return super.getLeastSupertype(that);\n     }\n     RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n-    for (String property : properties.keySet()) {\n-      if (that.toMaybeRecordType().hasProperty(property) &&\n-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n-              getPropertyType(property))) {\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n-      }\n-    }\n     return builder.build();\n   }\n   JSType getGreatestSubtypeHelper(JSType that) {\n@@ -162,20 +154,12 @@\n       // record types. If any property conflicts, then the NO_TYPE type\n       // is returned.\n       for (String property : properties.keySet()) {\n-        if (thatRecord.hasProperty(property) &&\n-            !thatRecord.getPropertyType(property).isEquivalentTo(\n-                getPropertyType(property))) {\n-          return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n-        }\n-\n         builder.addProperty(property, getPropertyType(property),\n             getPropertyNode(property));\n       }\n \n       for (String property : thatRecord.properties.keySet()) {\n         if (!hasProperty(property)) {\n-          builder.addProperty(property, thatRecord.getPropertyType(property),\n-              thatRecord.getPropertyNode(property));\n         }\n       }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 379, 
          "faulty": "sb.append(\": \");", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 146, 
          "faulty": "for (String property : properties.keySet()) {\n  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n    builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n  }\n}", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 165, 
          "faulty": "if (thatRecord.hasProperty(property) && !thatRecord.getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n  return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 171, 
          "faulty": "builder.addProperty(property,getPropertyType(property),getPropertyNode(property));", 
          "type": "Delete", 
          "seed": "case 0:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_773/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:22:33.966178746 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_773/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:22:33.966178746 -0500\n@@ -376,14 +376,9 @@\n         }\n \n         sb.append(property);\n-        sb.append(\": \");\n         sb.append(getPropertyType(property).toString());\n \n         ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n-        }\n       }\n \n       sb.append(\"}\");\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_773/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:22:33.966178746 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -143,14 +143,6 @@\n       return super.getLeastSupertype(that);\n     }\n     RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n-    for (String property : properties.keySet()) {\n-      if (that.toMaybeRecordType().hasProperty(property) &&\n-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n-              getPropertyType(property))) {\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n-      }\n-    }\n     return builder.build();\n   }\n   JSType getGreatestSubtypeHelper(JSType that) {\n@@ -162,14 +154,6 @@\n       // record types. If any property conflicts, then the NO_TYPE type\n       // is returned.\n       for (String property : properties.keySet()) {\n-        if (thatRecord.hasProperty(property) &&\n-            !thatRecord.getPropertyType(property).isEquivalentTo(\n-                getPropertyType(property))) {\n-          return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n-        }\n-\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n       }\n \n       for (String property : thatRecord.properties.keySet()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 165, 
          "faulty": "if (thatRecord.hasProperty(property) && !thatRecord.getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n  return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 379, 
          "faulty": "sb.append(\": \");", 
          "type": "Delete", 
          "seed": "return FALSE;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 379, 
          "faulty": "sb.append(\": \");", 
          "type": "Delete", 
          "seed": "return FALSE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_604/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:21:40.105937778 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_604/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:21:40.105937778 -0500\n@@ -376,14 +376,9 @@\n         }\n \n         sb.append(property);\n-        sb.append(\": \");\n         sb.append(getPropertyType(property).toString());\n \n         ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n-        }\n       }\n \n       sb.append(\"}\");\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_604/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:21:40.105937778 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -162,12 +162,6 @@\n       // record types. If any property conflicts, then the NO_TYPE type\n       // is returned.\n       for (String property : properties.keySet()) {\n-        if (thatRecord.hasProperty(property) &&\n-            !thatRecord.getPropertyType(property).isEquivalentTo(\n-                getPropertyType(property))) {\n-          return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n-        }\n-\n         builder.addProperty(property, getPropertyType(property),\n             getPropertyNode(property));\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 146, 
          "faulty": "for (String property : properties.keySet()) {\n  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n    builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n  }\n}", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 177, 
          "faulty": "builder.addProperty(property,thatRecord.getPropertyType(property),thatRecord.getPropertyNode(property));", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 264, 
          "faulty": "if (!typeA.hasProperty(property)) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "return FALSE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1066/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:24:07.990594159 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1066/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:24:07.994594176 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -143,14 +143,6 @@\n       return super.getLeastSupertype(that);\n     }\n     RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n-    for (String property : properties.keySet()) {\n-      if (that.toMaybeRecordType().hasProperty(property) &&\n-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n-              getPropertyType(property))) {\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n-      }\n-    }\n     return builder.build();\n   }\n   JSType getGreatestSubtypeHelper(JSType that) {\n@@ -174,8 +166,6 @@\n \n       for (String property : thatRecord.properties.keySet()) {\n         if (!hasProperty(property)) {\n-          builder.addProperty(property, thatRecord.getPropertyType(property),\n-              thatRecord.getPropertyNode(property));\n         }\n       }\n \n@@ -261,10 +251,6 @@\n     // same type, the properties of z are inferred--and so an assignment\n     // to the property of z would not violate any restrictions on it.\n     for (String property : typeB.properties.keySet()) {\n-      if (!typeA.hasProperty(property)) {\n-        return false;\n-      }\n-\n       JSType propA = typeA.getPropertyType(property);\n       JSType propB = typeB.getPropertyType(property);\n       if (!propA.isUnknownType() && !propB.isUnknownType()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 237, 
          "faulty": "if (!that.isRecordType()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "case 3:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 146, 
          "faulty": "for (String property : properties.keySet()) {\n  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n    builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_625/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:21:46.301965633 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_625/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:21:46.305965651 -0500\n@@ -380,10 +380,6 @@\n         sb.append(getPropertyType(property).toString());\n \n         ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n-        }\n       }\n \n       sb.append(\"}\");\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_625/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:21:46.305965651 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -143,14 +143,6 @@\n       return super.getLeastSupertype(that);\n     }\n     RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n-    for (String property : properties.keySet()) {\n-      if (that.toMaybeRecordType().hasProperty(property) &&\n-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n-              getPropertyType(property))) {\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n-      }\n-    }\n     return builder.build();\n   }\n   JSType getGreatestSubtypeHelper(JSType that) {\n@@ -231,13 +223,6 @@\n       return true;\n     }\n \n-    // A type is a subtype of a record type if it itself is a record\n-    // type and it has at least the same members as the parent record type\n-    // with the same types.\n-    if (!that.isRecordType()) {\n-      return false;\n-    }\n-\n     return RecordType.isSubtype(this, that.toMaybeRecordType());\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 177, 
          "faulty": "builder.addProperty(property,thatRecord.getPropertyType(property),thatRecord.getPropertyNode(property));", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 458, 
          "faulty": "return RecordType.isSubtype(this,that.toMaybeRecordType());", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 177, 
          "faulty": "builder.addProperty(property,thatRecord.getPropertyType(property),thatRecord.getPropertyNode(property));", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 458, 
          "faulty": "return RecordType.isSubtype(this,that.toMaybeRecordType());", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 177, 
          "faulty": "builder.addProperty(property,thatRecord.getPropertyType(property),thatRecord.getPropertyNode(property));", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 103, 
          "faulty": "if (otherRecord == this) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return TRUE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1139/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:24:32.478701479 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1139/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:24:32.482701496 -0500\n@@ -380,10 +380,6 @@\n         sb.append(getPropertyType(property).toString());\n \n         ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n-        }\n       }\n \n       sb.append(\"}\");\n@@ -455,7 +451,6 @@\n \n     // record types\n     if (that.isRecordType()) {\n-      return RecordType.isSubtype(this, that.toMaybeRecordType());\n     }\n \n     // Interfaces\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1139/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:24:32.482701496 -0500\n@@ -100,14 +100,10 @@\n \n     // Compare properties.\n     RecordType otherRecord = other.toMaybeRecordType();\n-    if (otherRecord == this) {\n-      return true;\n-    }\n-\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -174,8 +170,6 @@\n \n       for (String property : thatRecord.properties.keySet()) {\n         if (!hasProperty(property)) {\n-          builder.addProperty(property, thatRecord.getPropertyType(property),\n-              thatRecord.getPropertyNode(property));\n         }\n       }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 379, 
          "faulty": "sb.append(\": \");", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 146, 
          "faulty": "for (String property : properties.keySet()) {\n  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n    builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n  }\n}", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 379, 
          "faulty": "sb.append(\": \");", 
          "type": "Delete", 
          "seed": "return FALSE;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 379, 
          "faulty": "sb.append(\": \");", 
          "type": "Delete", 
          "seed": "return FALSE;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 147, 
          "faulty": "if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n  builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n}", 
          "type": "InsertBefore", 
          "seed": "return true;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_616/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:21:43.705953966 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_616/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:21:43.705953966 -0500\n@@ -376,14 +376,9 @@\n         }\n \n         sb.append(property);\n-        sb.append(\": \");\n         sb.append(getPropertyType(property).toString());\n \n         ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n-        }\n       }\n \n       sb.append(\"}\");\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_616/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:21:43.709953984 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -143,14 +143,6 @@\n       return super.getLeastSupertype(that);\n     }\n     RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n-    for (String property : properties.keySet()) {\n-      if (that.toMaybeRecordType().hasProperty(property) &&\n-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n-              getPropertyType(property))) {\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n-      }\n-    }\n     return builder.build();\n   }\n   JSType getGreatestSubtypeHelper(JSType that) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 182, 
          "faulty": "return builder.build();", 
          "type": "Delete", 
          "seed": "return FALSE;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 263, 
          "faulty": "for (String property : typeB.properties.keySet()) {\n  if (!typeA.hasProperty(property)) {\n    return false;\n  }\n  JSType propA=typeA.getPropertyType(property);\n  JSType propB=typeB.getPropertyType(property);\n  if (!propA.isUnknownType() && !propB.isUnknownType()) {\n    if (typeA.isPropertyTypeDeclared(property)) {\n      if (!propA.isEquivalentTo(propB)) {\n        return false;\n      }\n    }\n else {\n      if (!propA.isSubtype(propB)) {\n        return false;\n      }\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 458, 
          "faulty": "return RecordType.isSubtype(this,that.toMaybeRecordType());", 
          "type": "Delete", 
          "seed": "return FALSE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_682/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:22:05.626052272 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_682/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:22:05.630052290 -0500\n@@ -455,7 +455,6 @@\n \n     // record types\n     if (that.isRecordType()) {\n-      return RecordType.isSubtype(this, that.toMaybeRecordType());\n     }\n \n     // Interfaces\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_682/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:22:05.630052290 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -178,8 +178,6 @@\n               thatRecord.getPropertyNode(property));\n         }\n       }\n-\n-      return builder.build();\n     }\n \n     JSType greatestSubtype = registry.getNativeType(\n@@ -243,43 +241,6 @@\n \n   /** Determines if typeA is a subtype of typeB */\n   static boolean isSubtype(ObjectType typeA, RecordType typeB) {\n-    // typeA is a subtype of record type typeB iff:\n-    // 1) typeA has all the properties declared in typeB.\n-    // 2) And for each property of typeB,\n-    //    2a) if the property of typeA is declared, it must be equal\n-    //        to the type of the property of typeB,\n-    //    2b) otherwise, it must be a subtype of the property of typeB.\n-    //\n-    // To figure out why this is true, consider the following pseudo-code:\n-    // /** @type {{a: (Object,null)}} */ var x;\n-    // /** @type {{a: !Object}} */ var y;\n-    // var z = {a: {}};\n-    // x.a = null;\n-    //\n-    // y cannot be assigned to x, because line 4 would violate y's declared\n-    // properties. But z can be assigned to x. Even though z and y are the\n-    // same type, the properties of z are inferred--and so an assignment\n-    // to the property of z would not violate any restrictions on it.\n-    for (String property : typeB.properties.keySet()) {\n-      if (!typeA.hasProperty(property)) {\n-        return false;\n-      }\n-\n-      JSType propA = typeA.getPropertyType(property);\n-      JSType propB = typeB.getPropertyType(property);\n-      if (!propA.isUnknownType() && !propB.isUnknownType()) {\n-        if (typeA.isPropertyTypeDeclared(property)) {\n-          if (!propA.isEquivalentTo(propB)) {\n-            return false;\n-          }\n-        } else {\n-          if (!propA.isSubtype(propB)) {\n-            return false;\n-          }\n-        }\n-      }\n-    }\n-\n     return true;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 146, 
          "faulty": "for (String property : properties.keySet()) {\n  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n    builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n  }\n}", 
          "type": "Delete", 
          "seed": "return true;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_468/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:20:56.545740847 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_468/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:20:56.549740865 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -143,14 +143,6 @@\n       return super.getLeastSupertype(that);\n     }\n     RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n-    for (String property : properties.keySet()) {\n-      if (that.toMaybeRecordType().hasProperty(property) &&\n-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n-              getPropertyType(property))) {\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n-      }\n-    }\n     return builder.build();\n   }\n   JSType getGreatestSubtypeHelper(JSType that) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 379, 
          "faulty": "sb.append(\": \");", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 146, 
          "faulty": "for (String property : properties.keySet()) {\n  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n    builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n  }\n}", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 165, 
          "faulty": "if (thatRecord.hasProperty(property) && !thatRecord.getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n  return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 165, 
          "faulty": "if (thatRecord.hasProperty(property) && !thatRecord.getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n  return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 264, 
          "faulty": "if (!typeA.hasProperty(property)) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 147, 
          "faulty": "if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n  builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 265, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "case 3:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_762/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:22:30.850164873 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_762/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:22:30.850164873 -0500\n@@ -376,14 +376,9 @@\n         }\n \n         sb.append(property);\n-        sb.append(\": \");\n         sb.append(getPropertyType(property).toString());\n \n         ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n-        }\n       }\n \n       sb.append(\"}\");\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_762/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:22:30.850164873 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -143,14 +143,6 @@\n       return super.getLeastSupertype(that);\n     }\n     RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n-    for (String property : properties.keySet()) {\n-      if (that.toMaybeRecordType().hasProperty(property) &&\n-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n-              getPropertyType(property))) {\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n-      }\n-    }\n     return builder.build();\n   }\n   JSType getGreatestSubtypeHelper(JSType that) {\n@@ -162,12 +154,6 @@\n       // record types. If any property conflicts, then the NO_TYPE type\n       // is returned.\n       for (String property : properties.keySet()) {\n-        if (thatRecord.hasProperty(property) &&\n-            !thatRecord.getPropertyType(property).isEquivalentTo(\n-                getPropertyType(property))) {\n-          return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n-        }\n-\n         builder.addProperty(property, getPropertyType(property),\n             getPropertyNode(property));\n       }\n@@ -261,10 +247,6 @@\n     // same type, the properties of z are inferred--and so an assignment\n     // to the property of z would not violate any restrictions on it.\n     for (String property : typeB.properties.keySet()) {\n-      if (!typeA.hasProperty(property)) {\n-        return false;\n-      }\n-\n       JSType propA = typeA.getPropertyType(property);\n       JSType propB = typeB.getPropertyType(property);\n       if (!propA.isUnknownType() && !propB.isUnknownType()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 237, 
          "faulty": "if (!that.isRecordType()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "case 3:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 147, 
          "faulty": "if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n  builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 146, 
          "faulty": "for (String property : properties.keySet()) {\n  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n    builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n  }\n}", 
          "type": "Delete", 
          "seed": "return FALSE;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 229, 
          "faulty": "if (registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE).isSubtype(that)) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 3:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_461/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:20:54.425731209 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_461/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:20:54.429731228 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -143,14 +143,6 @@\n       return super.getLeastSupertype(that);\n     }\n     RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n-    for (String property : properties.keySet()) {\n-      if (that.toMaybeRecordType().hasProperty(property) &&\n-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n-              getPropertyType(property))) {\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n-      }\n-    }\n     return builder.build();\n   }\n   JSType getGreatestSubtypeHelper(JSType that) {\n@@ -225,19 +217,6 @@\n       return true;\n     }\n \n-    // Top of the record types is the empty record, or OBJECT_TYPE.\n-    if (registry.getNativeObjectType(\n-            JSTypeNative.OBJECT_TYPE).isSubtype(that)) {\n-      return true;\n-    }\n-\n-    // A type is a subtype of a record type if it itself is a record\n-    // type and it has at least the same members as the parent record type\n-    // with the same types.\n-    if (!that.isRecordType()) {\n-      return false;\n-    }\n-\n     return RecordType.isSubtype(this, that.toMaybeRecordType());\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 379, 
          "faulty": "sb.append(\": \");", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 146, 
          "faulty": "for (String property : properties.keySet()) {\n  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n    builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n  }\n}", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 165, 
          "faulty": "if (thatRecord.hasProperty(property) && !thatRecord.getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n  return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 164, 
          "faulty": "for (String property : properties.keySet()) {\n  if (thatRecord.hasProperty(property) && !thatRecord.getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n    return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n  }\n  builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_899/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:23:16.906369188 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_899/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:23:16.906369188 -0500\n@@ -376,7 +376,6 @@\n         }\n \n         sb.append(property);\n-        sb.append(\": \");\n         sb.append(getPropertyType(property).toString());\n \n         ++i;\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_899/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:23:16.906369188 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -143,14 +143,6 @@\n       return super.getLeastSupertype(that);\n     }\n     RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n-    for (String property : properties.keySet()) {\n-      if (that.toMaybeRecordType().hasProperty(property) &&\n-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n-              getPropertyType(property))) {\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n-      }\n-    }\n     return builder.build();\n   }\n   JSType getGreatestSubtypeHelper(JSType that) {\n@@ -158,20 +150,6 @@\n       RecordType thatRecord = that.toMaybeRecordType();\n       RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n \n-      // The greatest subtype consists of those *unique* properties of both\n-      // record types. If any property conflicts, then the NO_TYPE type\n-      // is returned.\n-      for (String property : properties.keySet()) {\n-        if (thatRecord.hasProperty(property) &&\n-            !thatRecord.getPropertyType(property).isEquivalentTo(\n-                getPropertyType(property))) {\n-          return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n-        }\n-\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n-      }\n-\n       for (String property : thatRecord.properties.keySet()) {\n         if (!hasProperty(property)) {\n           builder.addProperty(property, thatRecord.getPropertyType(property),\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 379, 
          "faulty": "sb.append(\": \");", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 237, 
          "faulty": "if (!that.isRecordType()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_487/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:21:02.481767805 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_487/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:21:02.481767805 -0500\n@@ -376,7 +376,6 @@\n         }\n \n         sb.append(property);\n-        sb.append(\": \");\n         sb.append(getPropertyType(property).toString());\n \n         ++i;\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_487/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:21:02.485767823 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -231,13 +231,6 @@\n       return true;\n     }\n \n-    // A type is a subtype of a record type if it itself is a record\n-    // type and it has at least the same members as the parent record type\n-    // with the same types.\n-    if (!that.isRecordType()) {\n-      return false;\n-    }\n-\n     return RecordType.isSubtype(this, that.toMaybeRecordType());\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 165, 
          "faulty": "if (thatRecord.hasProperty(property) && !thatRecord.getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n  return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 165, 
          "faulty": "if (thatRecord.hasProperty(property) && !thatRecord.getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n  return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 260, 
          "faulty": "return p.getNode();", 
          "type": "Delete", 
          "seed": "case 3:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_656/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:21:57.058013899 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_656/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:21:57.062013917 -0500\n@@ -257,7 +257,6 @@\n   public Node getPropertyNode(String propertyName) {\n     Property p = properties.get(propertyName);\n     if (p != null) {\n-      return p.getNode();\n     }\n     ObjectType implicitPrototype = getImplicitPrototype();\n     if (implicitPrototype != null) {\n@@ -380,10 +379,6 @@\n         sb.append(getPropertyType(property).toString());\n \n         ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n-        }\n       }\n \n       sb.append(\"}\");\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_656/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:21:57.062013917 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -162,12 +162,6 @@\n       // record types. If any property conflicts, then the NO_TYPE type\n       // is returned.\n       for (String property : properties.keySet()) {\n-        if (thatRecord.hasProperty(property) &&\n-            !thatRecord.getPropertyType(property).isEquivalentTo(\n-                getPropertyType(property))) {\n-          return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n-        }\n-\n         builder.addProperty(property, getPropertyType(property),\n             getPropertyNode(property));\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 146, 
          "faulty": "for (String property : properties.keySet()) {\n  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n    builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n  }\n}", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 150, 
          "faulty": "builder.addProperty(property,getPropertyType(property),getPropertyNode(property));", 
          "type": "Replace", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 150, 
          "faulty": "builder.addProperty(property,getPropertyType(property),getPropertyNode(property));", 
          "type": "InsertBefore", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 150, 
          "faulty": "builder.addProperty(property,getPropertyType(property),getPropertyNode(property));", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_498/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:21:05.841783046 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_498/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:21:05.841783046 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -143,14 +143,6 @@\n       return super.getLeastSupertype(that);\n     }\n     RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n-    for (String property : properties.keySet()) {\n-      if (that.toMaybeRecordType().hasProperty(property) &&\n-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n-              getPropertyType(property))) {\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n-      }\n-    }\n     return builder.build();\n   }\n   JSType getGreatestSubtypeHelper(JSType that) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 379, 
          "faulty": "sb.append(\": \");", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 146, 
          "faulty": "for (String property : properties.keySet()) {\n  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n    builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n  }\n}", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 177, 
          "faulty": "builder.addProperty(property,thatRecord.getPropertyType(property),thatRecord.getPropertyNode(property));", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 375, 
          "faulty": "sb.append(\", \");", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_942/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:23:31.002431425 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_942/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:23:31.006431443 -0500\n@@ -372,18 +372,12 @@\n       int i = 0;\n       for (String property : propertyNames) {\n         if (i > 0) {\n-          sb.append(\", \");\n         }\n \n         sb.append(property);\n-        sb.append(\": \");\n         sb.append(getPropertyType(property).toString());\n \n         ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n-        }\n       }\n \n       sb.append(\"}\");\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_942/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:23:31.006431443 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -143,14 +143,6 @@\n       return super.getLeastSupertype(that);\n     }\n     RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n-    for (String property : properties.keySet()) {\n-      if (that.toMaybeRecordType().hasProperty(property) &&\n-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n-              getPropertyType(property))) {\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n-      }\n-    }\n     return builder.build();\n   }\n   JSType getGreatestSubtypeHelper(JSType that) {\n@@ -174,8 +166,6 @@\n \n       for (String property : thatRecord.properties.keySet()) {\n         if (!hasProperty(property)) {\n-          builder.addProperty(property, thatRecord.getPropertyType(property),\n-              thatRecord.getPropertyNode(property));\n         }\n       }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 165, 
          "faulty": "if (thatRecord.hasProperty(property) && !thatRecord.getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n  return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_620/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:21:44.849959108 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_620/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:21:44.849959108 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -162,12 +162,6 @@\n       // record types. If any property conflicts, then the NO_TYPE type\n       // is returned.\n       for (String property : properties.keySet()) {\n-        if (thatRecord.hasProperty(property) &&\n-            !thatRecord.getPropertyType(property).isEquivalentTo(\n-                getPropertyType(property))) {\n-          return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n-        }\n-\n         builder.addProperty(property, getPropertyType(property),\n             getPropertyNode(property));\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 379, 
          "faulty": "sb.append(\": \");", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 146, 
          "faulty": "for (String property : properties.keySet()) {\n  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n    builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n  }\n}", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 165, 
          "faulty": "if (thatRecord.hasProperty(property) && !thatRecord.getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n  return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 260, 
          "faulty": "return p.getNode();", 
          "type": "Delete", 
          "seed": "case 3:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_731/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:22:20.962120796 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_731/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:22:20.966120814 -0500\n@@ -257,7 +257,6 @@\n   public Node getPropertyNode(String propertyName) {\n     Property p = properties.get(propertyName);\n     if (p != null) {\n-      return p.getNode();\n     }\n     ObjectType implicitPrototype = getImplicitPrototype();\n     if (implicitPrototype != null) {\n@@ -376,14 +375,9 @@\n         }\n \n         sb.append(property);\n-        sb.append(\": \");\n         sb.append(getPropertyType(property).toString());\n \n         ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n-        }\n       }\n \n       sb.append(\"}\");\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_731/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:22:20.966120814 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -143,14 +143,6 @@\n       return super.getLeastSupertype(that);\n     }\n     RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n-    for (String property : properties.keySet()) {\n-      if (that.toMaybeRecordType().hasProperty(property) &&\n-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n-              getPropertyType(property))) {\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n-      }\n-    }\n     return builder.build();\n   }\n   JSType getGreatestSubtypeHelper(JSType that) {\n@@ -162,12 +154,6 @@\n       // record types. If any property conflicts, then the NO_TYPE type\n       // is returned.\n       for (String property : properties.keySet()) {\n-        if (thatRecord.hasProperty(property) &&\n-            !thatRecord.getPropertyType(property).isEquivalentTo(\n-                getPropertyType(property))) {\n-          return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n-        }\n-\n         builder.addProperty(property, getPropertyType(property),\n             getPropertyNode(property));\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 0:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_402/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:20:34.465640208 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_402/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:20:34.465640208 -0500\n@@ -380,10 +380,6 @@\n         sb.append(getPropertyType(property).toString());\n \n         ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n-        }\n       }\n \n       sb.append(\"}\");\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_402/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:20:34.465640208 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 379, 
          "faulty": "sb.append(\": \");", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 177, 
          "faulty": "builder.addProperty(property,thatRecord.getPropertyType(property),thatRecord.getPropertyNode(property));", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 458, 
          "faulty": "return RecordType.isSubtype(this,that.toMaybeRecordType());", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 182, 
          "faulty": "return builder.build();", 
          "type": "Delete", 
          "seed": "case 3:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 380, 
          "faulty": "sb.append(getPropertyType(property).toString());", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 171, 
          "faulty": "builder.addProperty(property,getPropertyType(property),getPropertyNode(property));", 
          "type": "Delete", 
          "seed": "case 0:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1035/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:23:58.678553265 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1035/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:23:58.678553265 -0500\n@@ -376,14 +376,7 @@\n         }\n \n         sb.append(property);\n-        sb.append(\": \");\n-        sb.append(getPropertyType(property).toString());\n-\n         ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n-        }\n       }\n \n       sb.append(\"}\");\n@@ -455,7 +448,6 @@\n \n     // record types\n     if (that.isRecordType()) {\n-      return RecordType.isSubtype(this, that.toMaybeRecordType());\n     }\n \n     // Interfaces\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1035/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:23:58.682553281 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -167,19 +167,12 @@\n                 getPropertyType(property))) {\n           return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n         }\n-\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n       }\n \n       for (String property : thatRecord.properties.keySet()) {\n         if (!hasProperty(property)) {\n-          builder.addProperty(property, thatRecord.getPropertyType(property),\n-              thatRecord.getPropertyNode(property));\n         }\n       }\n-\n-      return builder.build();\n     }\n \n     JSType greatestSubtype = registry.getNativeType(\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 237, 
          "faulty": "if (!that.isRecordType()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_271/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:19:47.989426300 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_271/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:19:47.993426318 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -231,13 +231,6 @@\n       return true;\n     }\n \n-    // A type is a subtype of a record type if it itself is a record\n-    // type and it has at least the same members as the parent record type\n-    // with the same types.\n-    if (!that.isRecordType()) {\n-      return false;\n-    }\n-\n     return RecordType.isSubtype(this, that.toMaybeRecordType());\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 458, 
          "faulty": "return RecordType.isSubtype(this,that.toMaybeRecordType());", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1170/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:24:42.546745514 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1170/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:24:42.546745514 -0500\n@@ -455,7 +455,6 @@\n \n     // record types\n     if (that.isRecordType()) {\n-      return RecordType.isSubtype(this, that.toMaybeRecordType());\n     }\n \n     // Interfaces\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1170/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:24:42.546745514 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 150, 
          "faulty": "builder.addProperty(property,getPropertyType(property),getPropertyNode(property));", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 171, 
          "faulty": "builder.addProperty(property,getPropertyType(property),getPropertyNode(property));", 
          "type": "Delete", 
          "seed": "return FALSE;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 177, 
          "faulty": "builder.addProperty(property,thatRecord.getPropertyType(property),thatRecord.getPropertyNode(property));", 
          "type": "Replace", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 176, 
          "faulty": "if (!hasProperty(property)) {\n  builder.addProperty(property,thatRecord.getPropertyType(property),thatRecord.getPropertyNode(property));\n}", 
          "type": "Delete", 
          "seed": "return FALSE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1172/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:24:42.958747315 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1172/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:24:42.962747333 -0500\n@@ -380,10 +380,6 @@\n         sb.append(getPropertyType(property).toString());\n \n         ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n-        }\n       }\n \n       sb.append(\"}\");\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1172/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:24:42.962747333 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -147,8 +147,6 @@\n       if (that.toMaybeRecordType().hasProperty(property) &&\n           that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n               getPropertyType(property))) {\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n       }\n     }\n     return builder.build();\n@@ -167,16 +165,9 @@\n                 getPropertyType(property))) {\n           return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n         }\n-\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n       }\n \n       for (String property : thatRecord.properties.keySet()) {\n-        if (!hasProperty(property)) {\n-          builder.addProperty(property, thatRecord.getPropertyType(property),\n-              thatRecord.getPropertyNode(property));\n-        }\n       }\n \n       return builder.build();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 237, 
          "faulty": "if (!that.isRecordType()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 260, 
          "faulty": "return p.getNode();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 103, 
          "faulty": "if (otherRecord == this) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return FALSE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_480/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:21:00.193757419 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_480/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:21:00.197757437 -0500\n@@ -257,7 +257,6 @@\n   public Node getPropertyNode(String propertyName) {\n     Property p = properties.get(propertyName);\n     if (p != null) {\n-      return p.getNode();\n     }\n     ObjectType implicitPrototype = getImplicitPrototype();\n     if (implicitPrototype != null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_480/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:21:00.197757437 -0500\n@@ -100,14 +100,10 @@\n \n     // Compare properties.\n     RecordType otherRecord = other.toMaybeRecordType();\n-    if (otherRecord == this) {\n-      return true;\n-    }\n-\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -231,13 +227,6 @@\n       return true;\n     }\n \n-    // A type is a subtype of a record type if it itself is a record\n-    // type and it has at least the same members as the parent record type\n-    // with the same types.\n-    if (!that.isRecordType()) {\n-      return false;\n-    }\n-\n     return RecordType.isSubtype(this, that.toMaybeRecordType());\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 379, 
          "faulty": "sb.append(\": \");", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 165, 
          "faulty": "if (thatRecord.hasProperty(property) && !thatRecord.getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n  return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 177, 
          "faulty": "builder.addProperty(property,thatRecord.getPropertyType(property),thatRecord.getPropertyNode(property));", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 458, 
          "faulty": "return RecordType.isSubtype(this,that.toMaybeRecordType());", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 165, 
          "faulty": "if (thatRecord.hasProperty(property) && !thatRecord.getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n  return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_766/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:22:31.978169895 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_766/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:22:31.978169895 -0500\n@@ -376,14 +376,9 @@\n         }\n \n         sb.append(property);\n-        sb.append(\": \");\n         sb.append(getPropertyType(property).toString());\n \n         ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n-        }\n       }\n \n       sb.append(\"}\");\n@@ -455,7 +450,6 @@\n \n     // record types\n     if (that.isRecordType()) {\n-      return RecordType.isSubtype(this, that.toMaybeRecordType());\n     }\n \n     // Interfaces\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_766/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:22:31.978169895 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -162,20 +162,12 @@\n       // record types. If any property conflicts, then the NO_TYPE type\n       // is returned.\n       for (String property : properties.keySet()) {\n-        if (thatRecord.hasProperty(property) &&\n-            !thatRecord.getPropertyType(property).isEquivalentTo(\n-                getPropertyType(property))) {\n-          return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n-        }\n-\n         builder.addProperty(property, getPropertyType(property),\n             getPropertyNode(property));\n       }\n \n       for (String property : thatRecord.properties.keySet()) {\n         if (!hasProperty(property)) {\n-          builder.addProperty(property, thatRecord.getPropertyType(property),\n-              thatRecord.getPropertyNode(property));\n         }\n       }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 379, 
          "faulty": "sb.append(\": \");", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 146, 
          "faulty": "for (String property : properties.keySet()) {\n  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n    builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n  }\n}", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 378, 
          "faulty": "sb.append(property);", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 146, 
          "faulty": "for (String property : properties.keySet()) {\n  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n    builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n  }\n}", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 146, 
          "faulty": "for (String property : properties.keySet()) {\n  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n    builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n  }\n}", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 177, 
          "faulty": "builder.addProperty(property,thatRecord.getPropertyType(property),thatRecord.getPropertyNode(property));", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1203/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:24:53.870794985 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1203/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:24:53.874795002 -0500\n@@ -375,15 +375,9 @@\n           sb.append(\", \");\n         }\n \n-        sb.append(property);\n-        sb.append(\": \");\n         sb.append(getPropertyType(property).toString());\n \n         ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n-        }\n       }\n \n       sb.append(\"}\");\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1203/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:24:53.874795002 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -143,14 +143,6 @@\n       return super.getLeastSupertype(that);\n     }\n     RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n-    for (String property : properties.keySet()) {\n-      if (that.toMaybeRecordType().hasProperty(property) &&\n-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n-              getPropertyType(property))) {\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n-      }\n-    }\n     return builder.build();\n   }\n   JSType getGreatestSubtypeHelper(JSType that) {\n@@ -174,8 +166,6 @@\n \n       for (String property : thatRecord.properties.keySet()) {\n         if (!hasProperty(property)) {\n-          builder.addProperty(property, thatRecord.getPropertyType(property),\n-              thatRecord.getPropertyNode(property));\n         }\n       }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 379, 
          "faulty": "sb.append(\": \");", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 146, 
          "faulty": "for (String property : properties.keySet()) {\n  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n    builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n  }\n}", 
          "type": "Delete", 
          "seed": "case 2:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_416/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:20:39.045661133 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_416/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:20:39.045661133 -0500\n@@ -376,7 +376,6 @@\n         }\n \n         sb.append(property);\n-        sb.append(\": \");\n         sb.append(getPropertyType(property).toString());\n \n         ++i;\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_416/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:20:39.049661150 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -143,14 +143,6 @@\n       return super.getLeastSupertype(that);\n     }\n     RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n-    for (String property : properties.keySet()) {\n-      if (that.toMaybeRecordType().hasProperty(property) &&\n-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n-              getPropertyType(property))) {\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n-      }\n-    }\n     return builder.build();\n   }\n   JSType getGreatestSubtypeHelper(JSType that) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 379, 
          "faulty": "sb.append(\": \");", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 176, 
          "faulty": "if (!hasProperty(property)) {\n  builder.addProperty(property,thatRecord.getPropertyType(property),thatRecord.getPropertyNode(property));\n}", 
          "type": "Delete", 
          "seed": "return FALSE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1094/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:24:17.558636129 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1094/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:24:17.558636129 -0500\n@@ -376,14 +376,9 @@\n         }\n \n         sb.append(property);\n-        sb.append(\": \");\n         sb.append(getPropertyType(property).toString());\n \n         ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n-        }\n       }\n \n       sb.append(\"}\");\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1094/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:24:17.562636146 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -173,10 +173,6 @@\n       }\n \n       for (String property : thatRecord.properties.keySet()) {\n-        if (!hasProperty(property)) {\n-          builder.addProperty(property, thatRecord.getPropertyType(property),\n-              thatRecord.getPropertyNode(property));\n-        }\n       }\n \n       return builder.build();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 146, 
          "faulty": "for (String property : properties.keySet()) {\n  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n    builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n  }\n}", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 378, 
          "faulty": "sb.append(property);", 
          "type": "Delete", 
          "seed": "case 1:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_865/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:23:05.714319678 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_865/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:23:05.714319678 -0500\n@@ -375,7 +375,6 @@\n           sb.append(\", \");\n         }\n \n-        sb.append(property);\n         sb.append(\": \");\n         sb.append(getPropertyType(property).toString());\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_865/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:23:05.718319696 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -143,14 +143,6 @@\n       return super.getLeastSupertype(that);\n     }\n     RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n-    for (String property : properties.keySet()) {\n-      if (that.toMaybeRecordType().hasProperty(property) &&\n-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n-              getPropertyType(property))) {\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n-      }\n-    }\n     return builder.build();\n   }\n   JSType getGreatestSubtypeHelper(JSType that) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 165, 
          "faulty": "if (thatRecord.hasProperty(property) && !thatRecord.getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n  return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 177, 
          "faulty": "builder.addProperty(property,thatRecord.getPropertyType(property),thatRecord.getPropertyNode(property));", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_593/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:21:36.765922748 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_593/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:21:36.769922766 -0500\n@@ -380,10 +380,6 @@\n         sb.append(getPropertyType(property).toString());\n \n         ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n-        }\n       }\n \n       sb.append(\"}\");\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_593/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:21:36.769922766 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -162,20 +162,12 @@\n       // record types. If any property conflicts, then the NO_TYPE type\n       // is returned.\n       for (String property : properties.keySet()) {\n-        if (thatRecord.hasProperty(property) &&\n-            !thatRecord.getPropertyType(property).isEquivalentTo(\n-                getPropertyType(property))) {\n-          return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n-        }\n-\n         builder.addProperty(property, getPropertyType(property),\n             getPropertyNode(property));\n       }\n \n       for (String property : thatRecord.properties.keySet()) {\n         if (!hasProperty(property)) {\n-          builder.addProperty(property, thatRecord.getPropertyType(property),\n-              thatRecord.getPropertyNode(property));\n         }\n       }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 147, 
          "faulty": "if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n  builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n}", 
          "type": "Delete", 
          "seed": "return true;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_263/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:19:45.381414205 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_263/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:19:45.381414205 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -144,12 +144,6 @@\n     }\n     RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n     for (String property : properties.keySet()) {\n-      if (that.toMaybeRecordType().hasProperty(property) &&\n-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n-              getPropertyType(property))) {\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n-      }\n     }\n     return builder.build();\n   }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 165, 
          "faulty": "if (thatRecord.hasProperty(property) && !thatRecord.getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n  return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_408/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:20:36.357648855 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_408/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:20:36.357648855 -0500\n@@ -380,10 +380,6 @@\n         sb.append(getPropertyType(property).toString());\n \n         ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n-        }\n       }\n \n       sb.append(\"}\");\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_408/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:20:36.357648855 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -162,12 +162,6 @@\n       // record types. If any property conflicts, then the NO_TYPE type\n       // is returned.\n       for (String property : properties.keySet()) {\n-        if (thatRecord.hasProperty(property) &&\n-            !thatRecord.getPropertyType(property).isEquivalentTo(\n-                getPropertyType(property))) {\n-          return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n-        }\n-\n         builder.addProperty(property, getPropertyType(property),\n             getPropertyNode(property));\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 146, 
          "faulty": "for (String property : properties.keySet()) {\n  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n    builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n  }\n}", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 177, 
          "faulty": "builder.addProperty(property,thatRecord.getPropertyType(property),thatRecord.getPropertyNode(property));", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 458, 
          "faulty": "return RecordType.isSubtype(this,that.toMaybeRecordType());", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 177, 
          "faulty": "builder.addProperty(property,thatRecord.getPropertyType(property),thatRecord.getPropertyNode(property));", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 103, 
          "faulty": "if (otherRecord == this) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 0:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1084/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:24:14.262621677 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1084/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:24:14.262621677 -0500\n@@ -380,10 +380,6 @@\n         sb.append(getPropertyType(property).toString());\n \n         ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n-        }\n       }\n \n       sb.append(\"}\");\n@@ -455,7 +451,6 @@\n \n     // record types\n     if (that.isRecordType()) {\n-      return RecordType.isSubtype(this, that.toMaybeRecordType());\n     }\n \n     // Interfaces\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1084/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:24:14.262621677 -0500\n@@ -100,14 +100,10 @@\n \n     // Compare properties.\n     RecordType otherRecord = other.toMaybeRecordType();\n-    if (otherRecord == this) {\n-      return true;\n-    }\n-\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -143,14 +139,6 @@\n       return super.getLeastSupertype(that);\n     }\n     RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n-    for (String property : properties.keySet()) {\n-      if (that.toMaybeRecordType().hasProperty(property) &&\n-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n-              getPropertyType(property))) {\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n-      }\n-    }\n     return builder.build();\n   }\n   JSType getGreatestSubtypeHelper(JSType that) {\n@@ -174,8 +162,6 @@\n \n       for (String property : thatRecord.properties.keySet()) {\n         if (!hasProperty(property)) {\n-          builder.addProperty(property, thatRecord.getPropertyType(property),\n-              thatRecord.getPropertyNode(property));\n         }\n       }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 177, 
          "faulty": "builder.addProperty(property,thatRecord.getPropertyType(property),thatRecord.getPropertyNode(property));", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 458, 
          "faulty": "return RecordType.isSubtype(this,that.toMaybeRecordType());", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 182, 
          "faulty": "return builder.build();", 
          "type": "Delete", 
          "seed": "case 3:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 380, 
          "faulty": "sb.append(getPropertyType(property).toString());", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 171, 
          "faulty": "builder.addProperty(property,getPropertyType(property),getPropertyNode(property));", 
          "type": "Delete", 
          "seed": "case 0:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_999/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:23:48.286507569 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_999/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:23:48.286507569 -0500\n@@ -377,13 +377,7 @@\n \n         sb.append(property);\n         sb.append(\": \");\n-        sb.append(getPropertyType(property).toString());\n-\n         ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n-        }\n       }\n \n       sb.append(\"}\");\n@@ -455,7 +449,6 @@\n \n     // record types\n     if (that.isRecordType()) {\n-      return RecordType.isSubtype(this, that.toMaybeRecordType());\n     }\n \n     // Interfaces\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_999/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:23:48.290507587 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -167,19 +167,12 @@\n                 getPropertyType(property))) {\n           return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n         }\n-\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n       }\n \n       for (String property : thatRecord.properties.keySet()) {\n         if (!hasProperty(property)) {\n-          builder.addProperty(property, thatRecord.getPropertyType(property),\n-              thatRecord.getPropertyNode(property));\n         }\n       }\n-\n-      return builder.build();\n     }\n \n     JSType greatestSubtype = registry.getNativeType(\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 379, 
          "faulty": "sb.append(\": \");", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 165, 
          "faulty": "if (thatRecord.hasProperty(property) && !thatRecord.getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n  return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_564/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:21:26.693877357 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_564/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:21:26.693877357 -0500\n@@ -376,7 +376,6 @@\n         }\n \n         sb.append(property);\n-        sb.append(\": \");\n         sb.append(getPropertyType(property).toString());\n \n         ++i;\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_564/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:21:26.697877375 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -162,12 +162,6 @@\n       // record types. If any property conflicts, then the NO_TYPE type\n       // is returned.\n       for (String property : properties.keySet()) {\n-        if (thatRecord.hasProperty(property) &&\n-            !thatRecord.getPropertyType(property).isEquivalentTo(\n-                getPropertyType(property))) {\n-          return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n-        }\n-\n         builder.addProperty(property, getPropertyType(property),\n             getPropertyNode(property));\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 263, 
          "faulty": "for (String property : typeB.properties.keySet()) {\n  if (!typeA.hasProperty(property)) {\n    return false;\n  }\n  JSType propA=typeA.getPropertyType(property);\n  JSType propB=typeB.getPropertyType(property);\n  if (!propA.isUnknownType() && !propB.isUnknownType()) {\n    if (typeA.isPropertyTypeDeclared(property)) {\n      if (!propA.isEquivalentTo(propB)) {\n        return false;\n      }\n    }\n else {\n      if (!propA.isSubtype(propB)) {\n        return false;\n      }\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "case 2:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_520/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:21:11.769809905 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_520/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:21:11.773809923 -0500\n@@ -380,10 +380,6 @@\n         sb.append(getPropertyType(property).toString());\n \n         ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n-        }\n       }\n \n       sb.append(\"}\");\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_520/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:21:11.773809923 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -243,43 +243,6 @@\n \n   /** Determines if typeA is a subtype of typeB */\n   static boolean isSubtype(ObjectType typeA, RecordType typeB) {\n-    // typeA is a subtype of record type typeB iff:\n-    // 1) typeA has all the properties declared in typeB.\n-    // 2) And for each property of typeB,\n-    //    2a) if the property of typeA is declared, it must be equal\n-    //        to the type of the property of typeB,\n-    //    2b) otherwise, it must be a subtype of the property of typeB.\n-    //\n-    // To figure out why this is true, consider the following pseudo-code:\n-    // /** @type {{a: (Object,null)}} */ var x;\n-    // /** @type {{a: !Object}} */ var y;\n-    // var z = {a: {}};\n-    // x.a = null;\n-    //\n-    // y cannot be assigned to x, because line 4 would violate y's declared\n-    // properties. But z can be assigned to x. Even though z and y are the\n-    // same type, the properties of z are inferred--and so an assignment\n-    // to the property of z would not violate any restrictions on it.\n-    for (String property : typeB.properties.keySet()) {\n-      if (!typeA.hasProperty(property)) {\n-        return false;\n-      }\n-\n-      JSType propA = typeA.getPropertyType(property);\n-      JSType propB = typeB.getPropertyType(property);\n-      if (!propA.isUnknownType() && !propB.isUnknownType()) {\n-        if (typeA.isPropertyTypeDeclared(property)) {\n-          if (!propA.isEquivalentTo(propB)) {\n-            return false;\n-          }\n-        } else {\n-          if (!propA.isSubtype(propB)) {\n-            return false;\n-          }\n-        }\n-      }\n-    }\n-\n     return true;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 379, 
          "faulty": "sb.append(\": \");", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 380, 
          "faulty": "sb.append(getPropertyType(property).toString());", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_379/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:20:27.269607279 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_379/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:20:27.269607279 -0500\n@@ -376,9 +376,6 @@\n         }\n \n         sb.append(property);\n-        sb.append(\": \");\n-        sb.append(getPropertyType(property).toString());\n-\n         ++i;\n         if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n           sb.append(\", ...\");\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_379/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:20:27.273607299 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 379, 
          "faulty": "sb.append(\": \");", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 146, 
          "faulty": "for (String property : properties.keySet()) {\n  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n    builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n  }\n}", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 165, 
          "faulty": "if (thatRecord.hasProperty(property) && !thatRecord.getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n  return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 165, 
          "faulty": "if (thatRecord.hasProperty(property) && !thatRecord.getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n  return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 177, 
          "faulty": "builder.addProperty(property,thatRecord.getPropertyType(property),thatRecord.getPropertyNode(property));", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 375, 
          "faulty": "sb.append(\", \");", 
          "type": "Delete", 
          "seed": "case 2:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_743/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:22:24.630137155 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_743/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:22:24.630137155 -0500\n@@ -372,18 +372,12 @@\n       int i = 0;\n       for (String property : propertyNames) {\n         if (i > 0) {\n-          sb.append(\", \");\n         }\n \n         sb.append(property);\n-        sb.append(\": \");\n         sb.append(getPropertyType(property).toString());\n \n         ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n-        }\n       }\n \n       sb.append(\"}\");\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_743/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:22:24.630137155 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -143,14 +143,6 @@\n       return super.getLeastSupertype(that);\n     }\n     RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n-    for (String property : properties.keySet()) {\n-      if (that.toMaybeRecordType().hasProperty(property) &&\n-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n-              getPropertyType(property))) {\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n-      }\n-    }\n     return builder.build();\n   }\n   JSType getGreatestSubtypeHelper(JSType that) {\n@@ -162,20 +154,12 @@\n       // record types. If any property conflicts, then the NO_TYPE type\n       // is returned.\n       for (String property : properties.keySet()) {\n-        if (thatRecord.hasProperty(property) &&\n-            !thatRecord.getPropertyType(property).isEquivalentTo(\n-                getPropertyType(property))) {\n-          return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n-        }\n-\n         builder.addProperty(property, getPropertyType(property),\n             getPropertyNode(property));\n       }\n \n       for (String property : thatRecord.properties.keySet()) {\n         if (!hasProperty(property)) {\n-          builder.addProperty(property, thatRecord.getPropertyType(property),\n-              thatRecord.getPropertyNode(property));\n         }\n       }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 379, 
          "faulty": "sb.append(\": \");", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 165, 
          "faulty": "if (thatRecord.hasProperty(property) && !thatRecord.getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n  return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 177, 
          "faulty": "builder.addProperty(property,thatRecord.getPropertyType(property),thatRecord.getPropertyNode(property));", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 458, 
          "faulty": "return RecordType.isSubtype(this,that.toMaybeRecordType());", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 165, 
          "faulty": "if (thatRecord.hasProperty(property) && !thatRecord.getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n  return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 229, 
          "faulty": "if (registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE).isSubtype(that)) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 3:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 382, 
          "faulty": "++i;", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_923/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:23:25.146405586 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_923/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:23:25.150405603 -0500\n@@ -376,14 +376,7 @@\n         }\n \n         sb.append(property);\n-        sb.append(\": \");\n         sb.append(getPropertyType(property).toString());\n-\n-        ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n-        }\n       }\n \n       sb.append(\"}\");\n@@ -455,7 +448,6 @@\n \n     // record types\n     if (that.isRecordType()) {\n-      return RecordType.isSubtype(this, that.toMaybeRecordType());\n     }\n \n     // Interfaces\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_923/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:23:25.150405603 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -162,20 +162,12 @@\n       // record types. If any property conflicts, then the NO_TYPE type\n       // is returned.\n       for (String property : properties.keySet()) {\n-        if (thatRecord.hasProperty(property) &&\n-            !thatRecord.getPropertyType(property).isEquivalentTo(\n-                getPropertyType(property))) {\n-          return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n-        }\n-\n         builder.addProperty(property, getPropertyType(property),\n             getPropertyNode(property));\n       }\n \n       for (String property : thatRecord.properties.keySet()) {\n         if (!hasProperty(property)) {\n-          builder.addProperty(property, thatRecord.getPropertyType(property),\n-              thatRecord.getPropertyNode(property));\n         }\n       }\n \n@@ -225,12 +217,6 @@\n       return true;\n     }\n \n-    // Top of the record types is the empty record, or OBJECT_TYPE.\n-    if (registry.getNativeObjectType(\n-            JSTypeNative.OBJECT_TYPE).isSubtype(that)) {\n-      return true;\n-    }\n-\n     // A type is a subtype of a record type if it itself is a record\n     // type and it has at least the same members as the parent record type\n     // with the same types.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 146, 
          "faulty": "for (String property : properties.keySet()) {\n  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n    builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n  }\n}", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 165, 
          "faulty": "if (thatRecord.hasProperty(property) && !thatRecord.getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n  return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_500/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:21:06.265784968 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_500/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:21:06.269784986 -0500\n@@ -380,10 +380,6 @@\n         sb.append(getPropertyType(property).toString());\n \n         ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n-        }\n       }\n \n       sb.append(\"}\");\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_500/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:21:06.269784986 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -143,14 +143,6 @@\n       return super.getLeastSupertype(that);\n     }\n     RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n-    for (String property : properties.keySet()) {\n-      if (that.toMaybeRecordType().hasProperty(property) &&\n-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n-              getPropertyType(property))) {\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n-      }\n-    }\n     return builder.build();\n   }\n   JSType getGreatestSubtypeHelper(JSType that) {\n@@ -162,12 +154,6 @@\n       // record types. If any property conflicts, then the NO_TYPE type\n       // is returned.\n       for (String property : properties.keySet()) {\n-        if (thatRecord.hasProperty(property) &&\n-            !thatRecord.getPropertyType(property).isEquivalentTo(\n-                getPropertyType(property))) {\n-          return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n-        }\n-\n         builder.addProperty(property, getPropertyType(property),\n             getPropertyNode(property));\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 177, 
          "faulty": "builder.addProperty(property,thatRecord.getPropertyType(property),thatRecord.getPropertyNode(property));", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 375, 
          "faulty": "sb.append(\", \");", 
          "type": "Delete", 
          "seed": "case 2:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_769/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:22:32.742173297 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_769/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:22:32.742173297 -0500\n@@ -372,7 +372,6 @@\n       int i = 0;\n       for (String property : propertyNames) {\n         if (i > 0) {\n-          sb.append(\", \");\n         }\n \n         sb.append(property);\n@@ -380,10 +379,6 @@\n         sb.append(getPropertyType(property).toString());\n \n         ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n-        }\n       }\n \n       sb.append(\"}\");\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_769/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:22:32.742173297 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -174,8 +174,6 @@\n \n       for (String property : thatRecord.properties.keySet()) {\n         if (!hasProperty(property)) {\n-          builder.addProperty(property, thatRecord.getPropertyType(property),\n-              thatRecord.getPropertyNode(property));\n         }\n       }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 147, 
          "faulty": "if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n  builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 146, 
          "faulty": "for (String property : properties.keySet()) {\n  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n    builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n  }\n}", 
          "type": "Delete", 
          "seed": "return FALSE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_504/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:21:07.353789900 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_504/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:21:07.357789918 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -143,14 +143,6 @@\n       return super.getLeastSupertype(that);\n     }\n     RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n-    for (String property : properties.keySet()) {\n-      if (that.toMaybeRecordType().hasProperty(property) &&\n-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n-              getPropertyType(property))) {\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n-      }\n-    }\n     return builder.build();\n   }\n   JSType getGreatestSubtypeHelper(JSType that) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 379, 
          "faulty": "sb.append(\": \");", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 146, 
          "faulty": "for (String property : properties.keySet()) {\n  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n    builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n  }\n}", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 165, 
          "faulty": "if (thatRecord.hasProperty(property) && !thatRecord.getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n  return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 165, 
          "faulty": "if (thatRecord.hasProperty(property) && !thatRecord.getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n  return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 177, 
          "faulty": "builder.addProperty(property,thatRecord.getPropertyType(property),thatRecord.getPropertyNode(property));", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 375, 
          "faulty": "sb.append(\", \");", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 177, 
          "faulty": "builder.addProperty(property,thatRecord.getPropertyType(property),thatRecord.getPropertyNode(property));", 
          "type": "Delete", 
          "seed": "return TRUE;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 264, 
          "faulty": "if (!typeA.hasProperty(property)) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_811/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:22:47.206237611 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_811/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:22:47.206237611 -0500\n@@ -372,18 +372,12 @@\n       int i = 0;\n       for (String property : propertyNames) {\n         if (i > 0) {\n-          sb.append(\", \");\n         }\n \n         sb.append(property);\n-        sb.append(\": \");\n         sb.append(getPropertyType(property).toString());\n \n         ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n-        }\n       }\n \n       sb.append(\"}\");\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_811/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:22:47.210237628 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -143,14 +143,6 @@\n       return super.getLeastSupertype(that);\n     }\n     RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n-    for (String property : properties.keySet()) {\n-      if (that.toMaybeRecordType().hasProperty(property) &&\n-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n-              getPropertyType(property))) {\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n-      }\n-    }\n     return builder.build();\n   }\n   JSType getGreatestSubtypeHelper(JSType that) {\n@@ -162,20 +154,12 @@\n       // record types. If any property conflicts, then the NO_TYPE type\n       // is returned.\n       for (String property : properties.keySet()) {\n-        if (thatRecord.hasProperty(property) &&\n-            !thatRecord.getPropertyType(property).isEquivalentTo(\n-                getPropertyType(property))) {\n-          return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n-        }\n-\n         builder.addProperty(property, getPropertyType(property),\n             getPropertyNode(property));\n       }\n \n       for (String property : thatRecord.properties.keySet()) {\n         if (!hasProperty(property)) {\n-          builder.addProperty(property, thatRecord.getPropertyType(property),\n-              thatRecord.getPropertyNode(property));\n         }\n       }\n \n@@ -261,10 +245,6 @@\n     // same type, the properties of z are inferred--and so an assignment\n     // to the property of z would not violate any restrictions on it.\n     for (String property : typeB.properties.keySet()) {\n-      if (!typeA.hasProperty(property)) {\n-        return false;\n-      }\n-\n       JSType propA = typeA.getPropertyType(property);\n       JSType propB = typeB.getPropertyType(property);\n       if (!propA.isUnknownType() && !propB.isUnknownType()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 146, 
          "faulty": "for (String property : properties.keySet()) {\n  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n    builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n  }\n}", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 379, 
          "faulty": "sb.append(\": \");", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 146, 
          "faulty": "for (String property : properties.keySet()) {\n  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n    builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n  }\n}", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 175, 
          "faulty": "for (String property : thatRecord.properties.keySet()) {\n  if (!hasProperty(property)) {\n    builder.addProperty(property,thatRecord.getPropertyType(property),thatRecord.getPropertyNode(property));\n  }\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_601/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:21:39.337934324 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_601/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:21:39.341934342 -0500\n@@ -376,7 +376,6 @@\n         }\n \n         sb.append(property);\n-        sb.append(\": \");\n         sb.append(getPropertyType(property).toString());\n \n         ++i;\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_601/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:21:39.341934342 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -143,14 +143,6 @@\n       return super.getLeastSupertype(that);\n     }\n     RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n-    for (String property : properties.keySet()) {\n-      if (that.toMaybeRecordType().hasProperty(property) &&\n-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n-              getPropertyType(property))) {\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n-      }\n-    }\n     return builder.build();\n   }\n   JSType getGreatestSubtypeHelper(JSType that) {\n@@ -172,13 +164,6 @@\n             getPropertyNode(property));\n       }\n \n-      for (String property : thatRecord.properties.keySet()) {\n-        if (!hasProperty(property)) {\n-          builder.addProperty(property, thatRecord.getPropertyType(property),\n-              thatRecord.getPropertyNode(property));\n-        }\n-      }\n-\n       return builder.build();\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 146, 
          "faulty": "for (String property : properties.keySet()) {\n  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n    builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n  }\n}", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 378, 
          "faulty": "sb.append(property);", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 380, 
          "faulty": "sb.append(getPropertyType(property).toString());", 
          "type": "Delete", 
          "seed": "return FALSE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1004/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:23:49.814514292 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1004/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:23:49.814514292 -0500\n@@ -375,10 +375,7 @@\n           sb.append(\", \");\n         }\n \n-        sb.append(property);\n         sb.append(\": \");\n-        sb.append(getPropertyType(property).toString());\n-\n         ++i;\n         if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n           sb.append(\", ...\");\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1004/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:23:49.814514292 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -143,14 +143,6 @@\n       return super.getLeastSupertype(that);\n     }\n     RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n-    for (String property : properties.keySet()) {\n-      if (that.toMaybeRecordType().hasProperty(property) &&\n-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n-              getPropertyType(property))) {\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n-      }\n-    }\n     return builder.build();\n   }\n   JSType getGreatestSubtypeHelper(JSType that) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 165, 
          "faulty": "if (thatRecord.hasProperty(property) && !thatRecord.getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n  return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 182, 
          "faulty": "return builder.build();", 
          "type": "Delete", 
          "seed": "return FALSE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_558/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:21:25.181870534 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_558/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:21:25.181870534 -0500\n@@ -380,10 +380,6 @@\n         sb.append(getPropertyType(property).toString());\n \n         ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n-        }\n       }\n \n       sb.append(\"}\");\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_558/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:21:25.181870534 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -162,12 +162,6 @@\n       // record types. If any property conflicts, then the NO_TYPE type\n       // is returned.\n       for (String property : properties.keySet()) {\n-        if (thatRecord.hasProperty(property) &&\n-            !thatRecord.getPropertyType(property).isEquivalentTo(\n-                getPropertyType(property))) {\n-          return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n-        }\n-\n         builder.addProperty(property, getPropertyType(property),\n             getPropertyNode(property));\n       }\n@@ -178,8 +172,6 @@\n               thatRecord.getPropertyNode(property));\n         }\n       }\n-\n-      return builder.build();\n     }\n \n     JSType greatestSubtype = registry.getNativeType(\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 177, 
          "faulty": "builder.addProperty(property,thatRecord.getPropertyType(property),thatRecord.getPropertyNode(property));", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 458, 
          "faulty": "return RecordType.isSubtype(this,that.toMaybeRecordType());", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 165, 
          "faulty": "if (thatRecord.hasProperty(property) && !thatRecord.getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n  return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 150, 
          "faulty": "builder.addProperty(property,getPropertyType(property),getPropertyNode(property));", 
          "type": "Delete", 
          "seed": "case 1:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1044/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:24:00.930563158 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1044/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:24:00.930563158 -0500\n@@ -455,7 +455,6 @@\n \n     // record types\n     if (that.isRecordType()) {\n-      return RecordType.isSubtype(this, that.toMaybeRecordType());\n     }\n \n     // Interfaces\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1044/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:24:00.934563176 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -147,8 +147,6 @@\n       if (that.toMaybeRecordType().hasProperty(property) &&\n           that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n               getPropertyType(property))) {\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n       }\n     }\n     return builder.build();\n@@ -162,20 +160,12 @@\n       // record types. If any property conflicts, then the NO_TYPE type\n       // is returned.\n       for (String property : properties.keySet()) {\n-        if (thatRecord.hasProperty(property) &&\n-            !thatRecord.getPropertyType(property).isEquivalentTo(\n-                getPropertyType(property))) {\n-          return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n-        }\n-\n         builder.addProperty(property, getPropertyType(property),\n             getPropertyNode(property));\n       }\n \n       for (String property : thatRecord.properties.keySet()) {\n         if (!hasProperty(property)) {\n-          builder.addProperty(property, thatRecord.getPropertyType(property),\n-              thatRecord.getPropertyNode(property));\n         }\n       }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 379, 
          "faulty": "sb.append(\": \");", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 458, 
          "faulty": "return RecordType.isSubtype(this,that.toMaybeRecordType());", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 165, 
          "faulty": "if (thatRecord.hasProperty(property) && !thatRecord.getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n  return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 229, 
          "faulty": "if (registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE).isSubtype(that)) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 3:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 380, 
          "faulty": "sb.append(getPropertyType(property).toString());", 
          "type": "Delete", 
          "seed": "case 2:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1058/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:24:05.790584501 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1058/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:24:05.794584519 -0500\n@@ -376,14 +376,7 @@\n         }\n \n         sb.append(property);\n-        sb.append(\": \");\n-        sb.append(getPropertyType(property).toString());\n-\n         ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n-        }\n       }\n \n       sb.append(\"}\");\n@@ -455,7 +448,6 @@\n \n     // record types\n     if (that.isRecordType()) {\n-      return RecordType.isSubtype(this, that.toMaybeRecordType());\n     }\n \n     // Interfaces\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1058/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:24:05.794584519 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -162,12 +162,6 @@\n       // record types. If any property conflicts, then the NO_TYPE type\n       // is returned.\n       for (String property : properties.keySet()) {\n-        if (thatRecord.hasProperty(property) &&\n-            !thatRecord.getPropertyType(property).isEquivalentTo(\n-                getPropertyType(property))) {\n-          return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n-        }\n-\n         builder.addProperty(property, getPropertyType(property),\n             getPropertyNode(property));\n       }\n@@ -225,12 +219,6 @@\n       return true;\n     }\n \n-    // Top of the record types is the empty record, or OBJECT_TYPE.\n-    if (registry.getNativeObjectType(\n-            JSTypeNative.OBJECT_TYPE).isSubtype(that)) {\n-      return true;\n-    }\n-\n     // A type is a subtype of a record type if it itself is a record\n     // type and it has at least the same members as the parent record type\n     // with the same types.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 146, 
          "faulty": "for (String property : properties.keySet()) {\n  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n    builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n  }\n}", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 0:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_534/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:21:16.753832458 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_534/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:21:16.753832458 -0500\n@@ -380,10 +380,6 @@\n         sb.append(getPropertyType(property).toString());\n \n         ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n-        }\n       }\n \n       sb.append(\"}\");\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_534/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:21:16.757832476 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -143,14 +143,6 @@\n       return super.getLeastSupertype(that);\n     }\n     RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n-    for (String property : properties.keySet()) {\n-      if (that.toMaybeRecordType().hasProperty(property) &&\n-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n-              getPropertyType(property))) {\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n-      }\n-    }\n     return builder.build();\n   }\n   JSType getGreatestSubtypeHelper(JSType that) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 146, 
          "faulty": "for (String property : properties.keySet()) {\n  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n    builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n  }\n}", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 150, 
          "faulty": "builder.addProperty(property,getPropertyType(property),getPropertyNode(property));", 
          "type": "Replace", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 150, 
          "faulty": "builder.addProperty(property,getPropertyType(property),getPropertyNode(property));", 
          "type": "InsertBefore", 
          "seed": "case 2:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_495/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:21:05.129779817 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_495/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:21:05.129779817 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -143,14 +143,6 @@\n       return super.getLeastSupertype(that);\n     }\n     RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n-    for (String property : properties.keySet()) {\n-      if (that.toMaybeRecordType().hasProperty(property) &&\n-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n-              getPropertyType(property))) {\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n-      }\n-    }\n     return builder.build();\n   }\n   JSType getGreatestSubtypeHelper(JSType that) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 379, 
          "faulty": "sb.append(\": \");", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 146, 
          "faulty": "for (String property : properties.keySet()) {\n  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n    builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n  }\n}", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 150, 
          "faulty": "builder.addProperty(property,getPropertyType(property),getPropertyNode(property));", 
          "type": "Replace", 
          "seed": "case 1:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_515/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:21:10.297803238 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_515/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:21:10.301803258 -0500\n@@ -376,7 +376,6 @@\n         }\n \n         sb.append(property);\n-        sb.append(\": \");\n         sb.append(getPropertyType(property).toString());\n \n         ++i;\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_515/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:21:10.301803258 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -143,14 +143,6 @@\n       return super.getLeastSupertype(that);\n     }\n     RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n-    for (String property : properties.keySet()) {\n-      if (that.toMaybeRecordType().hasProperty(property) &&\n-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n-              getPropertyType(property))) {\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n-      }\n-    }\n     return builder.build();\n   }\n   JSType getGreatestSubtypeHelper(JSType that) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 379, 
          "faulty": "sb.append(\": \");", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 177, 
          "faulty": "builder.addProperty(property,thatRecord.getPropertyType(property),thatRecord.getPropertyNode(property));", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 458, 
          "faulty": "return RecordType.isSubtype(this,that.toMaybeRecordType());", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 165, 
          "faulty": "if (thatRecord.hasProperty(property) && !thatRecord.getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n  return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 229, 
          "faulty": "if (registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE).isSubtype(that)) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 3:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 380, 
          "faulty": "sb.append(getPropertyType(property).toString());", 
          "type": "Delete", 
          "seed": "case 2:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_971/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:23:40.158471784 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_971/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:23:40.158471784 -0500\n@@ -376,14 +376,7 @@\n         }\n \n         sb.append(property);\n-        sb.append(\": \");\n-        sb.append(getPropertyType(property).toString());\n-\n         ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n-        }\n       }\n \n       sb.append(\"}\");\n@@ -455,7 +448,6 @@\n \n     // record types\n     if (that.isRecordType()) {\n-      return RecordType.isSubtype(this, that.toMaybeRecordType());\n     }\n \n     // Interfaces\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_971/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:23:40.162471801 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -162,20 +162,12 @@\n       // record types. If any property conflicts, then the NO_TYPE type\n       // is returned.\n       for (String property : properties.keySet()) {\n-        if (thatRecord.hasProperty(property) &&\n-            !thatRecord.getPropertyType(property).isEquivalentTo(\n-                getPropertyType(property))) {\n-          return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n-        }\n-\n         builder.addProperty(property, getPropertyType(property),\n             getPropertyNode(property));\n       }\n \n       for (String property : thatRecord.properties.keySet()) {\n         if (!hasProperty(property)) {\n-          builder.addProperty(property, thatRecord.getPropertyType(property),\n-              thatRecord.getPropertyNode(property));\n         }\n       }\n \n@@ -225,12 +217,6 @@\n       return true;\n     }\n \n-    // Top of the record types is the empty record, or OBJECT_TYPE.\n-    if (registry.getNativeObjectType(\n-            JSTypeNative.OBJECT_TYPE).isSubtype(that)) {\n-      return true;\n-    }\n-\n     // A type is a subtype of a record type if it itself is a record\n     // type and it has at least the same members as the parent record type\n     // with the same types.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 260, 
          "faulty": "return p.getNode();", 
          "type": "Delete", 
          "seed": "case 3:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_688/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:22:07.450060432 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_688/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:22:07.450060432 -0500\n@@ -257,7 +257,6 @@\n   public Node getPropertyNode(String propertyName) {\n     Property p = properties.get(propertyName);\n     if (p != null) {\n-      return p.getNode();\n     }\n     ObjectType implicitPrototype = getImplicitPrototype();\n     if (implicitPrototype != null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_688/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:22:07.454060450 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 458, 
          "faulty": "return RecordType.isSubtype(this,that.toMaybeRecordType());", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 165, 
          "faulty": "if (thatRecord.hasProperty(property) && !thatRecord.getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n  return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 150, 
          "faulty": "builder.addProperty(property,getPropertyType(property),getPropertyNode(property));", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 171, 
          "faulty": "builder.addProperty(property,getPropertyType(property),getPropertyNode(property));", 
          "type": "Delete", 
          "seed": "return FALSE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1129/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:24:29.278687472 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1129/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:24:29.278687472 -0500\n@@ -455,7 +455,6 @@\n \n     // record types\n     if (that.isRecordType()) {\n-      return RecordType.isSubtype(this, that.toMaybeRecordType());\n     }\n \n     // Interfaces\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1129/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:24:29.282687490 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -147,8 +147,6 @@\n       if (that.toMaybeRecordType().hasProperty(property) &&\n           that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n               getPropertyType(property))) {\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n       }\n     }\n     return builder.build();\n@@ -162,14 +160,6 @@\n       // record types. If any property conflicts, then the NO_TYPE type\n       // is returned.\n       for (String property : properties.keySet()) {\n-        if (thatRecord.hasProperty(property) &&\n-            !thatRecord.getPropertyType(property).isEquivalentTo(\n-                getPropertyType(property))) {\n-          return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n-        }\n-\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n       }\n \n       for (String property : thatRecord.properties.keySet()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 379, 
          "faulty": "sb.append(\": \");", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 146, 
          "faulty": "for (String property : properties.keySet()) {\n  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n    builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n  }\n}", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 378, 
          "faulty": "sb.append(property);", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 146, 
          "faulty": "for (String property : properties.keySet()) {\n  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n    builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n  }\n}", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 177, 
          "faulty": "builder.addProperty(property,thatRecord.getPropertyType(property),thatRecord.getPropertyNode(property));", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 458, 
          "faulty": "return RecordType.isSubtype(this,that.toMaybeRecordType());", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 177, 
          "faulty": "builder.addProperty(property,thatRecord.getPropertyType(property),thatRecord.getPropertyNode(property));", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 103, 
          "faulty": "if (otherRecord == this) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return TRUE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1145/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:24:34.394709863 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1145/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:24:34.398709880 -0500\n@@ -375,15 +375,9 @@\n           sb.append(\", \");\n         }\n \n-        sb.append(property);\n-        sb.append(\": \");\n         sb.append(getPropertyType(property).toString());\n \n         ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n-        }\n       }\n \n       sb.append(\"}\");\n@@ -455,7 +449,6 @@\n \n     // record types\n     if (that.isRecordType()) {\n-      return RecordType.isSubtype(this, that.toMaybeRecordType());\n     }\n \n     // Interfaces\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_1145/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:24:34.398709880 -0500\n@@ -100,14 +100,10 @@\n \n     // Compare properties.\n     RecordType otherRecord = other.toMaybeRecordType();\n-    if (otherRecord == this) {\n-      return true;\n-    }\n-\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -143,14 +139,6 @@\n       return super.getLeastSupertype(that);\n     }\n     RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n-    for (String property : properties.keySet()) {\n-      if (that.toMaybeRecordType().hasProperty(property) &&\n-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n-              getPropertyType(property))) {\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n-      }\n-    }\n     return builder.build();\n   }\n   JSType getGreatestSubtypeHelper(JSType that) {\n@@ -174,8 +162,6 @@\n \n       for (String property : thatRecord.properties.keySet()) {\n         if (!hasProperty(property)) {\n-          builder.addProperty(property, thatRecord.getPropertyType(property),\n-              thatRecord.getPropertyNode(property));\n         }\n       }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 379, 
          "faulty": "sb.append(\": \");", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 165, 
          "faulty": "if (thatRecord.hasProperty(property) && !thatRecord.getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n  return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 177, 
          "faulty": "builder.addProperty(property,thatRecord.getPropertyType(property),thatRecord.getPropertyNode(property));", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 458, 
          "faulty": "return RecordType.isSubtype(this,that.toMaybeRecordType());", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 165, 
          "faulty": "if (thatRecord.hasProperty(property) && !thatRecord.getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n  return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 229, 
          "faulty": "if (registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE).isSubtype(that)) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 3:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_826/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:22:52.054259132 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_826/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:22:52.054259132 -0500\n@@ -376,14 +376,9 @@\n         }\n \n         sb.append(property);\n-        sb.append(\": \");\n         sb.append(getPropertyType(property).toString());\n \n         ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n-        }\n       }\n \n       sb.append(\"}\");\n@@ -455,7 +450,6 @@\n \n     // record types\n     if (that.isRecordType()) {\n-      return RecordType.isSubtype(this, that.toMaybeRecordType());\n     }\n \n     // Interfaces\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_826/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:22:52.054259132 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n@@ -162,20 +162,12 @@\n       // record types. If any property conflicts, then the NO_TYPE type\n       // is returned.\n       for (String property : properties.keySet()) {\n-        if (thatRecord.hasProperty(property) &&\n-            !thatRecord.getPropertyType(property).isEquivalentTo(\n-                getPropertyType(property))) {\n-          return registry.getNativeObjectType(JSTypeNative.NO_TYPE);\n-        }\n-\n         builder.addProperty(property, getPropertyType(property),\n             getPropertyNode(property));\n       }\n \n       for (String property : thatRecord.properties.keySet()) {\n         if (!hasProperty(property)) {\n-          builder.addProperty(property, thatRecord.getPropertyType(property),\n-              thatRecord.getPropertyNode(property));\n         }\n       }\n \n@@ -225,12 +217,6 @@\n       return true;\n     }\n \n-    // Top of the record types is the empty record, or OBJECT_TYPE.\n-    if (registry.getNativeObjectType(\n-            JSTypeNative.OBJECT_TYPE).isSubtype(that)) {\n-      return true;\n-    }\n-\n     // A type is a subtype of a record type if it itself is a record\n     // type and it has at least the same members as the parent record type\n     // with the same types.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 383, 
          "faulty": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n  sb.append(\", ...\");\n  break;\n}", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 110, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java", 
          "line": 86, 
          "faulty": "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 379, 
          "faulty": "sb.append(\": \");", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_455/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\t2018-12-02 07:20:52.589722859 -0500\n@@ -83,7 +83,6 @@\n   public JSType build() {\n      // If we have an empty record, simply return the object type.\n     if (isEmpty) {\n-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     }\n \n     return registry.createRecordType(Collections.unmodifiableMap(properties));\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:13:19.619619530 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_455/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:20:52.589722859 -0500\n@@ -376,14 +376,9 @@\n         }\n \n         sb.append(property);\n-        sb.append(\": \");\n         sb.append(getPropertyType(property).toString());\n \n         ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n-        }\n       }\n \n       sb.append(\"}\");\n\n\n--- /tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:13:21.291619492 -0500\n+++ /tmp/GenProg_Defects4J_Closure_46/patches_b8fp/Patch_455/patched/tmp/GenProg_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:20:52.589722859 -0500\n@@ -107,7 +107,7 @@\n     Set<String> keySet = properties.keySet();\n     Map<String, JSType> otherProps = otherRecord.properties;\n     if (!otherProps.keySet().equals(keySet)) {\n-      return false;\n+      return true;\n     }\n     for (String key : keySet) {\n       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n\n\n"
    }
  ]
}