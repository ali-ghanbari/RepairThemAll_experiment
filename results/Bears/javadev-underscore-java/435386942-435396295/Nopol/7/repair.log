cd /tmp/Nopol_Bears_javadev-underscore-java_435386942-435396295;
export JAVA_TOOL_OPTIONS="-Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en";
TZ="America/New_York"; export TZ;
export PATH="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:$PATH";
export JAVA_HOME="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/";
time java -Xmx4g -Xms1g -cp /home/tdurieux/defects4j4repair/script/../repair_tools/nopol.jar:/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin//../lib/tools.jar fr.inria.lille.repair.Main \
	--mode repair \
	--type pre_then_cond \
	--oracle angelic \
	--synthesis smt \
	--flocal gzoltar \
	--json \
	--solver z3 \
	--solver-path /home/tdurieux/defects4j4repair/script/../libs/z3/build/z3 \
	--complianceLevel 8 \
	--source src/main/java \
	--classpath "target/classes:target/test-classes:/home/tdurieux/.m2/repository/junit/junit/4.12/junit-4.12.jar:/home/tdurieux/.m2/repository/org/hamcrest/hamcrest-library/1.3/hamcrest-library-1.3.jar:/home/tdurieux/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:/home/tdurieux/.m2/repository/org/awaitility/awaitility/3.1.2/awaitility-3.1.2.jar:/home/tdurieux/.m2/repository/org/objenesis/objenesis/2.6/objenesis-2.6.jar:/home/tdurieux/defects4j4repair/script/../repair_tools/nopol.jar";
	echo "\n\nNode: `hostname`\n";
	echo "\n\nDate: `date`\n";
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en
16:26:04.656 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Source files: [src/main/java]
16:26:04.674 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Classpath: [file:/tmp/Nopol_Bears_javadev-underscore-java_435386942-435396295/target/classes/, file:/tmp/Nopol_Bears_javadev-underscore-java_435386942-435396295/target/test-classes/, file:/home/tdurieux/.m2/repository/junit/junit/4.12/junit-4.12.jar, file:/home/tdurieux/.m2/repository/org/hamcrest/hamcrest-library/1.3/hamcrest-library-1.3.jar, file:/home/tdurieux/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar, file:/home/tdurieux/.m2/repository/org/awaitility/awaitility/3.1.2/awaitility-3.1.2.jar, file:/home/tdurieux/.m2/repository/org/objenesis/objenesis/2.6/objenesis-2.6.jar, file:/home/tdurieux/defects4j4repair/script/../repair_tools/nopol.jar]
16:26:04.674 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Statement type: PRE_THEN_COND
16:26:04.674 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Args: [com.github.underscore.ArraysTest, com.github.underscore.ChainingTest, com.github.underscore.CollectionsTest, com.github.underscore.FunctionsTest, com.github.underscore.ObjectsTest, com.github.underscore.UnderscoreTest, com.github.underscore.UtilityTest, com.github.underscore.lodash.Base32Test, com.github.underscore.lodash.LodashTest, com.github.underscore.lodash.MathTest, com.github.underscore.lodash.StringTest]
16:26:04.676 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Config: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=true, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=PRE_THEN_COND, synthesis=SMT, oracle=ANGELIC, solver=Z3, solverPath='/home/tdurieux/defects4j4repair/script/../libs/z3/build/z3', projectSources=[src/main/java], projectClasspath='[Ljava.net.URL;@66d33a', projectTests=[com.github.underscore.ArraysTest, com.github.underscore.ChainingTest, com.github.underscore.CollectionsTest, com.github.underscore.FunctionsTest, com.github.underscore.ObjectsTest, com.github.underscore.UnderscoreTest, com.github.underscore.UtilityTest, com.github.underscore.lodash.Base32Test, com.github.underscore.lodash.LodashTest, com.github.underscore.lodash.MathTest, com.github.underscore.lodash.StringTest], complianceLevel=8, outputFolder=., json=true}
16:26:04.676 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Available processors (cores): 4
16:26:04.682 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Free memory: 961 MB
16:26:04.683 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Maximum memory: 3 GB
16:26:04.683 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Total memory available to JVM: 981 MB
16:26:04.683 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Java version: 1.8.0_181
16:26:04.684 [main] INFO  fr.inria.lille.repair.nopol.NoPol - JAVA_HOME: /usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/
16:26:04.684 [main] INFO  fr.inria.lille.repair.nopol.NoPol - PATH: /usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:/usr/lib/oar/oardodo:/usr/lib/oar/oardodo:/usr/local/bin:/usr/bin:/bin:/usr/games
16:26:14.094 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #1
16:26:14.095 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml:699 which is executed by 2 tests
88056
16:26:14.481 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:26:14.651 [pool-4-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (124 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:26:16.008 [pool-3-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Xml.java:590: warning: com.sun.org.apache.xerces.internal.util.XMLChar is internal proprietary API and may be removed in a future release
            if ((com.sun.org.apache.xerces.internal.util.XMLChar.isNameStart(ch)) && (ch != ':')) {
                                                        ^
Xml.java:600: warning: com.sun.org.apache.xerces.internal.util.XMLChar is internal proprietary API and may be removed in a future release
                    if ((com.sun.org.apache.xerces.internal.util.XMLChar.isName(ch)) && (ch != ':')) {
                                                                ^
Xml.java:708: error: non-static variable ident cannot be referenced from a static context
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident",com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                                 ^
16:26:16.279 [pool-3-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public final class Xml {
    private static final java.lang.String NULL = "null";

    private static final java.lang.String ELEMENT_TEXT = "element";

    private static final java.lang.String CDATA = "#cdata-section";

    private static final java.lang.String COMMENT = "#comment";

    private static final java.lang.String ENCODING = "#encoding";

    private static final java.lang.String TEXT = "#text";

    private static final java.lang.String ELEMENT = ("<" + (com.github.underscore.lodash.Xml.ELEMENT_TEXT)) + ">";

    private static final java.lang.String CLOSED_ELEMENT = ("</" + (com.github.underscore.lodash.Xml.ELEMENT_TEXT)) + ">";

    private static final java.lang.String EMPTY_ELEMENT = (com.github.underscore.lodash.Xml.ELEMENT) + (com.github.underscore.lodash.Xml.CLOSED_ELEMENT);

    private static final java.lang.String NULL_ELEMENT = ((com.github.underscore.lodash.Xml.ELEMENT) + (com.github.underscore.lodash.Xml.NULL)) + (com.github.underscore.lodash.Xml.CLOSED_ELEMENT);

    private static final java.nio.charset.Charset UTF_8 = java.nio.charset.Charset.forName("UTF-8");

    private static final java.util.regex.Pattern ATTRS = java.util.regex.Pattern.compile(("((?:(?!\\s|=).)*)\\s*?=\\s*?[\"\']?((?:(?<=\")(?:(?<=\\\\)\"|[^\"])*|(?<=\')" + "(?:(?<=\\\\)\'|[^\'])*)|(?:(?!\"|\')(?:(?!\\/>|>|\\s).)+))"));

    public static class XmlStringBuilder {
        public enum Step {

            TWO_SPACES(2),
            THREE_SPACES(3),
            FOUR_SPACES(4),
            COMPACT(0),
            TABS(1);
            private int ident;

            Step(int ident) {
                this.ident = ident;
            }

            public int getIdent() {
                return ident;
            }
        }

        protected final java.lang.StringBuilder builder;

        private final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep;

        private int ident;

        public XmlStringBuilder() {
            builder = new java.lang.StringBuilder("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<root>\n");
            identStep = com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TWO_SPACES;
            ident = 2;
        }

        public XmlStringBuilder(java.lang.StringBuilder builder, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident) {
            this.builder = builder;
            this.identStep = identStep;
            this.ident = ident;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder append(final java.lang.String string) {
            builder.append(string);
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder fillSpaces() {
            for (int index = 0; index < (ident); index += 1) {
                builder.append(((identStep) == (com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TABS) ? '\t' : ' '));
            }
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder incIdent() {
            ident += identStep.getIdent();
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder decIdent() {
            ident -= identStep.getIdent();
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder newLine() {
            if ((identStep) != (com.github.underscore.lodash.Xml.XmlStringBuilder.Step.COMPACT)) {
                builder.append("\n");
            }
            return this;
        }

        public int getIdent() {
            return ident;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder.Step getIdentStep() {
            return identStep;
        }

        public java.lang.String toString() {
            return (builder.toString()) + "\n</root>";
        }
    }

    public static class XmlStringBuilderWithoutRoot extends com.github.underscore.lodash.Xml.XmlStringBuilder {
        public XmlStringBuilderWithoutRoot(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, java.lang.String encoding) {
            super(new java.lang.StringBuilder(((("<?xml version=\"1.0\" encoding=\"" + (com.github.underscore.lodash.U.escape(encoding))) + "\"?>") + (identStep == (com.github.underscore.lodash.Xml.XmlStringBuilder.Step.COMPACT) ? "" : "\n"))), identStep, 0);
        }

        public java.lang.String toString() {
            return builder.toString();
        }
    }

    public static class XmlStringBuilderWithoutHeader extends com.github.underscore.lodash.Xml.XmlStringBuilder {
        public XmlStringBuilderWithoutHeader(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident) {
            super(new java.lang.StringBuilder(), identStep, ident);
        }

        public java.lang.String toString() {
            return builder.toString();
        }
    }

    public static class XmlStringBuilderText extends com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader {
        public XmlStringBuilderText(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident) {
            super(identStep, ident);
        }
    }

    public static class XmlArray {
        public static void writeXml(java.util.Collection collection, java.lang.String name, com.github.underscore.lodash.Xml.XmlStringBuilder builder, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (collection == null) {
                builder.append(com.github.underscore.lodash.Xml.NULL);
                return;
            }
            if (name != null) {
                builder.fillSpaces().append("<").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(">").incIdent();
                if (!(collection.isEmpty())) {
                    builder.newLine();
                }
            }
            com.github.underscore.lodash.Xml.XmlArray.writeXml(collection, builder, name, parentTextFound, namespaces);
            if (name != null) {
                builder.decIdent().newLine().fillSpaces().append("</").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(">");
            }
        }

        @java.lang.SuppressWarnings("unchecked")
        private static void writeXml(java.util.Collection collection, com.github.underscore.lodash.Xml.XmlStringBuilder builder, java.lang.String name, final boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            boolean localParentTextFound = parentTextFound;
            final java.util.List entries = com.github.underscore.lodash.U.newArrayList(collection);
            for (int index = 0; index < (entries.size()); index += 1) {
                final java.lang.Object value = entries.get(index);
                final boolean addNewLine = (index < ((entries.size()) - 1)) && (!(java.lang.String.valueOf(entries.get((index + 1))).startsWith(("{" + (com.github.underscore.lodash.Xml.TEXT)))));
                if (value == null) {
                    builder.fillSpaces().append((((((("<" + (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">") + (com.github.underscore.lodash.Xml.NULL)) + "</") + (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">"));
                }else {
                    if ((value instanceof java.util.Map) && ((((java.util.Map) (value)).size()) == 1)) {
                        com.github.underscore.lodash.Xml.XmlObject.writeXml(((java.util.Map) (value)), null, builder, localParentTextFound, namespaces);
                        if (java.lang.String.valueOf(((java.util.Map.Entry) (((java.util.Map) (value)).entrySet().iterator().next())).getKey()).startsWith(com.github.underscore.lodash.Xml.TEXT)) {
                            localParentTextFound = true;
                            continue;
                        }
                    }else {
                        com.github.underscore.lodash.Xml.XmlValue.writeXml(value, (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : name), builder, localParentTextFound, namespaces);
                    }
                    localParentTextFound = false;
                }
                if (addNewLine) {
                    builder.newLine();
                }
            }
        }

        public static void writeXml(byte[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(short[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(int[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(long[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(float[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(double[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(boolean[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(char[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(java.lang.Object[] array, java.lang.String name, com.github.underscore.lodash.Xml.XmlStringBuilder builder, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        com.github.underscore.lodash.Xml.XmlValue.writeXml(array[i], (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : name), builder, parentTextFound, namespaces);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }
    }

    public static class XmlObject {
        @java.lang.SuppressWarnings("unchecked")
        public static void writeXml(java.util.Map map, java.lang.String name, final com.github.underscore.lodash.Xml.XmlStringBuilder builder, final boolean parentTextFound, final java.util.Set<java.lang.String> namespaces) {
            if (map == null) {
                com.github.underscore.lodash.Xml.XmlValue.writeXml(com.github.underscore.lodash.Xml.NULL, name, builder, false, namespaces);
                return;
            }
            final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems = com.github.underscore.lodash.U.newArrayList();
            final java.util.List<java.lang.String> attrs = com.github.underscore.lodash.U.newArrayList();
            final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep = builder.getIdentStep();
            final int ident = (builder.getIdent()) + (name == null ? 0 : builder.getIdentStep().getIdent());
            final java.util.List<java.util.Map.Entry> entries = com.github.underscore.lodash.U.newArrayList(map.entrySet());
            for (int index = 0; index < (entries.size()); index += 1) {
                final java.util.Map.Entry entry = entries.get(index);
                final boolean addNewLine = (index < ((entries.size()) - 1)) && (!(java.lang.String.valueOf(entries.get((index + 1)).getKey()).startsWith(com.github.underscore.lodash.Xml.TEXT)));
                if (((java.lang.String.valueOf(entry.getKey()).startsWith("-")) && (!((entry.getValue()) instanceof java.util.Map))) && (!((entry.getValue()) instanceof java.util.List))) {
                    attrs.add(((((" " + (com.github.underscore.lodash.Xml.XmlValue.escapeName(java.lang.String.valueOf(entry.getKey()).substring(1), namespaces))) + "=\"") + (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getValue())))) + "\""));
                    if (java.lang.String.valueOf(entry.getKey()).startsWith("-xmlns:")) {
                        namespaces.add(java.lang.String.valueOf(entry.getKey()).substring(7));
                    }
                }else
                    if (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getKey())).startsWith(com.github.underscore.lodash.Xml.TEXT)) {
                        com.github.underscore.lodash.Xml.XmlObject.addText(entry, elems, identStep, ident);
                    }else {
                        com.github.underscore.lodash.Xml.XmlObject.processElements(entry, identStep, ident, addNewLine, elems, namespaces);
                    }

            }
            if (name != null) {
                if (!parentTextFound) {
                    builder.fillSpaces();
                }
                builder.append("<").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(com.github.underscore.lodash.U.join(attrs, "")).append(">").incIdent();
                if ((!(elems.isEmpty())) && (!((elems.get(0)) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText))) {
                    builder.newLine();
                }
            }
            for (com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder1 : elems) {
                builder.append(localBuilder1.toString());
            }
            if (name != null) {
                builder.decIdent();
                if ((!(elems.isEmpty())) && (!((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText))) {
                    builder.newLine().fillSpaces();
                }
                builder.append("</").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(">");
            }
        }

        private static void processElements(final java.util.Map.Entry entry, final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident, final boolean addNewLine, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final java.util.Set<java.lang.String> namespaces) {
            if (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getKey())).startsWith(com.github.underscore.lodash.Xml.COMMENT)) {
                com.github.underscore.lodash.Xml.XmlObject.addComment(entry, identStep, ident, addNewLine, elems, "<!--", "-->");
            }else
                if (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getKey())).startsWith(com.github.underscore.lodash.Xml.CDATA)) {
                    com.github.underscore.lodash.Xml.XmlObject.addComment(entry, identStep, ident, addNewLine, elems, "<![CDATA[", "]]>");
                }else
                    if (((entry.getValue()) instanceof java.util.List) && (!(((java.util.List) (entry.getValue())).isEmpty()))) {
                        com.github.underscore.lodash.Xml.XmlObject.addElements(identStep, ident, entry, namespaces, elems, addNewLine);
                    }else {
                        com.github.underscore.lodash.Xml.XmlObject.addElement(identStep, ident, entry, namespaces, elems, addNewLine);
                    }


        }

        private static void addText(final java.util.Map.Entry entry, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident) {
            if ((entry.getValue()) instanceof java.util.List) {
                for (java.lang.Object value : ((java.util.List) (entry.getValue()))) {
                    elems.add(new com.github.underscore.lodash.Xml.XmlStringBuilderText(identStep, ident).append(com.github.underscore.lodash.U.escape(java.lang.String.valueOf(value))));
                }
            }else {
                elems.add(new com.github.underscore.lodash.Xml.XmlStringBuilderText(identStep, ident).append(com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getValue()))));
            }
        }

        private static void addElements(final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident, java.util.Map.Entry entry, java.util.Set<java.lang.String> namespaces, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final boolean addNewLine) {
            boolean parentTextFound = (!(elems.isEmpty())) && ((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText);
            final com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder;
            if ((java.lang.String.valueOf(((java.util.List) (entry.getValue())).get(0)).startsWith(("{" + (com.github.underscore.lodash.Xml.TEXT)))) || (java.lang.String.valueOf(((java.util.List) (entry.getValue())).get(((((java.util.List) (entry.getValue())).size()) - 1))).startsWith(("{" + (com.github.underscore.lodash.Xml.TEXT))))) {
                localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderText(identStep, ident);
            }else {
                localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader(identStep, ident);
            }
            com.github.underscore.lodash.Xml.XmlArray.writeXml(((java.util.List) (entry.getValue())), localBuilder, java.lang.String.valueOf(entry.getKey()), parentTextFound, namespaces);
            if (addNewLine) {
                localBuilder.newLine();
            }
            elems.add(localBuilder);
        }

        private static void addElement(final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident, java.util.Map.Entry entry, java.util.Set<java.lang.String> namespaces, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final boolean addNewLine) {
            boolean parentTextFound = (!(elems.isEmpty())) && ((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText);
            com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader(identStep, ident);
            com.github.underscore.lodash.Xml.XmlValue.writeXml(entry.getValue(), java.lang.String.valueOf(entry.getKey()), localBuilder, parentTextFound, namespaces);
            if (addNewLine) {
                localBuilder.newLine();
            }
            elems.add(localBuilder);
        }

        private static void addComment(java.util.Map.Entry entry, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident, boolean addNewLine, java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, java.lang.String openElement, java.lang.String closeElement) {
            if ((entry.getValue()) instanceof java.util.List) {
                for (java.util.Iterator iterator = ((java.util.List) (entry.getValue())).iterator(); iterator.hasNext();) {
                    com.github.underscore.lodash.Xml.XmlObject.addCommentValue(identStep, ident, java.lang.String.valueOf(iterator.next()), ((iterator.hasNext()) || addNewLine), elems, openElement, closeElement);
                }
            }else {
                com.github.underscore.lodash.Xml.XmlObject.addCommentValue(identStep, ident, java.lang.String.valueOf(entry.getValue()), addNewLine, elems, openElement, closeElement);
            }
        }

        private static void addCommentValue(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident, java.lang.String value, boolean addNewLine, java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, java.lang.String openElement, java.lang.String closeElement) {
            boolean parentTextFound = (!(elems.isEmpty())) && ((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText);
            com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader(identStep, ident);
            if (!parentTextFound) {
                localBuilder.fillSpaces();
            }
            localBuilder.append(openElement).append(value).append(closeElement);
            if (addNewLine) {
                localBuilder.newLine();
            }
            elems.add(localBuilder);
        }
    }

    public static class XmlValue {
        public static void writeXml(java.lang.Object value, java.lang.String name, com.github.underscore.lodash.Xml.XmlStringBuilder builder, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (value instanceof java.util.Map) {
                com.github.underscore.lodash.Xml.XmlObject.writeXml(((java.util.Map) (value)), name, builder, parentTextFound, namespaces);
                return;
            }
            if (value instanceof java.util.Collection) {
                com.github.underscore.lodash.Xml.XmlArray.writeXml(((java.util.Collection) (value)), name, builder, parentTextFound, namespaces);
                return;
            }
            if (!parentTextFound) {
                builder.fillSpaces();
            }
            builder.append((("<" + (com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">"));
            if (value == null) {
                builder.append(com.github.underscore.lodash.Xml.NULL);
            }else
                if (value instanceof java.lang.String) {
                    builder.append(com.github.underscore.lodash.Xml.XmlValue.escape(((java.lang.String) (value))));
                }else {
                    com.github.underscore.lodash.Xml.XmlValue.processArrays(value, builder, name, parentTextFound, namespaces);
                }

            builder.append((("</" + (com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">"));
        }

        private static void processArrays(java.lang.Object value, com.github.underscore.lodash.Xml.XmlStringBuilder builder, java.lang.String name, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (value instanceof java.lang.Double) {
                if ((((java.lang.Double) (value)).isInfinite()) || (((java.lang.Double) (value)).isNaN())) {
                    builder.append(com.github.underscore.lodash.Xml.NULL);
                }else {
                    builder.append(value.toString());
                }
            }else
                if (value instanceof java.lang.Float) {
                    if ((((java.lang.Float) (value)).isInfinite()) || (((java.lang.Float) (value)).isNaN())) {
                        builder.append(com.github.underscore.lodash.Xml.NULL);
                    }else {
                        builder.append(value.toString());
                    }
                }else
                    if (value instanceof java.lang.Number) {
                        builder.append(value.toString());
                    }else
                        if (value instanceof java.lang.Boolean) {
                            builder.append(value.toString());
                        }else
                            if (value instanceof byte[]) {
                                builder.newLine().incIdent();
                                com.github.underscore.lodash.Xml.XmlArray.writeXml(((byte[]) (value)), builder);
                                builder.decIdent().newLine().fillSpaces();
                            }else
                                if (value instanceof short[]) {
                                    builder.newLine().incIdent();
                                    com.github.underscore.lodash.Xml.XmlArray.writeXml(((short[]) (value)), builder);
                                    builder.decIdent().newLine().fillSpaces();
                                }else {
                                    com.github.underscore.lodash.Xml.XmlValue.processArrays2(value, builder, name, parentTextFound, namespaces);
                                }





        }

        private static void processArrays2(java.lang.Object value, com.github.underscore.lodash.Xml.XmlStringBuilder builder, java.lang.String name, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (value instanceof int[]) {
                builder.newLine().incIdent();
                com.github.underscore.lodash.Xml.XmlArray.writeXml(((int[]) (value)), builder);
                builder.decIdent().newLine().fillSpaces();
            }else
                if (value instanceof long[]) {
                    builder.newLine().incIdent();
                    com.github.underscore.lodash.Xml.XmlArray.writeXml(((long[]) (value)), builder);
                    builder.decIdent().newLine().fillSpaces();
                }else
                    if (value instanceof float[]) {
                        builder.newLine().incIdent();
                        com.github.underscore.lodash.Xml.XmlArray.writeXml(((float[]) (value)), builder);
                        builder.decIdent().newLine().fillSpaces();
                    }else
                        if (value instanceof double[]) {
                            builder.newLine().incIdent();
                            com.github.underscore.lodash.Xml.XmlArray.writeXml(((double[]) (value)), builder);
                            builder.decIdent().newLine().fillSpaces();
                        }else
                            if (value instanceof boolean[]) {
                                builder.newLine().incIdent();
                                com.github.underscore.lodash.Xml.XmlArray.writeXml(((boolean[]) (value)), builder);
                                builder.decIdent().newLine().fillSpaces();
                            }else
                                if (value instanceof char[]) {
                                    builder.newLine().incIdent();
                                    com.github.underscore.lodash.Xml.XmlArray.writeXml(((char[]) (value)), builder);
                                    builder.decIdent().newLine().fillSpaces();
                                }else
                                    if (value instanceof java.lang.Object[]) {
                                        builder.newLine().incIdent();
                                        com.github.underscore.lodash.Xml.XmlArray.writeXml(((java.lang.Object[]) (value)), name, builder, parentTextFound, namespaces);
                                        builder.decIdent().newLine().fillSpaces();
                                    }else {
                                        builder.append(value.toString());
                                    }






        }

        public static java.lang.String escapeName(java.lang.String name, java.util.Set<java.lang.String> namespaces) {
            final int length = name.length();
            if (length == 0) {
                return "__EE__EMPTY__EE__";
            }
            final java.lang.StringBuilder result = new java.lang.StringBuilder();
            char ch = name.charAt(0);
            if ((com.sun.org.apache.xerces.internal.util.XMLChar.isNameStart(ch)) && (ch != ':')) {
                result.append(ch);
            }else {
                result.append("__").append(com.github.underscore.lodash.Base32.encode(java.lang.Character.toString(ch))).append("__");
            }
            for (int i = 1; i < length; ++i) {
                ch = name.charAt(i);
                if ((ch == ':') && (("xmlns".equals(name.substring(0, i))) || (namespaces.contains(name.substring(0, i))))) {
                    result.append(ch);
                }else
                    if ((com.sun.org.apache.xerces.internal.util.XMLChar.isName(ch)) && (ch != ':')) {
                        result.append(ch);
                    }else {
                        result.append("__").append(com.github.underscore.lodash.Base32.encode(java.lang.Character.toString(ch))).append("__");
                    }

            }
            return result.toString();
        }

        public static java.lang.String escape(java.lang.String s) {
            if (s == null) {
                return null;
            }
            java.lang.StringBuilder sb = new java.lang.StringBuilder();
            com.github.underscore.lodash.Xml.XmlValue.escape(s, sb);
            return sb.toString();
        }

        private static void escape(java.lang.String s, java.lang.StringBuilder sb) {
            final int len = s.length();
            for (int i = 0; i < len; i++) {
                char ch = s.charAt(i);
                switch (ch) {
                    case '"' :
                        sb.append("&quot;");
                        break;
                    case '\'' :
                        sb.append("'");
                        break;
                    case '&' :
                        sb.append("&amp;");
                        break;
                    case '<' :
                        sb.append("&lt;");
                        break;
                    case '>' :
                        sb.append("&gt;");
                        break;
                    case '\b' :
                        sb.append("\\b");
                        break;
                    case '\f' :
                        sb.append("\\f");
                        break;
                    case '\n' :
                        sb.append("\n");
                        break;
                    case '\r' :
                        sb.append("\\r");
                        break;
                    case '\t' :
                        sb.append("\t");
                        break;
                    default :
                        if (((ch <= '\u001f') || ((ch >= '\u007f') && (ch <= '\u009f'))) || ((ch >= '\u2000') && (ch <= '\u20ff'))) {
                            java.lang.String ss = java.lang.Integer.toHexString(ch);
                            sb.append("&#x");
                            for (int k = 0; k < (4 - (ss.length())); k++) {
                                sb.append('0');
                            }
                            sb.append(ss.toUpperCase()).append(";");
                        }else {
                            sb.append(ch);
                        }
                        break;
                }
            }
        }
    }

    public static java.lang.String toXml(java.util.Collection collection, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep) {
        final com.github.underscore.lodash.Xml.XmlStringBuilder builder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutRoot(identStep, com.github.underscore.lodash.Xml.UTF_8.name());
        builder.append("<root>").incIdent();
        if ((collection == null) || (!(collection.isEmpty()))) {
            builder.newLine();
        }
        com.github.underscore.lodash.Xml.XmlArray.writeXml(collection, null, builder, false, com.github.underscore.lodash.U.<java.lang.String>newLinkedHashSet());
        return builder.newLine().append("</root>").toString();
    }

    public static java.lang.String toXml(java.util.Collection collection) {
        return com.github.underscore.lodash.Xml.toXml(collection, com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TWO_SPACES);
    }

    public static java.lang.String toXml(java.util.Map map, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep) {
        final com.github.underscore.lodash.Xml.XmlStringBuilder builder;
        final java.util.Map localMap;
        if ((map != null) && (map.containsKey(com.github.underscore.lodash.Xml.ENCODING))) {
            builder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutRoot(identStep, java.lang.String.valueOf(map.get(com.github.underscore.lodash.Xml.ENCODING)));
            localMap = ((java.util.Map) (com.github.underscore.lodash.U.clone(map)));
            localMap.remove(com.github.underscore.lodash.Xml.ENCODING);
        }else {
            builder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutRoot(identStep, com.github.underscore.lodash.Xml.UTF_8.name());
            localMap = map;
        }
        if ((((localMap == null) || ((localMap.size()) != 1)) || (java.lang.String.valueOf(((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getKey()).startsWith("-"))) || ((((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getValue()) instanceof java.util.List)) {
            final java.lang.String name;
            if ((((localMap != null) && ((localMap.size()) == 1)) && ((((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getValue()) instanceof java.util.List)) && (!(((java.util.List) (((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getValue())).isEmpty()))) {
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(0).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.github.underscore.lodash.Xml.ENCODING",com.github.underscore.lodash.Xml.ENCODING);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident",com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.github.underscore.lodash.Xml.NULL_ELEMENT",com.github.underscore.lodash.Xml.NULL_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.github.underscore.lodash.Xml.ATTRS",com.github.underscore.lodash.Xml.ATTRS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("identStep",identStep);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.github.underscore.lodash.Xml.TEXT",com.github.underscore.lodash.Xml.TEXT);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.github.underscore.lodash.Xml.NULL",com.github.underscore.lodash.Xml.NULL);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.github.underscore.lodash.Xml.ELEMENT_TEXT",com.github.underscore.lodash.Xml.ELEMENT_TEXT);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.github.underscore.lodash.Xml.CLOSED_ELEMENT",com.github.underscore.lodash.Xml.CLOSED_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.github.underscore.lodash.Xml.UTF_8",com.github.underscore.lodash.Xml.UTF_8);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.github.underscore.lodash.Xml.CDATA",com.github.underscore.lodash.Xml.CDATA);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.github.underscore.lodash.Xml.COMMENT",com.github.underscore.lodash.Xml.COMMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.github.underscore.lodash.Xml.EMPTY_ELEMENT",com.github.underscore.lodash.Xml.EMPTY_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.github.underscore.lodash.Xml.ELEMENT",com.github.underscore.lodash.Xml.ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("map",map);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectionEnds();
                }
                if (runtimeAngelicValue)
                    name = java.lang.String.valueOf(((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getKey());

            }else {
                name = "root";
            }
            com.github.underscore.lodash.Xml.XmlObject.writeXml(localMap, name, builder, false, com.github.underscore.lodash.U.<java.lang.String>newLinkedHashSet());
        }else {
            com.github.underscore.lodash.Xml.XmlObject.writeXml(localMap, null, builder, false, com.github.underscore.lodash.U.<java.lang.String>newLinkedHashSet());
        }
        return builder.toString();
    }

    public static java.lang.String toXml(java.util.Map map) {
        return com.github.underscore.lodash.Xml.toXml(map, com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TWO_SPACES);
    }

    @java.lang.SuppressWarnings("unchecked")
    private static java.lang.Object getValue(final java.lang.Object value) {
        if ((value instanceof java.util.Map) && ((((java.util.Map<java.lang.String, java.lang.Object>) (value)).entrySet().size()) == 1)) {
            final java.util.Map.Entry<java.lang.String, java.lang.Object> entry = ((java.util.Map<java.lang.String, java.lang.Object>) (value)).entrySet().iterator().next();
            if ((com.github.underscore.lodash.Xml.TEXT.equals(entry.getKey())) || (entry.getKey().equals(com.github.underscore.lodash.Xml.ELEMENT_TEXT))) {
                return entry.getValue();
            }
        }
        return value;
    }

    @java.lang.SuppressWarnings("unchecked")
    private static java.util.Map<java.lang.String, java.lang.Object> createMap(final org.w3c.dom.Node node, final com.github.underscore.Function<java.lang.Object, java.lang.Object> nodeMapper, java.util.Map<java.lang.String, java.lang.Object> attrMap, int[] uniqueIds, final com.github.underscore.Function<java.lang.Object, java.lang.Object> valueMapper, java.lang.String source, int[] sourceIndex) {
        final java.util.Map<java.lang.String, java.lang.Object> map = com.github.underscore.lodash.U.newLinkedHashMap();
        map.putAll(attrMap);
        final org.w3c.dom.NodeList nodeList = node.getChildNodes();
        for (int index = 0; index < (nodeList.getLength()); index++) {
            final org.w3c.dom.Node currentNode = nodeList.item(index);
            final java.lang.String name = currentNode.getNodeName();
            final java.lang.Object value;
            final int attributesLength = ((currentNode.getAttributes()) == null) ? 0 : currentNode.getAttributes().getLength();
            if ((currentNode.getNodeType()) == (org.w3c.dom.Node.ELEMENT_NODE)) {
                sourceIndex[0] = ((source.indexOf(("<" + name), sourceIndex[0])) + (name.length())) + 2;
                final java.util.Map<java.lang.String, java.lang.Object> attrMapLocal = com.github.underscore.lodash.U.newLinkedHashMap();
                if (attributesLength > 0) {
                    final java.util.regex.Matcher matcher = com.github.underscore.lodash.Xml.ATTRS.matcher(source.substring(sourceIndex[0], source.indexOf(">", sourceIndex[0])));
                    while (matcher.find()) {
                        com.github.underscore.lodash.Xml.addNodeValue(attrMapLocal, ('-' + (matcher.group(1))), matcher.group(2), nodeMapper, uniqueIds);
                    } 
                }
                value = com.github.underscore.lodash.Xml.createMap(currentNode, nodeMapper, attrMapLocal, uniqueIds, valueMapper, source, sourceIndex);
            }else {
                if (com.github.underscore.lodash.Xml.COMMENT.equals(name)) {
                    sourceIndex[0] = (source.indexOf("-->", sourceIndex[0])) + 3;
                }else
                    if (com.github.underscore.lodash.Xml.CDATA.equals(name)) {
                        sourceIndex[0] = (source.indexOf("]]>", sourceIndex[0])) + 3;
                    }

                value = currentNode.getTextContent();
            }
            if ((com.github.underscore.lodash.Xml.TEXT.equals(name)) && (valueMapper.apply(value).toString().isEmpty())) {
                continue;
            }
            com.github.underscore.lodash.Xml.addNodeValue(map, name, value, nodeMapper, uniqueIds);
        }
        return map;
    }

    @java.lang.SuppressWarnings("unchecked")
    private static void addNodeValue(final java.util.Map<java.lang.String, java.lang.Object> map, final java.lang.String name, final java.lang.Object value, final com.github.underscore.Function<java.lang.Object, java.lang.Object> nodeMapper, int[] uniqueIds) {
        if (map.containsKey(name)) {
            if (com.github.underscore.lodash.Xml.TEXT.equals(name)) {
                map.put((name + (uniqueIds[0])), nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
                uniqueIds[0] += 1;
            }else
                if (com.github.underscore.lodash.Xml.COMMENT.equals(name)) {
                    map.put((name + (uniqueIds[1])), nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
                    uniqueIds[1] += 1;
                }else
                    if (com.github.underscore.lodash.Xml.CDATA.equals(name)) {
                        map.put((name + (uniqueIds[2])), nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
                        uniqueIds[2] += 1;
                    }else {
                        final java.lang.Object object = map.get(name);
                        if (object instanceof java.util.List) {
                            com.github.underscore.lodash.Xml.addText(map, name, ((java.util.List<java.lang.Object>) (object)), value);
                        }else {
                            final java.util.List<java.lang.Object> objects = com.github.underscore.lodash.U.newArrayList();
                            objects.add(object);
                            com.github.underscore.lodash.Xml.addText(map, name, objects, value);
                            map.put(name, objects);
                        }
                    }


        }else {
            map.put(name, nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
        }
    }

    @java.lang.SuppressWarnings("unchecked")
    private static void addText(final java.util.Map<java.lang.String, java.lang.Object> map, final java.lang.String name, final java.util.List<java.lang.Object> objects, final java.lang.Object value) {
        int lastIndex = (map.size()) - 1;
        final int index = objects.size();
        while (true) {
            final java.util.Map.Entry lastElement = ((java.util.Map.Entry) (map.entrySet().toArray()[lastIndex]));
            if (name.equals(java.lang.String.valueOf(lastElement.getKey()))) {
                break;
            }
            final java.util.Map<java.lang.String, java.lang.Object> text = com.github.underscore.lodash.U.newLinkedHashMap();
            text.put(java.lang.String.valueOf(lastElement.getKey()), map.remove(lastElement.getKey()));
            objects.add(index, text);
            lastIndex -= 1;
        } 
        objects.add(com.github.underscore.lodash.Xml.getValue(value));
    }

    @java.lang.SuppressWarnings("unchecked")
    public static java.lang.Object fromXml(final java.lang.String xml, final com.github.underscore.Function<java.lang.Object, java.lang.Object> valueMapper) {
        if (xml == null) {
            return null;
        }
        try {
            org.w3c.dom.Document document = com.github.underscore.lodash.Xml.createDocument(xml);
            final java.lang.Object result = com.github.underscore.lodash.Xml.createMap(document, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
                public java.lang.Object apply(java.lang.Object object) {
                    return object;
                }
            }, java.util.Collections.<java.lang.String, java.lang.Object>emptyMap(), new int[]{ 1, 1, 1 }, valueMapper, xml, new int[]{ 0 });
            if (((document.getXmlEncoding()) != null) && (!("UTF-8".equalsIgnoreCase(document.getXmlEncoding())))) {
                ((java.util.Map) (result)).put(com.github.underscore.lodash.Xml.ENCODING, document.getXmlEncoding());
            }else
                if ((((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getKey().equals("root")) && (((((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getValue()) instanceof java.util.List) || ((((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getValue()) instanceof java.util.Map))) {
                    return ((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getValue();
                }

            return result;
        } catch (java.lang.Exception ex) {
            throw new java.lang.IllegalArgumentException(ex);
        }
    }

    public static java.lang.Object fromXml(final java.lang.String xml) {
        return com.github.underscore.lodash.Xml.fromXml(xml, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
            public java.lang.Object apply(java.lang.Object object) {
                return java.lang.String.valueOf(object).trim();
            }
        });
    }

    private static org.w3c.dom.Document createDocument(final java.lang.String xml) throws java.io.IOException, javax.xml.parsers.ParserConfigurationException, org.xml.sax.SAXException {
        final javax.xml.parsers.DocumentBuilderFactory factory = javax.xml.parsers.DocumentBuilderFactory.newInstance();
        factory.setNamespaceAware(true);
        factory.setFeature(javax.xml.XMLConstants.FEATURE_SECURE_PROCESSING, true);
        final javax.xml.parsers.DocumentBuilder builder = factory.newDocumentBuilder();
        builder.setErrorHandler(new org.xml.sax.helpers.DefaultHandler());
        return builder.parse(new org.xml.sax.InputSource(new java.io.StringReader(xml)));
    }

    public static java.lang.Object fromXmlMakeArrays(final java.lang.String xml) {
        try {
            org.w3c.dom.Document document = com.github.underscore.lodash.Xml.createDocument(xml);
            return com.github.underscore.lodash.Xml.createMap(document, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
                public java.lang.Object apply(java.lang.Object object) {
                    return object instanceof java.util.List ? object : com.github.underscore.lodash.U.newArrayList(java.util.Arrays.asList(object));
                }
            }, java.util.Collections.<java.lang.String, java.lang.Object>emptyMap(), new int[]{ 1, 1, 1 }, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
                public java.lang.Object apply(java.lang.Object object) {
                    return java.lang.String.valueOf(object).trim();
                }
            }, xml, new int[]{ 0 });
        } catch (java.lang.Exception ex) {
            throw new java.lang.IllegalArgumentException(ex);
        }
    }

    @java.lang.SuppressWarnings("unchecked")
    public static java.lang.String formatXml(java.lang.String xml, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep) {
        java.lang.Object result = com.github.underscore.lodash.Xml.fromXml(xml);
        if (result instanceof java.util.Map) {
            return com.github.underscore.lodash.Xml.toXml(((java.util.Map) (result)), identStep);
        }
        return com.github.underscore.lodash.Xml.toXml(((java.util.List) (result)), identStep);
    }

    public static java.lang.String formatXml(java.lang.String xml) {
        return com.github.underscore.lodash.Xml.formatXml(xml, com.github.underscore.lodash.Xml.XmlStringBuilder.Step.THREE_SPACES);
    }
}
16:26:16.280 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
16:26:16.280 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #2
16:26:16.280 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml:698 which is executed by 3 tests
88056
16:26:16.431 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #3
16:26:16.432 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlValue:528 which is executed by 4 tests
88056
16:26:16.572 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:26:16.777 [pool-6-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (191 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a></a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:17.831 [pool-7-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (18 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a></a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a></a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:17.835 [pool-8-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:26:17.836 [pool-5-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a></a>
</a]>>]
16:26:17.836 [pool-5-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:26:17.836 [pool-5-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Xml$XmlValue:528.
16:26:17.837 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #4
16:26:17.837 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml:697 which is executed by 4 tests
88056
16:26:17.974 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #5
16:26:17.974 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlValue:527 which is executed by 5 tests
88056
16:26:18.110 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:26:18.191 [pool-10-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (69 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a></a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:18.905 [pool-11-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (14 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a></a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a></a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:18.910 [pool-12-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:26:18.912 [pool-9-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a></a>
</a]>>]
16:26:18.912 [pool-9-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:26:18.912 [pool-9-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Xml$XmlValue:527.
16:26:18.912 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:26:18.998 [pool-14-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (75 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:19.535 [pool-15-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (14 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:19.538 [pool-16-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:26:19.538 [pool-13-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:26:19.538 [pool-13-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:26:19.538 [pool-13-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Xml$XmlValue:527.
16:26:19.538 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #6
16:26:19.539 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml:704 which is executed by 5 tests
88056
16:26:19.663 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #7
16:26:19.664 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml:703 which is executed by 5 tests
88056
16:26:19.787 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:26:19.863 [pool-18-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (66 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:26:20.309 [pool-17-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Xml.java:590: warning: com.sun.org.apache.xerces.internal.util.XMLChar is internal proprietary API and may be removed in a future release
            if ((com.sun.org.apache.xerces.internal.util.XMLChar.isNameStart(ch)) && (ch != ':')) {
                                                        ^
Xml.java:600: warning: com.sun.org.apache.xerces.internal.util.XMLChar is internal proprietary API and may be removed in a future release
                    if ((com.sun.org.apache.xerces.internal.util.XMLChar.isName(ch)) && (ch != ':')) {
                                                                ^
Xml.java:712: error: non-static variable ident cannot be referenced from a static context
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident",com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                             ^
16:26:20.464 [pool-17-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public final class Xml {
    private static final java.lang.String NULL = "null";

    private static final java.lang.String ELEMENT_TEXT = "element";

    private static final java.lang.String CDATA = "#cdata-section";

    private static final java.lang.String COMMENT = "#comment";

    private static final java.lang.String ENCODING = "#encoding";

    private static final java.lang.String TEXT = "#text";

    private static final java.lang.String ELEMENT = ("<" + (com.github.underscore.lodash.Xml.ELEMENT_TEXT)) + ">";

    private static final java.lang.String CLOSED_ELEMENT = ("</" + (com.github.underscore.lodash.Xml.ELEMENT_TEXT)) + ">";

    private static final java.lang.String EMPTY_ELEMENT = (com.github.underscore.lodash.Xml.ELEMENT) + (com.github.underscore.lodash.Xml.CLOSED_ELEMENT);

    private static final java.lang.String NULL_ELEMENT = ((com.github.underscore.lodash.Xml.ELEMENT) + (com.github.underscore.lodash.Xml.NULL)) + (com.github.underscore.lodash.Xml.CLOSED_ELEMENT);

    private static final java.nio.charset.Charset UTF_8 = java.nio.charset.Charset.forName("UTF-8");

    private static final java.util.regex.Pattern ATTRS = java.util.regex.Pattern.compile(("((?:(?!\\s|=).)*)\\s*?=\\s*?[\"\']?((?:(?<=\")(?:(?<=\\\\)\"|[^\"])*|(?<=\')" + "(?:(?<=\\\\)\'|[^\'])*)|(?:(?!\"|\')(?:(?!\\/>|>|\\s).)+))"));

    public static class XmlStringBuilder {
        public enum Step {

            TWO_SPACES(2),
            THREE_SPACES(3),
            FOUR_SPACES(4),
            COMPACT(0),
            TABS(1);
            private int ident;

            Step(int ident) {
                this.ident = ident;
            }

            public int getIdent() {
                return ident;
            }
        }

        protected final java.lang.StringBuilder builder;

        private final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep;

        private int ident;

        public XmlStringBuilder() {
            builder = new java.lang.StringBuilder("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<root>\n");
            identStep = com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TWO_SPACES;
            ident = 2;
        }

        public XmlStringBuilder(java.lang.StringBuilder builder, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident) {
            this.builder = builder;
            this.identStep = identStep;
            this.ident = ident;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder append(final java.lang.String string) {
            builder.append(string);
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder fillSpaces() {
            for (int index = 0; index < (ident); index += 1) {
                builder.append(((identStep) == (com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TABS) ? '\t' : ' '));
            }
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder incIdent() {
            ident += identStep.getIdent();
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder decIdent() {
            ident -= identStep.getIdent();
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder newLine() {
            if ((identStep) != (com.github.underscore.lodash.Xml.XmlStringBuilder.Step.COMPACT)) {
                builder.append("\n");
            }
            return this;
        }

        public int getIdent() {
            return ident;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder.Step getIdentStep() {
            return identStep;
        }

        public java.lang.String toString() {
            return (builder.toString()) + "\n</root>";
        }
    }

    public static class XmlStringBuilderWithoutRoot extends com.github.underscore.lodash.Xml.XmlStringBuilder {
        public XmlStringBuilderWithoutRoot(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, java.lang.String encoding) {
            super(new java.lang.StringBuilder(((("<?xml version=\"1.0\" encoding=\"" + (com.github.underscore.lodash.U.escape(encoding))) + "\"?>") + (identStep == (com.github.underscore.lodash.Xml.XmlStringBuilder.Step.COMPACT) ? "" : "\n"))), identStep, 0);
        }

        public java.lang.String toString() {
            return builder.toString();
        }
    }

    public static class XmlStringBuilderWithoutHeader extends com.github.underscore.lodash.Xml.XmlStringBuilder {
        public XmlStringBuilderWithoutHeader(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident) {
            super(new java.lang.StringBuilder(), identStep, ident);
        }

        public java.lang.String toString() {
            return builder.toString();
        }
    }

    public static class XmlStringBuilderText extends com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader {
        public XmlStringBuilderText(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident) {
            super(identStep, ident);
        }
    }

    public static class XmlArray {
        public static void writeXml(java.util.Collection collection, java.lang.String name, com.github.underscore.lodash.Xml.XmlStringBuilder builder, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (collection == null) {
                builder.append(com.github.underscore.lodash.Xml.NULL);
                return;
            }
            if (name != null) {
                builder.fillSpaces().append("<").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(">").incIdent();
                if (!(collection.isEmpty())) {
                    builder.newLine();
                }
            }
            com.github.underscore.lodash.Xml.XmlArray.writeXml(collection, builder, name, parentTextFound, namespaces);
            if (name != null) {
                builder.decIdent().newLine().fillSpaces().append("</").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(">");
            }
        }

        @java.lang.SuppressWarnings("unchecked")
        private static void writeXml(java.util.Collection collection, com.github.underscore.lodash.Xml.XmlStringBuilder builder, java.lang.String name, final boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            boolean localParentTextFound = parentTextFound;
            final java.util.List entries = com.github.underscore.lodash.U.newArrayList(collection);
            for (int index = 0; index < (entries.size()); index += 1) {
                final java.lang.Object value = entries.get(index);
                final boolean addNewLine = (index < ((entries.size()) - 1)) && (!(java.lang.String.valueOf(entries.get((index + 1))).startsWith(("{" + (com.github.underscore.lodash.Xml.TEXT)))));
                if (value == null) {
                    builder.fillSpaces().append((((((("<" + (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">") + (com.github.underscore.lodash.Xml.NULL)) + "</") + (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">"));
                }else {
                    if ((value instanceof java.util.Map) && ((((java.util.Map) (value)).size()) == 1)) {
                        com.github.underscore.lodash.Xml.XmlObject.writeXml(((java.util.Map) (value)), null, builder, localParentTextFound, namespaces);
                        if (java.lang.String.valueOf(((java.util.Map.Entry) (((java.util.Map) (value)).entrySet().iterator().next())).getKey()).startsWith(com.github.underscore.lodash.Xml.TEXT)) {
                            localParentTextFound = true;
                            continue;
                        }
                    }else {
                        com.github.underscore.lodash.Xml.XmlValue.writeXml(value, (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : name), builder, localParentTextFound, namespaces);
                    }
                    localParentTextFound = false;
                }
                if (addNewLine) {
                    builder.newLine();
                }
            }
        }

        public static void writeXml(byte[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(short[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(int[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(long[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(float[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(double[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(boolean[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(char[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(java.lang.Object[] array, java.lang.String name, com.github.underscore.lodash.Xml.XmlStringBuilder builder, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        com.github.underscore.lodash.Xml.XmlValue.writeXml(array[i], (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : name), builder, parentTextFound, namespaces);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }
    }

    public static class XmlObject {
        @java.lang.SuppressWarnings("unchecked")
        public static void writeXml(java.util.Map map, java.lang.String name, final com.github.underscore.lodash.Xml.XmlStringBuilder builder, final boolean parentTextFound, final java.util.Set<java.lang.String> namespaces) {
            if (map == null) {
                com.github.underscore.lodash.Xml.XmlValue.writeXml(com.github.underscore.lodash.Xml.NULL, name, builder, false, namespaces);
                return;
            }
            final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems = com.github.underscore.lodash.U.newArrayList();
            final java.util.List<java.lang.String> attrs = com.github.underscore.lodash.U.newArrayList();
            final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep = builder.getIdentStep();
            final int ident = (builder.getIdent()) + (name == null ? 0 : builder.getIdentStep().getIdent());
            final java.util.List<java.util.Map.Entry> entries = com.github.underscore.lodash.U.newArrayList(map.entrySet());
            for (int index = 0; index < (entries.size()); index += 1) {
                final java.util.Map.Entry entry = entries.get(index);
                final boolean addNewLine = (index < ((entries.size()) - 1)) && (!(java.lang.String.valueOf(entries.get((index + 1)).getKey()).startsWith(com.github.underscore.lodash.Xml.TEXT)));
                if (((java.lang.String.valueOf(entry.getKey()).startsWith("-")) && (!((entry.getValue()) instanceof java.util.Map))) && (!((entry.getValue()) instanceof java.util.List))) {
                    attrs.add(((((" " + (com.github.underscore.lodash.Xml.XmlValue.escapeName(java.lang.String.valueOf(entry.getKey()).substring(1), namespaces))) + "=\"") + (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getValue())))) + "\""));
                    if (java.lang.String.valueOf(entry.getKey()).startsWith("-xmlns:")) {
                        namespaces.add(java.lang.String.valueOf(entry.getKey()).substring(7));
                    }
                }else
                    if (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getKey())).startsWith(com.github.underscore.lodash.Xml.TEXT)) {
                        com.github.underscore.lodash.Xml.XmlObject.addText(entry, elems, identStep, ident);
                    }else {
                        com.github.underscore.lodash.Xml.XmlObject.processElements(entry, identStep, ident, addNewLine, elems, namespaces);
                    }

            }
            if (name != null) {
                if (!parentTextFound) {
                    builder.fillSpaces();
                }
                builder.append("<").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(com.github.underscore.lodash.U.join(attrs, "")).append(">").incIdent();
                if ((!(elems.isEmpty())) && (!((elems.get(0)) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText))) {
                    builder.newLine();
                }
            }
            for (com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder1 : elems) {
                builder.append(localBuilder1.toString());
            }
            if (name != null) {
                builder.decIdent();
                if ((!(elems.isEmpty())) && (!((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText))) {
                    builder.newLine().fillSpaces();
                }
                builder.append("</").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(">");
            }
        }

        private static void processElements(final java.util.Map.Entry entry, final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident, final boolean addNewLine, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final java.util.Set<java.lang.String> namespaces) {
            if (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getKey())).startsWith(com.github.underscore.lodash.Xml.COMMENT)) {
                com.github.underscore.lodash.Xml.XmlObject.addComment(entry, identStep, ident, addNewLine, elems, "<!--", "-->");
            }else
                if (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getKey())).startsWith(com.github.underscore.lodash.Xml.CDATA)) {
                    com.github.underscore.lodash.Xml.XmlObject.addComment(entry, identStep, ident, addNewLine, elems, "<![CDATA[", "]]>");
                }else
                    if (((entry.getValue()) instanceof java.util.List) && (!(((java.util.List) (entry.getValue())).isEmpty()))) {
                        com.github.underscore.lodash.Xml.XmlObject.addElements(identStep, ident, entry, namespaces, elems, addNewLine);
                    }else {
                        com.github.underscore.lodash.Xml.XmlObject.addElement(identStep, ident, entry, namespaces, elems, addNewLine);
                    }


        }

        private static void addText(final java.util.Map.Entry entry, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident) {
            if ((entry.getValue()) instanceof java.util.List) {
                for (java.lang.Object value : ((java.util.List) (entry.getValue()))) {
                    elems.add(new com.github.underscore.lodash.Xml.XmlStringBuilderText(identStep, ident).append(com.github.underscore.lodash.U.escape(java.lang.String.valueOf(value))));
                }
            }else {
                elems.add(new com.github.underscore.lodash.Xml.XmlStringBuilderText(identStep, ident).append(com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getValue()))));
            }
        }

        private static void addElements(final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident, java.util.Map.Entry entry, java.util.Set<java.lang.String> namespaces, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final boolean addNewLine) {
            boolean parentTextFound = (!(elems.isEmpty())) && ((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText);
            final com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder;
            if ((java.lang.String.valueOf(((java.util.List) (entry.getValue())).get(0)).startsWith(("{" + (com.github.underscore.lodash.Xml.TEXT)))) || (java.lang.String.valueOf(((java.util.List) (entry.getValue())).get(((((java.util.List) (entry.getValue())).size()) - 1))).startsWith(("{" + (com.github.underscore.lodash.Xml.TEXT))))) {
                localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderText(identStep, ident);
            }else {
                localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader(identStep, ident);
            }
            com.github.underscore.lodash.Xml.XmlArray.writeXml(((java.util.List) (entry.getValue())), localBuilder, java.lang.String.valueOf(entry.getKey()), parentTextFound, namespaces);
            if (addNewLine) {
                localBuilder.newLine();
            }
            elems.add(localBuilder);
        }

        private static void addElement(final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident, java.util.Map.Entry entry, java.util.Set<java.lang.String> namespaces, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final boolean addNewLine) {
            boolean parentTextFound = (!(elems.isEmpty())) && ((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText);
            com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader(identStep, ident);
            com.github.underscore.lodash.Xml.XmlValue.writeXml(entry.getValue(), java.lang.String.valueOf(entry.getKey()), localBuilder, parentTextFound, namespaces);
            if (addNewLine) {
                localBuilder.newLine();
            }
            elems.add(localBuilder);
        }

        private static void addComment(java.util.Map.Entry entry, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident, boolean addNewLine, java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, java.lang.String openElement, java.lang.String closeElement) {
            if ((entry.getValue()) instanceof java.util.List) {
                for (java.util.Iterator iterator = ((java.util.List) (entry.getValue())).iterator(); iterator.hasNext();) {
                    com.github.underscore.lodash.Xml.XmlObject.addCommentValue(identStep, ident, java.lang.String.valueOf(iterator.next()), ((iterator.hasNext()) || addNewLine), elems, openElement, closeElement);
                }
            }else {
                com.github.underscore.lodash.Xml.XmlObject.addCommentValue(identStep, ident, java.lang.String.valueOf(entry.getValue()), addNewLine, elems, openElement, closeElement);
            }
        }

        private static void addCommentValue(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident, java.lang.String value, boolean addNewLine, java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, java.lang.String openElement, java.lang.String closeElement) {
            boolean parentTextFound = (!(elems.isEmpty())) && ((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText);
            com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader(identStep, ident);
            if (!parentTextFound) {
                localBuilder.fillSpaces();
            }
            localBuilder.append(openElement).append(value).append(closeElement);
            if (addNewLine) {
                localBuilder.newLine();
            }
            elems.add(localBuilder);
        }
    }

    public static class XmlValue {
        public static void writeXml(java.lang.Object value, java.lang.String name, com.github.underscore.lodash.Xml.XmlStringBuilder builder, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (value instanceof java.util.Map) {
                com.github.underscore.lodash.Xml.XmlObject.writeXml(((java.util.Map) (value)), name, builder, parentTextFound, namespaces);
                return;
            }
            if (value instanceof java.util.Collection) {
                com.github.underscore.lodash.Xml.XmlArray.writeXml(((java.util.Collection) (value)), name, builder, parentTextFound, namespaces);
                return;
            }
            if (!parentTextFound) {
                builder.fillSpaces();
            }
            builder.append((("<" + (com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">"));
            if (value == null) {
                builder.append(com.github.underscore.lodash.Xml.NULL);
            }else
                if (value instanceof java.lang.String) {
                    builder.append(com.github.underscore.lodash.Xml.XmlValue.escape(((java.lang.String) (value))));
                }else {
                    com.github.underscore.lodash.Xml.XmlValue.processArrays(value, builder, name, parentTextFound, namespaces);
                }

            builder.append((("</" + (com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">"));
        }

        private static void processArrays(java.lang.Object value, com.github.underscore.lodash.Xml.XmlStringBuilder builder, java.lang.String name, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (value instanceof java.lang.Double) {
                if ((((java.lang.Double) (value)).isInfinite()) || (((java.lang.Double) (value)).isNaN())) {
                    builder.append(com.github.underscore.lodash.Xml.NULL);
                }else {
                    builder.append(value.toString());
                }
            }else
                if (value instanceof java.lang.Float) {
                    if ((((java.lang.Float) (value)).isInfinite()) || (((java.lang.Float) (value)).isNaN())) {
                        builder.append(com.github.underscore.lodash.Xml.NULL);
                    }else {
                        builder.append(value.toString());
                    }
                }else
                    if (value instanceof java.lang.Number) {
                        builder.append(value.toString());
                    }else
                        if (value instanceof java.lang.Boolean) {
                            builder.append(value.toString());
                        }else
                            if (value instanceof byte[]) {
                                builder.newLine().incIdent();
                                com.github.underscore.lodash.Xml.XmlArray.writeXml(((byte[]) (value)), builder);
                                builder.decIdent().newLine().fillSpaces();
                            }else
                                if (value instanceof short[]) {
                                    builder.newLine().incIdent();
                                    com.github.underscore.lodash.Xml.XmlArray.writeXml(((short[]) (value)), builder);
                                    builder.decIdent().newLine().fillSpaces();
                                }else {
                                    com.github.underscore.lodash.Xml.XmlValue.processArrays2(value, builder, name, parentTextFound, namespaces);
                                }





        }

        private static void processArrays2(java.lang.Object value, com.github.underscore.lodash.Xml.XmlStringBuilder builder, java.lang.String name, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (value instanceof int[]) {
                builder.newLine().incIdent();
                com.github.underscore.lodash.Xml.XmlArray.writeXml(((int[]) (value)), builder);
                builder.decIdent().newLine().fillSpaces();
            }else
                if (value instanceof long[]) {
                    builder.newLine().incIdent();
                    com.github.underscore.lodash.Xml.XmlArray.writeXml(((long[]) (value)), builder);
                    builder.decIdent().newLine().fillSpaces();
                }else
                    if (value instanceof float[]) {
                        builder.newLine().incIdent();
                        com.github.underscore.lodash.Xml.XmlArray.writeXml(((float[]) (value)), builder);
                        builder.decIdent().newLine().fillSpaces();
                    }else
                        if (value instanceof double[]) {
                            builder.newLine().incIdent();
                            com.github.underscore.lodash.Xml.XmlArray.writeXml(((double[]) (value)), builder);
                            builder.decIdent().newLine().fillSpaces();
                        }else
                            if (value instanceof boolean[]) {
                                builder.newLine().incIdent();
                                com.github.underscore.lodash.Xml.XmlArray.writeXml(((boolean[]) (value)), builder);
                                builder.decIdent().newLine().fillSpaces();
                            }else
                                if (value instanceof char[]) {
                                    builder.newLine().incIdent();
                                    com.github.underscore.lodash.Xml.XmlArray.writeXml(((char[]) (value)), builder);
                                    builder.decIdent().newLine().fillSpaces();
                                }else
                                    if (value instanceof java.lang.Object[]) {
                                        builder.newLine().incIdent();
                                        com.github.underscore.lodash.Xml.XmlArray.writeXml(((java.lang.Object[]) (value)), name, builder, parentTextFound, namespaces);
                                        builder.decIdent().newLine().fillSpaces();
                                    }else {
                                        builder.append(value.toString());
                                    }






        }

        public static java.lang.String escapeName(java.lang.String name, java.util.Set<java.lang.String> namespaces) {
            final int length = name.length();
            if (length == 0) {
                return "__EE__EMPTY__EE__";
            }
            final java.lang.StringBuilder result = new java.lang.StringBuilder();
            char ch = name.charAt(0);
            if ((com.sun.org.apache.xerces.internal.util.XMLChar.isNameStart(ch)) && (ch != ':')) {
                result.append(ch);
            }else {
                result.append("__").append(com.github.underscore.lodash.Base32.encode(java.lang.Character.toString(ch))).append("__");
            }
            for (int i = 1; i < length; ++i) {
                ch = name.charAt(i);
                if ((ch == ':') && (("xmlns".equals(name.substring(0, i))) || (namespaces.contains(name.substring(0, i))))) {
                    result.append(ch);
                }else
                    if ((com.sun.org.apache.xerces.internal.util.XMLChar.isName(ch)) && (ch != ':')) {
                        result.append(ch);
                    }else {
                        result.append("__").append(com.github.underscore.lodash.Base32.encode(java.lang.Character.toString(ch))).append("__");
                    }

            }
            return result.toString();
        }

        public static java.lang.String escape(java.lang.String s) {
            if (s == null) {
                return null;
            }
            java.lang.StringBuilder sb = new java.lang.StringBuilder();
            com.github.underscore.lodash.Xml.XmlValue.escape(s, sb);
            return sb.toString();
        }

        private static void escape(java.lang.String s, java.lang.StringBuilder sb) {
            final int len = s.length();
            for (int i = 0; i < len; i++) {
                char ch = s.charAt(i);
                switch (ch) {
                    case '"' :
                        sb.append("&quot;");
                        break;
                    case '\'' :
                        sb.append("'");
                        break;
                    case '&' :
                        sb.append("&amp;");
                        break;
                    case '<' :
                        sb.append("&lt;");
                        break;
                    case '>' :
                        sb.append("&gt;");
                        break;
                    case '\b' :
                        sb.append("\\b");
                        break;
                    case '\f' :
                        sb.append("\\f");
                        break;
                    case '\n' :
                        sb.append("\n");
                        break;
                    case '\r' :
                        sb.append("\\r");
                        break;
                    case '\t' :
                        sb.append("\t");
                        break;
                    default :
                        if (((ch <= '\u001f') || ((ch >= '\u007f') && (ch <= '\u009f'))) || ((ch >= '\u2000') && (ch <= '\u20ff'))) {
                            java.lang.String ss = java.lang.Integer.toHexString(ch);
                            sb.append("&#x");
                            for (int k = 0; k < (4 - (ss.length())); k++) {
                                sb.append('0');
                            }
                            sb.append(ss.toUpperCase()).append(";");
                        }else {
                            sb.append(ch);
                        }
                        break;
                }
            }
        }
    }

    public static java.lang.String toXml(java.util.Collection collection, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep) {
        final com.github.underscore.lodash.Xml.XmlStringBuilder builder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutRoot(identStep, com.github.underscore.lodash.Xml.UTF_8.name());
        builder.append("<root>").incIdent();
        if ((collection == null) || (!(collection.isEmpty()))) {
            builder.newLine();
        }
        com.github.underscore.lodash.Xml.XmlArray.writeXml(collection, null, builder, false, com.github.underscore.lodash.U.<java.lang.String>newLinkedHashSet());
        return builder.newLine().append("</root>").toString();
    }

    public static java.lang.String toXml(java.util.Collection collection) {
        return com.github.underscore.lodash.Xml.toXml(collection, com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TWO_SPACES);
    }

    public static java.lang.String toXml(java.util.Map map, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep) {
        final com.github.underscore.lodash.Xml.XmlStringBuilder builder;
        final java.util.Map localMap;
        if ((map != null) && (map.containsKey(com.github.underscore.lodash.Xml.ENCODING))) {
            builder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutRoot(identStep, java.lang.String.valueOf(map.get(com.github.underscore.lodash.Xml.ENCODING)));
            localMap = ((java.util.Map) (com.github.underscore.lodash.U.clone(map)));
            localMap.remove(com.github.underscore.lodash.Xml.ENCODING);
        }else {
            builder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutRoot(identStep, com.github.underscore.lodash.Xml.UTF_8.name());
            localMap = map;
        }
        if ((((localMap == null) || ((localMap.size()) != 1)) || (java.lang.String.valueOf(((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getKey()).startsWith("-"))) || ((((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getValue()) instanceof java.util.List)) {
            final java.lang.String name;
            if ((((localMap != null) && ((localMap.size()) == 1)) && ((((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getValue()) instanceof java.util.List)) && (!(((java.util.List) (((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getValue())).isEmpty()))) {
                name = java.lang.String.valueOf(((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getKey());
            }else {
                name = "root";
            }
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(4).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("com.github.underscore.lodash.Xml.ENCODING",com.github.underscore.lodash.Xml.ENCODING);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident",com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("com.github.underscore.lodash.Xml.NULL_ELEMENT",com.github.underscore.lodash.Xml.NULL_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("com.github.underscore.lodash.Xml.ATTRS",com.github.underscore.lodash.Xml.ATTRS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("identStep",identStep);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("com.github.underscore.lodash.Xml.TEXT",com.github.underscore.lodash.Xml.TEXT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("com.github.underscore.lodash.Xml.NULL",com.github.underscore.lodash.Xml.NULL);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("com.github.underscore.lodash.Xml.ELEMENT_TEXT",com.github.underscore.lodash.Xml.ELEMENT_TEXT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("com.github.underscore.lodash.Xml.CLOSED_ELEMENT",com.github.underscore.lodash.Xml.CLOSED_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("com.github.underscore.lodash.Xml.UTF_8",com.github.underscore.lodash.Xml.UTF_8);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("com.github.underscore.lodash.Xml.CDATA",com.github.underscore.lodash.Xml.CDATA);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("com.github.underscore.lodash.Xml.COMMENT",com.github.underscore.lodash.Xml.COMMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("com.github.underscore.lodash.Xml.EMPTY_ELEMENT",com.github.underscore.lodash.Xml.EMPTY_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("com.github.underscore.lodash.Xml.ELEMENT",com.github.underscore.lodash.Xml.ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("map",map);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectionEnds();
            }
            if (runtimeAngelicValue)
                com.github.underscore.lodash.Xml.XmlObject.writeXml(localMap, name, builder, false, com.github.underscore.lodash.U.<java.lang.String>newLinkedHashSet());

        }else {
            com.github.underscore.lodash.Xml.XmlObject.writeXml(localMap, null, builder, false, com.github.underscore.lodash.U.<java.lang.String>newLinkedHashSet());
        }
        return builder.toString();
    }

    public static java.lang.String toXml(java.util.Map map) {
        return com.github.underscore.lodash.Xml.toXml(map, com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TWO_SPACES);
    }

    @java.lang.SuppressWarnings("unchecked")
    private static java.lang.Object getValue(final java.lang.Object value) {
        if ((value instanceof java.util.Map) && ((((java.util.Map<java.lang.String, java.lang.Object>) (value)).entrySet().size()) == 1)) {
            final java.util.Map.Entry<java.lang.String, java.lang.Object> entry = ((java.util.Map<java.lang.String, java.lang.Object>) (value)).entrySet().iterator().next();
            if ((com.github.underscore.lodash.Xml.TEXT.equals(entry.getKey())) || (entry.getKey().equals(com.github.underscore.lodash.Xml.ELEMENT_TEXT))) {
                return entry.getValue();
            }
        }
        return value;
    }

    @java.lang.SuppressWarnings("unchecked")
    private static java.util.Map<java.lang.String, java.lang.Object> createMap(final org.w3c.dom.Node node, final com.github.underscore.Function<java.lang.Object, java.lang.Object> nodeMapper, java.util.Map<java.lang.String, java.lang.Object> attrMap, int[] uniqueIds, final com.github.underscore.Function<java.lang.Object, java.lang.Object> valueMapper, java.lang.String source, int[] sourceIndex) {
        final java.util.Map<java.lang.String, java.lang.Object> map = com.github.underscore.lodash.U.newLinkedHashMap();
        map.putAll(attrMap);
        final org.w3c.dom.NodeList nodeList = node.getChildNodes();
        for (int index = 0; index < (nodeList.getLength()); index++) {
            final org.w3c.dom.Node currentNode = nodeList.item(index);
            final java.lang.String name = currentNode.getNodeName();
            final java.lang.Object value;
            final int attributesLength = ((currentNode.getAttributes()) == null) ? 0 : currentNode.getAttributes().getLength();
            if ((currentNode.getNodeType()) == (org.w3c.dom.Node.ELEMENT_NODE)) {
                sourceIndex[0] = ((source.indexOf(("<" + name), sourceIndex[0])) + (name.length())) + 2;
                final java.util.Map<java.lang.String, java.lang.Object> attrMapLocal = com.github.underscore.lodash.U.newLinkedHashMap();
                if (attributesLength > 0) {
                    final java.util.regex.Matcher matcher = com.github.underscore.lodash.Xml.ATTRS.matcher(source.substring(sourceIndex[0], source.indexOf(">", sourceIndex[0])));
                    while (matcher.find()) {
                        com.github.underscore.lodash.Xml.addNodeValue(attrMapLocal, ('-' + (matcher.group(1))), matcher.group(2), nodeMapper, uniqueIds);
                    } 
                }
                value = com.github.underscore.lodash.Xml.createMap(currentNode, nodeMapper, attrMapLocal, uniqueIds, valueMapper, source, sourceIndex);
            }else {
                if (com.github.underscore.lodash.Xml.COMMENT.equals(name)) {
                    sourceIndex[0] = (source.indexOf("-->", sourceIndex[0])) + 3;
                }else
                    if (com.github.underscore.lodash.Xml.CDATA.equals(name)) {
                        sourceIndex[0] = (source.indexOf("]]>", sourceIndex[0])) + 3;
                    }

                value = currentNode.getTextContent();
            }
            if ((com.github.underscore.lodash.Xml.TEXT.equals(name)) && (valueMapper.apply(value).toString().isEmpty())) {
                continue;
            }
            com.github.underscore.lodash.Xml.addNodeValue(map, name, value, nodeMapper, uniqueIds);
        }
        return map;
    }

    @java.lang.SuppressWarnings("unchecked")
    private static void addNodeValue(final java.util.Map<java.lang.String, java.lang.Object> map, final java.lang.String name, final java.lang.Object value, final com.github.underscore.Function<java.lang.Object, java.lang.Object> nodeMapper, int[] uniqueIds) {
        if (map.containsKey(name)) {
            if (com.github.underscore.lodash.Xml.TEXT.equals(name)) {
                map.put((name + (uniqueIds[0])), nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
                uniqueIds[0] += 1;
            }else
                if (com.github.underscore.lodash.Xml.COMMENT.equals(name)) {
                    map.put((name + (uniqueIds[1])), nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
                    uniqueIds[1] += 1;
                }else
                    if (com.github.underscore.lodash.Xml.CDATA.equals(name)) {
                        map.put((name + (uniqueIds[2])), nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
                        uniqueIds[2] += 1;
                    }else {
                        final java.lang.Object object = map.get(name);
                        if (object instanceof java.util.List) {
                            com.github.underscore.lodash.Xml.addText(map, name, ((java.util.List<java.lang.Object>) (object)), value);
                        }else {
                            final java.util.List<java.lang.Object> objects = com.github.underscore.lodash.U.newArrayList();
                            objects.add(object);
                            com.github.underscore.lodash.Xml.addText(map, name, objects, value);
                            map.put(name, objects);
                        }
                    }


        }else {
            map.put(name, nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
        }
    }

    @java.lang.SuppressWarnings("unchecked")
    private static void addText(final java.util.Map<java.lang.String, java.lang.Object> map, final java.lang.String name, final java.util.List<java.lang.Object> objects, final java.lang.Object value) {
        int lastIndex = (map.size()) - 1;
        final int index = objects.size();
        while (true) {
            final java.util.Map.Entry lastElement = ((java.util.Map.Entry) (map.entrySet().toArray()[lastIndex]));
            if (name.equals(java.lang.String.valueOf(lastElement.getKey()))) {
                break;
            }
            final java.util.Map<java.lang.String, java.lang.Object> text = com.github.underscore.lodash.U.newLinkedHashMap();
            text.put(java.lang.String.valueOf(lastElement.getKey()), map.remove(lastElement.getKey()));
            objects.add(index, text);
            lastIndex -= 1;
        } 
        objects.add(com.github.underscore.lodash.Xml.getValue(value));
    }

    @java.lang.SuppressWarnings("unchecked")
    public static java.lang.Object fromXml(final java.lang.String xml, final com.github.underscore.Function<java.lang.Object, java.lang.Object> valueMapper) {
        if (xml == null) {
            return null;
        }
        try {
            org.w3c.dom.Document document = com.github.underscore.lodash.Xml.createDocument(xml);
            final java.lang.Object result = com.github.underscore.lodash.Xml.createMap(document, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
                public java.lang.Object apply(java.lang.Object object) {
                    return object;
                }
            }, java.util.Collections.<java.lang.String, java.lang.Object>emptyMap(), new int[]{ 1, 1, 1 }, valueMapper, xml, new int[]{ 0 });
            if (((document.getXmlEncoding()) != null) && (!("UTF-8".equalsIgnoreCase(document.getXmlEncoding())))) {
                ((java.util.Map) (result)).put(com.github.underscore.lodash.Xml.ENCODING, document.getXmlEncoding());
            }else
                if ((((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getKey().equals("root")) && (((((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getValue()) instanceof java.util.List) || ((((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getValue()) instanceof java.util.Map))) {
                    return ((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getValue();
                }

            return result;
        } catch (java.lang.Exception ex) {
            throw new java.lang.IllegalArgumentException(ex);
        }
    }

    public static java.lang.Object fromXml(final java.lang.String xml) {
        return com.github.underscore.lodash.Xml.fromXml(xml, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
            public java.lang.Object apply(java.lang.Object object) {
                return java.lang.String.valueOf(object).trim();
            }
        });
    }

    private static org.w3c.dom.Document createDocument(final java.lang.String xml) throws java.io.IOException, javax.xml.parsers.ParserConfigurationException, org.xml.sax.SAXException {
        final javax.xml.parsers.DocumentBuilderFactory factory = javax.xml.parsers.DocumentBuilderFactory.newInstance();
        factory.setNamespaceAware(true);
        factory.setFeature(javax.xml.XMLConstants.FEATURE_SECURE_PROCESSING, true);
        final javax.xml.parsers.DocumentBuilder builder = factory.newDocumentBuilder();
        builder.setErrorHandler(new org.xml.sax.helpers.DefaultHandler());
        return builder.parse(new org.xml.sax.InputSource(new java.io.StringReader(xml)));
    }

    public static java.lang.Object fromXmlMakeArrays(final java.lang.String xml) {
        try {
            org.w3c.dom.Document document = com.github.underscore.lodash.Xml.createDocument(xml);
            return com.github.underscore.lodash.Xml.createMap(document, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
                public java.lang.Object apply(java.lang.Object object) {
                    return object instanceof java.util.List ? object : com.github.underscore.lodash.U.newArrayList(java.util.Arrays.asList(object));
                }
            }, java.util.Collections.<java.lang.String, java.lang.Object>emptyMap(), new int[]{ 1, 1, 1 }, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
                public java.lang.Object apply(java.lang.Object object) {
                    return java.lang.String.valueOf(object).trim();
                }
            }, xml, new int[]{ 0 });
        } catch (java.lang.Exception ex) {
            throw new java.lang.IllegalArgumentException(ex);
        }
    }

    @java.lang.SuppressWarnings("unchecked")
    public static java.lang.String formatXml(java.lang.String xml, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep) {
        java.lang.Object result = com.github.underscore.lodash.Xml.fromXml(xml);
        if (result instanceof java.util.Map) {
            return com.github.underscore.lodash.Xml.toXml(((java.util.Map) (result)), identStep);
        }
        return com.github.underscore.lodash.Xml.toXml(((java.util.List) (result)), identStep);
    }

    public static java.lang.String formatXml(java.lang.String xml) {
        return com.github.underscore.lodash.Xml.formatXml(xml, com.github.underscore.lodash.Xml.XmlStringBuilder.Step.THREE_SPACES);
    }
}
16:26:20.465 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
16:26:20.465 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #8
16:26:20.465 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml:696 which is executed by 5 tests
88056
16:26:20.595 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:26:20.669 [pool-20-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (65 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:26:21.096 [pool-19-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Xml.java:590: warning: com.sun.org.apache.xerces.internal.util.XMLChar is internal proprietary API and may be removed in a future release
            if ((com.sun.org.apache.xerces.internal.util.XMLChar.isNameStart(ch)) && (ch != ':')) {
                                                        ^
Xml.java:600: warning: com.sun.org.apache.xerces.internal.util.XMLChar is internal proprietary API and may be removed in a future release
                    if ((com.sun.org.apache.xerces.internal.util.XMLChar.isName(ch)) && (ch != ':')) {
                                                                ^
Xml.java:707: error: non-static variable ident cannot be referenced from a static context
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident",com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                             ^
16:26:21.244 [pool-19-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public final class Xml {
    private static final java.lang.String NULL = "null";

    private static final java.lang.String ELEMENT_TEXT = "element";

    private static final java.lang.String CDATA = "#cdata-section";

    private static final java.lang.String COMMENT = "#comment";

    private static final java.lang.String ENCODING = "#encoding";

    private static final java.lang.String TEXT = "#text";

    private static final java.lang.String ELEMENT = ("<" + (com.github.underscore.lodash.Xml.ELEMENT_TEXT)) + ">";

    private static final java.lang.String CLOSED_ELEMENT = ("</" + (com.github.underscore.lodash.Xml.ELEMENT_TEXT)) + ">";

    private static final java.lang.String EMPTY_ELEMENT = (com.github.underscore.lodash.Xml.ELEMENT) + (com.github.underscore.lodash.Xml.CLOSED_ELEMENT);

    private static final java.lang.String NULL_ELEMENT = ((com.github.underscore.lodash.Xml.ELEMENT) + (com.github.underscore.lodash.Xml.NULL)) + (com.github.underscore.lodash.Xml.CLOSED_ELEMENT);

    private static final java.nio.charset.Charset UTF_8 = java.nio.charset.Charset.forName("UTF-8");

    private static final java.util.regex.Pattern ATTRS = java.util.regex.Pattern.compile(("((?:(?!\\s|=).)*)\\s*?=\\s*?[\"\']?((?:(?<=\")(?:(?<=\\\\)\"|[^\"])*|(?<=\')" + "(?:(?<=\\\\)\'|[^\'])*)|(?:(?!\"|\')(?:(?!\\/>|>|\\s).)+))"));

    public static class XmlStringBuilder {
        public enum Step {

            TWO_SPACES(2),
            THREE_SPACES(3),
            FOUR_SPACES(4),
            COMPACT(0),
            TABS(1);
            private int ident;

            Step(int ident) {
                this.ident = ident;
            }

            public int getIdent() {
                return ident;
            }
        }

        protected final java.lang.StringBuilder builder;

        private final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep;

        private int ident;

        public XmlStringBuilder() {
            builder = new java.lang.StringBuilder("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<root>\n");
            identStep = com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TWO_SPACES;
            ident = 2;
        }

        public XmlStringBuilder(java.lang.StringBuilder builder, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident) {
            this.builder = builder;
            this.identStep = identStep;
            this.ident = ident;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder append(final java.lang.String string) {
            builder.append(string);
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder fillSpaces() {
            for (int index = 0; index < (ident); index += 1) {
                builder.append(((identStep) == (com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TABS) ? '\t' : ' '));
            }
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder incIdent() {
            ident += identStep.getIdent();
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder decIdent() {
            ident -= identStep.getIdent();
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder newLine() {
            if ((identStep) != (com.github.underscore.lodash.Xml.XmlStringBuilder.Step.COMPACT)) {
                builder.append("\n");
            }
            return this;
        }

        public int getIdent() {
            return ident;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder.Step getIdentStep() {
            return identStep;
        }

        public java.lang.String toString() {
            return (builder.toString()) + "\n</root>";
        }
    }

    public static class XmlStringBuilderWithoutRoot extends com.github.underscore.lodash.Xml.XmlStringBuilder {
        public XmlStringBuilderWithoutRoot(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, java.lang.String encoding) {
            super(new java.lang.StringBuilder(((("<?xml version=\"1.0\" encoding=\"" + (com.github.underscore.lodash.U.escape(encoding))) + "\"?>") + (identStep == (com.github.underscore.lodash.Xml.XmlStringBuilder.Step.COMPACT) ? "" : "\n"))), identStep, 0);
        }

        public java.lang.String toString() {
            return builder.toString();
        }
    }

    public static class XmlStringBuilderWithoutHeader extends com.github.underscore.lodash.Xml.XmlStringBuilder {
        public XmlStringBuilderWithoutHeader(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident) {
            super(new java.lang.StringBuilder(), identStep, ident);
        }

        public java.lang.String toString() {
            return builder.toString();
        }
    }

    public static class XmlStringBuilderText extends com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader {
        public XmlStringBuilderText(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident) {
            super(identStep, ident);
        }
    }

    public static class XmlArray {
        public static void writeXml(java.util.Collection collection, java.lang.String name, com.github.underscore.lodash.Xml.XmlStringBuilder builder, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (collection == null) {
                builder.append(com.github.underscore.lodash.Xml.NULL);
                return;
            }
            if (name != null) {
                builder.fillSpaces().append("<").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(">").incIdent();
                if (!(collection.isEmpty())) {
                    builder.newLine();
                }
            }
            com.github.underscore.lodash.Xml.XmlArray.writeXml(collection, builder, name, parentTextFound, namespaces);
            if (name != null) {
                builder.decIdent().newLine().fillSpaces().append("</").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(">");
            }
        }

        @java.lang.SuppressWarnings("unchecked")
        private static void writeXml(java.util.Collection collection, com.github.underscore.lodash.Xml.XmlStringBuilder builder, java.lang.String name, final boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            boolean localParentTextFound = parentTextFound;
            final java.util.List entries = com.github.underscore.lodash.U.newArrayList(collection);
            for (int index = 0; index < (entries.size()); index += 1) {
                final java.lang.Object value = entries.get(index);
                final boolean addNewLine = (index < ((entries.size()) - 1)) && (!(java.lang.String.valueOf(entries.get((index + 1))).startsWith(("{" + (com.github.underscore.lodash.Xml.TEXT)))));
                if (value == null) {
                    builder.fillSpaces().append((((((("<" + (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">") + (com.github.underscore.lodash.Xml.NULL)) + "</") + (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">"));
                }else {
                    if ((value instanceof java.util.Map) && ((((java.util.Map) (value)).size()) == 1)) {
                        com.github.underscore.lodash.Xml.XmlObject.writeXml(((java.util.Map) (value)), null, builder, localParentTextFound, namespaces);
                        if (java.lang.String.valueOf(((java.util.Map.Entry) (((java.util.Map) (value)).entrySet().iterator().next())).getKey()).startsWith(com.github.underscore.lodash.Xml.TEXT)) {
                            localParentTextFound = true;
                            continue;
                        }
                    }else {
                        com.github.underscore.lodash.Xml.XmlValue.writeXml(value, (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : name), builder, localParentTextFound, namespaces);
                    }
                    localParentTextFound = false;
                }
                if (addNewLine) {
                    builder.newLine();
                }
            }
        }

        public static void writeXml(byte[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(short[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(int[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(long[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(float[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(double[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(boolean[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(char[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(java.lang.Object[] array, java.lang.String name, com.github.underscore.lodash.Xml.XmlStringBuilder builder, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        com.github.underscore.lodash.Xml.XmlValue.writeXml(array[i], (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : name), builder, parentTextFound, namespaces);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }
    }

    public static class XmlObject {
        @java.lang.SuppressWarnings("unchecked")
        public static void writeXml(java.util.Map map, java.lang.String name, final com.github.underscore.lodash.Xml.XmlStringBuilder builder, final boolean parentTextFound, final java.util.Set<java.lang.String> namespaces) {
            if (map == null) {
                com.github.underscore.lodash.Xml.XmlValue.writeXml(com.github.underscore.lodash.Xml.NULL, name, builder, false, namespaces);
                return;
            }
            final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems = com.github.underscore.lodash.U.newArrayList();
            final java.util.List<java.lang.String> attrs = com.github.underscore.lodash.U.newArrayList();
            final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep = builder.getIdentStep();
            final int ident = (builder.getIdent()) + (name == null ? 0 : builder.getIdentStep().getIdent());
            final java.util.List<java.util.Map.Entry> entries = com.github.underscore.lodash.U.newArrayList(map.entrySet());
            for (int index = 0; index < (entries.size()); index += 1) {
                final java.util.Map.Entry entry = entries.get(index);
                final boolean addNewLine = (index < ((entries.size()) - 1)) && (!(java.lang.String.valueOf(entries.get((index + 1)).getKey()).startsWith(com.github.underscore.lodash.Xml.TEXT)));
                if (((java.lang.String.valueOf(entry.getKey()).startsWith("-")) && (!((entry.getValue()) instanceof java.util.Map))) && (!((entry.getValue()) instanceof java.util.List))) {
                    attrs.add(((((" " + (com.github.underscore.lodash.Xml.XmlValue.escapeName(java.lang.String.valueOf(entry.getKey()).substring(1), namespaces))) + "=\"") + (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getValue())))) + "\""));
                    if (java.lang.String.valueOf(entry.getKey()).startsWith("-xmlns:")) {
                        namespaces.add(java.lang.String.valueOf(entry.getKey()).substring(7));
                    }
                }else
                    if (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getKey())).startsWith(com.github.underscore.lodash.Xml.TEXT)) {
                        com.github.underscore.lodash.Xml.XmlObject.addText(entry, elems, identStep, ident);
                    }else {
                        com.github.underscore.lodash.Xml.XmlObject.processElements(entry, identStep, ident, addNewLine, elems, namespaces);
                    }

            }
            if (name != null) {
                if (!parentTextFound) {
                    builder.fillSpaces();
                }
                builder.append("<").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(com.github.underscore.lodash.U.join(attrs, "")).append(">").incIdent();
                if ((!(elems.isEmpty())) && (!((elems.get(0)) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText))) {
                    builder.newLine();
                }
            }
            for (com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder1 : elems) {
                builder.append(localBuilder1.toString());
            }
            if (name != null) {
                builder.decIdent();
                if ((!(elems.isEmpty())) && (!((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText))) {
                    builder.newLine().fillSpaces();
                }
                builder.append("</").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(">");
            }
        }

        private static void processElements(final java.util.Map.Entry entry, final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident, final boolean addNewLine, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final java.util.Set<java.lang.String> namespaces) {
            if (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getKey())).startsWith(com.github.underscore.lodash.Xml.COMMENT)) {
                com.github.underscore.lodash.Xml.XmlObject.addComment(entry, identStep, ident, addNewLine, elems, "<!--", "-->");
            }else
                if (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getKey())).startsWith(com.github.underscore.lodash.Xml.CDATA)) {
                    com.github.underscore.lodash.Xml.XmlObject.addComment(entry, identStep, ident, addNewLine, elems, "<![CDATA[", "]]>");
                }else
                    if (((entry.getValue()) instanceof java.util.List) && (!(((java.util.List) (entry.getValue())).isEmpty()))) {
                        com.github.underscore.lodash.Xml.XmlObject.addElements(identStep, ident, entry, namespaces, elems, addNewLine);
                    }else {
                        com.github.underscore.lodash.Xml.XmlObject.addElement(identStep, ident, entry, namespaces, elems, addNewLine);
                    }


        }

        private static void addText(final java.util.Map.Entry entry, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident) {
            if ((entry.getValue()) instanceof java.util.List) {
                for (java.lang.Object value : ((java.util.List) (entry.getValue()))) {
                    elems.add(new com.github.underscore.lodash.Xml.XmlStringBuilderText(identStep, ident).append(com.github.underscore.lodash.U.escape(java.lang.String.valueOf(value))));
                }
            }else {
                elems.add(new com.github.underscore.lodash.Xml.XmlStringBuilderText(identStep, ident).append(com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getValue()))));
            }
        }

        private static void addElements(final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident, java.util.Map.Entry entry, java.util.Set<java.lang.String> namespaces, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final boolean addNewLine) {
            boolean parentTextFound = (!(elems.isEmpty())) && ((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText);
            final com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder;
            if ((java.lang.String.valueOf(((java.util.List) (entry.getValue())).get(0)).startsWith(("{" + (com.github.underscore.lodash.Xml.TEXT)))) || (java.lang.String.valueOf(((java.util.List) (entry.getValue())).get(((((java.util.List) (entry.getValue())).size()) - 1))).startsWith(("{" + (com.github.underscore.lodash.Xml.TEXT))))) {
                localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderText(identStep, ident);
            }else {
                localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader(identStep, ident);
            }
            com.github.underscore.lodash.Xml.XmlArray.writeXml(((java.util.List) (entry.getValue())), localBuilder, java.lang.String.valueOf(entry.getKey()), parentTextFound, namespaces);
            if (addNewLine) {
                localBuilder.newLine();
            }
            elems.add(localBuilder);
        }

        private static void addElement(final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident, java.util.Map.Entry entry, java.util.Set<java.lang.String> namespaces, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final boolean addNewLine) {
            boolean parentTextFound = (!(elems.isEmpty())) && ((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText);
            com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader(identStep, ident);
            com.github.underscore.lodash.Xml.XmlValue.writeXml(entry.getValue(), java.lang.String.valueOf(entry.getKey()), localBuilder, parentTextFound, namespaces);
            if (addNewLine) {
                localBuilder.newLine();
            }
            elems.add(localBuilder);
        }

        private static void addComment(java.util.Map.Entry entry, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident, boolean addNewLine, java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, java.lang.String openElement, java.lang.String closeElement) {
            if ((entry.getValue()) instanceof java.util.List) {
                for (java.util.Iterator iterator = ((java.util.List) (entry.getValue())).iterator(); iterator.hasNext();) {
                    com.github.underscore.lodash.Xml.XmlObject.addCommentValue(identStep, ident, java.lang.String.valueOf(iterator.next()), ((iterator.hasNext()) || addNewLine), elems, openElement, closeElement);
                }
            }else {
                com.github.underscore.lodash.Xml.XmlObject.addCommentValue(identStep, ident, java.lang.String.valueOf(entry.getValue()), addNewLine, elems, openElement, closeElement);
            }
        }

        private static void addCommentValue(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident, java.lang.String value, boolean addNewLine, java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, java.lang.String openElement, java.lang.String closeElement) {
            boolean parentTextFound = (!(elems.isEmpty())) && ((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText);
            com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader(identStep, ident);
            if (!parentTextFound) {
                localBuilder.fillSpaces();
            }
            localBuilder.append(openElement).append(value).append(closeElement);
            if (addNewLine) {
                localBuilder.newLine();
            }
            elems.add(localBuilder);
        }
    }

    public static class XmlValue {
        public static void writeXml(java.lang.Object value, java.lang.String name, com.github.underscore.lodash.Xml.XmlStringBuilder builder, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (value instanceof java.util.Map) {
                com.github.underscore.lodash.Xml.XmlObject.writeXml(((java.util.Map) (value)), name, builder, parentTextFound, namespaces);
                return;
            }
            if (value instanceof java.util.Collection) {
                com.github.underscore.lodash.Xml.XmlArray.writeXml(((java.util.Collection) (value)), name, builder, parentTextFound, namespaces);
                return;
            }
            if (!parentTextFound) {
                builder.fillSpaces();
            }
            builder.append((("<" + (com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">"));
            if (value == null) {
                builder.append(com.github.underscore.lodash.Xml.NULL);
            }else
                if (value instanceof java.lang.String) {
                    builder.append(com.github.underscore.lodash.Xml.XmlValue.escape(((java.lang.String) (value))));
                }else {
                    com.github.underscore.lodash.Xml.XmlValue.processArrays(value, builder, name, parentTextFound, namespaces);
                }

            builder.append((("</" + (com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">"));
        }

        private static void processArrays(java.lang.Object value, com.github.underscore.lodash.Xml.XmlStringBuilder builder, java.lang.String name, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (value instanceof java.lang.Double) {
                if ((((java.lang.Double) (value)).isInfinite()) || (((java.lang.Double) (value)).isNaN())) {
                    builder.append(com.github.underscore.lodash.Xml.NULL);
                }else {
                    builder.append(value.toString());
                }
            }else
                if (value instanceof java.lang.Float) {
                    if ((((java.lang.Float) (value)).isInfinite()) || (((java.lang.Float) (value)).isNaN())) {
                        builder.append(com.github.underscore.lodash.Xml.NULL);
                    }else {
                        builder.append(value.toString());
                    }
                }else
                    if (value instanceof java.lang.Number) {
                        builder.append(value.toString());
                    }else
                        if (value instanceof java.lang.Boolean) {
                            builder.append(value.toString());
                        }else
                            if (value instanceof byte[]) {
                                builder.newLine().incIdent();
                                com.github.underscore.lodash.Xml.XmlArray.writeXml(((byte[]) (value)), builder);
                                builder.decIdent().newLine().fillSpaces();
                            }else
                                if (value instanceof short[]) {
                                    builder.newLine().incIdent();
                                    com.github.underscore.lodash.Xml.XmlArray.writeXml(((short[]) (value)), builder);
                                    builder.decIdent().newLine().fillSpaces();
                                }else {
                                    com.github.underscore.lodash.Xml.XmlValue.processArrays2(value, builder, name, parentTextFound, namespaces);
                                }





        }

        private static void processArrays2(java.lang.Object value, com.github.underscore.lodash.Xml.XmlStringBuilder builder, java.lang.String name, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (value instanceof int[]) {
                builder.newLine().incIdent();
                com.github.underscore.lodash.Xml.XmlArray.writeXml(((int[]) (value)), builder);
                builder.decIdent().newLine().fillSpaces();
            }else
                if (value instanceof long[]) {
                    builder.newLine().incIdent();
                    com.github.underscore.lodash.Xml.XmlArray.writeXml(((long[]) (value)), builder);
                    builder.decIdent().newLine().fillSpaces();
                }else
                    if (value instanceof float[]) {
                        builder.newLine().incIdent();
                        com.github.underscore.lodash.Xml.XmlArray.writeXml(((float[]) (value)), builder);
                        builder.decIdent().newLine().fillSpaces();
                    }else
                        if (value instanceof double[]) {
                            builder.newLine().incIdent();
                            com.github.underscore.lodash.Xml.XmlArray.writeXml(((double[]) (value)), builder);
                            builder.decIdent().newLine().fillSpaces();
                        }else
                            if (value instanceof boolean[]) {
                                builder.newLine().incIdent();
                                com.github.underscore.lodash.Xml.XmlArray.writeXml(((boolean[]) (value)), builder);
                                builder.decIdent().newLine().fillSpaces();
                            }else
                                if (value instanceof char[]) {
                                    builder.newLine().incIdent();
                                    com.github.underscore.lodash.Xml.XmlArray.writeXml(((char[]) (value)), builder);
                                    builder.decIdent().newLine().fillSpaces();
                                }else
                                    if (value instanceof java.lang.Object[]) {
                                        builder.newLine().incIdent();
                                        com.github.underscore.lodash.Xml.XmlArray.writeXml(((java.lang.Object[]) (value)), name, builder, parentTextFound, namespaces);
                                        builder.decIdent().newLine().fillSpaces();
                                    }else {
                                        builder.append(value.toString());
                                    }






        }

        public static java.lang.String escapeName(java.lang.String name, java.util.Set<java.lang.String> namespaces) {
            final int length = name.length();
            if (length == 0) {
                return "__EE__EMPTY__EE__";
            }
            final java.lang.StringBuilder result = new java.lang.StringBuilder();
            char ch = name.charAt(0);
            if ((com.sun.org.apache.xerces.internal.util.XMLChar.isNameStart(ch)) && (ch != ':')) {
                result.append(ch);
            }else {
                result.append("__").append(com.github.underscore.lodash.Base32.encode(java.lang.Character.toString(ch))).append("__");
            }
            for (int i = 1; i < length; ++i) {
                ch = name.charAt(i);
                if ((ch == ':') && (("xmlns".equals(name.substring(0, i))) || (namespaces.contains(name.substring(0, i))))) {
                    result.append(ch);
                }else
                    if ((com.sun.org.apache.xerces.internal.util.XMLChar.isName(ch)) && (ch != ':')) {
                        result.append(ch);
                    }else {
                        result.append("__").append(com.github.underscore.lodash.Base32.encode(java.lang.Character.toString(ch))).append("__");
                    }

            }
            return result.toString();
        }

        public static java.lang.String escape(java.lang.String s) {
            if (s == null) {
                return null;
            }
            java.lang.StringBuilder sb = new java.lang.StringBuilder();
            com.github.underscore.lodash.Xml.XmlValue.escape(s, sb);
            return sb.toString();
        }

        private static void escape(java.lang.String s, java.lang.StringBuilder sb) {
            final int len = s.length();
            for (int i = 0; i < len; i++) {
                char ch = s.charAt(i);
                switch (ch) {
                    case '"' :
                        sb.append("&quot;");
                        break;
                    case '\'' :
                        sb.append("'");
                        break;
                    case '&' :
                        sb.append("&amp;");
                        break;
                    case '<' :
                        sb.append("&lt;");
                        break;
                    case '>' :
                        sb.append("&gt;");
                        break;
                    case '\b' :
                        sb.append("\\b");
                        break;
                    case '\f' :
                        sb.append("\\f");
                        break;
                    case '\n' :
                        sb.append("\n");
                        break;
                    case '\r' :
                        sb.append("\\r");
                        break;
                    case '\t' :
                        sb.append("\t");
                        break;
                    default :
                        if (((ch <= '\u001f') || ((ch >= '\u007f') && (ch <= '\u009f'))) || ((ch >= '\u2000') && (ch <= '\u20ff'))) {
                            java.lang.String ss = java.lang.Integer.toHexString(ch);
                            sb.append("&#x");
                            for (int k = 0; k < (4 - (ss.length())); k++) {
                                sb.append('0');
                            }
                            sb.append(ss.toUpperCase()).append(";");
                        }else {
                            sb.append(ch);
                        }
                        break;
                }
            }
        }
    }

    public static java.lang.String toXml(java.util.Collection collection, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep) {
        final com.github.underscore.lodash.Xml.XmlStringBuilder builder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutRoot(identStep, com.github.underscore.lodash.Xml.UTF_8.name());
        builder.append("<root>").incIdent();
        if ((collection == null) || (!(collection.isEmpty()))) {
            builder.newLine();
        }
        com.github.underscore.lodash.Xml.XmlArray.writeXml(collection, null, builder, false, com.github.underscore.lodash.U.<java.lang.String>newLinkedHashSet());
        return builder.newLine().append("</root>").toString();
    }

    public static java.lang.String toXml(java.util.Collection collection) {
        return com.github.underscore.lodash.Xml.toXml(collection, com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TWO_SPACES);
    }

    public static java.lang.String toXml(java.util.Map map, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep) {
        final com.github.underscore.lodash.Xml.XmlStringBuilder builder;
        final java.util.Map localMap;
        if ((map != null) && (map.containsKey(com.github.underscore.lodash.Xml.ENCODING))) {
            builder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutRoot(identStep, java.lang.String.valueOf(map.get(com.github.underscore.lodash.Xml.ENCODING)));
            localMap = ((java.util.Map) (com.github.underscore.lodash.U.clone(map)));
            localMap.remove(com.github.underscore.lodash.Xml.ENCODING);
        }else {
            builder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutRoot(identStep, com.github.underscore.lodash.Xml.UTF_8.name());
            localMap = map;
        }
        if ((((localMap == null) || ((localMap.size()) != 1)) || (java.lang.String.valueOf(((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getKey()).startsWith("-"))) || ((((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getValue()) instanceof java.util.List)) {
            final java.lang.String name;
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(5).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("com.github.underscore.lodash.Xml.ENCODING",com.github.underscore.lodash.Xml.ENCODING);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident",com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("(localMap != null)",(localMap != null));} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("com.github.underscore.lodash.Xml.NULL_ELEMENT",com.github.underscore.lodash.Xml.NULL_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("com.github.underscore.lodash.Xml.ATTRS",com.github.underscore.lodash.Xml.ATTRS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("identStep",identStep);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("com.github.underscore.lodash.Xml.TEXT",com.github.underscore.lodash.Xml.TEXT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("com.github.underscore.lodash.Xml.NULL",com.github.underscore.lodash.Xml.NULL);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("com.github.underscore.lodash.Xml.ELEMENT_TEXT",com.github.underscore.lodash.Xml.ELEMENT_TEXT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("com.github.underscore.lodash.Xml.CLOSED_ELEMENT",com.github.underscore.lodash.Xml.CLOSED_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("com.github.underscore.lodash.Xml.UTF_8",com.github.underscore.lodash.Xml.UTF_8);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("com.github.underscore.lodash.Xml.CDATA",com.github.underscore.lodash.Xml.CDATA);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("1",1);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("com.github.underscore.lodash.Xml.COMMENT",com.github.underscore.lodash.Xml.COMMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("com.github.underscore.lodash.Xml.EMPTY_ELEMENT",com.github.underscore.lodash.Xml.EMPTY_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("null",null);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("com.github.underscore.lodash.Xml.ELEMENT",com.github.underscore.lodash.Xml.ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("localMap",localMap);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("map",map);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectionEnds();
            }
            if (runtimeAngelicValue) if ((((localMap != null) && ((localMap.size()) == 1)) && ((((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getValue()) instanceof java.util.List)) && (!(((java.util.List) (((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getValue())).isEmpty()))) {
                name = java.lang.String.valueOf(((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getKey());
            }else {
                name = "root";
            }
            com.github.underscore.lodash.Xml.XmlObject.writeXml(localMap, name, builder, false, com.github.underscore.lodash.U.<java.lang.String>newLinkedHashSet());
        }else {
            com.github.underscore.lodash.Xml.XmlObject.writeXml(localMap, null, builder, false, com.github.underscore.lodash.U.<java.lang.String>newLinkedHashSet());
        }
        return builder.toString();
    }

    public static java.lang.String toXml(java.util.Map map) {
        return com.github.underscore.lodash.Xml.toXml(map, com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TWO_SPACES);
    }

    @java.lang.SuppressWarnings("unchecked")
    private static java.lang.Object getValue(final java.lang.Object value) {
        if ((value instanceof java.util.Map) && ((((java.util.Map<java.lang.String, java.lang.Object>) (value)).entrySet().size()) == 1)) {
            final java.util.Map.Entry<java.lang.String, java.lang.Object> entry = ((java.util.Map<java.lang.String, java.lang.Object>) (value)).entrySet().iterator().next();
            if ((com.github.underscore.lodash.Xml.TEXT.equals(entry.getKey())) || (entry.getKey().equals(com.github.underscore.lodash.Xml.ELEMENT_TEXT))) {
                return entry.getValue();
            }
        }
        return value;
    }

    @java.lang.SuppressWarnings("unchecked")
    private static java.util.Map<java.lang.String, java.lang.Object> createMap(final org.w3c.dom.Node node, final com.github.underscore.Function<java.lang.Object, java.lang.Object> nodeMapper, java.util.Map<java.lang.String, java.lang.Object> attrMap, int[] uniqueIds, final com.github.underscore.Function<java.lang.Object, java.lang.Object> valueMapper, java.lang.String source, int[] sourceIndex) {
        final java.util.Map<java.lang.String, java.lang.Object> map = com.github.underscore.lodash.U.newLinkedHashMap();
        map.putAll(attrMap);
        final org.w3c.dom.NodeList nodeList = node.getChildNodes();
        for (int index = 0; index < (nodeList.getLength()); index++) {
            final org.w3c.dom.Node currentNode = nodeList.item(index);
            final java.lang.String name = currentNode.getNodeName();
            final java.lang.Object value;
            final int attributesLength = ((currentNode.getAttributes()) == null) ? 0 : currentNode.getAttributes().getLength();
            if ((currentNode.getNodeType()) == (org.w3c.dom.Node.ELEMENT_NODE)) {
                sourceIndex[0] = ((source.indexOf(("<" + name), sourceIndex[0])) + (name.length())) + 2;
                final java.util.Map<java.lang.String, java.lang.Object> attrMapLocal = com.github.underscore.lodash.U.newLinkedHashMap();
                if (attributesLength > 0) {
                    final java.util.regex.Matcher matcher = com.github.underscore.lodash.Xml.ATTRS.matcher(source.substring(sourceIndex[0], source.indexOf(">", sourceIndex[0])));
                    while (matcher.find()) {
                        com.github.underscore.lodash.Xml.addNodeValue(attrMapLocal, ('-' + (matcher.group(1))), matcher.group(2), nodeMapper, uniqueIds);
                    } 
                }
                value = com.github.underscore.lodash.Xml.createMap(currentNode, nodeMapper, attrMapLocal, uniqueIds, valueMapper, source, sourceIndex);
            }else {
                if (com.github.underscore.lodash.Xml.COMMENT.equals(name)) {
                    sourceIndex[0] = (source.indexOf("-->", sourceIndex[0])) + 3;
                }else
                    if (com.github.underscore.lodash.Xml.CDATA.equals(name)) {
                        sourceIndex[0] = (source.indexOf("]]>", sourceIndex[0])) + 3;
                    }

                value = currentNode.getTextContent();
            }
            if ((com.github.underscore.lodash.Xml.TEXT.equals(name)) && (valueMapper.apply(value).toString().isEmpty())) {
                continue;
            }
            com.github.underscore.lodash.Xml.addNodeValue(map, name, value, nodeMapper, uniqueIds);
        }
        return map;
    }

    @java.lang.SuppressWarnings("unchecked")
    private static void addNodeValue(final java.util.Map<java.lang.String, java.lang.Object> map, final java.lang.String name, final java.lang.Object value, final com.github.underscore.Function<java.lang.Object, java.lang.Object> nodeMapper, int[] uniqueIds) {
        if (map.containsKey(name)) {
            if (com.github.underscore.lodash.Xml.TEXT.equals(name)) {
                map.put((name + (uniqueIds[0])), nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
                uniqueIds[0] += 1;
            }else
                if (com.github.underscore.lodash.Xml.COMMENT.equals(name)) {
                    map.put((name + (uniqueIds[1])), nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
                    uniqueIds[1] += 1;
                }else
                    if (com.github.underscore.lodash.Xml.CDATA.equals(name)) {
                        map.put((name + (uniqueIds[2])), nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
                        uniqueIds[2] += 1;
                    }else {
                        final java.lang.Object object = map.get(name);
                        if (object instanceof java.util.List) {
                            com.github.underscore.lodash.Xml.addText(map, name, ((java.util.List<java.lang.Object>) (object)), value);
                        }else {
                            final java.util.List<java.lang.Object> objects = com.github.underscore.lodash.U.newArrayList();
                            objects.add(object);
                            com.github.underscore.lodash.Xml.addText(map, name, objects, value);
                            map.put(name, objects);
                        }
                    }


        }else {
            map.put(name, nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
        }
    }

    @java.lang.SuppressWarnings("unchecked")
    private static void addText(final java.util.Map<java.lang.String, java.lang.Object> map, final java.lang.String name, final java.util.List<java.lang.Object> objects, final java.lang.Object value) {
        int lastIndex = (map.size()) - 1;
        final int index = objects.size();
        while (true) {
            final java.util.Map.Entry lastElement = ((java.util.Map.Entry) (map.entrySet().toArray()[lastIndex]));
            if (name.equals(java.lang.String.valueOf(lastElement.getKey()))) {
                break;
            }
            final java.util.Map<java.lang.String, java.lang.Object> text = com.github.underscore.lodash.U.newLinkedHashMap();
            text.put(java.lang.String.valueOf(lastElement.getKey()), map.remove(lastElement.getKey()));
            objects.add(index, text);
            lastIndex -= 1;
        } 
        objects.add(com.github.underscore.lodash.Xml.getValue(value));
    }

    @java.lang.SuppressWarnings("unchecked")
    public static java.lang.Object fromXml(final java.lang.String xml, final com.github.underscore.Function<java.lang.Object, java.lang.Object> valueMapper) {
        if (xml == null) {
            return null;
        }
        try {
            org.w3c.dom.Document document = com.github.underscore.lodash.Xml.createDocument(xml);
            final java.lang.Object result = com.github.underscore.lodash.Xml.createMap(document, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
                public java.lang.Object apply(java.lang.Object object) {
                    return object;
                }
            }, java.util.Collections.<java.lang.String, java.lang.Object>emptyMap(), new int[]{ 1, 1, 1 }, valueMapper, xml, new int[]{ 0 });
            if (((document.getXmlEncoding()) != null) && (!("UTF-8".equalsIgnoreCase(document.getXmlEncoding())))) {
                ((java.util.Map) (result)).put(com.github.underscore.lodash.Xml.ENCODING, document.getXmlEncoding());
            }else
                if ((((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getKey().equals("root")) && (((((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getValue()) instanceof java.util.List) || ((((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getValue()) instanceof java.util.Map))) {
                    return ((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getValue();
                }

            return result;
        } catch (java.lang.Exception ex) {
            throw new java.lang.IllegalArgumentException(ex);
        }
    }

    public static java.lang.Object fromXml(final java.lang.String xml) {
        return com.github.underscore.lodash.Xml.fromXml(xml, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
            public java.lang.Object apply(java.lang.Object object) {
                return java.lang.String.valueOf(object).trim();
            }
        });
    }

    private static org.w3c.dom.Document createDocument(final java.lang.String xml) throws java.io.IOException, javax.xml.parsers.ParserConfigurationException, org.xml.sax.SAXException {
        final javax.xml.parsers.DocumentBuilderFactory factory = javax.xml.parsers.DocumentBuilderFactory.newInstance();
        factory.setNamespaceAware(true);
        factory.setFeature(javax.xml.XMLConstants.FEATURE_SECURE_PROCESSING, true);
        final javax.xml.parsers.DocumentBuilder builder = factory.newDocumentBuilder();
        builder.setErrorHandler(new org.xml.sax.helpers.DefaultHandler());
        return builder.parse(new org.xml.sax.InputSource(new java.io.StringReader(xml)));
    }

    public static java.lang.Object fromXmlMakeArrays(final java.lang.String xml) {
        try {
            org.w3c.dom.Document document = com.github.underscore.lodash.Xml.createDocument(xml);
            return com.github.underscore.lodash.Xml.createMap(document, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
                public java.lang.Object apply(java.lang.Object object) {
                    return object instanceof java.util.List ? object : com.github.underscore.lodash.U.newArrayList(java.util.Arrays.asList(object));
                }
            }, java.util.Collections.<java.lang.String, java.lang.Object>emptyMap(), new int[]{ 1, 1, 1 }, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
                public java.lang.Object apply(java.lang.Object object) {
                    return java.lang.String.valueOf(object).trim();
                }
            }, xml, new int[]{ 0 });
        } catch (java.lang.Exception ex) {
            throw new java.lang.IllegalArgumentException(ex);
        }
    }

    @java.lang.SuppressWarnings("unchecked")
    public static java.lang.String formatXml(java.lang.String xml, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep) {
        java.lang.Object result = com.github.underscore.lodash.Xml.fromXml(xml);
        if (result instanceof java.util.Map) {
            return com.github.underscore.lodash.Xml.toXml(((java.util.Map) (result)), identStep);
        }
        return com.github.underscore.lodash.Xml.toXml(((java.util.List) (result)), identStep);
    }

    public static java.lang.String formatXml(java.lang.String xml) {
        return com.github.underscore.lodash.Xml.formatXml(xml, com.github.underscore.lodash.Xml.XmlStringBuilder.Step.THREE_SPACES);
    }
}
16:26:21.245 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
16:26:21.245 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:26:21.318 [pool-22-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (63 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:26:21.736 [pool-21-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Xml.java:590: warning: com.sun.org.apache.xerces.internal.util.XMLChar is internal proprietary API and may be removed in a future release
            if ((com.sun.org.apache.xerces.internal.util.XMLChar.isNameStart(ch)) && (ch != ':')) {
                                                        ^
Xml.java:600: warning: com.sun.org.apache.xerces.internal.util.XMLChar is internal proprietary API and may be removed in a future release
                    if ((com.sun.org.apache.xerces.internal.util.XMLChar.isName(ch)) && (ch != ':')) {
                                                                ^
Xml.java:707: error: non-static variable ident cannot be referenced from a static context
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident",com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                             ^
16:26:21.889 [pool-21-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public final class Xml {
    private static final java.lang.String NULL = "null";

    private static final java.lang.String ELEMENT_TEXT = "element";

    private static final java.lang.String CDATA = "#cdata-section";

    private static final java.lang.String COMMENT = "#comment";

    private static final java.lang.String ENCODING = "#encoding";

    private static final java.lang.String TEXT = "#text";

    private static final java.lang.String ELEMENT = ("<" + (com.github.underscore.lodash.Xml.ELEMENT_TEXT)) + ">";

    private static final java.lang.String CLOSED_ELEMENT = ("</" + (com.github.underscore.lodash.Xml.ELEMENT_TEXT)) + ">";

    private static final java.lang.String EMPTY_ELEMENT = (com.github.underscore.lodash.Xml.ELEMENT) + (com.github.underscore.lodash.Xml.CLOSED_ELEMENT);

    private static final java.lang.String NULL_ELEMENT = ((com.github.underscore.lodash.Xml.ELEMENT) + (com.github.underscore.lodash.Xml.NULL)) + (com.github.underscore.lodash.Xml.CLOSED_ELEMENT);

    private static final java.nio.charset.Charset UTF_8 = java.nio.charset.Charset.forName("UTF-8");

    private static final java.util.regex.Pattern ATTRS = java.util.regex.Pattern.compile(("((?:(?!\\s|=).)*)\\s*?=\\s*?[\"\']?((?:(?<=\")(?:(?<=\\\\)\"|[^\"])*|(?<=\')" + "(?:(?<=\\\\)\'|[^\'])*)|(?:(?!\"|\')(?:(?!\\/>|>|\\s).)+))"));

    public static class XmlStringBuilder {
        public enum Step {

            TWO_SPACES(2),
            THREE_SPACES(3),
            FOUR_SPACES(4),
            COMPACT(0),
            TABS(1);
            private int ident;

            Step(int ident) {
                this.ident = ident;
            }

            public int getIdent() {
                return ident;
            }
        }

        protected final java.lang.StringBuilder builder;

        private final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep;

        private int ident;

        public XmlStringBuilder() {
            builder = new java.lang.StringBuilder("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<root>\n");
            identStep = com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TWO_SPACES;
            ident = 2;
        }

        public XmlStringBuilder(java.lang.StringBuilder builder, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident) {
            this.builder = builder;
            this.identStep = identStep;
            this.ident = ident;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder append(final java.lang.String string) {
            builder.append(string);
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder fillSpaces() {
            for (int index = 0; index < (ident); index += 1) {
                builder.append(((identStep) == (com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TABS) ? '\t' : ' '));
            }
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder incIdent() {
            ident += identStep.getIdent();
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder decIdent() {
            ident -= identStep.getIdent();
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder newLine() {
            if ((identStep) != (com.github.underscore.lodash.Xml.XmlStringBuilder.Step.COMPACT)) {
                builder.append("\n");
            }
            return this;
        }

        public int getIdent() {
            return ident;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder.Step getIdentStep() {
            return identStep;
        }

        public java.lang.String toString() {
            return (builder.toString()) + "\n</root>";
        }
    }

    public static class XmlStringBuilderWithoutRoot extends com.github.underscore.lodash.Xml.XmlStringBuilder {
        public XmlStringBuilderWithoutRoot(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, java.lang.String encoding) {
            super(new java.lang.StringBuilder(((("<?xml version=\"1.0\" encoding=\"" + (com.github.underscore.lodash.U.escape(encoding))) + "\"?>") + (identStep == (com.github.underscore.lodash.Xml.XmlStringBuilder.Step.COMPACT) ? "" : "\n"))), identStep, 0);
        }

        public java.lang.String toString() {
            return builder.toString();
        }
    }

    public static class XmlStringBuilderWithoutHeader extends com.github.underscore.lodash.Xml.XmlStringBuilder {
        public XmlStringBuilderWithoutHeader(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident) {
            super(new java.lang.StringBuilder(), identStep, ident);
        }

        public java.lang.String toString() {
            return builder.toString();
        }
    }

    public static class XmlStringBuilderText extends com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader {
        public XmlStringBuilderText(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident) {
            super(identStep, ident);
        }
    }

    public static class XmlArray {
        public static void writeXml(java.util.Collection collection, java.lang.String name, com.github.underscore.lodash.Xml.XmlStringBuilder builder, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (collection == null) {
                builder.append(com.github.underscore.lodash.Xml.NULL);
                return;
            }
            if (name != null) {
                builder.fillSpaces().append("<").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(">").incIdent();
                if (!(collection.isEmpty())) {
                    builder.newLine();
                }
            }
            com.github.underscore.lodash.Xml.XmlArray.writeXml(collection, builder, name, parentTextFound, namespaces);
            if (name != null) {
                builder.decIdent().newLine().fillSpaces().append("</").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(">");
            }
        }

        @java.lang.SuppressWarnings("unchecked")
        private static void writeXml(java.util.Collection collection, com.github.underscore.lodash.Xml.XmlStringBuilder builder, java.lang.String name, final boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            boolean localParentTextFound = parentTextFound;
            final java.util.List entries = com.github.underscore.lodash.U.newArrayList(collection);
            for (int index = 0; index < (entries.size()); index += 1) {
                final java.lang.Object value = entries.get(index);
                final boolean addNewLine = (index < ((entries.size()) - 1)) && (!(java.lang.String.valueOf(entries.get((index + 1))).startsWith(("{" + (com.github.underscore.lodash.Xml.TEXT)))));
                if (value == null) {
                    builder.fillSpaces().append((((((("<" + (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">") + (com.github.underscore.lodash.Xml.NULL)) + "</") + (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">"));
                }else {
                    if ((value instanceof java.util.Map) && ((((java.util.Map) (value)).size()) == 1)) {
                        com.github.underscore.lodash.Xml.XmlObject.writeXml(((java.util.Map) (value)), null, builder, localParentTextFound, namespaces);
                        if (java.lang.String.valueOf(((java.util.Map.Entry) (((java.util.Map) (value)).entrySet().iterator().next())).getKey()).startsWith(com.github.underscore.lodash.Xml.TEXT)) {
                            localParentTextFound = true;
                            continue;
                        }
                    }else {
                        com.github.underscore.lodash.Xml.XmlValue.writeXml(value, (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : name), builder, localParentTextFound, namespaces);
                    }
                    localParentTextFound = false;
                }
                if (addNewLine) {
                    builder.newLine();
                }
            }
        }

        public static void writeXml(byte[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(short[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(int[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(long[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(float[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(double[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(boolean[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(char[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(java.lang.Object[] array, java.lang.String name, com.github.underscore.lodash.Xml.XmlStringBuilder builder, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        com.github.underscore.lodash.Xml.XmlValue.writeXml(array[i], (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : name), builder, parentTextFound, namespaces);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }
    }

    public static class XmlObject {
        @java.lang.SuppressWarnings("unchecked")
        public static void writeXml(java.util.Map map, java.lang.String name, final com.github.underscore.lodash.Xml.XmlStringBuilder builder, final boolean parentTextFound, final java.util.Set<java.lang.String> namespaces) {
            if (map == null) {
                com.github.underscore.lodash.Xml.XmlValue.writeXml(com.github.underscore.lodash.Xml.NULL, name, builder, false, namespaces);
                return;
            }
            final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems = com.github.underscore.lodash.U.newArrayList();
            final java.util.List<java.lang.String> attrs = com.github.underscore.lodash.U.newArrayList();
            final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep = builder.getIdentStep();
            final int ident = (builder.getIdent()) + (name == null ? 0 : builder.getIdentStep().getIdent());
            final java.util.List<java.util.Map.Entry> entries = com.github.underscore.lodash.U.newArrayList(map.entrySet());
            for (int index = 0; index < (entries.size()); index += 1) {
                final java.util.Map.Entry entry = entries.get(index);
                final boolean addNewLine = (index < ((entries.size()) - 1)) && (!(java.lang.String.valueOf(entries.get((index + 1)).getKey()).startsWith(com.github.underscore.lodash.Xml.TEXT)));
                if (((java.lang.String.valueOf(entry.getKey()).startsWith("-")) && (!((entry.getValue()) instanceof java.util.Map))) && (!((entry.getValue()) instanceof java.util.List))) {
                    attrs.add(((((" " + (com.github.underscore.lodash.Xml.XmlValue.escapeName(java.lang.String.valueOf(entry.getKey()).substring(1), namespaces))) + "=\"") + (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getValue())))) + "\""));
                    if (java.lang.String.valueOf(entry.getKey()).startsWith("-xmlns:")) {
                        namespaces.add(java.lang.String.valueOf(entry.getKey()).substring(7));
                    }
                }else
                    if (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getKey())).startsWith(com.github.underscore.lodash.Xml.TEXT)) {
                        com.github.underscore.lodash.Xml.XmlObject.addText(entry, elems, identStep, ident);
                    }else {
                        com.github.underscore.lodash.Xml.XmlObject.processElements(entry, identStep, ident, addNewLine, elems, namespaces);
                    }

            }
            if (name != null) {
                if (!parentTextFound) {
                    builder.fillSpaces();
                }
                builder.append("<").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(com.github.underscore.lodash.U.join(attrs, "")).append(">").incIdent();
                if ((!(elems.isEmpty())) && (!((elems.get(0)) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText))) {
                    builder.newLine();
                }
            }
            for (com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder1 : elems) {
                builder.append(localBuilder1.toString());
            }
            if (name != null) {
                builder.decIdent();
                if ((!(elems.isEmpty())) && (!((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText))) {
                    builder.newLine().fillSpaces();
                }
                builder.append("</").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(">");
            }
        }

        private static void processElements(final java.util.Map.Entry entry, final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident, final boolean addNewLine, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final java.util.Set<java.lang.String> namespaces) {
            if (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getKey())).startsWith(com.github.underscore.lodash.Xml.COMMENT)) {
                com.github.underscore.lodash.Xml.XmlObject.addComment(entry, identStep, ident, addNewLine, elems, "<!--", "-->");
            }else
                if (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getKey())).startsWith(com.github.underscore.lodash.Xml.CDATA)) {
                    com.github.underscore.lodash.Xml.XmlObject.addComment(entry, identStep, ident, addNewLine, elems, "<![CDATA[", "]]>");
                }else
                    if (((entry.getValue()) instanceof java.util.List) && (!(((java.util.List) (entry.getValue())).isEmpty()))) {
                        com.github.underscore.lodash.Xml.XmlObject.addElements(identStep, ident, entry, namespaces, elems, addNewLine);
                    }else {
                        com.github.underscore.lodash.Xml.XmlObject.addElement(identStep, ident, entry, namespaces, elems, addNewLine);
                    }


        }

        private static void addText(final java.util.Map.Entry entry, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident) {
            if ((entry.getValue()) instanceof java.util.List) {
                for (java.lang.Object value : ((java.util.List) (entry.getValue()))) {
                    elems.add(new com.github.underscore.lodash.Xml.XmlStringBuilderText(identStep, ident).append(com.github.underscore.lodash.U.escape(java.lang.String.valueOf(value))));
                }
            }else {
                elems.add(new com.github.underscore.lodash.Xml.XmlStringBuilderText(identStep, ident).append(com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getValue()))));
            }
        }

        private static void addElements(final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident, java.util.Map.Entry entry, java.util.Set<java.lang.String> namespaces, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final boolean addNewLine) {
            boolean parentTextFound = (!(elems.isEmpty())) && ((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText);
            final com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder;
            if ((java.lang.String.valueOf(((java.util.List) (entry.getValue())).get(0)).startsWith(("{" + (com.github.underscore.lodash.Xml.TEXT)))) || (java.lang.String.valueOf(((java.util.List) (entry.getValue())).get(((((java.util.List) (entry.getValue())).size()) - 1))).startsWith(("{" + (com.github.underscore.lodash.Xml.TEXT))))) {
                localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderText(identStep, ident);
            }else {
                localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader(identStep, ident);
            }
            com.github.underscore.lodash.Xml.XmlArray.writeXml(((java.util.List) (entry.getValue())), localBuilder, java.lang.String.valueOf(entry.getKey()), parentTextFound, namespaces);
            if (addNewLine) {
                localBuilder.newLine();
            }
            elems.add(localBuilder);
        }

        private static void addElement(final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident, java.util.Map.Entry entry, java.util.Set<java.lang.String> namespaces, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final boolean addNewLine) {
            boolean parentTextFound = (!(elems.isEmpty())) && ((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText);
            com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader(identStep, ident);
            com.github.underscore.lodash.Xml.XmlValue.writeXml(entry.getValue(), java.lang.String.valueOf(entry.getKey()), localBuilder, parentTextFound, namespaces);
            if (addNewLine) {
                localBuilder.newLine();
            }
            elems.add(localBuilder);
        }

        private static void addComment(java.util.Map.Entry entry, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident, boolean addNewLine, java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, java.lang.String openElement, java.lang.String closeElement) {
            if ((entry.getValue()) instanceof java.util.List) {
                for (java.util.Iterator iterator = ((java.util.List) (entry.getValue())).iterator(); iterator.hasNext();) {
                    com.github.underscore.lodash.Xml.XmlObject.addCommentValue(identStep, ident, java.lang.String.valueOf(iterator.next()), ((iterator.hasNext()) || addNewLine), elems, openElement, closeElement);
                }
            }else {
                com.github.underscore.lodash.Xml.XmlObject.addCommentValue(identStep, ident, java.lang.String.valueOf(entry.getValue()), addNewLine, elems, openElement, closeElement);
            }
        }

        private static void addCommentValue(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident, java.lang.String value, boolean addNewLine, java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, java.lang.String openElement, java.lang.String closeElement) {
            boolean parentTextFound = (!(elems.isEmpty())) && ((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText);
            com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader(identStep, ident);
            if (!parentTextFound) {
                localBuilder.fillSpaces();
            }
            localBuilder.append(openElement).append(value).append(closeElement);
            if (addNewLine) {
                localBuilder.newLine();
            }
            elems.add(localBuilder);
        }
    }

    public static class XmlValue {
        public static void writeXml(java.lang.Object value, java.lang.String name, com.github.underscore.lodash.Xml.XmlStringBuilder builder, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (value instanceof java.util.Map) {
                com.github.underscore.lodash.Xml.XmlObject.writeXml(((java.util.Map) (value)), name, builder, parentTextFound, namespaces);
                return;
            }
            if (value instanceof java.util.Collection) {
                com.github.underscore.lodash.Xml.XmlArray.writeXml(((java.util.Collection) (value)), name, builder, parentTextFound, namespaces);
                return;
            }
            if (!parentTextFound) {
                builder.fillSpaces();
            }
            builder.append((("<" + (com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">"));
            if (value == null) {
                builder.append(com.github.underscore.lodash.Xml.NULL);
            }else
                if (value instanceof java.lang.String) {
                    builder.append(com.github.underscore.lodash.Xml.XmlValue.escape(((java.lang.String) (value))));
                }else {
                    com.github.underscore.lodash.Xml.XmlValue.processArrays(value, builder, name, parentTextFound, namespaces);
                }

            builder.append((("</" + (com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">"));
        }

        private static void processArrays(java.lang.Object value, com.github.underscore.lodash.Xml.XmlStringBuilder builder, java.lang.String name, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (value instanceof java.lang.Double) {
                if ((((java.lang.Double) (value)).isInfinite()) || (((java.lang.Double) (value)).isNaN())) {
                    builder.append(com.github.underscore.lodash.Xml.NULL);
                }else {
                    builder.append(value.toString());
                }
            }else
                if (value instanceof java.lang.Float) {
                    if ((((java.lang.Float) (value)).isInfinite()) || (((java.lang.Float) (value)).isNaN())) {
                        builder.append(com.github.underscore.lodash.Xml.NULL);
                    }else {
                        builder.append(value.toString());
                    }
                }else
                    if (value instanceof java.lang.Number) {
                        builder.append(value.toString());
                    }else
                        if (value instanceof java.lang.Boolean) {
                            builder.append(value.toString());
                        }else
                            if (value instanceof byte[]) {
                                builder.newLine().incIdent();
                                com.github.underscore.lodash.Xml.XmlArray.writeXml(((byte[]) (value)), builder);
                                builder.decIdent().newLine().fillSpaces();
                            }else
                                if (value instanceof short[]) {
                                    builder.newLine().incIdent();
                                    com.github.underscore.lodash.Xml.XmlArray.writeXml(((short[]) (value)), builder);
                                    builder.decIdent().newLine().fillSpaces();
                                }else {
                                    com.github.underscore.lodash.Xml.XmlValue.processArrays2(value, builder, name, parentTextFound, namespaces);
                                }





        }

        private static void processArrays2(java.lang.Object value, com.github.underscore.lodash.Xml.XmlStringBuilder builder, java.lang.String name, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (value instanceof int[]) {
                builder.newLine().incIdent();
                com.github.underscore.lodash.Xml.XmlArray.writeXml(((int[]) (value)), builder);
                builder.decIdent().newLine().fillSpaces();
            }else
                if (value instanceof long[]) {
                    builder.newLine().incIdent();
                    com.github.underscore.lodash.Xml.XmlArray.writeXml(((long[]) (value)), builder);
                    builder.decIdent().newLine().fillSpaces();
                }else
                    if (value instanceof float[]) {
                        builder.newLine().incIdent();
                        com.github.underscore.lodash.Xml.XmlArray.writeXml(((float[]) (value)), builder);
                        builder.decIdent().newLine().fillSpaces();
                    }else
                        if (value instanceof double[]) {
                            builder.newLine().incIdent();
                            com.github.underscore.lodash.Xml.XmlArray.writeXml(((double[]) (value)), builder);
                            builder.decIdent().newLine().fillSpaces();
                        }else
                            if (value instanceof boolean[]) {
                                builder.newLine().incIdent();
                                com.github.underscore.lodash.Xml.XmlArray.writeXml(((boolean[]) (value)), builder);
                                builder.decIdent().newLine().fillSpaces();
                            }else
                                if (value instanceof char[]) {
                                    builder.newLine().incIdent();
                                    com.github.underscore.lodash.Xml.XmlArray.writeXml(((char[]) (value)), builder);
                                    builder.decIdent().newLine().fillSpaces();
                                }else
                                    if (value instanceof java.lang.Object[]) {
                                        builder.newLine().incIdent();
                                        com.github.underscore.lodash.Xml.XmlArray.writeXml(((java.lang.Object[]) (value)), name, builder, parentTextFound, namespaces);
                                        builder.decIdent().newLine().fillSpaces();
                                    }else {
                                        builder.append(value.toString());
                                    }






        }

        public static java.lang.String escapeName(java.lang.String name, java.util.Set<java.lang.String> namespaces) {
            final int length = name.length();
            if (length == 0) {
                return "__EE__EMPTY__EE__";
            }
            final java.lang.StringBuilder result = new java.lang.StringBuilder();
            char ch = name.charAt(0);
            if ((com.sun.org.apache.xerces.internal.util.XMLChar.isNameStart(ch)) && (ch != ':')) {
                result.append(ch);
            }else {
                result.append("__").append(com.github.underscore.lodash.Base32.encode(java.lang.Character.toString(ch))).append("__");
            }
            for (int i = 1; i < length; ++i) {
                ch = name.charAt(i);
                if ((ch == ':') && (("xmlns".equals(name.substring(0, i))) || (namespaces.contains(name.substring(0, i))))) {
                    result.append(ch);
                }else
                    if ((com.sun.org.apache.xerces.internal.util.XMLChar.isName(ch)) && (ch != ':')) {
                        result.append(ch);
                    }else {
                        result.append("__").append(com.github.underscore.lodash.Base32.encode(java.lang.Character.toString(ch))).append("__");
                    }

            }
            return result.toString();
        }

        public static java.lang.String escape(java.lang.String s) {
            if (s == null) {
                return null;
            }
            java.lang.StringBuilder sb = new java.lang.StringBuilder();
            com.github.underscore.lodash.Xml.XmlValue.escape(s, sb);
            return sb.toString();
        }

        private static void escape(java.lang.String s, java.lang.StringBuilder sb) {
            final int len = s.length();
            for (int i = 0; i < len; i++) {
                char ch = s.charAt(i);
                switch (ch) {
                    case '"' :
                        sb.append("&quot;");
                        break;
                    case '\'' :
                        sb.append("'");
                        break;
                    case '&' :
                        sb.append("&amp;");
                        break;
                    case '<' :
                        sb.append("&lt;");
                        break;
                    case '>' :
                        sb.append("&gt;");
                        break;
                    case '\b' :
                        sb.append("\\b");
                        break;
                    case '\f' :
                        sb.append("\\f");
                        break;
                    case '\n' :
                        sb.append("\n");
                        break;
                    case '\r' :
                        sb.append("\\r");
                        break;
                    case '\t' :
                        sb.append("\t");
                        break;
                    default :
                        if (((ch <= '\u001f') || ((ch >= '\u007f') && (ch <= '\u009f'))) || ((ch >= '\u2000') && (ch <= '\u20ff'))) {
                            java.lang.String ss = java.lang.Integer.toHexString(ch);
                            sb.append("&#x");
                            for (int k = 0; k < (4 - (ss.length())); k++) {
                                sb.append('0');
                            }
                            sb.append(ss.toUpperCase()).append(";");
                        }else {
                            sb.append(ch);
                        }
                        break;
                }
            }
        }
    }

    public static java.lang.String toXml(java.util.Collection collection, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep) {
        final com.github.underscore.lodash.Xml.XmlStringBuilder builder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutRoot(identStep, com.github.underscore.lodash.Xml.UTF_8.name());
        builder.append("<root>").incIdent();
        if ((collection == null) || (!(collection.isEmpty()))) {
            builder.newLine();
        }
        com.github.underscore.lodash.Xml.XmlArray.writeXml(collection, null, builder, false, com.github.underscore.lodash.U.<java.lang.String>newLinkedHashSet());
        return builder.newLine().append("</root>").toString();
    }

    public static java.lang.String toXml(java.util.Collection collection) {
        return com.github.underscore.lodash.Xml.toXml(collection, com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TWO_SPACES);
    }

    public static java.lang.String toXml(java.util.Map map, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep) {
        final com.github.underscore.lodash.Xml.XmlStringBuilder builder;
        final java.util.Map localMap;
        if ((map != null) && (map.containsKey(com.github.underscore.lodash.Xml.ENCODING))) {
            builder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutRoot(identStep, java.lang.String.valueOf(map.get(com.github.underscore.lodash.Xml.ENCODING)));
            localMap = ((java.util.Map) (com.github.underscore.lodash.U.clone(map)));
            localMap.remove(com.github.underscore.lodash.Xml.ENCODING);
        }else {
            builder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutRoot(identStep, com.github.underscore.lodash.Xml.UTF_8.name());
            localMap = map;
        }
        if ((((localMap == null) || ((localMap.size()) != 1)) || (java.lang.String.valueOf(((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getKey()).startsWith("-"))) || ((((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getValue()) instanceof java.util.List)) {
            final java.lang.String name;
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = (((localMap != null) && ((localMap.size()) == 1)) && ((((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getValue()) instanceof java.util.List)) && (!(((java.util.List) (((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getValue())).isEmpty()));
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(6).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("com.github.underscore.lodash.Xml.ENCODING",com.github.underscore.lodash.Xml.ENCODING);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident",com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("(localMap != null)",(localMap != null));} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("com.github.underscore.lodash.Xml.NULL_ELEMENT",com.github.underscore.lodash.Xml.NULL_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("com.github.underscore.lodash.Xml.ATTRS",com.github.underscore.lodash.Xml.ATTRS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("identStep",identStep);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("com.github.underscore.lodash.Xml.TEXT",com.github.underscore.lodash.Xml.TEXT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("com.github.underscore.lodash.Xml.NULL",com.github.underscore.lodash.Xml.NULL);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("com.github.underscore.lodash.Xml.ELEMENT_TEXT",com.github.underscore.lodash.Xml.ELEMENT_TEXT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("com.github.underscore.lodash.Xml.CLOSED_ELEMENT",com.github.underscore.lodash.Xml.CLOSED_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("com.github.underscore.lodash.Xml.UTF_8",com.github.underscore.lodash.Xml.UTF_8);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("com.github.underscore.lodash.Xml.CDATA",com.github.underscore.lodash.Xml.CDATA);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("1",1);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("com.github.underscore.lodash.Xml.COMMENT",com.github.underscore.lodash.Xml.COMMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("com.github.underscore.lodash.Xml.EMPTY_ELEMENT",com.github.underscore.lodash.Xml.EMPTY_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("null",null);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("com.github.underscore.lodash.Xml.ELEMENT",com.github.underscore.lodash.Xml.ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("localMap",localMap);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("map",map);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectionEnds();
            }
            if (runtimeAngelicValue) {
                name = java.lang.String.valueOf(((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getKey());
            }else {
                name = "root";
            }
            com.github.underscore.lodash.Xml.XmlObject.writeXml(localMap, name, builder, false, com.github.underscore.lodash.U.<java.lang.String>newLinkedHashSet());
        }else {
            com.github.underscore.lodash.Xml.XmlObject.writeXml(localMap, null, builder, false, com.github.underscore.lodash.U.<java.lang.String>newLinkedHashSet());
        }
        return builder.toString();
    }

    public static java.lang.String toXml(java.util.Map map) {
        return com.github.underscore.lodash.Xml.toXml(map, com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TWO_SPACES);
    }

    @java.lang.SuppressWarnings("unchecked")
    private static java.lang.Object getValue(final java.lang.Object value) {
        if ((value instanceof java.util.Map) && ((((java.util.Map<java.lang.String, java.lang.Object>) (value)).entrySet().size()) == 1)) {
            final java.util.Map.Entry<java.lang.String, java.lang.Object> entry = ((java.util.Map<java.lang.String, java.lang.Object>) (value)).entrySet().iterator().next();
            if ((com.github.underscore.lodash.Xml.TEXT.equals(entry.getKey())) || (entry.getKey().equals(com.github.underscore.lodash.Xml.ELEMENT_TEXT))) {
                return entry.getValue();
            }
        }
        return value;
    }

    @java.lang.SuppressWarnings("unchecked")
    private static java.util.Map<java.lang.String, java.lang.Object> createMap(final org.w3c.dom.Node node, final com.github.underscore.Function<java.lang.Object, java.lang.Object> nodeMapper, java.util.Map<java.lang.String, java.lang.Object> attrMap, int[] uniqueIds, final com.github.underscore.Function<java.lang.Object, java.lang.Object> valueMapper, java.lang.String source, int[] sourceIndex) {
        final java.util.Map<java.lang.String, java.lang.Object> map = com.github.underscore.lodash.U.newLinkedHashMap();
        map.putAll(attrMap);
        final org.w3c.dom.NodeList nodeList = node.getChildNodes();
        for (int index = 0; index < (nodeList.getLength()); index++) {
            final org.w3c.dom.Node currentNode = nodeList.item(index);
            final java.lang.String name = currentNode.getNodeName();
            final java.lang.Object value;
            final int attributesLength = ((currentNode.getAttributes()) == null) ? 0 : currentNode.getAttributes().getLength();
            if ((currentNode.getNodeType()) == (org.w3c.dom.Node.ELEMENT_NODE)) {
                sourceIndex[0] = ((source.indexOf(("<" + name), sourceIndex[0])) + (name.length())) + 2;
                final java.util.Map<java.lang.String, java.lang.Object> attrMapLocal = com.github.underscore.lodash.U.newLinkedHashMap();
                if (attributesLength > 0) {
                    final java.util.regex.Matcher matcher = com.github.underscore.lodash.Xml.ATTRS.matcher(source.substring(sourceIndex[0], source.indexOf(">", sourceIndex[0])));
                    while (matcher.find()) {
                        com.github.underscore.lodash.Xml.addNodeValue(attrMapLocal, ('-' + (matcher.group(1))), matcher.group(2), nodeMapper, uniqueIds);
                    } 
                }
                value = com.github.underscore.lodash.Xml.createMap(currentNode, nodeMapper, attrMapLocal, uniqueIds, valueMapper, source, sourceIndex);
            }else {
                if (com.github.underscore.lodash.Xml.COMMENT.equals(name)) {
                    sourceIndex[0] = (source.indexOf("-->", sourceIndex[0])) + 3;
                }else
                    if (com.github.underscore.lodash.Xml.CDATA.equals(name)) {
                        sourceIndex[0] = (source.indexOf("]]>", sourceIndex[0])) + 3;
                    }

                value = currentNode.getTextContent();
            }
            if ((com.github.underscore.lodash.Xml.TEXT.equals(name)) && (valueMapper.apply(value).toString().isEmpty())) {
                continue;
            }
            com.github.underscore.lodash.Xml.addNodeValue(map, name, value, nodeMapper, uniqueIds);
        }
        return map;
    }

    @java.lang.SuppressWarnings("unchecked")
    private static void addNodeValue(final java.util.Map<java.lang.String, java.lang.Object> map, final java.lang.String name, final java.lang.Object value, final com.github.underscore.Function<java.lang.Object, java.lang.Object> nodeMapper, int[] uniqueIds) {
        if (map.containsKey(name)) {
            if (com.github.underscore.lodash.Xml.TEXT.equals(name)) {
                map.put((name + (uniqueIds[0])), nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
                uniqueIds[0] += 1;
            }else
                if (com.github.underscore.lodash.Xml.COMMENT.equals(name)) {
                    map.put((name + (uniqueIds[1])), nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
                    uniqueIds[1] += 1;
                }else
                    if (com.github.underscore.lodash.Xml.CDATA.equals(name)) {
                        map.put((name + (uniqueIds[2])), nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
                        uniqueIds[2] += 1;
                    }else {
                        final java.lang.Object object = map.get(name);
                        if (object instanceof java.util.List) {
                            com.github.underscore.lodash.Xml.addText(map, name, ((java.util.List<java.lang.Object>) (object)), value);
                        }else {
                            final java.util.List<java.lang.Object> objects = com.github.underscore.lodash.U.newArrayList();
                            objects.add(object);
                            com.github.underscore.lodash.Xml.addText(map, name, objects, value);
                            map.put(name, objects);
                        }
                    }


        }else {
            map.put(name, nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
        }
    }

    @java.lang.SuppressWarnings("unchecked")
    private static void addText(final java.util.Map<java.lang.String, java.lang.Object> map, final java.lang.String name, final java.util.List<java.lang.Object> objects, final java.lang.Object value) {
        int lastIndex = (map.size()) - 1;
        final int index = objects.size();
        while (true) {
            final java.util.Map.Entry lastElement = ((java.util.Map.Entry) (map.entrySet().toArray()[lastIndex]));
            if (name.equals(java.lang.String.valueOf(lastElement.getKey()))) {
                break;
            }
            final java.util.Map<java.lang.String, java.lang.Object> text = com.github.underscore.lodash.U.newLinkedHashMap();
            text.put(java.lang.String.valueOf(lastElement.getKey()), map.remove(lastElement.getKey()));
            objects.add(index, text);
            lastIndex -= 1;
        } 
        objects.add(com.github.underscore.lodash.Xml.getValue(value));
    }

    @java.lang.SuppressWarnings("unchecked")
    public static java.lang.Object fromXml(final java.lang.String xml, final com.github.underscore.Function<java.lang.Object, java.lang.Object> valueMapper) {
        if (xml == null) {
            return null;
        }
        try {
            org.w3c.dom.Document document = com.github.underscore.lodash.Xml.createDocument(xml);
            final java.lang.Object result = com.github.underscore.lodash.Xml.createMap(document, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
                public java.lang.Object apply(java.lang.Object object) {
                    return object;
                }
            }, java.util.Collections.<java.lang.String, java.lang.Object>emptyMap(), new int[]{ 1, 1, 1 }, valueMapper, xml, new int[]{ 0 });
            if (((document.getXmlEncoding()) != null) && (!("UTF-8".equalsIgnoreCase(document.getXmlEncoding())))) {
                ((java.util.Map) (result)).put(com.github.underscore.lodash.Xml.ENCODING, document.getXmlEncoding());
            }else
                if ((((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getKey().equals("root")) && (((((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getValue()) instanceof java.util.List) || ((((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getValue()) instanceof java.util.Map))) {
                    return ((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getValue();
                }

            return result;
        } catch (java.lang.Exception ex) {
            throw new java.lang.IllegalArgumentException(ex);
        }
    }

    public static java.lang.Object fromXml(final java.lang.String xml) {
        return com.github.underscore.lodash.Xml.fromXml(xml, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
            public java.lang.Object apply(java.lang.Object object) {
                return java.lang.String.valueOf(object).trim();
            }
        });
    }

    private static org.w3c.dom.Document createDocument(final java.lang.String xml) throws java.io.IOException, javax.xml.parsers.ParserConfigurationException, org.xml.sax.SAXException {
        final javax.xml.parsers.DocumentBuilderFactory factory = javax.xml.parsers.DocumentBuilderFactory.newInstance();
        factory.setNamespaceAware(true);
        factory.setFeature(javax.xml.XMLConstants.FEATURE_SECURE_PROCESSING, true);
        final javax.xml.parsers.DocumentBuilder builder = factory.newDocumentBuilder();
        builder.setErrorHandler(new org.xml.sax.helpers.DefaultHandler());
        return builder.parse(new org.xml.sax.InputSource(new java.io.StringReader(xml)));
    }

    public static java.lang.Object fromXmlMakeArrays(final java.lang.String xml) {
        try {
            org.w3c.dom.Document document = com.github.underscore.lodash.Xml.createDocument(xml);
            return com.github.underscore.lodash.Xml.createMap(document, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
                public java.lang.Object apply(java.lang.Object object) {
                    return object instanceof java.util.List ? object : com.github.underscore.lodash.U.newArrayList(java.util.Arrays.asList(object));
                }
            }, java.util.Collections.<java.lang.String, java.lang.Object>emptyMap(), new int[]{ 1, 1, 1 }, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
                public java.lang.Object apply(java.lang.Object object) {
                    return java.lang.String.valueOf(object).trim();
                }
            }, xml, new int[]{ 0 });
        } catch (java.lang.Exception ex) {
            throw new java.lang.IllegalArgumentException(ex);
        }
    }

    @java.lang.SuppressWarnings("unchecked")
    public static java.lang.String formatXml(java.lang.String xml, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep) {
        java.lang.Object result = com.github.underscore.lodash.Xml.fromXml(xml);
        if (result instanceof java.util.Map) {
            return com.github.underscore.lodash.Xml.toXml(((java.util.Map) (result)), identStep);
        }
        return com.github.underscore.lodash.Xml.toXml(((java.util.List) (result)), identStep);
    }

    public static java.lang.String formatXml(java.lang.String xml) {
        return com.github.underscore.lodash.Xml.formatXml(xml, com.github.underscore.lodash.Xml.XmlStringBuilder.Step.THREE_SPACES);
    }
}
16:26:21.890 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
16:26:21.890 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #9
16:26:21.890 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlValue:542 which is executed by 6 tests
88056
16:26:22.015 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #10
16:26:22.015 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlValue:521 which is executed by 6 tests
88056
16:26:22.152 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:26:22.231 [pool-24-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (68 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a></a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:22.749 [pool-25-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (14 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a></a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a></a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:22.751 [pool-26-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:26:22.752 [pool-23-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a></a>
</a]>>]
16:26:22.752 [pool-23-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:26:22.752 [pool-23-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Xml$XmlValue:521.
16:26:22.752 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:26:22.822 [pool-28-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (61 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:23.254 [pool-29-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (14 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

java.lang.ClassCastException: java.lang.Long cannot be cast to java.lang.Float
    at com.github.underscore.lodash.Xml$XmlValue.processArrays(Xml.java:536)
    at com.github.underscore.lodash.Xml$XmlValue.writeXml(Xml.java:491)
    at com.github.underscore.lodash.Xml$XmlArray.writeXml(Xml.java:167)
    at com.github.underscore.lodash.Xml$XmlArray.access$000(Xml.java:132)
    at com.github.underscore.lodash.Xml$XmlObject.addElements(Xml.java:430)
    at com.github.underscore.lodash.Xml$XmlObject.processElements(Xml.java:404)
16:26:23.260 [pool-30-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[java.lang.Long cannot be cast to java.lang.Float]
java.lang.ClassCastException: java.lang.Long cannot be cast to java.lang.Float    at com.github.underscore.lodash.Xml$XmlValue.processArrays(Xml.java:536)
    at com.github.underscore.lodash.Xml$XmlValue.writeXml(Xml.java:491)
    at com.github.underscore.lodash.Xml$XmlArray.writeXml(Xml.java:167)
    at com.github.underscore.lodash.Xml$XmlArray.access$000(Xml.java:132)
    at com.github.underscore.lodash.Xml$XmlObject.addElements(Xml.java:430)
    at com.github.underscore.lodash.Xml$XmlObject.processElements(Xml.java:404)

16:26:23.260 [pool-27-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:26:23.261 [pool-27-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): java.lang.Long cannot be cast to java.lang.Float]
16:26:23.261 [pool-27-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Xml$XmlValue:521.
16:26:23.261 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #11
16:26:23.261 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlValue:515 which is executed by 6 tests
88056
16:26:23.378 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:26:23.452 [pool-32-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (62 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a></a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:23.887 [pool-33-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (14 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a></a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a></a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:23.889 [pool-34-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:26:23.891 [pool-31-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a></a>
</a]>>]
16:26:23.891 [pool-31-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:26:23.891 [pool-31-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Xml$XmlValue:515.
16:26:23.891 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:26:23.958 [pool-36-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (58 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:24.390 [pool-37-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (14 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

java.lang.ClassCastException: java.lang.Long cannot be cast to java.lang.Double
    at com.github.underscore.lodash.Xml$XmlValue.processArrays(Xml.java:529)
    at com.github.underscore.lodash.Xml$XmlValue.writeXml(Xml.java:491)
    at com.github.underscore.lodash.Xml$XmlArray.writeXml(Xml.java:167)
    at com.github.underscore.lodash.Xml$XmlArray.access$000(Xml.java:132)
    at com.github.underscore.lodash.Xml$XmlObject.addElements(Xml.java:430)
    at com.github.underscore.lodash.Xml$XmlObject.processElements(Xml.java:404)
16:26:24.394 [pool-38-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[java.lang.Long cannot be cast to java.lang.Double]
java.lang.ClassCastException: java.lang.Long cannot be cast to java.lang.Double    at com.github.underscore.lodash.Xml$XmlValue.processArrays(Xml.java:529)
    at com.github.underscore.lodash.Xml$XmlValue.writeXml(Xml.java:491)
    at com.github.underscore.lodash.Xml$XmlArray.writeXml(Xml.java:167)
    at com.github.underscore.lodash.Xml$XmlArray.access$000(Xml.java:132)
    at com.github.underscore.lodash.Xml$XmlObject.addElements(Xml.java:430)
    at com.github.underscore.lodash.Xml$XmlObject.processElements(Xml.java:404)

16:26:24.397 [pool-35-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:26:24.398 [pool-35-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): java.lang.Long cannot be cast to java.lang.Double]
16:26:24.398 [pool-35-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Xml$XmlValue:515.
16:26:24.398 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #12
16:26:24.398 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlValue:508 which is executed by 6 tests
88056
16:26:24.522 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:26:24.591 [pool-40-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (59 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a></a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:25.004 [pool-41-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (13 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a></a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a></a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:25.006 [pool-42-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:26:25.007 [pool-39-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a></a>
</a]>>]
16:26:25.007 [pool-39-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:26:25.007 [pool-39-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Xml$XmlValue:508.
16:26:25.008 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #13
16:26:25.008 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlObject:438 which is executed by 7 tests
88056
16:26:25.114 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:26:25.182 [pool-44-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (60 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:26:25.546 [pool-43-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Xml.java:437: error: non-static variable ident cannot be referenced from a static context
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident",com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                                  ^
Xml.java:623: warning: com.sun.org.apache.xerces.internal.util.XMLChar is internal proprietary API and may be removed in a future release
            if ((com.sun.org.apache.xerces.internal.util.XMLChar.isNameStart(ch)) && (ch != ':')) {
                                                        ^
Xml.java:633: warning: com.sun.org.apache.xerces.internal.util.XMLChar is internal proprietary API and may be removed in a future release
                    if ((com.sun.org.apache.xerces.internal.util.XMLChar.isName(ch)) && (ch != ':')) {
                                                                ^
16:26:25.686 [pool-43-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public final class Xml {
    private static final java.lang.String NULL = "null";

    private static final java.lang.String ELEMENT_TEXT = "element";

    private static final java.lang.String CDATA = "#cdata-section";

    private static final java.lang.String COMMENT = "#comment";

    private static final java.lang.String ENCODING = "#encoding";

    private static final java.lang.String TEXT = "#text";

    private static final java.lang.String ELEMENT = ("<" + (com.github.underscore.lodash.Xml.ELEMENT_TEXT)) + ">";

    private static final java.lang.String CLOSED_ELEMENT = ("</" + (com.github.underscore.lodash.Xml.ELEMENT_TEXT)) + ">";

    private static final java.lang.String EMPTY_ELEMENT = (com.github.underscore.lodash.Xml.ELEMENT) + (com.github.underscore.lodash.Xml.CLOSED_ELEMENT);

    private static final java.lang.String NULL_ELEMENT = ((com.github.underscore.lodash.Xml.ELEMENT) + (com.github.underscore.lodash.Xml.NULL)) + (com.github.underscore.lodash.Xml.CLOSED_ELEMENT);

    private static final java.nio.charset.Charset UTF_8 = java.nio.charset.Charset.forName("UTF-8");

    private static final java.util.regex.Pattern ATTRS = java.util.regex.Pattern.compile(("((?:(?!\\s|=).)*)\\s*?=\\s*?[\"\']?((?:(?<=\")(?:(?<=\\\\)\"|[^\"])*|(?<=\')" + "(?:(?<=\\\\)\'|[^\'])*)|(?:(?!\"|\')(?:(?!\\/>|>|\\s).)+))"));

    public static class XmlStringBuilder {
        public enum Step {

            TWO_SPACES(2),
            THREE_SPACES(3),
            FOUR_SPACES(4),
            COMPACT(0),
            TABS(1);
            private int ident;

            Step(int ident) {
                this.ident = ident;
            }

            public int getIdent() {
                return ident;
            }
        }

        protected final java.lang.StringBuilder builder;

        private final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep;

        private int ident;

        public XmlStringBuilder() {
            builder = new java.lang.StringBuilder("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<root>\n");
            identStep = com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TWO_SPACES;
            ident = 2;
        }

        public XmlStringBuilder(java.lang.StringBuilder builder, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident) {
            this.builder = builder;
            this.identStep = identStep;
            this.ident = ident;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder append(final java.lang.String string) {
            builder.append(string);
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder fillSpaces() {
            for (int index = 0; index < (ident); index += 1) {
                builder.append(((identStep) == (com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TABS) ? '\t' : ' '));
            }
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder incIdent() {
            ident += identStep.getIdent();
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder decIdent() {
            ident -= identStep.getIdent();
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder newLine() {
            if ((identStep) != (com.github.underscore.lodash.Xml.XmlStringBuilder.Step.COMPACT)) {
                builder.append("\n");
            }
            return this;
        }

        public int getIdent() {
            return ident;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder.Step getIdentStep() {
            return identStep;
        }

        public java.lang.String toString() {
            return (builder.toString()) + "\n</root>";
        }
    }

    public static class XmlStringBuilderWithoutRoot extends com.github.underscore.lodash.Xml.XmlStringBuilder {
        public XmlStringBuilderWithoutRoot(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, java.lang.String encoding) {
            super(new java.lang.StringBuilder(((("<?xml version=\"1.0\" encoding=\"" + (com.github.underscore.lodash.U.escape(encoding))) + "\"?>") + (identStep == (com.github.underscore.lodash.Xml.XmlStringBuilder.Step.COMPACT) ? "" : "\n"))), identStep, 0);
        }

        public java.lang.String toString() {
            return builder.toString();
        }
    }

    public static class XmlStringBuilderWithoutHeader extends com.github.underscore.lodash.Xml.XmlStringBuilder {
        public XmlStringBuilderWithoutHeader(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident) {
            super(new java.lang.StringBuilder(), identStep, ident);
        }

        public java.lang.String toString() {
            return builder.toString();
        }
    }

    public static class XmlStringBuilderText extends com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader {
        public XmlStringBuilderText(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident) {
            super(identStep, ident);
        }
    }

    public static class XmlArray {
        public static void writeXml(java.util.Collection collection, java.lang.String name, com.github.underscore.lodash.Xml.XmlStringBuilder builder, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (collection == null) {
                builder.append(com.github.underscore.lodash.Xml.NULL);
                return;
            }
            if (name != null) {
                builder.fillSpaces().append("<").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(">").incIdent();
                if (!(collection.isEmpty())) {
                    builder.newLine();
                }
            }
            com.github.underscore.lodash.Xml.XmlArray.writeXml(collection, builder, name, parentTextFound, namespaces);
            if (name != null) {
                builder.decIdent().newLine().fillSpaces().append("</").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(">");
            }
        }

        @java.lang.SuppressWarnings("unchecked")
        private static void writeXml(java.util.Collection collection, com.github.underscore.lodash.Xml.XmlStringBuilder builder, java.lang.String name, final boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            boolean localParentTextFound = parentTextFound;
            final java.util.List entries = com.github.underscore.lodash.U.newArrayList(collection);
            for (int index = 0; index < (entries.size()); index += 1) {
                final java.lang.Object value = entries.get(index);
                final boolean addNewLine = (index < ((entries.size()) - 1)) && (!(java.lang.String.valueOf(entries.get((index + 1))).startsWith(("{" + (com.github.underscore.lodash.Xml.TEXT)))));
                if (value == null) {
                    builder.fillSpaces().append((((((("<" + (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">") + (com.github.underscore.lodash.Xml.NULL)) + "</") + (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">"));
                }else {
                    if ((value instanceof java.util.Map) && ((((java.util.Map) (value)).size()) == 1)) {
                        com.github.underscore.lodash.Xml.XmlObject.writeXml(((java.util.Map) (value)), null, builder, localParentTextFound, namespaces);
                        if (java.lang.String.valueOf(((java.util.Map.Entry) (((java.util.Map) (value)).entrySet().iterator().next())).getKey()).startsWith(com.github.underscore.lodash.Xml.TEXT)) {
                            localParentTextFound = true;
                            continue;
                        }
                    }else {
                        com.github.underscore.lodash.Xml.XmlValue.writeXml(value, (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : name), builder, localParentTextFound, namespaces);
                    }
                    localParentTextFound = false;
                }
                if (addNewLine) {
                    builder.newLine();
                }
            }
        }

        public static void writeXml(byte[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(short[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(int[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(long[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(float[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(double[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(boolean[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(char[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(java.lang.Object[] array, java.lang.String name, com.github.underscore.lodash.Xml.XmlStringBuilder builder, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        com.github.underscore.lodash.Xml.XmlValue.writeXml(array[i], (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : name), builder, parentTextFound, namespaces);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }
    }

    public static class XmlObject {
        @java.lang.SuppressWarnings("unchecked")
        public static void writeXml(java.util.Map map, java.lang.String name, final com.github.underscore.lodash.Xml.XmlStringBuilder builder, final boolean parentTextFound, final java.util.Set<java.lang.String> namespaces) {
            if (map == null) {
                com.github.underscore.lodash.Xml.XmlValue.writeXml(com.github.underscore.lodash.Xml.NULL, name, builder, false, namespaces);
                return;
            }
            final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems = com.github.underscore.lodash.U.newArrayList();
            final java.util.List<java.lang.String> attrs = com.github.underscore.lodash.U.newArrayList();
            final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep = builder.getIdentStep();
            final int ident = (builder.getIdent()) + (name == null ? 0 : builder.getIdentStep().getIdent());
            final java.util.List<java.util.Map.Entry> entries = com.github.underscore.lodash.U.newArrayList(map.entrySet());
            for (int index = 0; index < (entries.size()); index += 1) {
                final java.util.Map.Entry entry = entries.get(index);
                final boolean addNewLine = (index < ((entries.size()) - 1)) && (!(java.lang.String.valueOf(entries.get((index + 1)).getKey()).startsWith(com.github.underscore.lodash.Xml.TEXT)));
                if (((java.lang.String.valueOf(entry.getKey()).startsWith("-")) && (!((entry.getValue()) instanceof java.util.Map))) && (!((entry.getValue()) instanceof java.util.List))) {
                    attrs.add(((((" " + (com.github.underscore.lodash.Xml.XmlValue.escapeName(java.lang.String.valueOf(entry.getKey()).substring(1), namespaces))) + "=\"") + (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getValue())))) + "\""));
                    if (java.lang.String.valueOf(entry.getKey()).startsWith("-xmlns:")) {
                        namespaces.add(java.lang.String.valueOf(entry.getKey()).substring(7));
                    }
                }else
                    if (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getKey())).startsWith(com.github.underscore.lodash.Xml.TEXT)) {
                        com.github.underscore.lodash.Xml.XmlObject.addText(entry, elems, identStep, ident);
                    }else {
                        com.github.underscore.lodash.Xml.XmlObject.processElements(entry, identStep, ident, addNewLine, elems, namespaces);
                    }

            }
            if (name != null) {
                if (!parentTextFound) {
                    builder.fillSpaces();
                }
                builder.append("<").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(com.github.underscore.lodash.U.join(attrs, "")).append(">").incIdent();
                if ((!(elems.isEmpty())) && (!((elems.get(0)) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText))) {
                    builder.newLine();
                }
            }
            for (com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder1 : elems) {
                builder.append(localBuilder1.toString());
            }
            if (name != null) {
                builder.decIdent();
                if ((!(elems.isEmpty())) && (!((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText))) {
                    builder.newLine().fillSpaces();
                }
                builder.append("</").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(">");
            }
        }

        private static void processElements(final java.util.Map.Entry entry, final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident, final boolean addNewLine, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final java.util.Set<java.lang.String> namespaces) {
            if (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getKey())).startsWith(com.github.underscore.lodash.Xml.COMMENT)) {
                com.github.underscore.lodash.Xml.XmlObject.addComment(entry, identStep, ident, addNewLine, elems, "<!--", "-->");
            }else
                if (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getKey())).startsWith(com.github.underscore.lodash.Xml.CDATA)) {
                    com.github.underscore.lodash.Xml.XmlObject.addComment(entry, identStep, ident, addNewLine, elems, "<![CDATA[", "]]>");
                }else
                    if (((entry.getValue()) instanceof java.util.List) && (!(((java.util.List) (entry.getValue())).isEmpty()))) {
                        com.github.underscore.lodash.Xml.XmlObject.addElements(identStep, ident, entry, namespaces, elems, addNewLine);
                    }else {
                        com.github.underscore.lodash.Xml.XmlObject.addElement(identStep, ident, entry, namespaces, elems, addNewLine);
                    }


        }

        private static void addText(final java.util.Map.Entry entry, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident) {
            if ((entry.getValue()) instanceof java.util.List) {
                for (java.lang.Object value : ((java.util.List) (entry.getValue()))) {
                    elems.add(new com.github.underscore.lodash.Xml.XmlStringBuilderText(identStep, ident).append(com.github.underscore.lodash.U.escape(java.lang.String.valueOf(value))));
                }
            }else {
                elems.add(new com.github.underscore.lodash.Xml.XmlStringBuilderText(identStep, ident).append(com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getValue()))));
            }
        }

        private static void addElements(final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident, java.util.Map.Entry entry, java.util.Set<java.lang.String> namespaces, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final boolean addNewLine) {
            boolean parentTextFound = (!(elems.isEmpty())) && ((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText);
            final com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder;
            if ((java.lang.String.valueOf(((java.util.List) (entry.getValue())).get(0)).startsWith(("{" + (com.github.underscore.lodash.Xml.TEXT)))) || (java.lang.String.valueOf(((java.util.List) (entry.getValue())).get(((((java.util.List) (entry.getValue())).size()) - 1))).startsWith(("{" + (com.github.underscore.lodash.Xml.TEXT))))) {
                localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderText(identStep, ident);
            }else {
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(12).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("com.github.underscore.lodash.Xml.ENCODING",com.github.underscore.lodash.Xml.ENCODING);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident",com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("elems",elems);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("com.github.underscore.lodash.Xml.NULL_ELEMENT",com.github.underscore.lodash.Xml.NULL_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("addNewLine",addNewLine);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("ident",ident);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("com.github.underscore.lodash.Xml.ATTRS",com.github.underscore.lodash.Xml.ATTRS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("identStep",identStep);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("com.github.underscore.lodash.Xml.TEXT",com.github.underscore.lodash.Xml.TEXT);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("com.github.underscore.lodash.Xml.NULL",com.github.underscore.lodash.Xml.NULL);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("com.github.underscore.lodash.Xml.ELEMENT_TEXT",com.github.underscore.lodash.Xml.ELEMENT_TEXT);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("com.github.underscore.lodash.Xml.CLOSED_ELEMENT",com.github.underscore.lodash.Xml.CLOSED_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("com.github.underscore.lodash.Xml.UTF_8",com.github.underscore.lodash.Xml.UTF_8);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("com.github.underscore.lodash.Xml.CDATA",com.github.underscore.lodash.Xml.CDATA);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("entry",entry);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("parentTextFound",parentTextFound);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("com.github.underscore.lodash.Xml.COMMENT",com.github.underscore.lodash.Xml.COMMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("com.github.underscore.lodash.Xml.EMPTY_ELEMENT",com.github.underscore.lodash.Xml.EMPTY_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("com.github.underscore.lodash.Xml.ELEMENT",com.github.underscore.lodash.Xml.ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("namespaces",namespaces);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectionEnds();
                }
                if (runtimeAngelicValue)
                    localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader(identStep, ident);

            }
            com.github.underscore.lodash.Xml.XmlArray.writeXml(((java.util.List) (entry.getValue())), localBuilder, java.lang.String.valueOf(entry.getKey()), parentTextFound, namespaces);
            if (addNewLine) {
                localBuilder.newLine();
            }
            elems.add(localBuilder);
        }

        private static void addElement(final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident, java.util.Map.Entry entry, java.util.Set<java.lang.String> namespaces, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final boolean addNewLine) {
            boolean parentTextFound = (!(elems.isEmpty())) && ((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText);
            com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader(identStep, ident);
            com.github.underscore.lodash.Xml.XmlValue.writeXml(entry.getValue(), java.lang.String.valueOf(entry.getKey()), localBuilder, parentTextFound, namespaces);
            if (addNewLine) {
                localBuilder.newLine();
            }
            elems.add(localBuilder);
        }

        private static void addComment(java.util.Map.Entry entry, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident, boolean addNewLine, java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, java.lang.String openElement, java.lang.String closeElement) {
            if ((entry.getValue()) instanceof java.util.List) {
                for (java.util.Iterator iterator = ((java.util.List) (entry.getValue())).iterator(); iterator.hasNext();) {
                    com.github.underscore.lodash.Xml.XmlObject.addCommentValue(identStep, ident, java.lang.String.valueOf(iterator.next()), ((iterator.hasNext()) || addNewLine), elems, openElement, closeElement);
                }
            }else {
                com.github.underscore.lodash.Xml.XmlObject.addCommentValue(identStep, ident, java.lang.String.valueOf(entry.getValue()), addNewLine, elems, openElement, closeElement);
            }
        }

        private static void addCommentValue(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident, java.lang.String value, boolean addNewLine, java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, java.lang.String openElement, java.lang.String closeElement) {
            boolean parentTextFound = (!(elems.isEmpty())) && ((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText);
            com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader(identStep, ident);
            if (!parentTextFound) {
                localBuilder.fillSpaces();
            }
            localBuilder.append(openElement).append(value).append(closeElement);
            if (addNewLine) {
                localBuilder.newLine();
            }
            elems.add(localBuilder);
        }
    }

    public static class XmlValue {
        public static void writeXml(java.lang.Object value, java.lang.String name, com.github.underscore.lodash.Xml.XmlStringBuilder builder, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (value instanceof java.util.Map) {
                com.github.underscore.lodash.Xml.XmlObject.writeXml(((java.util.Map) (value)), name, builder, parentTextFound, namespaces);
                return;
            }
            if (value instanceof java.util.Collection) {
                com.github.underscore.lodash.Xml.XmlArray.writeXml(((java.util.Collection) (value)), name, builder, parentTextFound, namespaces);
                return;
            }
            if (!parentTextFound) {
                builder.fillSpaces();
            }
            builder.append((("<" + (com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">"));
            if (value == null) {
                builder.append(com.github.underscore.lodash.Xml.NULL);
            }else
                if (value instanceof java.lang.String) {
                    builder.append(com.github.underscore.lodash.Xml.XmlValue.escape(((java.lang.String) (value))));
                }else {
                    com.github.underscore.lodash.Xml.XmlValue.processArrays(value, builder, name, parentTextFound, namespaces);
                }

            builder.append((("</" + (com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">"));
        }

        private static void processArrays(java.lang.Object value, com.github.underscore.lodash.Xml.XmlStringBuilder builder, java.lang.String name, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (value instanceof java.lang.Double) {
                if ((((java.lang.Double) (value)).isInfinite()) || (((java.lang.Double) (value)).isNaN())) {
                    builder.append(com.github.underscore.lodash.Xml.NULL);
                }else {
                    builder.append(value.toString());
                }
            }else
                if (value instanceof java.lang.Float) {
                    if ((((java.lang.Float) (value)).isInfinite()) || (((java.lang.Float) (value)).isNaN())) {
                        builder.append(com.github.underscore.lodash.Xml.NULL);
                    }else {
                        builder.append(value.toString());
                    }
                }else
                    if (value instanceof java.lang.Number) {
                        builder.append(value.toString());
                    }else
                        if (value instanceof java.lang.Boolean) {
                            builder.append(value.toString());
                        }else
                            if (value instanceof byte[]) {
                                builder.newLine().incIdent();
                                com.github.underscore.lodash.Xml.XmlArray.writeXml(((byte[]) (value)), builder);
                                builder.decIdent().newLine().fillSpaces();
                            }else
                                if (value instanceof short[]) {
                                    builder.newLine().incIdent();
                                    com.github.underscore.lodash.Xml.XmlArray.writeXml(((short[]) (value)), builder);
                                    builder.decIdent().newLine().fillSpaces();
                                }else {
                                    com.github.underscore.lodash.Xml.XmlValue.processArrays2(value, builder, name, parentTextFound, namespaces);
                                }





        }

        private static void processArrays2(java.lang.Object value, com.github.underscore.lodash.Xml.XmlStringBuilder builder, java.lang.String name, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (value instanceof int[]) {
                builder.newLine().incIdent();
                com.github.underscore.lodash.Xml.XmlArray.writeXml(((int[]) (value)), builder);
                builder.decIdent().newLine().fillSpaces();
            }else
                if (value instanceof long[]) {
                    builder.newLine().incIdent();
                    com.github.underscore.lodash.Xml.XmlArray.writeXml(((long[]) (value)), builder);
                    builder.decIdent().newLine().fillSpaces();
                }else
                    if (value instanceof float[]) {
                        builder.newLine().incIdent();
                        com.github.underscore.lodash.Xml.XmlArray.writeXml(((float[]) (value)), builder);
                        builder.decIdent().newLine().fillSpaces();
                    }else
                        if (value instanceof double[]) {
                            builder.newLine().incIdent();
                            com.github.underscore.lodash.Xml.XmlArray.writeXml(((double[]) (value)), builder);
                            builder.decIdent().newLine().fillSpaces();
                        }else
                            if (value instanceof boolean[]) {
                                builder.newLine().incIdent();
                                com.github.underscore.lodash.Xml.XmlArray.writeXml(((boolean[]) (value)), builder);
                                builder.decIdent().newLine().fillSpaces();
                            }else
                                if (value instanceof char[]) {
                                    builder.newLine().incIdent();
                                    com.github.underscore.lodash.Xml.XmlArray.writeXml(((char[]) (value)), builder);
                                    builder.decIdent().newLine().fillSpaces();
                                }else
                                    if (value instanceof java.lang.Object[]) {
                                        builder.newLine().incIdent();
                                        com.github.underscore.lodash.Xml.XmlArray.writeXml(((java.lang.Object[]) (value)), name, builder, parentTextFound, namespaces);
                                        builder.decIdent().newLine().fillSpaces();
                                    }else {
                                        builder.append(value.toString());
                                    }






        }

        public static java.lang.String escapeName(java.lang.String name, java.util.Set<java.lang.String> namespaces) {
            final int length = name.length();
            if (length == 0) {
                return "__EE__EMPTY__EE__";
            }
            final java.lang.StringBuilder result = new java.lang.StringBuilder();
            char ch = name.charAt(0);
            if ((com.sun.org.apache.xerces.internal.util.XMLChar.isNameStart(ch)) && (ch != ':')) {
                result.append(ch);
            }else {
                result.append("__").append(com.github.underscore.lodash.Base32.encode(java.lang.Character.toString(ch))).append("__");
            }
            for (int i = 1; i < length; ++i) {
                ch = name.charAt(i);
                if ((ch == ':') && (("xmlns".equals(name.substring(0, i))) || (namespaces.contains(name.substring(0, i))))) {
                    result.append(ch);
                }else
                    if ((com.sun.org.apache.xerces.internal.util.XMLChar.isName(ch)) && (ch != ':')) {
                        result.append(ch);
                    }else {
                        result.append("__").append(com.github.underscore.lodash.Base32.encode(java.lang.Character.toString(ch))).append("__");
                    }

            }
            return result.toString();
        }

        public static java.lang.String escape(java.lang.String s) {
            if (s == null) {
                return null;
            }
            java.lang.StringBuilder sb = new java.lang.StringBuilder();
            com.github.underscore.lodash.Xml.XmlValue.escape(s, sb);
            return sb.toString();
        }

        private static void escape(java.lang.String s, java.lang.StringBuilder sb) {
            final int len = s.length();
            for (int i = 0; i < len; i++) {
                char ch = s.charAt(i);
                switch (ch) {
                    case '"' :
                        sb.append("&quot;");
                        break;
                    case '\'' :
                        sb.append("'");
                        break;
                    case '&' :
                        sb.append("&amp;");
                        break;
                    case '<' :
                        sb.append("&lt;");
                        break;
                    case '>' :
                        sb.append("&gt;");
                        break;
                    case '\b' :
                        sb.append("\\b");
                        break;
                    case '\f' :
                        sb.append("\\f");
                        break;
                    case '\n' :
                        sb.append("\n");
                        break;
                    case '\r' :
                        sb.append("\\r");
                        break;
                    case '\t' :
                        sb.append("\t");
                        break;
                    default :
                        if (((ch <= '\u001f') || ((ch >= '\u007f') && (ch <= '\u009f'))) || ((ch >= '\u2000') && (ch <= '\u20ff'))) {
                            java.lang.String ss = java.lang.Integer.toHexString(ch);
                            sb.append("&#x");
                            for (int k = 0; k < (4 - (ss.length())); k++) {
                                sb.append('0');
                            }
                            sb.append(ss.toUpperCase()).append(";");
                        }else {
                            sb.append(ch);
                        }
                        break;
                }
            }
        }
    }

    public static java.lang.String toXml(java.util.Collection collection, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep) {
        final com.github.underscore.lodash.Xml.XmlStringBuilder builder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutRoot(identStep, com.github.underscore.lodash.Xml.UTF_8.name());
        builder.append("<root>").incIdent();
        if ((collection == null) || (!(collection.isEmpty()))) {
            builder.newLine();
        }
        com.github.underscore.lodash.Xml.XmlArray.writeXml(collection, null, builder, false, com.github.underscore.lodash.U.<java.lang.String>newLinkedHashSet());
        return builder.newLine().append("</root>").toString();
    }

    public static java.lang.String toXml(java.util.Collection collection) {
        return com.github.underscore.lodash.Xml.toXml(collection, com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TWO_SPACES);
    }

    public static java.lang.String toXml(java.util.Map map, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep) {
        final com.github.underscore.lodash.Xml.XmlStringBuilder builder;
        final java.util.Map localMap;
        if ((map != null) && (map.containsKey(com.github.underscore.lodash.Xml.ENCODING))) {
            builder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutRoot(identStep, java.lang.String.valueOf(map.get(com.github.underscore.lodash.Xml.ENCODING)));
            localMap = ((java.util.Map) (com.github.underscore.lodash.U.clone(map)));
            localMap.remove(com.github.underscore.lodash.Xml.ENCODING);
        }else {
            builder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutRoot(identStep, com.github.underscore.lodash.Xml.UTF_8.name());
            localMap = map;
        }
        if ((((localMap == null) || ((localMap.size()) != 1)) || (java.lang.String.valueOf(((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getKey()).startsWith("-"))) || ((((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getValue()) instanceof java.util.List)) {
            final java.lang.String name;
            if ((((localMap != null) && ((localMap.size()) == 1)) && ((((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getValue()) instanceof java.util.List)) && (!(((java.util.List) (((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getValue())).isEmpty()))) {
                name = java.lang.String.valueOf(((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getKey());
            }else {
                name = "root";
            }
            com.github.underscore.lodash.Xml.XmlObject.writeXml(localMap, name, builder, false, com.github.underscore.lodash.U.<java.lang.String>newLinkedHashSet());
        }else {
            com.github.underscore.lodash.Xml.XmlObject.writeXml(localMap, null, builder, false, com.github.underscore.lodash.U.<java.lang.String>newLinkedHashSet());
        }
        return builder.toString();
    }

    public static java.lang.String toXml(java.util.Map map) {
        return com.github.underscore.lodash.Xml.toXml(map, com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TWO_SPACES);
    }

    @java.lang.SuppressWarnings("unchecked")
    private static java.lang.Object getValue(final java.lang.Object value) {
        if ((value instanceof java.util.Map) && ((((java.util.Map<java.lang.String, java.lang.Object>) (value)).entrySet().size()) == 1)) {
            final java.util.Map.Entry<java.lang.String, java.lang.Object> entry = ((java.util.Map<java.lang.String, java.lang.Object>) (value)).entrySet().iterator().next();
            if ((com.github.underscore.lodash.Xml.TEXT.equals(entry.getKey())) || (entry.getKey().equals(com.github.underscore.lodash.Xml.ELEMENT_TEXT))) {
                return entry.getValue();
            }
        }
        return value;
    }

    @java.lang.SuppressWarnings("unchecked")
    private static java.util.Map<java.lang.String, java.lang.Object> createMap(final org.w3c.dom.Node node, final com.github.underscore.Function<java.lang.Object, java.lang.Object> nodeMapper, java.util.Map<java.lang.String, java.lang.Object> attrMap, int[] uniqueIds, final com.github.underscore.Function<java.lang.Object, java.lang.Object> valueMapper, java.lang.String source, int[] sourceIndex) {
        final java.util.Map<java.lang.String, java.lang.Object> map = com.github.underscore.lodash.U.newLinkedHashMap();
        map.putAll(attrMap);
        final org.w3c.dom.NodeList nodeList = node.getChildNodes();
        for (int index = 0; index < (nodeList.getLength()); index++) {
            final org.w3c.dom.Node currentNode = nodeList.item(index);
            final java.lang.String name = currentNode.getNodeName();
            final java.lang.Object value;
            final int attributesLength = ((currentNode.getAttributes()) == null) ? 0 : currentNode.getAttributes().getLength();
            if ((currentNode.getNodeType()) == (org.w3c.dom.Node.ELEMENT_NODE)) {
                sourceIndex[0] = ((source.indexOf(("<" + name), sourceIndex[0])) + (name.length())) + 2;
                final java.util.Map<java.lang.String, java.lang.Object> attrMapLocal = com.github.underscore.lodash.U.newLinkedHashMap();
                if (attributesLength > 0) {
                    final java.util.regex.Matcher matcher = com.github.underscore.lodash.Xml.ATTRS.matcher(source.substring(sourceIndex[0], source.indexOf(">", sourceIndex[0])));
                    while (matcher.find()) {
                        com.github.underscore.lodash.Xml.addNodeValue(attrMapLocal, ('-' + (matcher.group(1))), matcher.group(2), nodeMapper, uniqueIds);
                    } 
                }
                value = com.github.underscore.lodash.Xml.createMap(currentNode, nodeMapper, attrMapLocal, uniqueIds, valueMapper, source, sourceIndex);
            }else {
                if (com.github.underscore.lodash.Xml.COMMENT.equals(name)) {
                    sourceIndex[0] = (source.indexOf("-->", sourceIndex[0])) + 3;
                }else
                    if (com.github.underscore.lodash.Xml.CDATA.equals(name)) {
                        sourceIndex[0] = (source.indexOf("]]>", sourceIndex[0])) + 3;
                    }

                value = currentNode.getTextContent();
            }
            if ((com.github.underscore.lodash.Xml.TEXT.equals(name)) && (valueMapper.apply(value).toString().isEmpty())) {
                continue;
            }
            com.github.underscore.lodash.Xml.addNodeValue(map, name, value, nodeMapper, uniqueIds);
        }
        return map;
    }

    @java.lang.SuppressWarnings("unchecked")
    private static void addNodeValue(final java.util.Map<java.lang.String, java.lang.Object> map, final java.lang.String name, final java.lang.Object value, final com.github.underscore.Function<java.lang.Object, java.lang.Object> nodeMapper, int[] uniqueIds) {
        if (map.containsKey(name)) {
            if (com.github.underscore.lodash.Xml.TEXT.equals(name)) {
                map.put((name + (uniqueIds[0])), nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
                uniqueIds[0] += 1;
            }else
                if (com.github.underscore.lodash.Xml.COMMENT.equals(name)) {
                    map.put((name + (uniqueIds[1])), nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
                    uniqueIds[1] += 1;
                }else
                    if (com.github.underscore.lodash.Xml.CDATA.equals(name)) {
                        map.put((name + (uniqueIds[2])), nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
                        uniqueIds[2] += 1;
                    }else {
                        final java.lang.Object object = map.get(name);
                        if (object instanceof java.util.List) {
                            com.github.underscore.lodash.Xml.addText(map, name, ((java.util.List<java.lang.Object>) (object)), value);
                        }else {
                            final java.util.List<java.lang.Object> objects = com.github.underscore.lodash.U.newArrayList();
                            objects.add(object);
                            com.github.underscore.lodash.Xml.addText(map, name, objects, value);
                            map.put(name, objects);
                        }
                    }


        }else {
            map.put(name, nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
        }
    }

    @java.lang.SuppressWarnings("unchecked")
    private static void addText(final java.util.Map<java.lang.String, java.lang.Object> map, final java.lang.String name, final java.util.List<java.lang.Object> objects, final java.lang.Object value) {
        int lastIndex = (map.size()) - 1;
        final int index = objects.size();
        while (true) {
            final java.util.Map.Entry lastElement = ((java.util.Map.Entry) (map.entrySet().toArray()[lastIndex]));
            if (name.equals(java.lang.String.valueOf(lastElement.getKey()))) {
                break;
            }
            final java.util.Map<java.lang.String, java.lang.Object> text = com.github.underscore.lodash.U.newLinkedHashMap();
            text.put(java.lang.String.valueOf(lastElement.getKey()), map.remove(lastElement.getKey()));
            objects.add(index, text);
            lastIndex -= 1;
        } 
        objects.add(com.github.underscore.lodash.Xml.getValue(value));
    }

    @java.lang.SuppressWarnings("unchecked")
    public static java.lang.Object fromXml(final java.lang.String xml, final com.github.underscore.Function<java.lang.Object, java.lang.Object> valueMapper) {
        if (xml == null) {
            return null;
        }
        try {
            org.w3c.dom.Document document = com.github.underscore.lodash.Xml.createDocument(xml);
            final java.lang.Object result = com.github.underscore.lodash.Xml.createMap(document, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
                public java.lang.Object apply(java.lang.Object object) {
                    return object;
                }
            }, java.util.Collections.<java.lang.String, java.lang.Object>emptyMap(), new int[]{ 1, 1, 1 }, valueMapper, xml, new int[]{ 0 });
            if (((document.getXmlEncoding()) != null) && (!("UTF-8".equalsIgnoreCase(document.getXmlEncoding())))) {
                ((java.util.Map) (result)).put(com.github.underscore.lodash.Xml.ENCODING, document.getXmlEncoding());
            }else
                if ((((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getKey().equals("root")) && (((((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getValue()) instanceof java.util.List) || ((((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getValue()) instanceof java.util.Map))) {
                    return ((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getValue();
                }

            return result;
        } catch (java.lang.Exception ex) {
            throw new java.lang.IllegalArgumentException(ex);
        }
    }

    public static java.lang.Object fromXml(final java.lang.String xml) {
        return com.github.underscore.lodash.Xml.fromXml(xml, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
            public java.lang.Object apply(java.lang.Object object) {
                return java.lang.String.valueOf(object).trim();
            }
        });
    }

    private static org.w3c.dom.Document createDocument(final java.lang.String xml) throws java.io.IOException, javax.xml.parsers.ParserConfigurationException, org.xml.sax.SAXException {
        final javax.xml.parsers.DocumentBuilderFactory factory = javax.xml.parsers.DocumentBuilderFactory.newInstance();
        factory.setNamespaceAware(true);
        factory.setFeature(javax.xml.XMLConstants.FEATURE_SECURE_PROCESSING, true);
        final javax.xml.parsers.DocumentBuilder builder = factory.newDocumentBuilder();
        builder.setErrorHandler(new org.xml.sax.helpers.DefaultHandler());
        return builder.parse(new org.xml.sax.InputSource(new java.io.StringReader(xml)));
    }

    public static java.lang.Object fromXmlMakeArrays(final java.lang.String xml) {
        try {
            org.w3c.dom.Document document = com.github.underscore.lodash.Xml.createDocument(xml);
            return com.github.underscore.lodash.Xml.createMap(document, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
                public java.lang.Object apply(java.lang.Object object) {
                    return object instanceof java.util.List ? object : com.github.underscore.lodash.U.newArrayList(java.util.Arrays.asList(object));
                }
            }, java.util.Collections.<java.lang.String, java.lang.Object>emptyMap(), new int[]{ 1, 1, 1 }, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
                public java.lang.Object apply(java.lang.Object object) {
                    return java.lang.String.valueOf(object).trim();
                }
            }, xml, new int[]{ 0 });
        } catch (java.lang.Exception ex) {
            throw new java.lang.IllegalArgumentException(ex);
        }
    }

    @java.lang.SuppressWarnings("unchecked")
    public static java.lang.String formatXml(java.lang.String xml, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep) {
        java.lang.Object result = com.github.underscore.lodash.Xml.fromXml(xml);
        if (result instanceof java.util.Map) {
            return com.github.underscore.lodash.Xml.toXml(((java.util.Map) (result)), identStep);
        }
        return com.github.underscore.lodash.Xml.toXml(((java.util.List) (result)), identStep);
    }

    public static java.lang.String formatXml(java.lang.String xml) {
        return com.github.underscore.lodash.Xml.formatXml(xml, com.github.underscore.lodash.Xml.XmlStringBuilder.Step.THREE_SPACES);
    }
}
16:26:25.687 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
16:26:25.687 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #14
16:26:25.687 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlObject:446 which is executed by 8 tests
88056
16:26:25.794 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #15
16:26:25.794 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlObject:445 which is executed by 8 tests
88056
16:26:25.897 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:26:25.966 [pool-46-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (61 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:26:26.360 [pool-45-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Xml.java:443: error: non-static variable ident cannot be referenced from a static context
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident",com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                              ^
Xml.java:623: warning: com.sun.org.apache.xerces.internal.util.XMLChar is internal proprietary API and may be removed in a future release
            if ((com.sun.org.apache.xerces.internal.util.XMLChar.isNameStart(ch)) && (ch != ':')) {
                                                        ^
Xml.java:633: warning: com.sun.org.apache.xerces.internal.util.XMLChar is internal proprietary API and may be removed in a future release
                    if ((com.sun.org.apache.xerces.internal.util.XMLChar.isName(ch)) && (ch != ':')) {
                                                                ^
16:26:26.570 [pool-45-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public final class Xml {
    private static final java.lang.String NULL = "null";

    private static final java.lang.String ELEMENT_TEXT = "element";

    private static final java.lang.String CDATA = "#cdata-section";

    private static final java.lang.String COMMENT = "#comment";

    private static final java.lang.String ENCODING = "#encoding";

    private static final java.lang.String TEXT = "#text";

    private static final java.lang.String ELEMENT = ("<" + (com.github.underscore.lodash.Xml.ELEMENT_TEXT)) + ">";

    private static final java.lang.String CLOSED_ELEMENT = ("</" + (com.github.underscore.lodash.Xml.ELEMENT_TEXT)) + ">";

    private static final java.lang.String EMPTY_ELEMENT = (com.github.underscore.lodash.Xml.ELEMENT) + (com.github.underscore.lodash.Xml.CLOSED_ELEMENT);

    private static final java.lang.String NULL_ELEMENT = ((com.github.underscore.lodash.Xml.ELEMENT) + (com.github.underscore.lodash.Xml.NULL)) + (com.github.underscore.lodash.Xml.CLOSED_ELEMENT);

    private static final java.nio.charset.Charset UTF_8 = java.nio.charset.Charset.forName("UTF-8");

    private static final java.util.regex.Pattern ATTRS = java.util.regex.Pattern.compile(("((?:(?!\\s|=).)*)\\s*?=\\s*?[\"\']?((?:(?<=\")(?:(?<=\\\\)\"|[^\"])*|(?<=\')" + "(?:(?<=\\\\)\'|[^\'])*)|(?:(?!\"|\')(?:(?!\\/>|>|\\s).)+))"));

    public static class XmlStringBuilder {
        public enum Step {

            TWO_SPACES(2),
            THREE_SPACES(3),
            FOUR_SPACES(4),
            COMPACT(0),
            TABS(1);
            private int ident;

            Step(int ident) {
                this.ident = ident;
            }

            public int getIdent() {
                return ident;
            }
        }

        protected final java.lang.StringBuilder builder;

        private final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep;

        private int ident;

        public XmlStringBuilder() {
            builder = new java.lang.StringBuilder("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<root>\n");
            identStep = com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TWO_SPACES;
            ident = 2;
        }

        public XmlStringBuilder(java.lang.StringBuilder builder, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident) {
            this.builder = builder;
            this.identStep = identStep;
            this.ident = ident;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder append(final java.lang.String string) {
            builder.append(string);
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder fillSpaces() {
            for (int index = 0; index < (ident); index += 1) {
                builder.append(((identStep) == (com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TABS) ? '\t' : ' '));
            }
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder incIdent() {
            ident += identStep.getIdent();
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder decIdent() {
            ident -= identStep.getIdent();
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder newLine() {
            if ((identStep) != (com.github.underscore.lodash.Xml.XmlStringBuilder.Step.COMPACT)) {
                builder.append("\n");
            }
            return this;
        }

        public int getIdent() {
            return ident;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder.Step getIdentStep() {
            return identStep;
        }

        public java.lang.String toString() {
            return (builder.toString()) + "\n</root>";
        }
    }

    public static class XmlStringBuilderWithoutRoot extends com.github.underscore.lodash.Xml.XmlStringBuilder {
        public XmlStringBuilderWithoutRoot(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, java.lang.String encoding) {
            super(new java.lang.StringBuilder(((("<?xml version=\"1.0\" encoding=\"" + (com.github.underscore.lodash.U.escape(encoding))) + "\"?>") + (identStep == (com.github.underscore.lodash.Xml.XmlStringBuilder.Step.COMPACT) ? "" : "\n"))), identStep, 0);
        }

        public java.lang.String toString() {
            return builder.toString();
        }
    }

    public static class XmlStringBuilderWithoutHeader extends com.github.underscore.lodash.Xml.XmlStringBuilder {
        public XmlStringBuilderWithoutHeader(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident) {
            super(new java.lang.StringBuilder(), identStep, ident);
        }

        public java.lang.String toString() {
            return builder.toString();
        }
    }

    public static class XmlStringBuilderText extends com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader {
        public XmlStringBuilderText(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident) {
            super(identStep, ident);
        }
    }

    public static class XmlArray {
        public static void writeXml(java.util.Collection collection, java.lang.String name, com.github.underscore.lodash.Xml.XmlStringBuilder builder, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (collection == null) {
                builder.append(com.github.underscore.lodash.Xml.NULL);
                return;
            }
            if (name != null) {
                builder.fillSpaces().append("<").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(">").incIdent();
                if (!(collection.isEmpty())) {
                    builder.newLine();
                }
            }
            com.github.underscore.lodash.Xml.XmlArray.writeXml(collection, builder, name, parentTextFound, namespaces);
            if (name != null) {
                builder.decIdent().newLine().fillSpaces().append("</").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(">");
            }
        }

        @java.lang.SuppressWarnings("unchecked")
        private static void writeXml(java.util.Collection collection, com.github.underscore.lodash.Xml.XmlStringBuilder builder, java.lang.String name, final boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            boolean localParentTextFound = parentTextFound;
            final java.util.List entries = com.github.underscore.lodash.U.newArrayList(collection);
            for (int index = 0; index < (entries.size()); index += 1) {
                final java.lang.Object value = entries.get(index);
                final boolean addNewLine = (index < ((entries.size()) - 1)) && (!(java.lang.String.valueOf(entries.get((index + 1))).startsWith(("{" + (com.github.underscore.lodash.Xml.TEXT)))));
                if (value == null) {
                    builder.fillSpaces().append((((((("<" + (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">") + (com.github.underscore.lodash.Xml.NULL)) + "</") + (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">"));
                }else {
                    if ((value instanceof java.util.Map) && ((((java.util.Map) (value)).size()) == 1)) {
                        com.github.underscore.lodash.Xml.XmlObject.writeXml(((java.util.Map) (value)), null, builder, localParentTextFound, namespaces);
                        if (java.lang.String.valueOf(((java.util.Map.Entry) (((java.util.Map) (value)).entrySet().iterator().next())).getKey()).startsWith(com.github.underscore.lodash.Xml.TEXT)) {
                            localParentTextFound = true;
                            continue;
                        }
                    }else {
                        com.github.underscore.lodash.Xml.XmlValue.writeXml(value, (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : name), builder, localParentTextFound, namespaces);
                    }
                    localParentTextFound = false;
                }
                if (addNewLine) {
                    builder.newLine();
                }
            }
        }

        public static void writeXml(byte[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(short[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(int[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(long[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(float[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(double[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(boolean[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(char[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(java.lang.Object[] array, java.lang.String name, com.github.underscore.lodash.Xml.XmlStringBuilder builder, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        com.github.underscore.lodash.Xml.XmlValue.writeXml(array[i], (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : name), builder, parentTextFound, namespaces);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }
    }

    public static class XmlObject {
        @java.lang.SuppressWarnings("unchecked")
        public static void writeXml(java.util.Map map, java.lang.String name, final com.github.underscore.lodash.Xml.XmlStringBuilder builder, final boolean parentTextFound, final java.util.Set<java.lang.String> namespaces) {
            if (map == null) {
                com.github.underscore.lodash.Xml.XmlValue.writeXml(com.github.underscore.lodash.Xml.NULL, name, builder, false, namespaces);
                return;
            }
            final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems = com.github.underscore.lodash.U.newArrayList();
            final java.util.List<java.lang.String> attrs = com.github.underscore.lodash.U.newArrayList();
            final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep = builder.getIdentStep();
            final int ident = (builder.getIdent()) + (name == null ? 0 : builder.getIdentStep().getIdent());
            final java.util.List<java.util.Map.Entry> entries = com.github.underscore.lodash.U.newArrayList(map.entrySet());
            for (int index = 0; index < (entries.size()); index += 1) {
                final java.util.Map.Entry entry = entries.get(index);
                final boolean addNewLine = (index < ((entries.size()) - 1)) && (!(java.lang.String.valueOf(entries.get((index + 1)).getKey()).startsWith(com.github.underscore.lodash.Xml.TEXT)));
                if (((java.lang.String.valueOf(entry.getKey()).startsWith("-")) && (!((entry.getValue()) instanceof java.util.Map))) && (!((entry.getValue()) instanceof java.util.List))) {
                    attrs.add(((((" " + (com.github.underscore.lodash.Xml.XmlValue.escapeName(java.lang.String.valueOf(entry.getKey()).substring(1), namespaces))) + "=\"") + (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getValue())))) + "\""));
                    if (java.lang.String.valueOf(entry.getKey()).startsWith("-xmlns:")) {
                        namespaces.add(java.lang.String.valueOf(entry.getKey()).substring(7));
                    }
                }else
                    if (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getKey())).startsWith(com.github.underscore.lodash.Xml.TEXT)) {
                        com.github.underscore.lodash.Xml.XmlObject.addText(entry, elems, identStep, ident);
                    }else {
                        com.github.underscore.lodash.Xml.XmlObject.processElements(entry, identStep, ident, addNewLine, elems, namespaces);
                    }

            }
            if (name != null) {
                if (!parentTextFound) {
                    builder.fillSpaces();
                }
                builder.append("<").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(com.github.underscore.lodash.U.join(attrs, "")).append(">").incIdent();
                if ((!(elems.isEmpty())) && (!((elems.get(0)) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText))) {
                    builder.newLine();
                }
            }
            for (com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder1 : elems) {
                builder.append(localBuilder1.toString());
            }
            if (name != null) {
                builder.decIdent();
                if ((!(elems.isEmpty())) && (!((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText))) {
                    builder.newLine().fillSpaces();
                }
                builder.append("</").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(">");
            }
        }

        private static void processElements(final java.util.Map.Entry entry, final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident, final boolean addNewLine, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final java.util.Set<java.lang.String> namespaces) {
            if (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getKey())).startsWith(com.github.underscore.lodash.Xml.COMMENT)) {
                com.github.underscore.lodash.Xml.XmlObject.addComment(entry, identStep, ident, addNewLine, elems, "<!--", "-->");
            }else
                if (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getKey())).startsWith(com.github.underscore.lodash.Xml.CDATA)) {
                    com.github.underscore.lodash.Xml.XmlObject.addComment(entry, identStep, ident, addNewLine, elems, "<![CDATA[", "]]>");
                }else
                    if (((entry.getValue()) instanceof java.util.List) && (!(((java.util.List) (entry.getValue())).isEmpty()))) {
                        com.github.underscore.lodash.Xml.XmlObject.addElements(identStep, ident, entry, namespaces, elems, addNewLine);
                    }else {
                        com.github.underscore.lodash.Xml.XmlObject.addElement(identStep, ident, entry, namespaces, elems, addNewLine);
                    }


        }

        private static void addText(final java.util.Map.Entry entry, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident) {
            if ((entry.getValue()) instanceof java.util.List) {
                for (java.lang.Object value : ((java.util.List) (entry.getValue()))) {
                    elems.add(new com.github.underscore.lodash.Xml.XmlStringBuilderText(identStep, ident).append(com.github.underscore.lodash.U.escape(java.lang.String.valueOf(value))));
                }
            }else {
                elems.add(new com.github.underscore.lodash.Xml.XmlStringBuilderText(identStep, ident).append(com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getValue()))));
            }
        }

        private static void addElements(final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident, java.util.Map.Entry entry, java.util.Set<java.lang.String> namespaces, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final boolean addNewLine) {
            boolean parentTextFound = (!(elems.isEmpty())) && ((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText);
            final com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder;
            if ((java.lang.String.valueOf(((java.util.List) (entry.getValue())).get(0)).startsWith(("{" + (com.github.underscore.lodash.Xml.TEXT)))) || (java.lang.String.valueOf(((java.util.List) (entry.getValue())).get(((((java.util.List) (entry.getValue())).size()) - 1))).startsWith(("{" + (com.github.underscore.lodash.Xml.TEXT))))) {
                localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderText(identStep, ident);
            }else {
                localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader(identStep, ident);
            }
            com.github.underscore.lodash.Xml.XmlArray.writeXml(((java.util.List) (entry.getValue())), localBuilder, java.lang.String.valueOf(entry.getKey()), parentTextFound, namespaces);
            if (addNewLine) {
                localBuilder.newLine();
            }
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(13).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.github.underscore.lodash.Xml.ENCODING",com.github.underscore.lodash.Xml.ENCODING);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident",com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("elems",elems);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.github.underscore.lodash.Xml.NULL_ELEMENT",com.github.underscore.lodash.Xml.NULL_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("addNewLine",addNewLine);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("ident",ident);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.github.underscore.lodash.Xml.ATTRS",com.github.underscore.lodash.Xml.ATTRS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("identStep",identStep);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.github.underscore.lodash.Xml.TEXT",com.github.underscore.lodash.Xml.TEXT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.github.underscore.lodash.Xml.NULL",com.github.underscore.lodash.Xml.NULL);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.github.underscore.lodash.Xml.ELEMENT_TEXT",com.github.underscore.lodash.Xml.ELEMENT_TEXT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.github.underscore.lodash.Xml.CLOSED_ELEMENT",com.github.underscore.lodash.Xml.CLOSED_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.github.underscore.lodash.Xml.UTF_8",com.github.underscore.lodash.Xml.UTF_8);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.github.underscore.lodash.Xml.CDATA",com.github.underscore.lodash.Xml.CDATA);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("entry",entry);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("parentTextFound",parentTextFound);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.github.underscore.lodash.Xml.COMMENT",com.github.underscore.lodash.Xml.COMMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.github.underscore.lodash.Xml.EMPTY_ELEMENT",com.github.underscore.lodash.Xml.EMPTY_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.github.underscore.lodash.Xml.ELEMENT",com.github.underscore.lodash.Xml.ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("namespaces",namespaces);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectionEnds();
            }
            if (runtimeAngelicValue)
                elems.add(localBuilder);

        }

        private static void addElement(final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident, java.util.Map.Entry entry, java.util.Set<java.lang.String> namespaces, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final boolean addNewLine) {
            boolean parentTextFound = (!(elems.isEmpty())) && ((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText);
            com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader(identStep, ident);
            com.github.underscore.lodash.Xml.XmlValue.writeXml(entry.getValue(), java.lang.String.valueOf(entry.getKey()), localBuilder, parentTextFound, namespaces);
            if (addNewLine) {
                localBuilder.newLine();
            }
            elems.add(localBuilder);
        }

        private static void addComment(java.util.Map.Entry entry, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident, boolean addNewLine, java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, java.lang.String openElement, java.lang.String closeElement) {
            if ((entry.getValue()) instanceof java.util.List) {
                for (java.util.Iterator iterator = ((java.util.List) (entry.getValue())).iterator(); iterator.hasNext();) {
                    com.github.underscore.lodash.Xml.XmlObject.addCommentValue(identStep, ident, java.lang.String.valueOf(iterator.next()), ((iterator.hasNext()) || addNewLine), elems, openElement, closeElement);
                }
            }else {
                com.github.underscore.lodash.Xml.XmlObject.addCommentValue(identStep, ident, java.lang.String.valueOf(entry.getValue()), addNewLine, elems, openElement, closeElement);
            }
        }

        private static void addCommentValue(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident, java.lang.String value, boolean addNewLine, java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, java.lang.String openElement, java.lang.String closeElement) {
            boolean parentTextFound = (!(elems.isEmpty())) && ((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText);
            com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader(identStep, ident);
            if (!parentTextFound) {
                localBuilder.fillSpaces();
            }
            localBuilder.append(openElement).append(value).append(closeElement);
            if (addNewLine) {
                localBuilder.newLine();
            }
            elems.add(localBuilder);
        }
    }

    public static class XmlValue {
        public static void writeXml(java.lang.Object value, java.lang.String name, com.github.underscore.lodash.Xml.XmlStringBuilder builder, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (value instanceof java.util.Map) {
                com.github.underscore.lodash.Xml.XmlObject.writeXml(((java.util.Map) (value)), name, builder, parentTextFound, namespaces);
                return;
            }
            if (value instanceof java.util.Collection) {
                com.github.underscore.lodash.Xml.XmlArray.writeXml(((java.util.Collection) (value)), name, builder, parentTextFound, namespaces);
                return;
            }
            if (!parentTextFound) {
                builder.fillSpaces();
            }
            builder.append((("<" + (com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">"));
            if (value == null) {
                builder.append(com.github.underscore.lodash.Xml.NULL);
            }else
                if (value instanceof java.lang.String) {
                    builder.append(com.github.underscore.lodash.Xml.XmlValue.escape(((java.lang.String) (value))));
                }else {
                    com.github.underscore.lodash.Xml.XmlValue.processArrays(value, builder, name, parentTextFound, namespaces);
                }

            builder.append((("</" + (com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">"));
        }

        private static void processArrays(java.lang.Object value, com.github.underscore.lodash.Xml.XmlStringBuilder builder, java.lang.String name, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (value instanceof java.lang.Double) {
                if ((((java.lang.Double) (value)).isInfinite()) || (((java.lang.Double) (value)).isNaN())) {
                    builder.append(com.github.underscore.lodash.Xml.NULL);
                }else {
                    builder.append(value.toString());
                }
            }else
                if (value instanceof java.lang.Float) {
                    if ((((java.lang.Float) (value)).isInfinite()) || (((java.lang.Float) (value)).isNaN())) {
                        builder.append(com.github.underscore.lodash.Xml.NULL);
                    }else {
                        builder.append(value.toString());
                    }
                }else
                    if (value instanceof java.lang.Number) {
                        builder.append(value.toString());
                    }else
                        if (value instanceof java.lang.Boolean) {
                            builder.append(value.toString());
                        }else
                            if (value instanceof byte[]) {
                                builder.newLine().incIdent();
                                com.github.underscore.lodash.Xml.XmlArray.writeXml(((byte[]) (value)), builder);
                                builder.decIdent().newLine().fillSpaces();
                            }else
                                if (value instanceof short[]) {
                                    builder.newLine().incIdent();
                                    com.github.underscore.lodash.Xml.XmlArray.writeXml(((short[]) (value)), builder);
                                    builder.decIdent().newLine().fillSpaces();
                                }else {
                                    com.github.underscore.lodash.Xml.XmlValue.processArrays2(value, builder, name, parentTextFound, namespaces);
                                }





        }

        private static void processArrays2(java.lang.Object value, com.github.underscore.lodash.Xml.XmlStringBuilder builder, java.lang.String name, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (value instanceof int[]) {
                builder.newLine().incIdent();
                com.github.underscore.lodash.Xml.XmlArray.writeXml(((int[]) (value)), builder);
                builder.decIdent().newLine().fillSpaces();
            }else
                if (value instanceof long[]) {
                    builder.newLine().incIdent();
                    com.github.underscore.lodash.Xml.XmlArray.writeXml(((long[]) (value)), builder);
                    builder.decIdent().newLine().fillSpaces();
                }else
                    if (value instanceof float[]) {
                        builder.newLine().incIdent();
                        com.github.underscore.lodash.Xml.XmlArray.writeXml(((float[]) (value)), builder);
                        builder.decIdent().newLine().fillSpaces();
                    }else
                        if (value instanceof double[]) {
                            builder.newLine().incIdent();
                            com.github.underscore.lodash.Xml.XmlArray.writeXml(((double[]) (value)), builder);
                            builder.decIdent().newLine().fillSpaces();
                        }else
                            if (value instanceof boolean[]) {
                                builder.newLine().incIdent();
                                com.github.underscore.lodash.Xml.XmlArray.writeXml(((boolean[]) (value)), builder);
                                builder.decIdent().newLine().fillSpaces();
                            }else
                                if (value instanceof char[]) {
                                    builder.newLine().incIdent();
                                    com.github.underscore.lodash.Xml.XmlArray.writeXml(((char[]) (value)), builder);
                                    builder.decIdent().newLine().fillSpaces();
                                }else
                                    if (value instanceof java.lang.Object[]) {
                                        builder.newLine().incIdent();
                                        com.github.underscore.lodash.Xml.XmlArray.writeXml(((java.lang.Object[]) (value)), name, builder, parentTextFound, namespaces);
                                        builder.decIdent().newLine().fillSpaces();
                                    }else {
                                        builder.append(value.toString());
                                    }






        }

        public static java.lang.String escapeName(java.lang.String name, java.util.Set<java.lang.String> namespaces) {
            final int length = name.length();
            if (length == 0) {
                return "__EE__EMPTY__EE__";
            }
            final java.lang.StringBuilder result = new java.lang.StringBuilder();
            char ch = name.charAt(0);
            if ((com.sun.org.apache.xerces.internal.util.XMLChar.isNameStart(ch)) && (ch != ':')) {
                result.append(ch);
            }else {
                result.append("__").append(com.github.underscore.lodash.Base32.encode(java.lang.Character.toString(ch))).append("__");
            }
            for (int i = 1; i < length; ++i) {
                ch = name.charAt(i);
                if ((ch == ':') && (("xmlns".equals(name.substring(0, i))) || (namespaces.contains(name.substring(0, i))))) {
                    result.append(ch);
                }else
                    if ((com.sun.org.apache.xerces.internal.util.XMLChar.isName(ch)) && (ch != ':')) {
                        result.append(ch);
                    }else {
                        result.append("__").append(com.github.underscore.lodash.Base32.encode(java.lang.Character.toString(ch))).append("__");
                    }

            }
            return result.toString();
        }

        public static java.lang.String escape(java.lang.String s) {
            if (s == null) {
                return null;
            }
            java.lang.StringBuilder sb = new java.lang.StringBuilder();
            com.github.underscore.lodash.Xml.XmlValue.escape(s, sb);
            return sb.toString();
        }

        private static void escape(java.lang.String s, java.lang.StringBuilder sb) {
            final int len = s.length();
            for (int i = 0; i < len; i++) {
                char ch = s.charAt(i);
                switch (ch) {
                    case '"' :
                        sb.append("&quot;");
                        break;
                    case '\'' :
                        sb.append("'");
                        break;
                    case '&' :
                        sb.append("&amp;");
                        break;
                    case '<' :
                        sb.append("&lt;");
                        break;
                    case '>' :
                        sb.append("&gt;");
                        break;
                    case '\b' :
                        sb.append("\\b");
                        break;
                    case '\f' :
                        sb.append("\\f");
                        break;
                    case '\n' :
                        sb.append("\n");
                        break;
                    case '\r' :
                        sb.append("\\r");
                        break;
                    case '\t' :
                        sb.append("\t");
                        break;
                    default :
                        if (((ch <= '\u001f') || ((ch >= '\u007f') && (ch <= '\u009f'))) || ((ch >= '\u2000') && (ch <= '\u20ff'))) {
                            java.lang.String ss = java.lang.Integer.toHexString(ch);
                            sb.append("&#x");
                            for (int k = 0; k < (4 - (ss.length())); k++) {
                                sb.append('0');
                            }
                            sb.append(ss.toUpperCase()).append(";");
                        }else {
                            sb.append(ch);
                        }
                        break;
                }
            }
        }
    }

    public static java.lang.String toXml(java.util.Collection collection, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep) {
        final com.github.underscore.lodash.Xml.XmlStringBuilder builder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutRoot(identStep, com.github.underscore.lodash.Xml.UTF_8.name());
        builder.append("<root>").incIdent();
        if ((collection == null) || (!(collection.isEmpty()))) {
            builder.newLine();
        }
        com.github.underscore.lodash.Xml.XmlArray.writeXml(collection, null, builder, false, com.github.underscore.lodash.U.<java.lang.String>newLinkedHashSet());
        return builder.newLine().append("</root>").toString();
    }

    public static java.lang.String toXml(java.util.Collection collection) {
        return com.github.underscore.lodash.Xml.toXml(collection, com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TWO_SPACES);
    }

    public static java.lang.String toXml(java.util.Map map, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep) {
        final com.github.underscore.lodash.Xml.XmlStringBuilder builder;
        final java.util.Map localMap;
        if ((map != null) && (map.containsKey(com.github.underscore.lodash.Xml.ENCODING))) {
            builder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutRoot(identStep, java.lang.String.valueOf(map.get(com.github.underscore.lodash.Xml.ENCODING)));
            localMap = ((java.util.Map) (com.github.underscore.lodash.U.clone(map)));
            localMap.remove(com.github.underscore.lodash.Xml.ENCODING);
        }else {
            builder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutRoot(identStep, com.github.underscore.lodash.Xml.UTF_8.name());
            localMap = map;
        }
        if ((((localMap == null) || ((localMap.size()) != 1)) || (java.lang.String.valueOf(((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getKey()).startsWith("-"))) || ((((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getValue()) instanceof java.util.List)) {
            final java.lang.String name;
            if ((((localMap != null) && ((localMap.size()) == 1)) && ((((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getValue()) instanceof java.util.List)) && (!(((java.util.List) (((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getValue())).isEmpty()))) {
                name = java.lang.String.valueOf(((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getKey());
            }else {
                name = "root";
            }
            com.github.underscore.lodash.Xml.XmlObject.writeXml(localMap, name, builder, false, com.github.underscore.lodash.U.<java.lang.String>newLinkedHashSet());
        }else {
            com.github.underscore.lodash.Xml.XmlObject.writeXml(localMap, null, builder, false, com.github.underscore.lodash.U.<java.lang.String>newLinkedHashSet());
        }
        return builder.toString();
    }

    public static java.lang.String toXml(java.util.Map map) {
        return com.github.underscore.lodash.Xml.toXml(map, com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TWO_SPACES);
    }

    @java.lang.SuppressWarnings("unchecked")
    private static java.lang.Object getValue(final java.lang.Object value) {
        if ((value instanceof java.util.Map) && ((((java.util.Map<java.lang.String, java.lang.Object>) (value)).entrySet().size()) == 1)) {
            final java.util.Map.Entry<java.lang.String, java.lang.Object> entry = ((java.util.Map<java.lang.String, java.lang.Object>) (value)).entrySet().iterator().next();
            if ((com.github.underscore.lodash.Xml.TEXT.equals(entry.getKey())) || (entry.getKey().equals(com.github.underscore.lodash.Xml.ELEMENT_TEXT))) {
                return entry.getValue();
            }
        }
        return value;
    }

    @java.lang.SuppressWarnings("unchecked")
    private static java.util.Map<java.lang.String, java.lang.Object> createMap(final org.w3c.dom.Node node, final com.github.underscore.Function<java.lang.Object, java.lang.Object> nodeMapper, java.util.Map<java.lang.String, java.lang.Object> attrMap, int[] uniqueIds, final com.github.underscore.Function<java.lang.Object, java.lang.Object> valueMapper, java.lang.String source, int[] sourceIndex) {
        final java.util.Map<java.lang.String, java.lang.Object> map = com.github.underscore.lodash.U.newLinkedHashMap();
        map.putAll(attrMap);
        final org.w3c.dom.NodeList nodeList = node.getChildNodes();
        for (int index = 0; index < (nodeList.getLength()); index++) {
            final org.w3c.dom.Node currentNode = nodeList.item(index);
            final java.lang.String name = currentNode.getNodeName();
            final java.lang.Object value;
            final int attributesLength = ((currentNode.getAttributes()) == null) ? 0 : currentNode.getAttributes().getLength();
            if ((currentNode.getNodeType()) == (org.w3c.dom.Node.ELEMENT_NODE)) {
                sourceIndex[0] = ((source.indexOf(("<" + name), sourceIndex[0])) + (name.length())) + 2;
                final java.util.Map<java.lang.String, java.lang.Object> attrMapLocal = com.github.underscore.lodash.U.newLinkedHashMap();
                if (attributesLength > 0) {
                    final java.util.regex.Matcher matcher = com.github.underscore.lodash.Xml.ATTRS.matcher(source.substring(sourceIndex[0], source.indexOf(">", sourceIndex[0])));
                    while (matcher.find()) {
                        com.github.underscore.lodash.Xml.addNodeValue(attrMapLocal, ('-' + (matcher.group(1))), matcher.group(2), nodeMapper, uniqueIds);
                    } 
                }
                value = com.github.underscore.lodash.Xml.createMap(currentNode, nodeMapper, attrMapLocal, uniqueIds, valueMapper, source, sourceIndex);
            }else {
                if (com.github.underscore.lodash.Xml.COMMENT.equals(name)) {
                    sourceIndex[0] = (source.indexOf("-->", sourceIndex[0])) + 3;
                }else
                    if (com.github.underscore.lodash.Xml.CDATA.equals(name)) {
                        sourceIndex[0] = (source.indexOf("]]>", sourceIndex[0])) + 3;
                    }

                value = currentNode.getTextContent();
            }
            if ((com.github.underscore.lodash.Xml.TEXT.equals(name)) && (valueMapper.apply(value).toString().isEmpty())) {
                continue;
            }
            com.github.underscore.lodash.Xml.addNodeValue(map, name, value, nodeMapper, uniqueIds);
        }
        return map;
    }

    @java.lang.SuppressWarnings("unchecked")
    private static void addNodeValue(final java.util.Map<java.lang.String, java.lang.Object> map, final java.lang.String name, final java.lang.Object value, final com.github.underscore.Function<java.lang.Object, java.lang.Object> nodeMapper, int[] uniqueIds) {
        if (map.containsKey(name)) {
            if (com.github.underscore.lodash.Xml.TEXT.equals(name)) {
                map.put((name + (uniqueIds[0])), nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
                uniqueIds[0] += 1;
            }else
                if (com.github.underscore.lodash.Xml.COMMENT.equals(name)) {
                    map.put((name + (uniqueIds[1])), nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
                    uniqueIds[1] += 1;
                }else
                    if (com.github.underscore.lodash.Xml.CDATA.equals(name)) {
                        map.put((name + (uniqueIds[2])), nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
                        uniqueIds[2] += 1;
                    }else {
                        final java.lang.Object object = map.get(name);
                        if (object instanceof java.util.List) {
                            com.github.underscore.lodash.Xml.addText(map, name, ((java.util.List<java.lang.Object>) (object)), value);
                        }else {
                            final java.util.List<java.lang.Object> objects = com.github.underscore.lodash.U.newArrayList();
                            objects.add(object);
                            com.github.underscore.lodash.Xml.addText(map, name, objects, value);
                            map.put(name, objects);
                        }
                    }


        }else {
            map.put(name, nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
        }
    }

    @java.lang.SuppressWarnings("unchecked")
    private static void addText(final java.util.Map<java.lang.String, java.lang.Object> map, final java.lang.String name, final java.util.List<java.lang.Object> objects, final java.lang.Object value) {
        int lastIndex = (map.size()) - 1;
        final int index = objects.size();
        while (true) {
            final java.util.Map.Entry lastElement = ((java.util.Map.Entry) (map.entrySet().toArray()[lastIndex]));
            if (name.equals(java.lang.String.valueOf(lastElement.getKey()))) {
                break;
            }
            final java.util.Map<java.lang.String, java.lang.Object> text = com.github.underscore.lodash.U.newLinkedHashMap();
            text.put(java.lang.String.valueOf(lastElement.getKey()), map.remove(lastElement.getKey()));
            objects.add(index, text);
            lastIndex -= 1;
        } 
        objects.add(com.github.underscore.lodash.Xml.getValue(value));
    }

    @java.lang.SuppressWarnings("unchecked")
    public static java.lang.Object fromXml(final java.lang.String xml, final com.github.underscore.Function<java.lang.Object, java.lang.Object> valueMapper) {
        if (xml == null) {
            return null;
        }
        try {
            org.w3c.dom.Document document = com.github.underscore.lodash.Xml.createDocument(xml);
            final java.lang.Object result = com.github.underscore.lodash.Xml.createMap(document, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
                public java.lang.Object apply(java.lang.Object object) {
                    return object;
                }
            }, java.util.Collections.<java.lang.String, java.lang.Object>emptyMap(), new int[]{ 1, 1, 1 }, valueMapper, xml, new int[]{ 0 });
            if (((document.getXmlEncoding()) != null) && (!("UTF-8".equalsIgnoreCase(document.getXmlEncoding())))) {
                ((java.util.Map) (result)).put(com.github.underscore.lodash.Xml.ENCODING, document.getXmlEncoding());
            }else
                if ((((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getKey().equals("root")) && (((((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getValue()) instanceof java.util.List) || ((((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getValue()) instanceof java.util.Map))) {
                    return ((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getValue();
                }

            return result;
        } catch (java.lang.Exception ex) {
            throw new java.lang.IllegalArgumentException(ex);
        }
    }

    public static java.lang.Object fromXml(final java.lang.String xml) {
        return com.github.underscore.lodash.Xml.fromXml(xml, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
            public java.lang.Object apply(java.lang.Object object) {
                return java.lang.String.valueOf(object).trim();
            }
        });
    }

    private static org.w3c.dom.Document createDocument(final java.lang.String xml) throws java.io.IOException, javax.xml.parsers.ParserConfigurationException, org.xml.sax.SAXException {
        final javax.xml.parsers.DocumentBuilderFactory factory = javax.xml.parsers.DocumentBuilderFactory.newInstance();
        factory.setNamespaceAware(true);
        factory.setFeature(javax.xml.XMLConstants.FEATURE_SECURE_PROCESSING, true);
        final javax.xml.parsers.DocumentBuilder builder = factory.newDocumentBuilder();
        builder.setErrorHandler(new org.xml.sax.helpers.DefaultHandler());
        return builder.parse(new org.xml.sax.InputSource(new java.io.StringReader(xml)));
    }

    public static java.lang.Object fromXmlMakeArrays(final java.lang.String xml) {
        try {
            org.w3c.dom.Document document = com.github.underscore.lodash.Xml.createDocument(xml);
            return com.github.underscore.lodash.Xml.createMap(document, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
                public java.lang.Object apply(java.lang.Object object) {
                    return object instanceof java.util.List ? object : com.github.underscore.lodash.U.newArrayList(java.util.Arrays.asList(object));
                }
            }, java.util.Collections.<java.lang.String, java.lang.Object>emptyMap(), new int[]{ 1, 1, 1 }, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
                public java.lang.Object apply(java.lang.Object object) {
                    return java.lang.String.valueOf(object).trim();
                }
            }, xml, new int[]{ 0 });
        } catch (java.lang.Exception ex) {
            throw new java.lang.IllegalArgumentException(ex);
        }
    }

    @java.lang.SuppressWarnings("unchecked")
    public static java.lang.String formatXml(java.lang.String xml, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep) {
        java.lang.Object result = com.github.underscore.lodash.Xml.fromXml(xml);
        if (result instanceof java.util.Map) {
            return com.github.underscore.lodash.Xml.toXml(((java.util.Map) (result)), identStep);
        }
        return com.github.underscore.lodash.Xml.toXml(((java.util.List) (result)), identStep);
    }

    public static java.lang.String formatXml(java.lang.String xml) {
        return com.github.underscore.lodash.Xml.formatXml(xml, com.github.underscore.lodash.Xml.XmlStringBuilder.Step.THREE_SPACES);
    }
}
16:26:26.571 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
16:26:26.572 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #16
16:26:26.572 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlObject:442 which is executed by 8 tests
88056
16:26:26.704 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:26:26.779 [pool-48-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (66 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:26:27.150 [pool-47-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Xml.java:440: error: non-static variable ident cannot be referenced from a static context
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident",com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                              ^
Xml.java:621: warning: com.sun.org.apache.xerces.internal.util.XMLChar is internal proprietary API and may be removed in a future release
            if ((com.sun.org.apache.xerces.internal.util.XMLChar.isNameStart(ch)) && (ch != ':')) {
                                                        ^
Xml.java:631: warning: com.sun.org.apache.xerces.internal.util.XMLChar is internal proprietary API and may be removed in a future release
                    if ((com.sun.org.apache.xerces.internal.util.XMLChar.isName(ch)) && (ch != ':')) {
                                                                ^
16:26:27.289 [pool-47-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public final class Xml {
    private static final java.lang.String NULL = "null";

    private static final java.lang.String ELEMENT_TEXT = "element";

    private static final java.lang.String CDATA = "#cdata-section";

    private static final java.lang.String COMMENT = "#comment";

    private static final java.lang.String ENCODING = "#encoding";

    private static final java.lang.String TEXT = "#text";

    private static final java.lang.String ELEMENT = ("<" + (com.github.underscore.lodash.Xml.ELEMENT_TEXT)) + ">";

    private static final java.lang.String CLOSED_ELEMENT = ("</" + (com.github.underscore.lodash.Xml.ELEMENT_TEXT)) + ">";

    private static final java.lang.String EMPTY_ELEMENT = (com.github.underscore.lodash.Xml.ELEMENT) + (com.github.underscore.lodash.Xml.CLOSED_ELEMENT);

    private static final java.lang.String NULL_ELEMENT = ((com.github.underscore.lodash.Xml.ELEMENT) + (com.github.underscore.lodash.Xml.NULL)) + (com.github.underscore.lodash.Xml.CLOSED_ELEMENT);

    private static final java.nio.charset.Charset UTF_8 = java.nio.charset.Charset.forName("UTF-8");

    private static final java.util.regex.Pattern ATTRS = java.util.regex.Pattern.compile(("((?:(?!\\s|=).)*)\\s*?=\\s*?[\"\']?((?:(?<=\")(?:(?<=\\\\)\"|[^\"])*|(?<=\')" + "(?:(?<=\\\\)\'|[^\'])*)|(?:(?!\"|\')(?:(?!\\/>|>|\\s).)+))"));

    public static class XmlStringBuilder {
        public enum Step {

            TWO_SPACES(2),
            THREE_SPACES(3),
            FOUR_SPACES(4),
            COMPACT(0),
            TABS(1);
            private int ident;

            Step(int ident) {
                this.ident = ident;
            }

            public int getIdent() {
                return ident;
            }
        }

        protected final java.lang.StringBuilder builder;

        private final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep;

        private int ident;

        public XmlStringBuilder() {
            builder = new java.lang.StringBuilder("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<root>\n");
            identStep = com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TWO_SPACES;
            ident = 2;
        }

        public XmlStringBuilder(java.lang.StringBuilder builder, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident) {
            this.builder = builder;
            this.identStep = identStep;
            this.ident = ident;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder append(final java.lang.String string) {
            builder.append(string);
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder fillSpaces() {
            for (int index = 0; index < (ident); index += 1) {
                builder.append(((identStep) == (com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TABS) ? '\t' : ' '));
            }
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder incIdent() {
            ident += identStep.getIdent();
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder decIdent() {
            ident -= identStep.getIdent();
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder newLine() {
            if ((identStep) != (com.github.underscore.lodash.Xml.XmlStringBuilder.Step.COMPACT)) {
                builder.append("\n");
            }
            return this;
        }

        public int getIdent() {
            return ident;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder.Step getIdentStep() {
            return identStep;
        }

        public java.lang.String toString() {
            return (builder.toString()) + "\n</root>";
        }
    }

    public static class XmlStringBuilderWithoutRoot extends com.github.underscore.lodash.Xml.XmlStringBuilder {
        public XmlStringBuilderWithoutRoot(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, java.lang.String encoding) {
            super(new java.lang.StringBuilder(((("<?xml version=\"1.0\" encoding=\"" + (com.github.underscore.lodash.U.escape(encoding))) + "\"?>") + (identStep == (com.github.underscore.lodash.Xml.XmlStringBuilder.Step.COMPACT) ? "" : "\n"))), identStep, 0);
        }

        public java.lang.String toString() {
            return builder.toString();
        }
    }

    public static class XmlStringBuilderWithoutHeader extends com.github.underscore.lodash.Xml.XmlStringBuilder {
        public XmlStringBuilderWithoutHeader(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident) {
            super(new java.lang.StringBuilder(), identStep, ident);
        }

        public java.lang.String toString() {
            return builder.toString();
        }
    }

    public static class XmlStringBuilderText extends com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader {
        public XmlStringBuilderText(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident) {
            super(identStep, ident);
        }
    }

    public static class XmlArray {
        public static void writeXml(java.util.Collection collection, java.lang.String name, com.github.underscore.lodash.Xml.XmlStringBuilder builder, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (collection == null) {
                builder.append(com.github.underscore.lodash.Xml.NULL);
                return;
            }
            if (name != null) {
                builder.fillSpaces().append("<").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(">").incIdent();
                if (!(collection.isEmpty())) {
                    builder.newLine();
                }
            }
            com.github.underscore.lodash.Xml.XmlArray.writeXml(collection, builder, name, parentTextFound, namespaces);
            if (name != null) {
                builder.decIdent().newLine().fillSpaces().append("</").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(">");
            }
        }

        @java.lang.SuppressWarnings("unchecked")
        private static void writeXml(java.util.Collection collection, com.github.underscore.lodash.Xml.XmlStringBuilder builder, java.lang.String name, final boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            boolean localParentTextFound = parentTextFound;
            final java.util.List entries = com.github.underscore.lodash.U.newArrayList(collection);
            for (int index = 0; index < (entries.size()); index += 1) {
                final java.lang.Object value = entries.get(index);
                final boolean addNewLine = (index < ((entries.size()) - 1)) && (!(java.lang.String.valueOf(entries.get((index + 1))).startsWith(("{" + (com.github.underscore.lodash.Xml.TEXT)))));
                if (value == null) {
                    builder.fillSpaces().append((((((("<" + (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">") + (com.github.underscore.lodash.Xml.NULL)) + "</") + (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">"));
                }else {
                    if ((value instanceof java.util.Map) && ((((java.util.Map) (value)).size()) == 1)) {
                        com.github.underscore.lodash.Xml.XmlObject.writeXml(((java.util.Map) (value)), null, builder, localParentTextFound, namespaces);
                        if (java.lang.String.valueOf(((java.util.Map.Entry) (((java.util.Map) (value)).entrySet().iterator().next())).getKey()).startsWith(com.github.underscore.lodash.Xml.TEXT)) {
                            localParentTextFound = true;
                            continue;
                        }
                    }else {
                        com.github.underscore.lodash.Xml.XmlValue.writeXml(value, (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : name), builder, localParentTextFound, namespaces);
                    }
                    localParentTextFound = false;
                }
                if (addNewLine) {
                    builder.newLine();
                }
            }
        }

        public static void writeXml(byte[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(short[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(int[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(long[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(float[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(double[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(boolean[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(char[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(java.lang.Object[] array, java.lang.String name, com.github.underscore.lodash.Xml.XmlStringBuilder builder, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        com.github.underscore.lodash.Xml.XmlValue.writeXml(array[i], (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : name), builder, parentTextFound, namespaces);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }
    }

    public static class XmlObject {
        @java.lang.SuppressWarnings("unchecked")
        public static void writeXml(java.util.Map map, java.lang.String name, final com.github.underscore.lodash.Xml.XmlStringBuilder builder, final boolean parentTextFound, final java.util.Set<java.lang.String> namespaces) {
            if (map == null) {
                com.github.underscore.lodash.Xml.XmlValue.writeXml(com.github.underscore.lodash.Xml.NULL, name, builder, false, namespaces);
                return;
            }
            final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems = com.github.underscore.lodash.U.newArrayList();
            final java.util.List<java.lang.String> attrs = com.github.underscore.lodash.U.newArrayList();
            final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep = builder.getIdentStep();
            final int ident = (builder.getIdent()) + (name == null ? 0 : builder.getIdentStep().getIdent());
            final java.util.List<java.util.Map.Entry> entries = com.github.underscore.lodash.U.newArrayList(map.entrySet());
            for (int index = 0; index < (entries.size()); index += 1) {
                final java.util.Map.Entry entry = entries.get(index);
                final boolean addNewLine = (index < ((entries.size()) - 1)) && (!(java.lang.String.valueOf(entries.get((index + 1)).getKey()).startsWith(com.github.underscore.lodash.Xml.TEXT)));
                if (((java.lang.String.valueOf(entry.getKey()).startsWith("-")) && (!((entry.getValue()) instanceof java.util.Map))) && (!((entry.getValue()) instanceof java.util.List))) {
                    attrs.add(((((" " + (com.github.underscore.lodash.Xml.XmlValue.escapeName(java.lang.String.valueOf(entry.getKey()).substring(1), namespaces))) + "=\"") + (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getValue())))) + "\""));
                    if (java.lang.String.valueOf(entry.getKey()).startsWith("-xmlns:")) {
                        namespaces.add(java.lang.String.valueOf(entry.getKey()).substring(7));
                    }
                }else
                    if (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getKey())).startsWith(com.github.underscore.lodash.Xml.TEXT)) {
                        com.github.underscore.lodash.Xml.XmlObject.addText(entry, elems, identStep, ident);
                    }else {
                        com.github.underscore.lodash.Xml.XmlObject.processElements(entry, identStep, ident, addNewLine, elems, namespaces);
                    }

            }
            if (name != null) {
                if (!parentTextFound) {
                    builder.fillSpaces();
                }
                builder.append("<").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(com.github.underscore.lodash.U.join(attrs, "")).append(">").incIdent();
                if ((!(elems.isEmpty())) && (!((elems.get(0)) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText))) {
                    builder.newLine();
                }
            }
            for (com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder1 : elems) {
                builder.append(localBuilder1.toString());
            }
            if (name != null) {
                builder.decIdent();
                if ((!(elems.isEmpty())) && (!((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText))) {
                    builder.newLine().fillSpaces();
                }
                builder.append("</").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(">");
            }
        }

        private static void processElements(final java.util.Map.Entry entry, final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident, final boolean addNewLine, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final java.util.Set<java.lang.String> namespaces) {
            if (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getKey())).startsWith(com.github.underscore.lodash.Xml.COMMENT)) {
                com.github.underscore.lodash.Xml.XmlObject.addComment(entry, identStep, ident, addNewLine, elems, "<!--", "-->");
            }else
                if (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getKey())).startsWith(com.github.underscore.lodash.Xml.CDATA)) {
                    com.github.underscore.lodash.Xml.XmlObject.addComment(entry, identStep, ident, addNewLine, elems, "<![CDATA[", "]]>");
                }else
                    if (((entry.getValue()) instanceof java.util.List) && (!(((java.util.List) (entry.getValue())).isEmpty()))) {
                        com.github.underscore.lodash.Xml.XmlObject.addElements(identStep, ident, entry, namespaces, elems, addNewLine);
                    }else {
                        com.github.underscore.lodash.Xml.XmlObject.addElement(identStep, ident, entry, namespaces, elems, addNewLine);
                    }


        }

        private static void addText(final java.util.Map.Entry entry, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident) {
            if ((entry.getValue()) instanceof java.util.List) {
                for (java.lang.Object value : ((java.util.List) (entry.getValue()))) {
                    elems.add(new com.github.underscore.lodash.Xml.XmlStringBuilderText(identStep, ident).append(com.github.underscore.lodash.U.escape(java.lang.String.valueOf(value))));
                }
            }else {
                elems.add(new com.github.underscore.lodash.Xml.XmlStringBuilderText(identStep, ident).append(com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getValue()))));
            }
        }

        private static void addElements(final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident, java.util.Map.Entry entry, java.util.Set<java.lang.String> namespaces, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final boolean addNewLine) {
            boolean parentTextFound = (!(elems.isEmpty())) && ((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText);
            final com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder;
            if ((java.lang.String.valueOf(((java.util.List) (entry.getValue())).get(0)).startsWith(("{" + (com.github.underscore.lodash.Xml.TEXT)))) || (java.lang.String.valueOf(((java.util.List) (entry.getValue())).get(((((java.util.List) (entry.getValue())).size()) - 1))).startsWith(("{" + (com.github.underscore.lodash.Xml.TEXT))))) {
                localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderText(identStep, ident);
            }else {
                localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader(identStep, ident);
            }
            com.github.underscore.lodash.Xml.XmlArray.writeXml(((java.util.List) (entry.getValue())), localBuilder, java.lang.String.valueOf(entry.getKey()), parentTextFound, namespaces);
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(14).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.github.underscore.lodash.Xml.ENCODING",com.github.underscore.lodash.Xml.ENCODING);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident",com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("elems",elems);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.github.underscore.lodash.Xml.NULL_ELEMENT",com.github.underscore.lodash.Xml.NULL_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("addNewLine",addNewLine);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("ident",ident);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.github.underscore.lodash.Xml.ATTRS",com.github.underscore.lodash.Xml.ATTRS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("identStep",identStep);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.github.underscore.lodash.Xml.TEXT",com.github.underscore.lodash.Xml.TEXT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.github.underscore.lodash.Xml.NULL",com.github.underscore.lodash.Xml.NULL);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.github.underscore.lodash.Xml.ELEMENT_TEXT",com.github.underscore.lodash.Xml.ELEMENT_TEXT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.github.underscore.lodash.Xml.CLOSED_ELEMENT",com.github.underscore.lodash.Xml.CLOSED_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.github.underscore.lodash.Xml.UTF_8",com.github.underscore.lodash.Xml.UTF_8);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.github.underscore.lodash.Xml.CDATA",com.github.underscore.lodash.Xml.CDATA);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("entry",entry);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("parentTextFound",parentTextFound);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.github.underscore.lodash.Xml.COMMENT",com.github.underscore.lodash.Xml.COMMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.github.underscore.lodash.Xml.EMPTY_ELEMENT",com.github.underscore.lodash.Xml.EMPTY_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.github.underscore.lodash.Xml.ELEMENT",com.github.underscore.lodash.Xml.ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("namespaces",namespaces);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectionEnds();
            }
            if (runtimeAngelicValue) if (addNewLine) {
                localBuilder.newLine();
            }
            elems.add(localBuilder);
        }

        private static void addElement(final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident, java.util.Map.Entry entry, java.util.Set<java.lang.String> namespaces, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final boolean addNewLine) {
            boolean parentTextFound = (!(elems.isEmpty())) && ((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText);
            com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader(identStep, ident);
            com.github.underscore.lodash.Xml.XmlValue.writeXml(entry.getValue(), java.lang.String.valueOf(entry.getKey()), localBuilder, parentTextFound, namespaces);
            if (addNewLine) {
                localBuilder.newLine();
            }
            elems.add(localBuilder);
        }

        private static void addComment(java.util.Map.Entry entry, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident, boolean addNewLine, java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, java.lang.String openElement, java.lang.String closeElement) {
            if ((entry.getValue()) instanceof java.util.List) {
                for (java.util.Iterator iterator = ((java.util.List) (entry.getValue())).iterator(); iterator.hasNext();) {
                    com.github.underscore.lodash.Xml.XmlObject.addCommentValue(identStep, ident, java.lang.String.valueOf(iterator.next()), ((iterator.hasNext()) || addNewLine), elems, openElement, closeElement);
                }
            }else {
                com.github.underscore.lodash.Xml.XmlObject.addCommentValue(identStep, ident, java.lang.String.valueOf(entry.getValue()), addNewLine, elems, openElement, closeElement);
            }
        }

        private static void addCommentValue(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident, java.lang.String value, boolean addNewLine, java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, java.lang.String openElement, java.lang.String closeElement) {
            boolean parentTextFound = (!(elems.isEmpty())) && ((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText);
            com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader(identStep, ident);
            if (!parentTextFound) {
                localBuilder.fillSpaces();
            }
            localBuilder.append(openElement).append(value).append(closeElement);
            if (addNewLine) {
                localBuilder.newLine();
            }
            elems.add(localBuilder);
        }
    }

    public static class XmlValue {
        public static void writeXml(java.lang.Object value, java.lang.String name, com.github.underscore.lodash.Xml.XmlStringBuilder builder, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (value instanceof java.util.Map) {
                com.github.underscore.lodash.Xml.XmlObject.writeXml(((java.util.Map) (value)), name, builder, parentTextFound, namespaces);
                return;
            }
            if (value instanceof java.util.Collection) {
                com.github.underscore.lodash.Xml.XmlArray.writeXml(((java.util.Collection) (value)), name, builder, parentTextFound, namespaces);
                return;
            }
            if (!parentTextFound) {
                builder.fillSpaces();
            }
            builder.append((("<" + (com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">"));
            if (value == null) {
                builder.append(com.github.underscore.lodash.Xml.NULL);
            }else
                if (value instanceof java.lang.String) {
                    builder.append(com.github.underscore.lodash.Xml.XmlValue.escape(((java.lang.String) (value))));
                }else {
                    com.github.underscore.lodash.Xml.XmlValue.processArrays(value, builder, name, parentTextFound, namespaces);
                }

            builder.append((("</" + (com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">"));
        }

        private static void processArrays(java.lang.Object value, com.github.underscore.lodash.Xml.XmlStringBuilder builder, java.lang.String name, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (value instanceof java.lang.Double) {
                if ((((java.lang.Double) (value)).isInfinite()) || (((java.lang.Double) (value)).isNaN())) {
                    builder.append(com.github.underscore.lodash.Xml.NULL);
                }else {
                    builder.append(value.toString());
                }
            }else
                if (value instanceof java.lang.Float) {
                    if ((((java.lang.Float) (value)).isInfinite()) || (((java.lang.Float) (value)).isNaN())) {
                        builder.append(com.github.underscore.lodash.Xml.NULL);
                    }else {
                        builder.append(value.toString());
                    }
                }else
                    if (value instanceof java.lang.Number) {
                        builder.append(value.toString());
                    }else
                        if (value instanceof java.lang.Boolean) {
                            builder.append(value.toString());
                        }else
                            if (value instanceof byte[]) {
                                builder.newLine().incIdent();
                                com.github.underscore.lodash.Xml.XmlArray.writeXml(((byte[]) (value)), builder);
                                builder.decIdent().newLine().fillSpaces();
                            }else
                                if (value instanceof short[]) {
                                    builder.newLine().incIdent();
                                    com.github.underscore.lodash.Xml.XmlArray.writeXml(((short[]) (value)), builder);
                                    builder.decIdent().newLine().fillSpaces();
                                }else {
                                    com.github.underscore.lodash.Xml.XmlValue.processArrays2(value, builder, name, parentTextFound, namespaces);
                                }





        }

        private static void processArrays2(java.lang.Object value, com.github.underscore.lodash.Xml.XmlStringBuilder builder, java.lang.String name, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (value instanceof int[]) {
                builder.newLine().incIdent();
                com.github.underscore.lodash.Xml.XmlArray.writeXml(((int[]) (value)), builder);
                builder.decIdent().newLine().fillSpaces();
            }else
                if (value instanceof long[]) {
                    builder.newLine().incIdent();
                    com.github.underscore.lodash.Xml.XmlArray.writeXml(((long[]) (value)), builder);
                    builder.decIdent().newLine().fillSpaces();
                }else
                    if (value instanceof float[]) {
                        builder.newLine().incIdent();
                        com.github.underscore.lodash.Xml.XmlArray.writeXml(((float[]) (value)), builder);
                        builder.decIdent().newLine().fillSpaces();
                    }else
                        if (value instanceof double[]) {
                            builder.newLine().incIdent();
                            com.github.underscore.lodash.Xml.XmlArray.writeXml(((double[]) (value)), builder);
                            builder.decIdent().newLine().fillSpaces();
                        }else
                            if (value instanceof boolean[]) {
                                builder.newLine().incIdent();
                                com.github.underscore.lodash.Xml.XmlArray.writeXml(((boolean[]) (value)), builder);
                                builder.decIdent().newLine().fillSpaces();
                            }else
                                if (value instanceof char[]) {
                                    builder.newLine().incIdent();
                                    com.github.underscore.lodash.Xml.XmlArray.writeXml(((char[]) (value)), builder);
                                    builder.decIdent().newLine().fillSpaces();
                                }else
                                    if (value instanceof java.lang.Object[]) {
                                        builder.newLine().incIdent();
                                        com.github.underscore.lodash.Xml.XmlArray.writeXml(((java.lang.Object[]) (value)), name, builder, parentTextFound, namespaces);
                                        builder.decIdent().newLine().fillSpaces();
                                    }else {
                                        builder.append(value.toString());
                                    }






        }

        public static java.lang.String escapeName(java.lang.String name, java.util.Set<java.lang.String> namespaces) {
            final int length = name.length();
            if (length == 0) {
                return "__EE__EMPTY__EE__";
            }
            final java.lang.StringBuilder result = new java.lang.StringBuilder();
            char ch = name.charAt(0);
            if ((com.sun.org.apache.xerces.internal.util.XMLChar.isNameStart(ch)) && (ch != ':')) {
                result.append(ch);
            }else {
                result.append("__").append(com.github.underscore.lodash.Base32.encode(java.lang.Character.toString(ch))).append("__");
            }
            for (int i = 1; i < length; ++i) {
                ch = name.charAt(i);
                if ((ch == ':') && (("xmlns".equals(name.substring(0, i))) || (namespaces.contains(name.substring(0, i))))) {
                    result.append(ch);
                }else
                    if ((com.sun.org.apache.xerces.internal.util.XMLChar.isName(ch)) && (ch != ':')) {
                        result.append(ch);
                    }else {
                        result.append("__").append(com.github.underscore.lodash.Base32.encode(java.lang.Character.toString(ch))).append("__");
                    }

            }
            return result.toString();
        }

        public static java.lang.String escape(java.lang.String s) {
            if (s == null) {
                return null;
            }
            java.lang.StringBuilder sb = new java.lang.StringBuilder();
            com.github.underscore.lodash.Xml.XmlValue.escape(s, sb);
            return sb.toString();
        }

        private static void escape(java.lang.String s, java.lang.StringBuilder sb) {
            final int len = s.length();
            for (int i = 0; i < len; i++) {
                char ch = s.charAt(i);
                switch (ch) {
                    case '"' :
                        sb.append("&quot;");
                        break;
                    case '\'' :
                        sb.append("'");
                        break;
                    case '&' :
                        sb.append("&amp;");
                        break;
                    case '<' :
                        sb.append("&lt;");
                        break;
                    case '>' :
                        sb.append("&gt;");
                        break;
                    case '\b' :
                        sb.append("\\b");
                        break;
                    case '\f' :
                        sb.append("\\f");
                        break;
                    case '\n' :
                        sb.append("\n");
                        break;
                    case '\r' :
                        sb.append("\\r");
                        break;
                    case '\t' :
                        sb.append("\t");
                        break;
                    default :
                        if (((ch <= '\u001f') || ((ch >= '\u007f') && (ch <= '\u009f'))) || ((ch >= '\u2000') && (ch <= '\u20ff'))) {
                            java.lang.String ss = java.lang.Integer.toHexString(ch);
                            sb.append("&#x");
                            for (int k = 0; k < (4 - (ss.length())); k++) {
                                sb.append('0');
                            }
                            sb.append(ss.toUpperCase()).append(";");
                        }else {
                            sb.append(ch);
                        }
                        break;
                }
            }
        }
    }

    public static java.lang.String toXml(java.util.Collection collection, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep) {
        final com.github.underscore.lodash.Xml.XmlStringBuilder builder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutRoot(identStep, com.github.underscore.lodash.Xml.UTF_8.name());
        builder.append("<root>").incIdent();
        if ((collection == null) || (!(collection.isEmpty()))) {
            builder.newLine();
        }
        com.github.underscore.lodash.Xml.XmlArray.writeXml(collection, null, builder, false, com.github.underscore.lodash.U.<java.lang.String>newLinkedHashSet());
        return builder.newLine().append("</root>").toString();
    }

    public static java.lang.String toXml(java.util.Collection collection) {
        return com.github.underscore.lodash.Xml.toXml(collection, com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TWO_SPACES);
    }

    public static java.lang.String toXml(java.util.Map map, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep) {
        final com.github.underscore.lodash.Xml.XmlStringBuilder builder;
        final java.util.Map localMap;
        if ((map != null) && (map.containsKey(com.github.underscore.lodash.Xml.ENCODING))) {
            builder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutRoot(identStep, java.lang.String.valueOf(map.get(com.github.underscore.lodash.Xml.ENCODING)));
            localMap = ((java.util.Map) (com.github.underscore.lodash.U.clone(map)));
            localMap.remove(com.github.underscore.lodash.Xml.ENCODING);
        }else {
            builder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutRoot(identStep, com.github.underscore.lodash.Xml.UTF_8.name());
            localMap = map;
        }
        if ((((localMap == null) || ((localMap.size()) != 1)) || (java.lang.String.valueOf(((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getKey()).startsWith("-"))) || ((((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getValue()) instanceof java.util.List)) {
            final java.lang.String name;
            if ((((localMap != null) && ((localMap.size()) == 1)) && ((((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getValue()) instanceof java.util.List)) && (!(((java.util.List) (((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getValue())).isEmpty()))) {
                name = java.lang.String.valueOf(((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getKey());
            }else {
                name = "root";
            }
            com.github.underscore.lodash.Xml.XmlObject.writeXml(localMap, name, builder, false, com.github.underscore.lodash.U.<java.lang.String>newLinkedHashSet());
        }else {
            com.github.underscore.lodash.Xml.XmlObject.writeXml(localMap, null, builder, false, com.github.underscore.lodash.U.<java.lang.String>newLinkedHashSet());
        }
        return builder.toString();
    }

    public static java.lang.String toXml(java.util.Map map) {
        return com.github.underscore.lodash.Xml.toXml(map, com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TWO_SPACES);
    }

    @java.lang.SuppressWarnings("unchecked")
    private static java.lang.Object getValue(final java.lang.Object value) {
        if ((value instanceof java.util.Map) && ((((java.util.Map<java.lang.String, java.lang.Object>) (value)).entrySet().size()) == 1)) {
            final java.util.Map.Entry<java.lang.String, java.lang.Object> entry = ((java.util.Map<java.lang.String, java.lang.Object>) (value)).entrySet().iterator().next();
            if ((com.github.underscore.lodash.Xml.TEXT.equals(entry.getKey())) || (entry.getKey().equals(com.github.underscore.lodash.Xml.ELEMENT_TEXT))) {
                return entry.getValue();
            }
        }
        return value;
    }

    @java.lang.SuppressWarnings("unchecked")
    private static java.util.Map<java.lang.String, java.lang.Object> createMap(final org.w3c.dom.Node node, final com.github.underscore.Function<java.lang.Object, java.lang.Object> nodeMapper, java.util.Map<java.lang.String, java.lang.Object> attrMap, int[] uniqueIds, final com.github.underscore.Function<java.lang.Object, java.lang.Object> valueMapper, java.lang.String source, int[] sourceIndex) {
        final java.util.Map<java.lang.String, java.lang.Object> map = com.github.underscore.lodash.U.newLinkedHashMap();
        map.putAll(attrMap);
        final org.w3c.dom.NodeList nodeList = node.getChildNodes();
        for (int index = 0; index < (nodeList.getLength()); index++) {
            final org.w3c.dom.Node currentNode = nodeList.item(index);
            final java.lang.String name = currentNode.getNodeName();
            final java.lang.Object value;
            final int attributesLength = ((currentNode.getAttributes()) == null) ? 0 : currentNode.getAttributes().getLength();
            if ((currentNode.getNodeType()) == (org.w3c.dom.Node.ELEMENT_NODE)) {
                sourceIndex[0] = ((source.indexOf(("<" + name), sourceIndex[0])) + (name.length())) + 2;
                final java.util.Map<java.lang.String, java.lang.Object> attrMapLocal = com.github.underscore.lodash.U.newLinkedHashMap();
                if (attributesLength > 0) {
                    final java.util.regex.Matcher matcher = com.github.underscore.lodash.Xml.ATTRS.matcher(source.substring(sourceIndex[0], source.indexOf(">", sourceIndex[0])));
                    while (matcher.find()) {
                        com.github.underscore.lodash.Xml.addNodeValue(attrMapLocal, ('-' + (matcher.group(1))), matcher.group(2), nodeMapper, uniqueIds);
                    } 
                }
                value = com.github.underscore.lodash.Xml.createMap(currentNode, nodeMapper, attrMapLocal, uniqueIds, valueMapper, source, sourceIndex);
            }else {
                if (com.github.underscore.lodash.Xml.COMMENT.equals(name)) {
                    sourceIndex[0] = (source.indexOf("-->", sourceIndex[0])) + 3;
                }else
                    if (com.github.underscore.lodash.Xml.CDATA.equals(name)) {
                        sourceIndex[0] = (source.indexOf("]]>", sourceIndex[0])) + 3;
                    }

                value = currentNode.getTextContent();
            }
            if ((com.github.underscore.lodash.Xml.TEXT.equals(name)) && (valueMapper.apply(value).toString().isEmpty())) {
                continue;
            }
            com.github.underscore.lodash.Xml.addNodeValue(map, name, value, nodeMapper, uniqueIds);
        }
        return map;
    }

    @java.lang.SuppressWarnings("unchecked")
    private static void addNodeValue(final java.util.Map<java.lang.String, java.lang.Object> map, final java.lang.String name, final java.lang.Object value, final com.github.underscore.Function<java.lang.Object, java.lang.Object> nodeMapper, int[] uniqueIds) {
        if (map.containsKey(name)) {
            if (com.github.underscore.lodash.Xml.TEXT.equals(name)) {
                map.put((name + (uniqueIds[0])), nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
                uniqueIds[0] += 1;
            }else
                if (com.github.underscore.lodash.Xml.COMMENT.equals(name)) {
                    map.put((name + (uniqueIds[1])), nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
                    uniqueIds[1] += 1;
                }else
                    if (com.github.underscore.lodash.Xml.CDATA.equals(name)) {
                        map.put((name + (uniqueIds[2])), nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
                        uniqueIds[2] += 1;
                    }else {
                        final java.lang.Object object = map.get(name);
                        if (object instanceof java.util.List) {
                            com.github.underscore.lodash.Xml.addText(map, name, ((java.util.List<java.lang.Object>) (object)), value);
                        }else {
                            final java.util.List<java.lang.Object> objects = com.github.underscore.lodash.U.newArrayList();
                            objects.add(object);
                            com.github.underscore.lodash.Xml.addText(map, name, objects, value);
                            map.put(name, objects);
                        }
                    }


        }else {
            map.put(name, nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
        }
    }

    @java.lang.SuppressWarnings("unchecked")
    private static void addText(final java.util.Map<java.lang.String, java.lang.Object> map, final java.lang.String name, final java.util.List<java.lang.Object> objects, final java.lang.Object value) {
        int lastIndex = (map.size()) - 1;
        final int index = objects.size();
        while (true) {
            final java.util.Map.Entry lastElement = ((java.util.Map.Entry) (map.entrySet().toArray()[lastIndex]));
            if (name.equals(java.lang.String.valueOf(lastElement.getKey()))) {
                break;
            }
            final java.util.Map<java.lang.String, java.lang.Object> text = com.github.underscore.lodash.U.newLinkedHashMap();
            text.put(java.lang.String.valueOf(lastElement.getKey()), map.remove(lastElement.getKey()));
            objects.add(index, text);
            lastIndex -= 1;
        } 
        objects.add(com.github.underscore.lodash.Xml.getValue(value));
    }

    @java.lang.SuppressWarnings("unchecked")
    public static java.lang.Object fromXml(final java.lang.String xml, final com.github.underscore.Function<java.lang.Object, java.lang.Object> valueMapper) {
        if (xml == null) {
            return null;
        }
        try {
            org.w3c.dom.Document document = com.github.underscore.lodash.Xml.createDocument(xml);
            final java.lang.Object result = com.github.underscore.lodash.Xml.createMap(document, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
                public java.lang.Object apply(java.lang.Object object) {
                    return object;
                }
            }, java.util.Collections.<java.lang.String, java.lang.Object>emptyMap(), new int[]{ 1, 1, 1 }, valueMapper, xml, new int[]{ 0 });
            if (((document.getXmlEncoding()) != null) && (!("UTF-8".equalsIgnoreCase(document.getXmlEncoding())))) {
                ((java.util.Map) (result)).put(com.github.underscore.lodash.Xml.ENCODING, document.getXmlEncoding());
            }else
                if ((((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getKey().equals("root")) && (((((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getValue()) instanceof java.util.List) || ((((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getValue()) instanceof java.util.Map))) {
                    return ((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getValue();
                }

            return result;
        } catch (java.lang.Exception ex) {
            throw new java.lang.IllegalArgumentException(ex);
        }
    }

    public static java.lang.Object fromXml(final java.lang.String xml) {
        return com.github.underscore.lodash.Xml.fromXml(xml, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
            public java.lang.Object apply(java.lang.Object object) {
                return java.lang.String.valueOf(object).trim();
            }
        });
    }

    private static org.w3c.dom.Document createDocument(final java.lang.String xml) throws java.io.IOException, javax.xml.parsers.ParserConfigurationException, org.xml.sax.SAXException {
        final javax.xml.parsers.DocumentBuilderFactory factory = javax.xml.parsers.DocumentBuilderFactory.newInstance();
        factory.setNamespaceAware(true);
        factory.setFeature(javax.xml.XMLConstants.FEATURE_SECURE_PROCESSING, true);
        final javax.xml.parsers.DocumentBuilder builder = factory.newDocumentBuilder();
        builder.setErrorHandler(new org.xml.sax.helpers.DefaultHandler());
        return builder.parse(new org.xml.sax.InputSource(new java.io.StringReader(xml)));
    }

    public static java.lang.Object fromXmlMakeArrays(final java.lang.String xml) {
        try {
            org.w3c.dom.Document document = com.github.underscore.lodash.Xml.createDocument(xml);
            return com.github.underscore.lodash.Xml.createMap(document, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
                public java.lang.Object apply(java.lang.Object object) {
                    return object instanceof java.util.List ? object : com.github.underscore.lodash.U.newArrayList(java.util.Arrays.asList(object));
                }
            }, java.util.Collections.<java.lang.String, java.lang.Object>emptyMap(), new int[]{ 1, 1, 1 }, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
                public java.lang.Object apply(java.lang.Object object) {
                    return java.lang.String.valueOf(object).trim();
                }
            }, xml, new int[]{ 0 });
        } catch (java.lang.Exception ex) {
            throw new java.lang.IllegalArgumentException(ex);
        }
    }

    @java.lang.SuppressWarnings("unchecked")
    public static java.lang.String formatXml(java.lang.String xml, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep) {
        java.lang.Object result = com.github.underscore.lodash.Xml.fromXml(xml);
        if (result instanceof java.util.Map) {
            return com.github.underscore.lodash.Xml.toXml(((java.util.Map) (result)), identStep);
        }
        return com.github.underscore.lodash.Xml.toXml(((java.util.List) (result)), identStep);
    }

    public static java.lang.String formatXml(java.lang.String xml) {
        return com.github.underscore.lodash.Xml.formatXml(xml, com.github.underscore.lodash.Xml.XmlStringBuilder.Step.THREE_SPACES);
    }
}
16:26:27.289 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
16:26:27.289 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:26:27.359 [pool-50-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (61 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:26:27.711 [pool-49-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Xml.java:440: error: non-static variable ident cannot be referenced from a static context
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectInput("com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident",com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                              ^
Xml.java:621: warning: com.sun.org.apache.xerces.internal.util.XMLChar is internal proprietary API and may be removed in a future release
            if ((com.sun.org.apache.xerces.internal.util.XMLChar.isNameStart(ch)) && (ch != ':')) {
                                                        ^
Xml.java:631: warning: com.sun.org.apache.xerces.internal.util.XMLChar is internal proprietary API and may be removed in a future release
                    if ((com.sun.org.apache.xerces.internal.util.XMLChar.isName(ch)) && (ch != ':')) {
                                                                ^
16:26:27.846 [pool-49-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public final class Xml {
    private static final java.lang.String NULL = "null";

    private static final java.lang.String ELEMENT_TEXT = "element";

    private static final java.lang.String CDATA = "#cdata-section";

    private static final java.lang.String COMMENT = "#comment";

    private static final java.lang.String ENCODING = "#encoding";

    private static final java.lang.String TEXT = "#text";

    private static final java.lang.String ELEMENT = ("<" + (com.github.underscore.lodash.Xml.ELEMENT_TEXT)) + ">";

    private static final java.lang.String CLOSED_ELEMENT = ("</" + (com.github.underscore.lodash.Xml.ELEMENT_TEXT)) + ">";

    private static final java.lang.String EMPTY_ELEMENT = (com.github.underscore.lodash.Xml.ELEMENT) + (com.github.underscore.lodash.Xml.CLOSED_ELEMENT);

    private static final java.lang.String NULL_ELEMENT = ((com.github.underscore.lodash.Xml.ELEMENT) + (com.github.underscore.lodash.Xml.NULL)) + (com.github.underscore.lodash.Xml.CLOSED_ELEMENT);

    private static final java.nio.charset.Charset UTF_8 = java.nio.charset.Charset.forName("UTF-8");

    private static final java.util.regex.Pattern ATTRS = java.util.regex.Pattern.compile(("((?:(?!\\s|=).)*)\\s*?=\\s*?[\"\']?((?:(?<=\")(?:(?<=\\\\)\"|[^\"])*|(?<=\')" + "(?:(?<=\\\\)\'|[^\'])*)|(?:(?!\"|\')(?:(?!\\/>|>|\\s).)+))"));

    public static class XmlStringBuilder {
        public enum Step {

            TWO_SPACES(2),
            THREE_SPACES(3),
            FOUR_SPACES(4),
            COMPACT(0),
            TABS(1);
            private int ident;

            Step(int ident) {
                this.ident = ident;
            }

            public int getIdent() {
                return ident;
            }
        }

        protected final java.lang.StringBuilder builder;

        private final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep;

        private int ident;

        public XmlStringBuilder() {
            builder = new java.lang.StringBuilder("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<root>\n");
            identStep = com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TWO_SPACES;
            ident = 2;
        }

        public XmlStringBuilder(java.lang.StringBuilder builder, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident) {
            this.builder = builder;
            this.identStep = identStep;
            this.ident = ident;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder append(final java.lang.String string) {
            builder.append(string);
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder fillSpaces() {
            for (int index = 0; index < (ident); index += 1) {
                builder.append(((identStep) == (com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TABS) ? '\t' : ' '));
            }
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder incIdent() {
            ident += identStep.getIdent();
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder decIdent() {
            ident -= identStep.getIdent();
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder newLine() {
            if ((identStep) != (com.github.underscore.lodash.Xml.XmlStringBuilder.Step.COMPACT)) {
                builder.append("\n");
            }
            return this;
        }

        public int getIdent() {
            return ident;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder.Step getIdentStep() {
            return identStep;
        }

        public java.lang.String toString() {
            return (builder.toString()) + "\n</root>";
        }
    }

    public static class XmlStringBuilderWithoutRoot extends com.github.underscore.lodash.Xml.XmlStringBuilder {
        public XmlStringBuilderWithoutRoot(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, java.lang.String encoding) {
            super(new java.lang.StringBuilder(((("<?xml version=\"1.0\" encoding=\"" + (com.github.underscore.lodash.U.escape(encoding))) + "\"?>") + (identStep == (com.github.underscore.lodash.Xml.XmlStringBuilder.Step.COMPACT) ? "" : "\n"))), identStep, 0);
        }

        public java.lang.String toString() {
            return builder.toString();
        }
    }

    public static class XmlStringBuilderWithoutHeader extends com.github.underscore.lodash.Xml.XmlStringBuilder {
        public XmlStringBuilderWithoutHeader(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident) {
            super(new java.lang.StringBuilder(), identStep, ident);
        }

        public java.lang.String toString() {
            return builder.toString();
        }
    }

    public static class XmlStringBuilderText extends com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader {
        public XmlStringBuilderText(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident) {
            super(identStep, ident);
        }
    }

    public static class XmlArray {
        public static void writeXml(java.util.Collection collection, java.lang.String name, com.github.underscore.lodash.Xml.XmlStringBuilder builder, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (collection == null) {
                builder.append(com.github.underscore.lodash.Xml.NULL);
                return;
            }
            if (name != null) {
                builder.fillSpaces().append("<").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(">").incIdent();
                if (!(collection.isEmpty())) {
                    builder.newLine();
                }
            }
            com.github.underscore.lodash.Xml.XmlArray.writeXml(collection, builder, name, parentTextFound, namespaces);
            if (name != null) {
                builder.decIdent().newLine().fillSpaces().append("</").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(">");
            }
        }

        @java.lang.SuppressWarnings("unchecked")
        private static void writeXml(java.util.Collection collection, com.github.underscore.lodash.Xml.XmlStringBuilder builder, java.lang.String name, final boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            boolean localParentTextFound = parentTextFound;
            final java.util.List entries = com.github.underscore.lodash.U.newArrayList(collection);
            for (int index = 0; index < (entries.size()); index += 1) {
                final java.lang.Object value = entries.get(index);
                final boolean addNewLine = (index < ((entries.size()) - 1)) && (!(java.lang.String.valueOf(entries.get((index + 1))).startsWith(("{" + (com.github.underscore.lodash.Xml.TEXT)))));
                if (value == null) {
                    builder.fillSpaces().append((((((("<" + (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">") + (com.github.underscore.lodash.Xml.NULL)) + "</") + (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">"));
                }else {
                    if ((value instanceof java.util.Map) && ((((java.util.Map) (value)).size()) == 1)) {
                        com.github.underscore.lodash.Xml.XmlObject.writeXml(((java.util.Map) (value)), null, builder, localParentTextFound, namespaces);
                        if (java.lang.String.valueOf(((java.util.Map.Entry) (((java.util.Map) (value)).entrySet().iterator().next())).getKey()).startsWith(com.github.underscore.lodash.Xml.TEXT)) {
                            localParentTextFound = true;
                            continue;
                        }
                    }else {
                        com.github.underscore.lodash.Xml.XmlValue.writeXml(value, (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : name), builder, localParentTextFound, namespaces);
                    }
                    localParentTextFound = false;
                }
                if (addNewLine) {
                    builder.newLine();
                }
            }
        }

        public static void writeXml(byte[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(short[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(int[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(long[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(float[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(double[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(boolean[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(char[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(java.lang.Object[] array, java.lang.String name, com.github.underscore.lodash.Xml.XmlStringBuilder builder, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        com.github.underscore.lodash.Xml.XmlValue.writeXml(array[i], (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : name), builder, parentTextFound, namespaces);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }
    }

    public static class XmlObject {
        @java.lang.SuppressWarnings("unchecked")
        public static void writeXml(java.util.Map map, java.lang.String name, final com.github.underscore.lodash.Xml.XmlStringBuilder builder, final boolean parentTextFound, final java.util.Set<java.lang.String> namespaces) {
            if (map == null) {
                com.github.underscore.lodash.Xml.XmlValue.writeXml(com.github.underscore.lodash.Xml.NULL, name, builder, false, namespaces);
                return;
            }
            final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems = com.github.underscore.lodash.U.newArrayList();
            final java.util.List<java.lang.String> attrs = com.github.underscore.lodash.U.newArrayList();
            final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep = builder.getIdentStep();
            final int ident = (builder.getIdent()) + (name == null ? 0 : builder.getIdentStep().getIdent());
            final java.util.List<java.util.Map.Entry> entries = com.github.underscore.lodash.U.newArrayList(map.entrySet());
            for (int index = 0; index < (entries.size()); index += 1) {
                final java.util.Map.Entry entry = entries.get(index);
                final boolean addNewLine = (index < ((entries.size()) - 1)) && (!(java.lang.String.valueOf(entries.get((index + 1)).getKey()).startsWith(com.github.underscore.lodash.Xml.TEXT)));
                if (((java.lang.String.valueOf(entry.getKey()).startsWith("-")) && (!((entry.getValue()) instanceof java.util.Map))) && (!((entry.getValue()) instanceof java.util.List))) {
                    attrs.add(((((" " + (com.github.underscore.lodash.Xml.XmlValue.escapeName(java.lang.String.valueOf(entry.getKey()).substring(1), namespaces))) + "=\"") + (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getValue())))) + "\""));
                    if (java.lang.String.valueOf(entry.getKey()).startsWith("-xmlns:")) {
                        namespaces.add(java.lang.String.valueOf(entry.getKey()).substring(7));
                    }
                }else
                    if (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getKey())).startsWith(com.github.underscore.lodash.Xml.TEXT)) {
                        com.github.underscore.lodash.Xml.XmlObject.addText(entry, elems, identStep, ident);
                    }else {
                        com.github.underscore.lodash.Xml.XmlObject.processElements(entry, identStep, ident, addNewLine, elems, namespaces);
                    }

            }
            if (name != null) {
                if (!parentTextFound) {
                    builder.fillSpaces();
                }
                builder.append("<").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(com.github.underscore.lodash.U.join(attrs, "")).append(">").incIdent();
                if ((!(elems.isEmpty())) && (!((elems.get(0)) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText))) {
                    builder.newLine();
                }
            }
            for (com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder1 : elems) {
                builder.append(localBuilder1.toString());
            }
            if (name != null) {
                builder.decIdent();
                if ((!(elems.isEmpty())) && (!((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText))) {
                    builder.newLine().fillSpaces();
                }
                builder.append("</").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(">");
            }
        }

        private static void processElements(final java.util.Map.Entry entry, final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident, final boolean addNewLine, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final java.util.Set<java.lang.String> namespaces) {
            if (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getKey())).startsWith(com.github.underscore.lodash.Xml.COMMENT)) {
                com.github.underscore.lodash.Xml.XmlObject.addComment(entry, identStep, ident, addNewLine, elems, "<!--", "-->");
            }else
                if (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getKey())).startsWith(com.github.underscore.lodash.Xml.CDATA)) {
                    com.github.underscore.lodash.Xml.XmlObject.addComment(entry, identStep, ident, addNewLine, elems, "<![CDATA[", "]]>");
                }else
                    if (((entry.getValue()) instanceof java.util.List) && (!(((java.util.List) (entry.getValue())).isEmpty()))) {
                        com.github.underscore.lodash.Xml.XmlObject.addElements(identStep, ident, entry, namespaces, elems, addNewLine);
                    }else {
                        com.github.underscore.lodash.Xml.XmlObject.addElement(identStep, ident, entry, namespaces, elems, addNewLine);
                    }


        }

        private static void addText(final java.util.Map.Entry entry, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident) {
            if ((entry.getValue()) instanceof java.util.List) {
                for (java.lang.Object value : ((java.util.List) (entry.getValue()))) {
                    elems.add(new com.github.underscore.lodash.Xml.XmlStringBuilderText(identStep, ident).append(com.github.underscore.lodash.U.escape(java.lang.String.valueOf(value))));
                }
            }else {
                elems.add(new com.github.underscore.lodash.Xml.XmlStringBuilderText(identStep, ident).append(com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getValue()))));
            }
        }

        private static void addElements(final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident, java.util.Map.Entry entry, java.util.Set<java.lang.String> namespaces, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final boolean addNewLine) {
            boolean parentTextFound = (!(elems.isEmpty())) && ((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText);
            final com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder;
            if ((java.lang.String.valueOf(((java.util.List) (entry.getValue())).get(0)).startsWith(("{" + (com.github.underscore.lodash.Xml.TEXT)))) || (java.lang.String.valueOf(((java.util.List) (entry.getValue())).get(((((java.util.List) (entry.getValue())).size()) - 1))).startsWith(("{" + (com.github.underscore.lodash.Xml.TEXT))))) {
                localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderText(identStep, ident);
            }else {
                localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader(identStep, ident);
            }
            com.github.underscore.lodash.Xml.XmlArray.writeXml(((java.util.List) (entry.getValue())), localBuilder, java.lang.String.valueOf(entry.getKey()), parentTextFound, namespaces);
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = addNewLine;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(15).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectInput("com.github.underscore.lodash.Xml.ENCODING",com.github.underscore.lodash.Xml.ENCODING);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectInput("com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident",com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectInput("elems",elems);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectInput("com.github.underscore.lodash.Xml.NULL_ELEMENT",com.github.underscore.lodash.Xml.NULL_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectInput("addNewLine",addNewLine);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectInput("ident",ident);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectInput("com.github.underscore.lodash.Xml.ATTRS",com.github.underscore.lodash.Xml.ATTRS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectInput("identStep",identStep);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectInput("com.github.underscore.lodash.Xml.TEXT",com.github.underscore.lodash.Xml.TEXT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectInput("com.github.underscore.lodash.Xml.NULL",com.github.underscore.lodash.Xml.NULL);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectInput("com.github.underscore.lodash.Xml.ELEMENT_TEXT",com.github.underscore.lodash.Xml.ELEMENT_TEXT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectInput("com.github.underscore.lodash.Xml.CLOSED_ELEMENT",com.github.underscore.lodash.Xml.CLOSED_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectInput("com.github.underscore.lodash.Xml.UTF_8",com.github.underscore.lodash.Xml.UTF_8);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectInput("com.github.underscore.lodash.Xml.CDATA",com.github.underscore.lodash.Xml.CDATA);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectInput("entry",entry);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectInput("parentTextFound",parentTextFound);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectInput("com.github.underscore.lodash.Xml.COMMENT",com.github.underscore.lodash.Xml.COMMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectInput("com.github.underscore.lodash.Xml.EMPTY_ELEMENT",com.github.underscore.lodash.Xml.EMPTY_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectInput("com.github.underscore.lodash.Xml.ELEMENT",com.github.underscore.lodash.Xml.ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectInput("namespaces",namespaces);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectionEnds();
            }
            if (runtimeAngelicValue) {
                localBuilder.newLine();
            }
            elems.add(localBuilder);
        }

        private static void addElement(final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident, java.util.Map.Entry entry, java.util.Set<java.lang.String> namespaces, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final boolean addNewLine) {
            boolean parentTextFound = (!(elems.isEmpty())) && ((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText);
            com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader(identStep, ident);
            com.github.underscore.lodash.Xml.XmlValue.writeXml(entry.getValue(), java.lang.String.valueOf(entry.getKey()), localBuilder, parentTextFound, namespaces);
            if (addNewLine) {
                localBuilder.newLine();
            }
            elems.add(localBuilder);
        }

        private static void addComment(java.util.Map.Entry entry, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident, boolean addNewLine, java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, java.lang.String openElement, java.lang.String closeElement) {
            if ((entry.getValue()) instanceof java.util.List) {
                for (java.util.Iterator iterator = ((java.util.List) (entry.getValue())).iterator(); iterator.hasNext();) {
                    com.github.underscore.lodash.Xml.XmlObject.addCommentValue(identStep, ident, java.lang.String.valueOf(iterator.next()), ((iterator.hasNext()) || addNewLine), elems, openElement, closeElement);
                }
            }else {
                com.github.underscore.lodash.Xml.XmlObject.addCommentValue(identStep, ident, java.lang.String.valueOf(entry.getValue()), addNewLine, elems, openElement, closeElement);
            }
        }

        private static void addCommentValue(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident, java.lang.String value, boolean addNewLine, java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, java.lang.String openElement, java.lang.String closeElement) {
            boolean parentTextFound = (!(elems.isEmpty())) && ((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText);
            com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader(identStep, ident);
            if (!parentTextFound) {
                localBuilder.fillSpaces();
            }
            localBuilder.append(openElement).append(value).append(closeElement);
            if (addNewLine) {
                localBuilder.newLine();
            }
            elems.add(localBuilder);
        }
    }

    public static class XmlValue {
        public static void writeXml(java.lang.Object value, java.lang.String name, com.github.underscore.lodash.Xml.XmlStringBuilder builder, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (value instanceof java.util.Map) {
                com.github.underscore.lodash.Xml.XmlObject.writeXml(((java.util.Map) (value)), name, builder, parentTextFound, namespaces);
                return;
            }
            if (value instanceof java.util.Collection) {
                com.github.underscore.lodash.Xml.XmlArray.writeXml(((java.util.Collection) (value)), name, builder, parentTextFound, namespaces);
                return;
            }
            if (!parentTextFound) {
                builder.fillSpaces();
            }
            builder.append((("<" + (com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">"));
            if (value == null) {
                builder.append(com.github.underscore.lodash.Xml.NULL);
            }else
                if (value instanceof java.lang.String) {
                    builder.append(com.github.underscore.lodash.Xml.XmlValue.escape(((java.lang.String) (value))));
                }else {
                    com.github.underscore.lodash.Xml.XmlValue.processArrays(value, builder, name, parentTextFound, namespaces);
                }

            builder.append((("</" + (com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">"));
        }

        private static void processArrays(java.lang.Object value, com.github.underscore.lodash.Xml.XmlStringBuilder builder, java.lang.String name, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (value instanceof java.lang.Double) {
                if ((((java.lang.Double) (value)).isInfinite()) || (((java.lang.Double) (value)).isNaN())) {
                    builder.append(com.github.underscore.lodash.Xml.NULL);
                }else {
                    builder.append(value.toString());
                }
            }else
                if (value instanceof java.lang.Float) {
                    if ((((java.lang.Float) (value)).isInfinite()) || (((java.lang.Float) (value)).isNaN())) {
                        builder.append(com.github.underscore.lodash.Xml.NULL);
                    }else {
                        builder.append(value.toString());
                    }
                }else
                    if (value instanceof java.lang.Number) {
                        builder.append(value.toString());
                    }else
                        if (value instanceof java.lang.Boolean) {
                            builder.append(value.toString());
                        }else
                            if (value instanceof byte[]) {
                                builder.newLine().incIdent();
                                com.github.underscore.lodash.Xml.XmlArray.writeXml(((byte[]) (value)), builder);
                                builder.decIdent().newLine().fillSpaces();
                            }else
                                if (value instanceof short[]) {
                                    builder.newLine().incIdent();
                                    com.github.underscore.lodash.Xml.XmlArray.writeXml(((short[]) (value)), builder);
                                    builder.decIdent().newLine().fillSpaces();
                                }else {
                                    com.github.underscore.lodash.Xml.XmlValue.processArrays2(value, builder, name, parentTextFound, namespaces);
                                }





        }

        private static void processArrays2(java.lang.Object value, com.github.underscore.lodash.Xml.XmlStringBuilder builder, java.lang.String name, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (value instanceof int[]) {
                builder.newLine().incIdent();
                com.github.underscore.lodash.Xml.XmlArray.writeXml(((int[]) (value)), builder);
                builder.decIdent().newLine().fillSpaces();
            }else
                if (value instanceof long[]) {
                    builder.newLine().incIdent();
                    com.github.underscore.lodash.Xml.XmlArray.writeXml(((long[]) (value)), builder);
                    builder.decIdent().newLine().fillSpaces();
                }else
                    if (value instanceof float[]) {
                        builder.newLine().incIdent();
                        com.github.underscore.lodash.Xml.XmlArray.writeXml(((float[]) (value)), builder);
                        builder.decIdent().newLine().fillSpaces();
                    }else
                        if (value instanceof double[]) {
                            builder.newLine().incIdent();
                            com.github.underscore.lodash.Xml.XmlArray.writeXml(((double[]) (value)), builder);
                            builder.decIdent().newLine().fillSpaces();
                        }else
                            if (value instanceof boolean[]) {
                                builder.newLine().incIdent();
                                com.github.underscore.lodash.Xml.XmlArray.writeXml(((boolean[]) (value)), builder);
                                builder.decIdent().newLine().fillSpaces();
                            }else
                                if (value instanceof char[]) {
                                    builder.newLine().incIdent();
                                    com.github.underscore.lodash.Xml.XmlArray.writeXml(((char[]) (value)), builder);
                                    builder.decIdent().newLine().fillSpaces();
                                }else
                                    if (value instanceof java.lang.Object[]) {
                                        builder.newLine().incIdent();
                                        com.github.underscore.lodash.Xml.XmlArray.writeXml(((java.lang.Object[]) (value)), name, builder, parentTextFound, namespaces);
                                        builder.decIdent().newLine().fillSpaces();
                                    }else {
                                        builder.append(value.toString());
                                    }






        }

        public static java.lang.String escapeName(java.lang.String name, java.util.Set<java.lang.String> namespaces) {
            final int length = name.length();
            if (length == 0) {
                return "__EE__EMPTY__EE__";
            }
            final java.lang.StringBuilder result = new java.lang.StringBuilder();
            char ch = name.charAt(0);
            if ((com.sun.org.apache.xerces.internal.util.XMLChar.isNameStart(ch)) && (ch != ':')) {
                result.append(ch);
            }else {
                result.append("__").append(com.github.underscore.lodash.Base32.encode(java.lang.Character.toString(ch))).append("__");
            }
            for (int i = 1; i < length; ++i) {
                ch = name.charAt(i);
                if ((ch == ':') && (("xmlns".equals(name.substring(0, i))) || (namespaces.contains(name.substring(0, i))))) {
                    result.append(ch);
                }else
                    if ((com.sun.org.apache.xerces.internal.util.XMLChar.isName(ch)) && (ch != ':')) {
                        result.append(ch);
                    }else {
                        result.append("__").append(com.github.underscore.lodash.Base32.encode(java.lang.Character.toString(ch))).append("__");
                    }

            }
            return result.toString();
        }

        public static java.lang.String escape(java.lang.String s) {
            if (s == null) {
                return null;
            }
            java.lang.StringBuilder sb = new java.lang.StringBuilder();
            com.github.underscore.lodash.Xml.XmlValue.escape(s, sb);
            return sb.toString();
        }

        private static void escape(java.lang.String s, java.lang.StringBuilder sb) {
            final int len = s.length();
            for (int i = 0; i < len; i++) {
                char ch = s.charAt(i);
                switch (ch) {
                    case '"' :
                        sb.append("&quot;");
                        break;
                    case '\'' :
                        sb.append("'");
                        break;
                    case '&' :
                        sb.append("&amp;");
                        break;
                    case '<' :
                        sb.append("&lt;");
                        break;
                    case '>' :
                        sb.append("&gt;");
                        break;
                    case '\b' :
                        sb.append("\\b");
                        break;
                    case '\f' :
                        sb.append("\\f");
                        break;
                    case '\n' :
                        sb.append("\n");
                        break;
                    case '\r' :
                        sb.append("\\r");
                        break;
                    case '\t' :
                        sb.append("\t");
                        break;
                    default :
                        if (((ch <= '\u001f') || ((ch >= '\u007f') && (ch <= '\u009f'))) || ((ch >= '\u2000') && (ch <= '\u20ff'))) {
                            java.lang.String ss = java.lang.Integer.toHexString(ch);
                            sb.append("&#x");
                            for (int k = 0; k < (4 - (ss.length())); k++) {
                                sb.append('0');
                            }
                            sb.append(ss.toUpperCase()).append(";");
                        }else {
                            sb.append(ch);
                        }
                        break;
                }
            }
        }
    }

    public static java.lang.String toXml(java.util.Collection collection, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep) {
        final com.github.underscore.lodash.Xml.XmlStringBuilder builder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutRoot(identStep, com.github.underscore.lodash.Xml.UTF_8.name());
        builder.append("<root>").incIdent();
        if ((collection == null) || (!(collection.isEmpty()))) {
            builder.newLine();
        }
        com.github.underscore.lodash.Xml.XmlArray.writeXml(collection, null, builder, false, com.github.underscore.lodash.U.<java.lang.String>newLinkedHashSet());
        return builder.newLine().append("</root>").toString();
    }

    public static java.lang.String toXml(java.util.Collection collection) {
        return com.github.underscore.lodash.Xml.toXml(collection, com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TWO_SPACES);
    }

    public static java.lang.String toXml(java.util.Map map, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep) {
        final com.github.underscore.lodash.Xml.XmlStringBuilder builder;
        final java.util.Map localMap;
        if ((map != null) && (map.containsKey(com.github.underscore.lodash.Xml.ENCODING))) {
            builder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutRoot(identStep, java.lang.String.valueOf(map.get(com.github.underscore.lodash.Xml.ENCODING)));
            localMap = ((java.util.Map) (com.github.underscore.lodash.U.clone(map)));
            localMap.remove(com.github.underscore.lodash.Xml.ENCODING);
        }else {
            builder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutRoot(identStep, com.github.underscore.lodash.Xml.UTF_8.name());
            localMap = map;
        }
        if ((((localMap == null) || ((localMap.size()) != 1)) || (java.lang.String.valueOf(((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getKey()).startsWith("-"))) || ((((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getValue()) instanceof java.util.List)) {
            final java.lang.String name;
            if ((((localMap != null) && ((localMap.size()) == 1)) && ((((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getValue()) instanceof java.util.List)) && (!(((java.util.List) (((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getValue())).isEmpty()))) {
                name = java.lang.String.valueOf(((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getKey());
            }else {
                name = "root";
            }
            com.github.underscore.lodash.Xml.XmlObject.writeXml(localMap, name, builder, false, com.github.underscore.lodash.U.<java.lang.String>newLinkedHashSet());
        }else {
            com.github.underscore.lodash.Xml.XmlObject.writeXml(localMap, null, builder, false, com.github.underscore.lodash.U.<java.lang.String>newLinkedHashSet());
        }
        return builder.toString();
    }

    public static java.lang.String toXml(java.util.Map map) {
        return com.github.underscore.lodash.Xml.toXml(map, com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TWO_SPACES);
    }

    @java.lang.SuppressWarnings("unchecked")
    private static java.lang.Object getValue(final java.lang.Object value) {
        if ((value instanceof java.util.Map) && ((((java.util.Map<java.lang.String, java.lang.Object>) (value)).entrySet().size()) == 1)) {
            final java.util.Map.Entry<java.lang.String, java.lang.Object> entry = ((java.util.Map<java.lang.String, java.lang.Object>) (value)).entrySet().iterator().next();
            if ((com.github.underscore.lodash.Xml.TEXT.equals(entry.getKey())) || (entry.getKey().equals(com.github.underscore.lodash.Xml.ELEMENT_TEXT))) {
                return entry.getValue();
            }
        }
        return value;
    }

    @java.lang.SuppressWarnings("unchecked")
    private static java.util.Map<java.lang.String, java.lang.Object> createMap(final org.w3c.dom.Node node, final com.github.underscore.Function<java.lang.Object, java.lang.Object> nodeMapper, java.util.Map<java.lang.String, java.lang.Object> attrMap, int[] uniqueIds, final com.github.underscore.Function<java.lang.Object, java.lang.Object> valueMapper, java.lang.String source, int[] sourceIndex) {
        final java.util.Map<java.lang.String, java.lang.Object> map = com.github.underscore.lodash.U.newLinkedHashMap();
        map.putAll(attrMap);
        final org.w3c.dom.NodeList nodeList = node.getChildNodes();
        for (int index = 0; index < (nodeList.getLength()); index++) {
            final org.w3c.dom.Node currentNode = nodeList.item(index);
            final java.lang.String name = currentNode.getNodeName();
            final java.lang.Object value;
            final int attributesLength = ((currentNode.getAttributes()) == null) ? 0 : currentNode.getAttributes().getLength();
            if ((currentNode.getNodeType()) == (org.w3c.dom.Node.ELEMENT_NODE)) {
                sourceIndex[0] = ((source.indexOf(("<" + name), sourceIndex[0])) + (name.length())) + 2;
                final java.util.Map<java.lang.String, java.lang.Object> attrMapLocal = com.github.underscore.lodash.U.newLinkedHashMap();
                if (attributesLength > 0) {
                    final java.util.regex.Matcher matcher = com.github.underscore.lodash.Xml.ATTRS.matcher(source.substring(sourceIndex[0], source.indexOf(">", sourceIndex[0])));
                    while (matcher.find()) {
                        com.github.underscore.lodash.Xml.addNodeValue(attrMapLocal, ('-' + (matcher.group(1))), matcher.group(2), nodeMapper, uniqueIds);
                    } 
                }
                value = com.github.underscore.lodash.Xml.createMap(currentNode, nodeMapper, attrMapLocal, uniqueIds, valueMapper, source, sourceIndex);
            }else {
                if (com.github.underscore.lodash.Xml.COMMENT.equals(name)) {
                    sourceIndex[0] = (source.indexOf("-->", sourceIndex[0])) + 3;
                }else
                    if (com.github.underscore.lodash.Xml.CDATA.equals(name)) {
                        sourceIndex[0] = (source.indexOf("]]>", sourceIndex[0])) + 3;
                    }

                value = currentNode.getTextContent();
            }
            if ((com.github.underscore.lodash.Xml.TEXT.equals(name)) && (valueMapper.apply(value).toString().isEmpty())) {
                continue;
            }
            com.github.underscore.lodash.Xml.addNodeValue(map, name, value, nodeMapper, uniqueIds);
        }
        return map;
    }

    @java.lang.SuppressWarnings("unchecked")
    private static void addNodeValue(final java.util.Map<java.lang.String, java.lang.Object> map, final java.lang.String name, final java.lang.Object value, final com.github.underscore.Function<java.lang.Object, java.lang.Object> nodeMapper, int[] uniqueIds) {
        if (map.containsKey(name)) {
            if (com.github.underscore.lodash.Xml.TEXT.equals(name)) {
                map.put((name + (uniqueIds[0])), nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
                uniqueIds[0] += 1;
            }else
                if (com.github.underscore.lodash.Xml.COMMENT.equals(name)) {
                    map.put((name + (uniqueIds[1])), nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
                    uniqueIds[1] += 1;
                }else
                    if (com.github.underscore.lodash.Xml.CDATA.equals(name)) {
                        map.put((name + (uniqueIds[2])), nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
                        uniqueIds[2] += 1;
                    }else {
                        final java.lang.Object object = map.get(name);
                        if (object instanceof java.util.List) {
                            com.github.underscore.lodash.Xml.addText(map, name, ((java.util.List<java.lang.Object>) (object)), value);
                        }else {
                            final java.util.List<java.lang.Object> objects = com.github.underscore.lodash.U.newArrayList();
                            objects.add(object);
                            com.github.underscore.lodash.Xml.addText(map, name, objects, value);
                            map.put(name, objects);
                        }
                    }


        }else {
            map.put(name, nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
        }
    }

    @java.lang.SuppressWarnings("unchecked")
    private static void addText(final java.util.Map<java.lang.String, java.lang.Object> map, final java.lang.String name, final java.util.List<java.lang.Object> objects, final java.lang.Object value) {
        int lastIndex = (map.size()) - 1;
        final int index = objects.size();
        while (true) {
            final java.util.Map.Entry lastElement = ((java.util.Map.Entry) (map.entrySet().toArray()[lastIndex]));
            if (name.equals(java.lang.String.valueOf(lastElement.getKey()))) {
                break;
            }
            final java.util.Map<java.lang.String, java.lang.Object> text = com.github.underscore.lodash.U.newLinkedHashMap();
            text.put(java.lang.String.valueOf(lastElement.getKey()), map.remove(lastElement.getKey()));
            objects.add(index, text);
            lastIndex -= 1;
        } 
        objects.add(com.github.underscore.lodash.Xml.getValue(value));
    }

    @java.lang.SuppressWarnings("unchecked")
    public static java.lang.Object fromXml(final java.lang.String xml, final com.github.underscore.Function<java.lang.Object, java.lang.Object> valueMapper) {
        if (xml == null) {
            return null;
        }
        try {
            org.w3c.dom.Document document = com.github.underscore.lodash.Xml.createDocument(xml);
            final java.lang.Object result = com.github.underscore.lodash.Xml.createMap(document, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
                public java.lang.Object apply(java.lang.Object object) {
                    return object;
                }
            }, java.util.Collections.<java.lang.String, java.lang.Object>emptyMap(), new int[]{ 1, 1, 1 }, valueMapper, xml, new int[]{ 0 });
            if (((document.getXmlEncoding()) != null) && (!("UTF-8".equalsIgnoreCase(document.getXmlEncoding())))) {
                ((java.util.Map) (result)).put(com.github.underscore.lodash.Xml.ENCODING, document.getXmlEncoding());
            }else
                if ((((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getKey().equals("root")) && (((((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getValue()) instanceof java.util.List) || ((((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getValue()) instanceof java.util.Map))) {
                    return ((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getValue();
                }

            return result;
        } catch (java.lang.Exception ex) {
            throw new java.lang.IllegalArgumentException(ex);
        }
    }

    public static java.lang.Object fromXml(final java.lang.String xml) {
        return com.github.underscore.lodash.Xml.fromXml(xml, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
            public java.lang.Object apply(java.lang.Object object) {
                return java.lang.String.valueOf(object).trim();
            }
        });
    }

    private static org.w3c.dom.Document createDocument(final java.lang.String xml) throws java.io.IOException, javax.xml.parsers.ParserConfigurationException, org.xml.sax.SAXException {
        final javax.xml.parsers.DocumentBuilderFactory factory = javax.xml.parsers.DocumentBuilderFactory.newInstance();
        factory.setNamespaceAware(true);
        factory.setFeature(javax.xml.XMLConstants.FEATURE_SECURE_PROCESSING, true);
        final javax.xml.parsers.DocumentBuilder builder = factory.newDocumentBuilder();
        builder.setErrorHandler(new org.xml.sax.helpers.DefaultHandler());
        return builder.parse(new org.xml.sax.InputSource(new java.io.StringReader(xml)));
    }

    public static java.lang.Object fromXmlMakeArrays(final java.lang.String xml) {
        try {
            org.w3c.dom.Document document = com.github.underscore.lodash.Xml.createDocument(xml);
            return com.github.underscore.lodash.Xml.createMap(document, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
                public java.lang.Object apply(java.lang.Object object) {
                    return object instanceof java.util.List ? object : com.github.underscore.lodash.U.newArrayList(java.util.Arrays.asList(object));
                }
            }, java.util.Collections.<java.lang.String, java.lang.Object>emptyMap(), new int[]{ 1, 1, 1 }, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
                public java.lang.Object apply(java.lang.Object object) {
                    return java.lang.String.valueOf(object).trim();
                }
            }, xml, new int[]{ 0 });
        } catch (java.lang.Exception ex) {
            throw new java.lang.IllegalArgumentException(ex);
        }
    }

    @java.lang.SuppressWarnings("unchecked")
    public static java.lang.String formatXml(java.lang.String xml, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep) {
        java.lang.Object result = com.github.underscore.lodash.Xml.fromXml(xml);
        if (result instanceof java.util.Map) {
            return com.github.underscore.lodash.Xml.toXml(((java.util.Map) (result)), identStep);
        }
        return com.github.underscore.lodash.Xml.toXml(((java.util.List) (result)), identStep);
    }

    public static java.lang.String formatXml(java.lang.String xml) {
        return com.github.underscore.lodash.Xml.formatXml(xml, com.github.underscore.lodash.Xml.XmlStringBuilder.Step.THREE_SPACES);
    }
}
16:26:27.847 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
16:26:27.847 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #17
16:26:27.847 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlObject:441 which is executed by 8 tests
88056
16:26:27.952 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #18
16:26:27.952 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlObject:440 which is executed by 8 tests
88056
16:26:28.055 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:26:28.122 [pool-52-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (58 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:26:28.461 [pool-51-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Xml.java:439: error: non-static variable ident cannot be referenced from a static context
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident",com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                              ^
Xml.java:623: warning: com.sun.org.apache.xerces.internal.util.XMLChar is internal proprietary API and may be removed in a future release
            if ((com.sun.org.apache.xerces.internal.util.XMLChar.isNameStart(ch)) && (ch != ':')) {
                                                        ^
Xml.java:633: warning: com.sun.org.apache.xerces.internal.util.XMLChar is internal proprietary API and may be removed in a future release
                    if ((com.sun.org.apache.xerces.internal.util.XMLChar.isName(ch)) && (ch != ':')) {
                                                                ^
16:26:28.598 [pool-51-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public final class Xml {
    private static final java.lang.String NULL = "null";

    private static final java.lang.String ELEMENT_TEXT = "element";

    private static final java.lang.String CDATA = "#cdata-section";

    private static final java.lang.String COMMENT = "#comment";

    private static final java.lang.String ENCODING = "#encoding";

    private static final java.lang.String TEXT = "#text";

    private static final java.lang.String ELEMENT = ("<" + (com.github.underscore.lodash.Xml.ELEMENT_TEXT)) + ">";

    private static final java.lang.String CLOSED_ELEMENT = ("</" + (com.github.underscore.lodash.Xml.ELEMENT_TEXT)) + ">";

    private static final java.lang.String EMPTY_ELEMENT = (com.github.underscore.lodash.Xml.ELEMENT) + (com.github.underscore.lodash.Xml.CLOSED_ELEMENT);

    private static final java.lang.String NULL_ELEMENT = ((com.github.underscore.lodash.Xml.ELEMENT) + (com.github.underscore.lodash.Xml.NULL)) + (com.github.underscore.lodash.Xml.CLOSED_ELEMENT);

    private static final java.nio.charset.Charset UTF_8 = java.nio.charset.Charset.forName("UTF-8");

    private static final java.util.regex.Pattern ATTRS = java.util.regex.Pattern.compile(("((?:(?!\\s|=).)*)\\s*?=\\s*?[\"\']?((?:(?<=\")(?:(?<=\\\\)\"|[^\"])*|(?<=\')" + "(?:(?<=\\\\)\'|[^\'])*)|(?:(?!\"|\')(?:(?!\\/>|>|\\s).)+))"));

    public static class XmlStringBuilder {
        public enum Step {

            TWO_SPACES(2),
            THREE_SPACES(3),
            FOUR_SPACES(4),
            COMPACT(0),
            TABS(1);
            private int ident;

            Step(int ident) {
                this.ident = ident;
            }

            public int getIdent() {
                return ident;
            }
        }

        protected final java.lang.StringBuilder builder;

        private final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep;

        private int ident;

        public XmlStringBuilder() {
            builder = new java.lang.StringBuilder("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<root>\n");
            identStep = com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TWO_SPACES;
            ident = 2;
        }

        public XmlStringBuilder(java.lang.StringBuilder builder, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident) {
            this.builder = builder;
            this.identStep = identStep;
            this.ident = ident;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder append(final java.lang.String string) {
            builder.append(string);
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder fillSpaces() {
            for (int index = 0; index < (ident); index += 1) {
                builder.append(((identStep) == (com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TABS) ? '\t' : ' '));
            }
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder incIdent() {
            ident += identStep.getIdent();
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder decIdent() {
            ident -= identStep.getIdent();
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder newLine() {
            if ((identStep) != (com.github.underscore.lodash.Xml.XmlStringBuilder.Step.COMPACT)) {
                builder.append("\n");
            }
            return this;
        }

        public int getIdent() {
            return ident;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder.Step getIdentStep() {
            return identStep;
        }

        public java.lang.String toString() {
            return (builder.toString()) + "\n</root>";
        }
    }

    public static class XmlStringBuilderWithoutRoot extends com.github.underscore.lodash.Xml.XmlStringBuilder {
        public XmlStringBuilderWithoutRoot(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, java.lang.String encoding) {
            super(new java.lang.StringBuilder(((("<?xml version=\"1.0\" encoding=\"" + (com.github.underscore.lodash.U.escape(encoding))) + "\"?>") + (identStep == (com.github.underscore.lodash.Xml.XmlStringBuilder.Step.COMPACT) ? "" : "\n"))), identStep, 0);
        }

        public java.lang.String toString() {
            return builder.toString();
        }
    }

    public static class XmlStringBuilderWithoutHeader extends com.github.underscore.lodash.Xml.XmlStringBuilder {
        public XmlStringBuilderWithoutHeader(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident) {
            super(new java.lang.StringBuilder(), identStep, ident);
        }

        public java.lang.String toString() {
            return builder.toString();
        }
    }

    public static class XmlStringBuilderText extends com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader {
        public XmlStringBuilderText(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident) {
            super(identStep, ident);
        }
    }

    public static class XmlArray {
        public static void writeXml(java.util.Collection collection, java.lang.String name, com.github.underscore.lodash.Xml.XmlStringBuilder builder, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (collection == null) {
                builder.append(com.github.underscore.lodash.Xml.NULL);
                return;
            }
            if (name != null) {
                builder.fillSpaces().append("<").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(">").incIdent();
                if (!(collection.isEmpty())) {
                    builder.newLine();
                }
            }
            com.github.underscore.lodash.Xml.XmlArray.writeXml(collection, builder, name, parentTextFound, namespaces);
            if (name != null) {
                builder.decIdent().newLine().fillSpaces().append("</").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(">");
            }
        }

        @java.lang.SuppressWarnings("unchecked")
        private static void writeXml(java.util.Collection collection, com.github.underscore.lodash.Xml.XmlStringBuilder builder, java.lang.String name, final boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            boolean localParentTextFound = parentTextFound;
            final java.util.List entries = com.github.underscore.lodash.U.newArrayList(collection);
            for (int index = 0; index < (entries.size()); index += 1) {
                final java.lang.Object value = entries.get(index);
                final boolean addNewLine = (index < ((entries.size()) - 1)) && (!(java.lang.String.valueOf(entries.get((index + 1))).startsWith(("{" + (com.github.underscore.lodash.Xml.TEXT)))));
                if (value == null) {
                    builder.fillSpaces().append((((((("<" + (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">") + (com.github.underscore.lodash.Xml.NULL)) + "</") + (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">"));
                }else {
                    if ((value instanceof java.util.Map) && ((((java.util.Map) (value)).size()) == 1)) {
                        com.github.underscore.lodash.Xml.XmlObject.writeXml(((java.util.Map) (value)), null, builder, localParentTextFound, namespaces);
                        if (java.lang.String.valueOf(((java.util.Map.Entry) (((java.util.Map) (value)).entrySet().iterator().next())).getKey()).startsWith(com.github.underscore.lodash.Xml.TEXT)) {
                            localParentTextFound = true;
                            continue;
                        }
                    }else {
                        com.github.underscore.lodash.Xml.XmlValue.writeXml(value, (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : name), builder, localParentTextFound, namespaces);
                    }
                    localParentTextFound = false;
                }
                if (addNewLine) {
                    builder.newLine();
                }
            }
        }

        public static void writeXml(byte[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(short[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(int[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(long[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(float[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(double[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(boolean[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(char[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(java.lang.Object[] array, java.lang.String name, com.github.underscore.lodash.Xml.XmlStringBuilder builder, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        com.github.underscore.lodash.Xml.XmlValue.writeXml(array[i], (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : name), builder, parentTextFound, namespaces);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }
    }

    public static class XmlObject {
        @java.lang.SuppressWarnings("unchecked")
        public static void writeXml(java.util.Map map, java.lang.String name, final com.github.underscore.lodash.Xml.XmlStringBuilder builder, final boolean parentTextFound, final java.util.Set<java.lang.String> namespaces) {
            if (map == null) {
                com.github.underscore.lodash.Xml.XmlValue.writeXml(com.github.underscore.lodash.Xml.NULL, name, builder, false, namespaces);
                return;
            }
            final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems = com.github.underscore.lodash.U.newArrayList();
            final java.util.List<java.lang.String> attrs = com.github.underscore.lodash.U.newArrayList();
            final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep = builder.getIdentStep();
            final int ident = (builder.getIdent()) + (name == null ? 0 : builder.getIdentStep().getIdent());
            final java.util.List<java.util.Map.Entry> entries = com.github.underscore.lodash.U.newArrayList(map.entrySet());
            for (int index = 0; index < (entries.size()); index += 1) {
                final java.util.Map.Entry entry = entries.get(index);
                final boolean addNewLine = (index < ((entries.size()) - 1)) && (!(java.lang.String.valueOf(entries.get((index + 1)).getKey()).startsWith(com.github.underscore.lodash.Xml.TEXT)));
                if (((java.lang.String.valueOf(entry.getKey()).startsWith("-")) && (!((entry.getValue()) instanceof java.util.Map))) && (!((entry.getValue()) instanceof java.util.List))) {
                    attrs.add(((((" " + (com.github.underscore.lodash.Xml.XmlValue.escapeName(java.lang.String.valueOf(entry.getKey()).substring(1), namespaces))) + "=\"") + (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getValue())))) + "\""));
                    if (java.lang.String.valueOf(entry.getKey()).startsWith("-xmlns:")) {
                        namespaces.add(java.lang.String.valueOf(entry.getKey()).substring(7));
                    }
                }else
                    if (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getKey())).startsWith(com.github.underscore.lodash.Xml.TEXT)) {
                        com.github.underscore.lodash.Xml.XmlObject.addText(entry, elems, identStep, ident);
                    }else {
                        com.github.underscore.lodash.Xml.XmlObject.processElements(entry, identStep, ident, addNewLine, elems, namespaces);
                    }

            }
            if (name != null) {
                if (!parentTextFound) {
                    builder.fillSpaces();
                }
                builder.append("<").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(com.github.underscore.lodash.U.join(attrs, "")).append(">").incIdent();
                if ((!(elems.isEmpty())) && (!((elems.get(0)) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText))) {
                    builder.newLine();
                }
            }
            for (com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder1 : elems) {
                builder.append(localBuilder1.toString());
            }
            if (name != null) {
                builder.decIdent();
                if ((!(elems.isEmpty())) && (!((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText))) {
                    builder.newLine().fillSpaces();
                }
                builder.append("</").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(">");
            }
        }

        private static void processElements(final java.util.Map.Entry entry, final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident, final boolean addNewLine, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final java.util.Set<java.lang.String> namespaces) {
            if (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getKey())).startsWith(com.github.underscore.lodash.Xml.COMMENT)) {
                com.github.underscore.lodash.Xml.XmlObject.addComment(entry, identStep, ident, addNewLine, elems, "<!--", "-->");
            }else
                if (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getKey())).startsWith(com.github.underscore.lodash.Xml.CDATA)) {
                    com.github.underscore.lodash.Xml.XmlObject.addComment(entry, identStep, ident, addNewLine, elems, "<![CDATA[", "]]>");
                }else
                    if (((entry.getValue()) instanceof java.util.List) && (!(((java.util.List) (entry.getValue())).isEmpty()))) {
                        com.github.underscore.lodash.Xml.XmlObject.addElements(identStep, ident, entry, namespaces, elems, addNewLine);
                    }else {
                        com.github.underscore.lodash.Xml.XmlObject.addElement(identStep, ident, entry, namespaces, elems, addNewLine);
                    }


        }

        private static void addText(final java.util.Map.Entry entry, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident) {
            if ((entry.getValue()) instanceof java.util.List) {
                for (java.lang.Object value : ((java.util.List) (entry.getValue()))) {
                    elems.add(new com.github.underscore.lodash.Xml.XmlStringBuilderText(identStep, ident).append(com.github.underscore.lodash.U.escape(java.lang.String.valueOf(value))));
                }
            }else {
                elems.add(new com.github.underscore.lodash.Xml.XmlStringBuilderText(identStep, ident).append(com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getValue()))));
            }
        }

        private static void addElements(final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident, java.util.Map.Entry entry, java.util.Set<java.lang.String> namespaces, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final boolean addNewLine) {
            boolean parentTextFound = (!(elems.isEmpty())) && ((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText);
            final com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder;
            if ((java.lang.String.valueOf(((java.util.List) (entry.getValue())).get(0)).startsWith(("{" + (com.github.underscore.lodash.Xml.TEXT)))) || (java.lang.String.valueOf(((java.util.List) (entry.getValue())).get(((((java.util.List) (entry.getValue())).size()) - 1))).startsWith(("{" + (com.github.underscore.lodash.Xml.TEXT))))) {
                localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderText(identStep, ident);
            }else {
                localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader(identStep, ident);
            }
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(16).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.github.underscore.lodash.Xml.ENCODING",com.github.underscore.lodash.Xml.ENCODING);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident",com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("elems",elems);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.github.underscore.lodash.Xml.NULL_ELEMENT",com.github.underscore.lodash.Xml.NULL_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("addNewLine",addNewLine);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("ident",ident);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.github.underscore.lodash.Xml.ATTRS",com.github.underscore.lodash.Xml.ATTRS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("identStep",identStep);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.github.underscore.lodash.Xml.TEXT",com.github.underscore.lodash.Xml.TEXT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.github.underscore.lodash.Xml.NULL",com.github.underscore.lodash.Xml.NULL);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.github.underscore.lodash.Xml.ELEMENT_TEXT",com.github.underscore.lodash.Xml.ELEMENT_TEXT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.github.underscore.lodash.Xml.CLOSED_ELEMENT",com.github.underscore.lodash.Xml.CLOSED_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.github.underscore.lodash.Xml.UTF_8",com.github.underscore.lodash.Xml.UTF_8);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.github.underscore.lodash.Xml.CDATA",com.github.underscore.lodash.Xml.CDATA);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("entry",entry);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("parentTextFound",parentTextFound);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.github.underscore.lodash.Xml.COMMENT",com.github.underscore.lodash.Xml.COMMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.github.underscore.lodash.Xml.EMPTY_ELEMENT",com.github.underscore.lodash.Xml.EMPTY_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.github.underscore.lodash.Xml.ELEMENT",com.github.underscore.lodash.Xml.ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("namespaces",namespaces);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectionEnds();
            }
            if (runtimeAngelicValue)
                com.github.underscore.lodash.Xml.XmlArray.writeXml(((java.util.List) (entry.getValue())), localBuilder, java.lang.String.valueOf(entry.getKey()), parentTextFound, namespaces);

            if (addNewLine) {
                localBuilder.newLine();
            }
            elems.add(localBuilder);
        }

        private static void addElement(final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident, java.util.Map.Entry entry, java.util.Set<java.lang.String> namespaces, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final boolean addNewLine) {
            boolean parentTextFound = (!(elems.isEmpty())) && ((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText);
            com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader(identStep, ident);
            com.github.underscore.lodash.Xml.XmlValue.writeXml(entry.getValue(), java.lang.String.valueOf(entry.getKey()), localBuilder, parentTextFound, namespaces);
            if (addNewLine) {
                localBuilder.newLine();
            }
            elems.add(localBuilder);
        }

        private static void addComment(java.util.Map.Entry entry, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident, boolean addNewLine, java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, java.lang.String openElement, java.lang.String closeElement) {
            if ((entry.getValue()) instanceof java.util.List) {
                for (java.util.Iterator iterator = ((java.util.List) (entry.getValue())).iterator(); iterator.hasNext();) {
                    com.github.underscore.lodash.Xml.XmlObject.addCommentValue(identStep, ident, java.lang.String.valueOf(iterator.next()), ((iterator.hasNext()) || addNewLine), elems, openElement, closeElement);
                }
            }else {
                com.github.underscore.lodash.Xml.XmlObject.addCommentValue(identStep, ident, java.lang.String.valueOf(entry.getValue()), addNewLine, elems, openElement, closeElement);
            }
        }

        private static void addCommentValue(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident, java.lang.String value, boolean addNewLine, java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, java.lang.String openElement, java.lang.String closeElement) {
            boolean parentTextFound = (!(elems.isEmpty())) && ((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText);
            com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader(identStep, ident);
            if (!parentTextFound) {
                localBuilder.fillSpaces();
            }
            localBuilder.append(openElement).append(value).append(closeElement);
            if (addNewLine) {
                localBuilder.newLine();
            }
            elems.add(localBuilder);
        }
    }

    public static class XmlValue {
        public static void writeXml(java.lang.Object value, java.lang.String name, com.github.underscore.lodash.Xml.XmlStringBuilder builder, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (value instanceof java.util.Map) {
                com.github.underscore.lodash.Xml.XmlObject.writeXml(((java.util.Map) (value)), name, builder, parentTextFound, namespaces);
                return;
            }
            if (value instanceof java.util.Collection) {
                com.github.underscore.lodash.Xml.XmlArray.writeXml(((java.util.Collection) (value)), name, builder, parentTextFound, namespaces);
                return;
            }
            if (!parentTextFound) {
                builder.fillSpaces();
            }
            builder.append((("<" + (com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">"));
            if (value == null) {
                builder.append(com.github.underscore.lodash.Xml.NULL);
            }else
                if (value instanceof java.lang.String) {
                    builder.append(com.github.underscore.lodash.Xml.XmlValue.escape(((java.lang.String) (value))));
                }else {
                    com.github.underscore.lodash.Xml.XmlValue.processArrays(value, builder, name, parentTextFound, namespaces);
                }

            builder.append((("</" + (com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">"));
        }

        private static void processArrays(java.lang.Object value, com.github.underscore.lodash.Xml.XmlStringBuilder builder, java.lang.String name, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (value instanceof java.lang.Double) {
                if ((((java.lang.Double) (value)).isInfinite()) || (((java.lang.Double) (value)).isNaN())) {
                    builder.append(com.github.underscore.lodash.Xml.NULL);
                }else {
                    builder.append(value.toString());
                }
            }else
                if (value instanceof java.lang.Float) {
                    if ((((java.lang.Float) (value)).isInfinite()) || (((java.lang.Float) (value)).isNaN())) {
                        builder.append(com.github.underscore.lodash.Xml.NULL);
                    }else {
                        builder.append(value.toString());
                    }
                }else
                    if (value instanceof java.lang.Number) {
                        builder.append(value.toString());
                    }else
                        if (value instanceof java.lang.Boolean) {
                            builder.append(value.toString());
                        }else
                            if (value instanceof byte[]) {
                                builder.newLine().incIdent();
                                com.github.underscore.lodash.Xml.XmlArray.writeXml(((byte[]) (value)), builder);
                                builder.decIdent().newLine().fillSpaces();
                            }else
                                if (value instanceof short[]) {
                                    builder.newLine().incIdent();
                                    com.github.underscore.lodash.Xml.XmlArray.writeXml(((short[]) (value)), builder);
                                    builder.decIdent().newLine().fillSpaces();
                                }else {
                                    com.github.underscore.lodash.Xml.XmlValue.processArrays2(value, builder, name, parentTextFound, namespaces);
                                }





        }

        private static void processArrays2(java.lang.Object value, com.github.underscore.lodash.Xml.XmlStringBuilder builder, java.lang.String name, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (value instanceof int[]) {
                builder.newLine().incIdent();
                com.github.underscore.lodash.Xml.XmlArray.writeXml(((int[]) (value)), builder);
                builder.decIdent().newLine().fillSpaces();
            }else
                if (value instanceof long[]) {
                    builder.newLine().incIdent();
                    com.github.underscore.lodash.Xml.XmlArray.writeXml(((long[]) (value)), builder);
                    builder.decIdent().newLine().fillSpaces();
                }else
                    if (value instanceof float[]) {
                        builder.newLine().incIdent();
                        com.github.underscore.lodash.Xml.XmlArray.writeXml(((float[]) (value)), builder);
                        builder.decIdent().newLine().fillSpaces();
                    }else
                        if (value instanceof double[]) {
                            builder.newLine().incIdent();
                            com.github.underscore.lodash.Xml.XmlArray.writeXml(((double[]) (value)), builder);
                            builder.decIdent().newLine().fillSpaces();
                        }else
                            if (value instanceof boolean[]) {
                                builder.newLine().incIdent();
                                com.github.underscore.lodash.Xml.XmlArray.writeXml(((boolean[]) (value)), builder);
                                builder.decIdent().newLine().fillSpaces();
                            }else
                                if (value instanceof char[]) {
                                    builder.newLine().incIdent();
                                    com.github.underscore.lodash.Xml.XmlArray.writeXml(((char[]) (value)), builder);
                                    builder.decIdent().newLine().fillSpaces();
                                }else
                                    if (value instanceof java.lang.Object[]) {
                                        builder.newLine().incIdent();
                                        com.github.underscore.lodash.Xml.XmlArray.writeXml(((java.lang.Object[]) (value)), name, builder, parentTextFound, namespaces);
                                        builder.decIdent().newLine().fillSpaces();
                                    }else {
                                        builder.append(value.toString());
                                    }






        }

        public static java.lang.String escapeName(java.lang.String name, java.util.Set<java.lang.String> namespaces) {
            final int length = name.length();
            if (length == 0) {
                return "__EE__EMPTY__EE__";
            }
            final java.lang.StringBuilder result = new java.lang.StringBuilder();
            char ch = name.charAt(0);
            if ((com.sun.org.apache.xerces.internal.util.XMLChar.isNameStart(ch)) && (ch != ':')) {
                result.append(ch);
            }else {
                result.append("__").append(com.github.underscore.lodash.Base32.encode(java.lang.Character.toString(ch))).append("__");
            }
            for (int i = 1; i < length; ++i) {
                ch = name.charAt(i);
                if ((ch == ':') && (("xmlns".equals(name.substring(0, i))) || (namespaces.contains(name.substring(0, i))))) {
                    result.append(ch);
                }else
                    if ((com.sun.org.apache.xerces.internal.util.XMLChar.isName(ch)) && (ch != ':')) {
                        result.append(ch);
                    }else {
                        result.append("__").append(com.github.underscore.lodash.Base32.encode(java.lang.Character.toString(ch))).append("__");
                    }

            }
            return result.toString();
        }

        public static java.lang.String escape(java.lang.String s) {
            if (s == null) {
                return null;
            }
            java.lang.StringBuilder sb = new java.lang.StringBuilder();
            com.github.underscore.lodash.Xml.XmlValue.escape(s, sb);
            return sb.toString();
        }

        private static void escape(java.lang.String s, java.lang.StringBuilder sb) {
            final int len = s.length();
            for (int i = 0; i < len; i++) {
                char ch = s.charAt(i);
                switch (ch) {
                    case '"' :
                        sb.append("&quot;");
                        break;
                    case '\'' :
                        sb.append("'");
                        break;
                    case '&' :
                        sb.append("&amp;");
                        break;
                    case '<' :
                        sb.append("&lt;");
                        break;
                    case '>' :
                        sb.append("&gt;");
                        break;
                    case '\b' :
                        sb.append("\\b");
                        break;
                    case '\f' :
                        sb.append("\\f");
                        break;
                    case '\n' :
                        sb.append("\n");
                        break;
                    case '\r' :
                        sb.append("\\r");
                        break;
                    case '\t' :
                        sb.append("\t");
                        break;
                    default :
                        if (((ch <= '\u001f') || ((ch >= '\u007f') && (ch <= '\u009f'))) || ((ch >= '\u2000') && (ch <= '\u20ff'))) {
                            java.lang.String ss = java.lang.Integer.toHexString(ch);
                            sb.append("&#x");
                            for (int k = 0; k < (4 - (ss.length())); k++) {
                                sb.append('0');
                            }
                            sb.append(ss.toUpperCase()).append(";");
                        }else {
                            sb.append(ch);
                        }
                        break;
                }
            }
        }
    }

    public static java.lang.String toXml(java.util.Collection collection, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep) {
        final com.github.underscore.lodash.Xml.XmlStringBuilder builder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutRoot(identStep, com.github.underscore.lodash.Xml.UTF_8.name());
        builder.append("<root>").incIdent();
        if ((collection == null) || (!(collection.isEmpty()))) {
            builder.newLine();
        }
        com.github.underscore.lodash.Xml.XmlArray.writeXml(collection, null, builder, false, com.github.underscore.lodash.U.<java.lang.String>newLinkedHashSet());
        return builder.newLine().append("</root>").toString();
    }

    public static java.lang.String toXml(java.util.Collection collection) {
        return com.github.underscore.lodash.Xml.toXml(collection, com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TWO_SPACES);
    }

    public static java.lang.String toXml(java.util.Map map, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep) {
        final com.github.underscore.lodash.Xml.XmlStringBuilder builder;
        final java.util.Map localMap;
        if ((map != null) && (map.containsKey(com.github.underscore.lodash.Xml.ENCODING))) {
            builder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutRoot(identStep, java.lang.String.valueOf(map.get(com.github.underscore.lodash.Xml.ENCODING)));
            localMap = ((java.util.Map) (com.github.underscore.lodash.U.clone(map)));
            localMap.remove(com.github.underscore.lodash.Xml.ENCODING);
        }else {
            builder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutRoot(identStep, com.github.underscore.lodash.Xml.UTF_8.name());
            localMap = map;
        }
        if ((((localMap == null) || ((localMap.size()) != 1)) || (java.lang.String.valueOf(((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getKey()).startsWith("-"))) || ((((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getValue()) instanceof java.util.List)) {
            final java.lang.String name;
            if ((((localMap != null) && ((localMap.size()) == 1)) && ((((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getValue()) instanceof java.util.List)) && (!(((java.util.List) (((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getValue())).isEmpty()))) {
                name = java.lang.String.valueOf(((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getKey());
            }else {
                name = "root";
            }
            com.github.underscore.lodash.Xml.XmlObject.writeXml(localMap, name, builder, false, com.github.underscore.lodash.U.<java.lang.String>newLinkedHashSet());
        }else {
            com.github.underscore.lodash.Xml.XmlObject.writeXml(localMap, null, builder, false, com.github.underscore.lodash.U.<java.lang.String>newLinkedHashSet());
        }
        return builder.toString();
    }

    public static java.lang.String toXml(java.util.Map map) {
        return com.github.underscore.lodash.Xml.toXml(map, com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TWO_SPACES);
    }

    @java.lang.SuppressWarnings("unchecked")
    private static java.lang.Object getValue(final java.lang.Object value) {
        if ((value instanceof java.util.Map) && ((((java.util.Map<java.lang.String, java.lang.Object>) (value)).entrySet().size()) == 1)) {
            final java.util.Map.Entry<java.lang.String, java.lang.Object> entry = ((java.util.Map<java.lang.String, java.lang.Object>) (value)).entrySet().iterator().next();
            if ((com.github.underscore.lodash.Xml.TEXT.equals(entry.getKey())) || (entry.getKey().equals(com.github.underscore.lodash.Xml.ELEMENT_TEXT))) {
                return entry.getValue();
            }
        }
        return value;
    }

    @java.lang.SuppressWarnings("unchecked")
    private static java.util.Map<java.lang.String, java.lang.Object> createMap(final org.w3c.dom.Node node, final com.github.underscore.Function<java.lang.Object, java.lang.Object> nodeMapper, java.util.Map<java.lang.String, java.lang.Object> attrMap, int[] uniqueIds, final com.github.underscore.Function<java.lang.Object, java.lang.Object> valueMapper, java.lang.String source, int[] sourceIndex) {
        final java.util.Map<java.lang.String, java.lang.Object> map = com.github.underscore.lodash.U.newLinkedHashMap();
        map.putAll(attrMap);
        final org.w3c.dom.NodeList nodeList = node.getChildNodes();
        for (int index = 0; index < (nodeList.getLength()); index++) {
            final org.w3c.dom.Node currentNode = nodeList.item(index);
            final java.lang.String name = currentNode.getNodeName();
            final java.lang.Object value;
            final int attributesLength = ((currentNode.getAttributes()) == null) ? 0 : currentNode.getAttributes().getLength();
            if ((currentNode.getNodeType()) == (org.w3c.dom.Node.ELEMENT_NODE)) {
                sourceIndex[0] = ((source.indexOf(("<" + name), sourceIndex[0])) + (name.length())) + 2;
                final java.util.Map<java.lang.String, java.lang.Object> attrMapLocal = com.github.underscore.lodash.U.newLinkedHashMap();
                if (attributesLength > 0) {
                    final java.util.regex.Matcher matcher = com.github.underscore.lodash.Xml.ATTRS.matcher(source.substring(sourceIndex[0], source.indexOf(">", sourceIndex[0])));
                    while (matcher.find()) {
                        com.github.underscore.lodash.Xml.addNodeValue(attrMapLocal, ('-' + (matcher.group(1))), matcher.group(2), nodeMapper, uniqueIds);
                    } 
                }
                value = com.github.underscore.lodash.Xml.createMap(currentNode, nodeMapper, attrMapLocal, uniqueIds, valueMapper, source, sourceIndex);
            }else {
                if (com.github.underscore.lodash.Xml.COMMENT.equals(name)) {
                    sourceIndex[0] = (source.indexOf("-->", sourceIndex[0])) + 3;
                }else
                    if (com.github.underscore.lodash.Xml.CDATA.equals(name)) {
                        sourceIndex[0] = (source.indexOf("]]>", sourceIndex[0])) + 3;
                    }

                value = currentNode.getTextContent();
            }
            if ((com.github.underscore.lodash.Xml.TEXT.equals(name)) && (valueMapper.apply(value).toString().isEmpty())) {
                continue;
            }
            com.github.underscore.lodash.Xml.addNodeValue(map, name, value, nodeMapper, uniqueIds);
        }
        return map;
    }

    @java.lang.SuppressWarnings("unchecked")
    private static void addNodeValue(final java.util.Map<java.lang.String, java.lang.Object> map, final java.lang.String name, final java.lang.Object value, final com.github.underscore.Function<java.lang.Object, java.lang.Object> nodeMapper, int[] uniqueIds) {
        if (map.containsKey(name)) {
            if (com.github.underscore.lodash.Xml.TEXT.equals(name)) {
                map.put((name + (uniqueIds[0])), nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
                uniqueIds[0] += 1;
            }else
                if (com.github.underscore.lodash.Xml.COMMENT.equals(name)) {
                    map.put((name + (uniqueIds[1])), nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
                    uniqueIds[1] += 1;
                }else
                    if (com.github.underscore.lodash.Xml.CDATA.equals(name)) {
                        map.put((name + (uniqueIds[2])), nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
                        uniqueIds[2] += 1;
                    }else {
                        final java.lang.Object object = map.get(name);
                        if (object instanceof java.util.List) {
                            com.github.underscore.lodash.Xml.addText(map, name, ((java.util.List<java.lang.Object>) (object)), value);
                        }else {
                            final java.util.List<java.lang.Object> objects = com.github.underscore.lodash.U.newArrayList();
                            objects.add(object);
                            com.github.underscore.lodash.Xml.addText(map, name, objects, value);
                            map.put(name, objects);
                        }
                    }


        }else {
            map.put(name, nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
        }
    }

    @java.lang.SuppressWarnings("unchecked")
    private static void addText(final java.util.Map<java.lang.String, java.lang.Object> map, final java.lang.String name, final java.util.List<java.lang.Object> objects, final java.lang.Object value) {
        int lastIndex = (map.size()) - 1;
        final int index = objects.size();
        while (true) {
            final java.util.Map.Entry lastElement = ((java.util.Map.Entry) (map.entrySet().toArray()[lastIndex]));
            if (name.equals(java.lang.String.valueOf(lastElement.getKey()))) {
                break;
            }
            final java.util.Map<java.lang.String, java.lang.Object> text = com.github.underscore.lodash.U.newLinkedHashMap();
            text.put(java.lang.String.valueOf(lastElement.getKey()), map.remove(lastElement.getKey()));
            objects.add(index, text);
            lastIndex -= 1;
        } 
        objects.add(com.github.underscore.lodash.Xml.getValue(value));
    }

    @java.lang.SuppressWarnings("unchecked")
    public static java.lang.Object fromXml(final java.lang.String xml, final com.github.underscore.Function<java.lang.Object, java.lang.Object> valueMapper) {
        if (xml == null) {
            return null;
        }
        try {
            org.w3c.dom.Document document = com.github.underscore.lodash.Xml.createDocument(xml);
            final java.lang.Object result = com.github.underscore.lodash.Xml.createMap(document, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
                public java.lang.Object apply(java.lang.Object object) {
                    return object;
                }
            }, java.util.Collections.<java.lang.String, java.lang.Object>emptyMap(), new int[]{ 1, 1, 1 }, valueMapper, xml, new int[]{ 0 });
            if (((document.getXmlEncoding()) != null) && (!("UTF-8".equalsIgnoreCase(document.getXmlEncoding())))) {
                ((java.util.Map) (result)).put(com.github.underscore.lodash.Xml.ENCODING, document.getXmlEncoding());
            }else
                if ((((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getKey().equals("root")) && (((((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getValue()) instanceof java.util.List) || ((((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getValue()) instanceof java.util.Map))) {
                    return ((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getValue();
                }

            return result;
        } catch (java.lang.Exception ex) {
            throw new java.lang.IllegalArgumentException(ex);
        }
    }

    public static java.lang.Object fromXml(final java.lang.String xml) {
        return com.github.underscore.lodash.Xml.fromXml(xml, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
            public java.lang.Object apply(java.lang.Object object) {
                return java.lang.String.valueOf(object).trim();
            }
        });
    }

    private static org.w3c.dom.Document createDocument(final java.lang.String xml) throws java.io.IOException, javax.xml.parsers.ParserConfigurationException, org.xml.sax.SAXException {
        final javax.xml.parsers.DocumentBuilderFactory factory = javax.xml.parsers.DocumentBuilderFactory.newInstance();
        factory.setNamespaceAware(true);
        factory.setFeature(javax.xml.XMLConstants.FEATURE_SECURE_PROCESSING, true);
        final javax.xml.parsers.DocumentBuilder builder = factory.newDocumentBuilder();
        builder.setErrorHandler(new org.xml.sax.helpers.DefaultHandler());
        return builder.parse(new org.xml.sax.InputSource(new java.io.StringReader(xml)));
    }

    public static java.lang.Object fromXmlMakeArrays(final java.lang.String xml) {
        try {
            org.w3c.dom.Document document = com.github.underscore.lodash.Xml.createDocument(xml);
            return com.github.underscore.lodash.Xml.createMap(document, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
                public java.lang.Object apply(java.lang.Object object) {
                    return object instanceof java.util.List ? object : com.github.underscore.lodash.U.newArrayList(java.util.Arrays.asList(object));
                }
            }, java.util.Collections.<java.lang.String, java.lang.Object>emptyMap(), new int[]{ 1, 1, 1 }, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
                public java.lang.Object apply(java.lang.Object object) {
                    return java.lang.String.valueOf(object).trim();
                }
            }, xml, new int[]{ 0 });
        } catch (java.lang.Exception ex) {
            throw new java.lang.IllegalArgumentException(ex);
        }
    }

    @java.lang.SuppressWarnings("unchecked")
    public static java.lang.String formatXml(java.lang.String xml, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep) {
        java.lang.Object result = com.github.underscore.lodash.Xml.fromXml(xml);
        if (result instanceof java.util.Map) {
            return com.github.underscore.lodash.Xml.toXml(((java.util.Map) (result)), identStep);
        }
        return com.github.underscore.lodash.Xml.toXml(((java.util.List) (result)), identStep);
    }

    public static java.lang.String formatXml(java.lang.String xml) {
        return com.github.underscore.lodash.Xml.formatXml(xml, com.github.underscore.lodash.Xml.XmlStringBuilder.Step.THREE_SPACES);
    }
}
16:26:28.598 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
16:26:28.598 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #19
16:26:28.598 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlObject:435 which is executed by 8 tests
88056
16:26:28.703 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #20
16:26:28.703 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlObject:434 which is executed by 8 tests
88056
16:26:28.811 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #21
16:26:28.812 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlObject:433 which is executed by 8 tests
88056
16:26:28.925 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:26:28.992 [pool-54-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (58 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:26:29.329 [pool-53-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Xml.java:434: error: non-static variable ident cannot be referenced from a static context
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(17).collectInput("com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident",com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                              ^
Xml.java:623: warning: com.sun.org.apache.xerces.internal.util.XMLChar is internal proprietary API and may be removed in a future release
            if ((com.sun.org.apache.xerces.internal.util.XMLChar.isNameStart(ch)) && (ch != ':')) {
                                                        ^
Xml.java:633: warning: com.sun.org.apache.xerces.internal.util.XMLChar is internal proprietary API and may be removed in a future release
                    if ((com.sun.org.apache.xerces.internal.util.XMLChar.isName(ch)) && (ch != ':')) {
                                                                ^
16:26:29.462 [pool-53-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public final class Xml {
    private static final java.lang.String NULL = "null";

    private static final java.lang.String ELEMENT_TEXT = "element";

    private static final java.lang.String CDATA = "#cdata-section";

    private static final java.lang.String COMMENT = "#comment";

    private static final java.lang.String ENCODING = "#encoding";

    private static final java.lang.String TEXT = "#text";

    private static final java.lang.String ELEMENT = ("<" + (com.github.underscore.lodash.Xml.ELEMENT_TEXT)) + ">";

    private static final java.lang.String CLOSED_ELEMENT = ("</" + (com.github.underscore.lodash.Xml.ELEMENT_TEXT)) + ">";

    private static final java.lang.String EMPTY_ELEMENT = (com.github.underscore.lodash.Xml.ELEMENT) + (com.github.underscore.lodash.Xml.CLOSED_ELEMENT);

    private static final java.lang.String NULL_ELEMENT = ((com.github.underscore.lodash.Xml.ELEMENT) + (com.github.underscore.lodash.Xml.NULL)) + (com.github.underscore.lodash.Xml.CLOSED_ELEMENT);

    private static final java.nio.charset.Charset UTF_8 = java.nio.charset.Charset.forName("UTF-8");

    private static final java.util.regex.Pattern ATTRS = java.util.regex.Pattern.compile(("((?:(?!\\s|=).)*)\\s*?=\\s*?[\"\']?((?:(?<=\")(?:(?<=\\\\)\"|[^\"])*|(?<=\')" + "(?:(?<=\\\\)\'|[^\'])*)|(?:(?!\"|\')(?:(?!\\/>|>|\\s).)+))"));

    public static class XmlStringBuilder {
        public enum Step {

            TWO_SPACES(2),
            THREE_SPACES(3),
            FOUR_SPACES(4),
            COMPACT(0),
            TABS(1);
            private int ident;

            Step(int ident) {
                this.ident = ident;
            }

            public int getIdent() {
                return ident;
            }
        }

        protected final java.lang.StringBuilder builder;

        private final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep;

        private int ident;

        public XmlStringBuilder() {
            builder = new java.lang.StringBuilder("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<root>\n");
            identStep = com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TWO_SPACES;
            ident = 2;
        }

        public XmlStringBuilder(java.lang.StringBuilder builder, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident) {
            this.builder = builder;
            this.identStep = identStep;
            this.ident = ident;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder append(final java.lang.String string) {
            builder.append(string);
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder fillSpaces() {
            for (int index = 0; index < (ident); index += 1) {
                builder.append(((identStep) == (com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TABS) ? '\t' : ' '));
            }
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder incIdent() {
            ident += identStep.getIdent();
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder decIdent() {
            ident -= identStep.getIdent();
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder newLine() {
            if ((identStep) != (com.github.underscore.lodash.Xml.XmlStringBuilder.Step.COMPACT)) {
                builder.append("\n");
            }
            return this;
        }

        public int getIdent() {
            return ident;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder.Step getIdentStep() {
            return identStep;
        }

        public java.lang.String toString() {
            return (builder.toString()) + "\n</root>";
        }
    }

    public static class XmlStringBuilderWithoutRoot extends com.github.underscore.lodash.Xml.XmlStringBuilder {
        public XmlStringBuilderWithoutRoot(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, java.lang.String encoding) {
            super(new java.lang.StringBuilder(((("<?xml version=\"1.0\" encoding=\"" + (com.github.underscore.lodash.U.escape(encoding))) + "\"?>") + (identStep == (com.github.underscore.lodash.Xml.XmlStringBuilder.Step.COMPACT) ? "" : "\n"))), identStep, 0);
        }

        public java.lang.String toString() {
            return builder.toString();
        }
    }

    public static class XmlStringBuilderWithoutHeader extends com.github.underscore.lodash.Xml.XmlStringBuilder {
        public XmlStringBuilderWithoutHeader(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident) {
            super(new java.lang.StringBuilder(), identStep, ident);
        }

        public java.lang.String toString() {
            return builder.toString();
        }
    }

    public static class XmlStringBuilderText extends com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader {
        public XmlStringBuilderText(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident) {
            super(identStep, ident);
        }
    }

    public static class XmlArray {
        public static void writeXml(java.util.Collection collection, java.lang.String name, com.github.underscore.lodash.Xml.XmlStringBuilder builder, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (collection == null) {
                builder.append(com.github.underscore.lodash.Xml.NULL);
                return;
            }
            if (name != null) {
                builder.fillSpaces().append("<").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(">").incIdent();
                if (!(collection.isEmpty())) {
                    builder.newLine();
                }
            }
            com.github.underscore.lodash.Xml.XmlArray.writeXml(collection, builder, name, parentTextFound, namespaces);
            if (name != null) {
                builder.decIdent().newLine().fillSpaces().append("</").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(">");
            }
        }

        @java.lang.SuppressWarnings("unchecked")
        private static void writeXml(java.util.Collection collection, com.github.underscore.lodash.Xml.XmlStringBuilder builder, java.lang.String name, final boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            boolean localParentTextFound = parentTextFound;
            final java.util.List entries = com.github.underscore.lodash.U.newArrayList(collection);
            for (int index = 0; index < (entries.size()); index += 1) {
                final java.lang.Object value = entries.get(index);
                final boolean addNewLine = (index < ((entries.size()) - 1)) && (!(java.lang.String.valueOf(entries.get((index + 1))).startsWith(("{" + (com.github.underscore.lodash.Xml.TEXT)))));
                if (value == null) {
                    builder.fillSpaces().append((((((("<" + (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">") + (com.github.underscore.lodash.Xml.NULL)) + "</") + (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">"));
                }else {
                    if ((value instanceof java.util.Map) && ((((java.util.Map) (value)).size()) == 1)) {
                        com.github.underscore.lodash.Xml.XmlObject.writeXml(((java.util.Map) (value)), null, builder, localParentTextFound, namespaces);
                        if (java.lang.String.valueOf(((java.util.Map.Entry) (((java.util.Map) (value)).entrySet().iterator().next())).getKey()).startsWith(com.github.underscore.lodash.Xml.TEXT)) {
                            localParentTextFound = true;
                            continue;
                        }
                    }else {
                        com.github.underscore.lodash.Xml.XmlValue.writeXml(value, (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : name), builder, localParentTextFound, namespaces);
                    }
                    localParentTextFound = false;
                }
                if (addNewLine) {
                    builder.newLine();
                }
            }
        }

        public static void writeXml(byte[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(short[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(int[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(long[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(float[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(double[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(boolean[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(char[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(java.lang.Object[] array, java.lang.String name, com.github.underscore.lodash.Xml.XmlStringBuilder builder, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        com.github.underscore.lodash.Xml.XmlValue.writeXml(array[i], (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : name), builder, parentTextFound, namespaces);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }
    }

    public static class XmlObject {
        @java.lang.SuppressWarnings("unchecked")
        public static void writeXml(java.util.Map map, java.lang.String name, final com.github.underscore.lodash.Xml.XmlStringBuilder builder, final boolean parentTextFound, final java.util.Set<java.lang.String> namespaces) {
            if (map == null) {
                com.github.underscore.lodash.Xml.XmlValue.writeXml(com.github.underscore.lodash.Xml.NULL, name, builder, false, namespaces);
                return;
            }
            final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems = com.github.underscore.lodash.U.newArrayList();
            final java.util.List<java.lang.String> attrs = com.github.underscore.lodash.U.newArrayList();
            final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep = builder.getIdentStep();
            final int ident = (builder.getIdent()) + (name == null ? 0 : builder.getIdentStep().getIdent());
            final java.util.List<java.util.Map.Entry> entries = com.github.underscore.lodash.U.newArrayList(map.entrySet());
            for (int index = 0; index < (entries.size()); index += 1) {
                final java.util.Map.Entry entry = entries.get(index);
                final boolean addNewLine = (index < ((entries.size()) - 1)) && (!(java.lang.String.valueOf(entries.get((index + 1)).getKey()).startsWith(com.github.underscore.lodash.Xml.TEXT)));
                if (((java.lang.String.valueOf(entry.getKey()).startsWith("-")) && (!((entry.getValue()) instanceof java.util.Map))) && (!((entry.getValue()) instanceof java.util.List))) {
                    attrs.add(((((" " + (com.github.underscore.lodash.Xml.XmlValue.escapeName(java.lang.String.valueOf(entry.getKey()).substring(1), namespaces))) + "=\"") + (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getValue())))) + "\""));
                    if (java.lang.String.valueOf(entry.getKey()).startsWith("-xmlns:")) {
                        namespaces.add(java.lang.String.valueOf(entry.getKey()).substring(7));
                    }
                }else
                    if (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getKey())).startsWith(com.github.underscore.lodash.Xml.TEXT)) {
                        com.github.underscore.lodash.Xml.XmlObject.addText(entry, elems, identStep, ident);
                    }else {
                        com.github.underscore.lodash.Xml.XmlObject.processElements(entry, identStep, ident, addNewLine, elems, namespaces);
                    }

            }
            if (name != null) {
                if (!parentTextFound) {
                    builder.fillSpaces();
                }
                builder.append("<").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(com.github.underscore.lodash.U.join(attrs, "")).append(">").incIdent();
                if ((!(elems.isEmpty())) && (!((elems.get(0)) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText))) {
                    builder.newLine();
                }
            }
            for (com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder1 : elems) {
                builder.append(localBuilder1.toString());
            }
            if (name != null) {
                builder.decIdent();
                if ((!(elems.isEmpty())) && (!((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText))) {
                    builder.newLine().fillSpaces();
                }
                builder.append("</").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(">");
            }
        }

        private static void processElements(final java.util.Map.Entry entry, final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident, final boolean addNewLine, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final java.util.Set<java.lang.String> namespaces) {
            if (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getKey())).startsWith(com.github.underscore.lodash.Xml.COMMENT)) {
                com.github.underscore.lodash.Xml.XmlObject.addComment(entry, identStep, ident, addNewLine, elems, "<!--", "-->");
            }else
                if (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getKey())).startsWith(com.github.underscore.lodash.Xml.CDATA)) {
                    com.github.underscore.lodash.Xml.XmlObject.addComment(entry, identStep, ident, addNewLine, elems, "<![CDATA[", "]]>");
                }else
                    if (((entry.getValue()) instanceof java.util.List) && (!(((java.util.List) (entry.getValue())).isEmpty()))) {
                        com.github.underscore.lodash.Xml.XmlObject.addElements(identStep, ident, entry, namespaces, elems, addNewLine);
                    }else {
                        com.github.underscore.lodash.Xml.XmlObject.addElement(identStep, ident, entry, namespaces, elems, addNewLine);
                    }


        }

        private static void addText(final java.util.Map.Entry entry, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident) {
            if ((entry.getValue()) instanceof java.util.List) {
                for (java.lang.Object value : ((java.util.List) (entry.getValue()))) {
                    elems.add(new com.github.underscore.lodash.Xml.XmlStringBuilderText(identStep, ident).append(com.github.underscore.lodash.U.escape(java.lang.String.valueOf(value))));
                }
            }else {
                elems.add(new com.github.underscore.lodash.Xml.XmlStringBuilderText(identStep, ident).append(com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getValue()))));
            }
        }

        private static void addElements(final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident, java.util.Map.Entry entry, java.util.Set<java.lang.String> namespaces, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final boolean addNewLine) {
            boolean parentTextFound = (!(elems.isEmpty())) && ((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText);
            final com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder;
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(17).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(17).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(17).collectInput("com.github.underscore.lodash.Xml.ENCODING",com.github.underscore.lodash.Xml.ENCODING);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(17).collectInput("com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident",com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(17).collectInput("elems",elems);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(17).collectInput("com.github.underscore.lodash.Xml.NULL_ELEMENT",com.github.underscore.lodash.Xml.NULL_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(17).collectInput("addNewLine",addNewLine);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(17).collectInput("ident",ident);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(17).collectInput("com.github.underscore.lodash.Xml.ATTRS",com.github.underscore.lodash.Xml.ATTRS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(17).collectInput("(\"{\" + (com.github.underscore.lodash.Xml.TEXT))",("{" + (com.github.underscore.lodash.Xml.TEXT)));} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(17).collectInput("identStep",identStep);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(17).collectInput("\"{\"","{");} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(17).collectInput("com.github.underscore.lodash.Xml.TEXT",com.github.underscore.lodash.Xml.TEXT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(17).collectInput("com.github.underscore.lodash.Xml.NULL",com.github.underscore.lodash.Xml.NULL);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(17).collectInput("com.github.underscore.lodash.Xml.ELEMENT_TEXT",com.github.underscore.lodash.Xml.ELEMENT_TEXT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(17).collectInput("com.github.underscore.lodash.Xml.CLOSED_ELEMENT",com.github.underscore.lodash.Xml.CLOSED_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(17).collectInput("com.github.underscore.lodash.Xml.UTF_8",com.github.underscore.lodash.Xml.UTF_8);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(17).collectInput("com.github.underscore.lodash.Xml.CDATA",com.github.underscore.lodash.Xml.CDATA);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(17).collectInput("entry",entry);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(17).collectInput("parentTextFound",parentTextFound);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(17).collectInput("com.github.underscore.lodash.Xml.COMMENT",com.github.underscore.lodash.Xml.COMMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(17).collectInput("com.github.underscore.lodash.Xml.EMPTY_ELEMENT",com.github.underscore.lodash.Xml.EMPTY_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(17).collectInput("com.github.underscore.lodash.Xml.ELEMENT",com.github.underscore.lodash.Xml.ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(17).collectInput("namespaces",namespaces);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(17).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(17).collectionEnds();
            }
            if (runtimeAngelicValue) if ((java.lang.String.valueOf(((java.util.List) (entry.getValue())).get(0)).startsWith(("{" + (com.github.underscore.lodash.Xml.TEXT)))) || (java.lang.String.valueOf(((java.util.List) (entry.getValue())).get(((((java.util.List) (entry.getValue())).size()) - 1))).startsWith(("{" + (com.github.underscore.lodash.Xml.TEXT))))) {
                localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderText(identStep, ident);
            }else {
                localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader(identStep, ident);
            }
            com.github.underscore.lodash.Xml.XmlArray.writeXml(((java.util.List) (entry.getValue())), localBuilder, java.lang.String.valueOf(entry.getKey()), parentTextFound, namespaces);
            if (addNewLine) {
                localBuilder.newLine();
            }
            elems.add(localBuilder);
        }

        private static void addElement(final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident, java.util.Map.Entry entry, java.util.Set<java.lang.String> namespaces, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final boolean addNewLine) {
            boolean parentTextFound = (!(elems.isEmpty())) && ((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText);
            com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader(identStep, ident);
            com.github.underscore.lodash.Xml.XmlValue.writeXml(entry.getValue(), java.lang.String.valueOf(entry.getKey()), localBuilder, parentTextFound, namespaces);
            if (addNewLine) {
                localBuilder.newLine();
            }
            elems.add(localBuilder);
        }

        private static void addComment(java.util.Map.Entry entry, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident, boolean addNewLine, java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, java.lang.String openElement, java.lang.String closeElement) {
            if ((entry.getValue()) instanceof java.util.List) {
                for (java.util.Iterator iterator = ((java.util.List) (entry.getValue())).iterator(); iterator.hasNext();) {
                    com.github.underscore.lodash.Xml.XmlObject.addCommentValue(identStep, ident, java.lang.String.valueOf(iterator.next()), ((iterator.hasNext()) || addNewLine), elems, openElement, closeElement);
                }
            }else {
                com.github.underscore.lodash.Xml.XmlObject.addCommentValue(identStep, ident, java.lang.String.valueOf(entry.getValue()), addNewLine, elems, openElement, closeElement);
            }
        }

        private static void addCommentValue(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident, java.lang.String value, boolean addNewLine, java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, java.lang.String openElement, java.lang.String closeElement) {
            boolean parentTextFound = (!(elems.isEmpty())) && ((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText);
            com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader(identStep, ident);
            if (!parentTextFound) {
                localBuilder.fillSpaces();
            }
            localBuilder.append(openElement).append(value).append(closeElement);
            if (addNewLine) {
                localBuilder.newLine();
            }
            elems.add(localBuilder);
        }
    }

    public static class XmlValue {
        public static void writeXml(java.lang.Object value, java.lang.String name, com.github.underscore.lodash.Xml.XmlStringBuilder builder, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (value instanceof java.util.Map) {
                com.github.underscore.lodash.Xml.XmlObject.writeXml(((java.util.Map) (value)), name, builder, parentTextFound, namespaces);
                return;
            }
            if (value instanceof java.util.Collection) {
                com.github.underscore.lodash.Xml.XmlArray.writeXml(((java.util.Collection) (value)), name, builder, parentTextFound, namespaces);
                return;
            }
            if (!parentTextFound) {
                builder.fillSpaces();
            }
            builder.append((("<" + (com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">"));
            if (value == null) {
                builder.append(com.github.underscore.lodash.Xml.NULL);
            }else
                if (value instanceof java.lang.String) {
                    builder.append(com.github.underscore.lodash.Xml.XmlValue.escape(((java.lang.String) (value))));
                }else {
                    com.github.underscore.lodash.Xml.XmlValue.processArrays(value, builder, name, parentTextFound, namespaces);
                }

            builder.append((("</" + (com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">"));
        }

        private static void processArrays(java.lang.Object value, com.github.underscore.lodash.Xml.XmlStringBuilder builder, java.lang.String name, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (value instanceof java.lang.Double) {
                if ((((java.lang.Double) (value)).isInfinite()) || (((java.lang.Double) (value)).isNaN())) {
                    builder.append(com.github.underscore.lodash.Xml.NULL);
                }else {
                    builder.append(value.toString());
                }
            }else
                if (value instanceof java.lang.Float) {
                    if ((((java.lang.Float) (value)).isInfinite()) || (((java.lang.Float) (value)).isNaN())) {
                        builder.append(com.github.underscore.lodash.Xml.NULL);
                    }else {
                        builder.append(value.toString());
                    }
                }else
                    if (value instanceof java.lang.Number) {
                        builder.append(value.toString());
                    }else
                        if (value instanceof java.lang.Boolean) {
                            builder.append(value.toString());
                        }else
                            if (value instanceof byte[]) {
                                builder.newLine().incIdent();
                                com.github.underscore.lodash.Xml.XmlArray.writeXml(((byte[]) (value)), builder);
                                builder.decIdent().newLine().fillSpaces();
                            }else
                                if (value instanceof short[]) {
                                    builder.newLine().incIdent();
                                    com.github.underscore.lodash.Xml.XmlArray.writeXml(((short[]) (value)), builder);
                                    builder.decIdent().newLine().fillSpaces();
                                }else {
                                    com.github.underscore.lodash.Xml.XmlValue.processArrays2(value, builder, name, parentTextFound, namespaces);
                                }





        }

        private static void processArrays2(java.lang.Object value, com.github.underscore.lodash.Xml.XmlStringBuilder builder, java.lang.String name, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (value instanceof int[]) {
                builder.newLine().incIdent();
                com.github.underscore.lodash.Xml.XmlArray.writeXml(((int[]) (value)), builder);
                builder.decIdent().newLine().fillSpaces();
            }else
                if (value instanceof long[]) {
                    builder.newLine().incIdent();
                    com.github.underscore.lodash.Xml.XmlArray.writeXml(((long[]) (value)), builder);
                    builder.decIdent().newLine().fillSpaces();
                }else
                    if (value instanceof float[]) {
                        builder.newLine().incIdent();
                        com.github.underscore.lodash.Xml.XmlArray.writeXml(((float[]) (value)), builder);
                        builder.decIdent().newLine().fillSpaces();
                    }else
                        if (value instanceof double[]) {
                            builder.newLine().incIdent();
                            com.github.underscore.lodash.Xml.XmlArray.writeXml(((double[]) (value)), builder);
                            builder.decIdent().newLine().fillSpaces();
                        }else
                            if (value instanceof boolean[]) {
                                builder.newLine().incIdent();
                                com.github.underscore.lodash.Xml.XmlArray.writeXml(((boolean[]) (value)), builder);
                                builder.decIdent().newLine().fillSpaces();
                            }else
                                if (value instanceof char[]) {
                                    builder.newLine().incIdent();
                                    com.github.underscore.lodash.Xml.XmlArray.writeXml(((char[]) (value)), builder);
                                    builder.decIdent().newLine().fillSpaces();
                                }else
                                    if (value instanceof java.lang.Object[]) {
                                        builder.newLine().incIdent();
                                        com.github.underscore.lodash.Xml.XmlArray.writeXml(((java.lang.Object[]) (value)), name, builder, parentTextFound, namespaces);
                                        builder.decIdent().newLine().fillSpaces();
                                    }else {
                                        builder.append(value.toString());
                                    }






        }

        public static java.lang.String escapeName(java.lang.String name, java.util.Set<java.lang.String> namespaces) {
            final int length = name.length();
            if (length == 0) {
                return "__EE__EMPTY__EE__";
            }
            final java.lang.StringBuilder result = new java.lang.StringBuilder();
            char ch = name.charAt(0);
            if ((com.sun.org.apache.xerces.internal.util.XMLChar.isNameStart(ch)) && (ch != ':')) {
                result.append(ch);
            }else {
                result.append("__").append(com.github.underscore.lodash.Base32.encode(java.lang.Character.toString(ch))).append("__");
            }
            for (int i = 1; i < length; ++i) {
                ch = name.charAt(i);
                if ((ch == ':') && (("xmlns".equals(name.substring(0, i))) || (namespaces.contains(name.substring(0, i))))) {
                    result.append(ch);
                }else
                    if ((com.sun.org.apache.xerces.internal.util.XMLChar.isName(ch)) && (ch != ':')) {
                        result.append(ch);
                    }else {
                        result.append("__").append(com.github.underscore.lodash.Base32.encode(java.lang.Character.toString(ch))).append("__");
                    }

            }
            return result.toString();
        }

        public static java.lang.String escape(java.lang.String s) {
            if (s == null) {
                return null;
            }
            java.lang.StringBuilder sb = new java.lang.StringBuilder();
            com.github.underscore.lodash.Xml.XmlValue.escape(s, sb);
            return sb.toString();
        }

        private static void escape(java.lang.String s, java.lang.StringBuilder sb) {
            final int len = s.length();
            for (int i = 0; i < len; i++) {
                char ch = s.charAt(i);
                switch (ch) {
                    case '"' :
                        sb.append("&quot;");
                        break;
                    case '\'' :
                        sb.append("'");
                        break;
                    case '&' :
                        sb.append("&amp;");
                        break;
                    case '<' :
                        sb.append("&lt;");
                        break;
                    case '>' :
                        sb.append("&gt;");
                        break;
                    case '\b' :
                        sb.append("\\b");
                        break;
                    case '\f' :
                        sb.append("\\f");
                        break;
                    case '\n' :
                        sb.append("\n");
                        break;
                    case '\r' :
                        sb.append("\\r");
                        break;
                    case '\t' :
                        sb.append("\t");
                        break;
                    default :
                        if (((ch <= '\u001f') || ((ch >= '\u007f') && (ch <= '\u009f'))) || ((ch >= '\u2000') && (ch <= '\u20ff'))) {
                            java.lang.String ss = java.lang.Integer.toHexString(ch);
                            sb.append("&#x");
                            for (int k = 0; k < (4 - (ss.length())); k++) {
                                sb.append('0');
                            }
                            sb.append(ss.toUpperCase()).append(";");
                        }else {
                            sb.append(ch);
                        }
                        break;
                }
            }
        }
    }

    public static java.lang.String toXml(java.util.Collection collection, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep) {
        final com.github.underscore.lodash.Xml.XmlStringBuilder builder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutRoot(identStep, com.github.underscore.lodash.Xml.UTF_8.name());
        builder.append("<root>").incIdent();
        if ((collection == null) || (!(collection.isEmpty()))) {
            builder.newLine();
        }
        com.github.underscore.lodash.Xml.XmlArray.writeXml(collection, null, builder, false, com.github.underscore.lodash.U.<java.lang.String>newLinkedHashSet());
        return builder.newLine().append("</root>").toString();
    }

    public static java.lang.String toXml(java.util.Collection collection) {
        return com.github.underscore.lodash.Xml.toXml(collection, com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TWO_SPACES);
    }

    public static java.lang.String toXml(java.util.Map map, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep) {
        final com.github.underscore.lodash.Xml.XmlStringBuilder builder;
        final java.util.Map localMap;
        if ((map != null) && (map.containsKey(com.github.underscore.lodash.Xml.ENCODING))) {
            builder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutRoot(identStep, java.lang.String.valueOf(map.get(com.github.underscore.lodash.Xml.ENCODING)));
            localMap = ((java.util.Map) (com.github.underscore.lodash.U.clone(map)));
            localMap.remove(com.github.underscore.lodash.Xml.ENCODING);
        }else {
            builder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutRoot(identStep, com.github.underscore.lodash.Xml.UTF_8.name());
            localMap = map;
        }
        if ((((localMap == null) || ((localMap.size()) != 1)) || (java.lang.String.valueOf(((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getKey()).startsWith("-"))) || ((((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getValue()) instanceof java.util.List)) {
            final java.lang.String name;
            if ((((localMap != null) && ((localMap.size()) == 1)) && ((((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getValue()) instanceof java.util.List)) && (!(((java.util.List) (((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getValue())).isEmpty()))) {
                name = java.lang.String.valueOf(((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getKey());
            }else {
                name = "root";
            }
            com.github.underscore.lodash.Xml.XmlObject.writeXml(localMap, name, builder, false, com.github.underscore.lodash.U.<java.lang.String>newLinkedHashSet());
        }else {
            com.github.underscore.lodash.Xml.XmlObject.writeXml(localMap, null, builder, false, com.github.underscore.lodash.U.<java.lang.String>newLinkedHashSet());
        }
        return builder.toString();
    }

    public static java.lang.String toXml(java.util.Map map) {
        return com.github.underscore.lodash.Xml.toXml(map, com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TWO_SPACES);
    }

    @java.lang.SuppressWarnings("unchecked")
    private static java.lang.Object getValue(final java.lang.Object value) {
        if ((value instanceof java.util.Map) && ((((java.util.Map<java.lang.String, java.lang.Object>) (value)).entrySet().size()) == 1)) {
            final java.util.Map.Entry<java.lang.String, java.lang.Object> entry = ((java.util.Map<java.lang.String, java.lang.Object>) (value)).entrySet().iterator().next();
            if ((com.github.underscore.lodash.Xml.TEXT.equals(entry.getKey())) || (entry.getKey().equals(com.github.underscore.lodash.Xml.ELEMENT_TEXT))) {
                return entry.getValue();
            }
        }
        return value;
    }

    @java.lang.SuppressWarnings("unchecked")
    private static java.util.Map<java.lang.String, java.lang.Object> createMap(final org.w3c.dom.Node node, final com.github.underscore.Function<java.lang.Object, java.lang.Object> nodeMapper, java.util.Map<java.lang.String, java.lang.Object> attrMap, int[] uniqueIds, final com.github.underscore.Function<java.lang.Object, java.lang.Object> valueMapper, java.lang.String source, int[] sourceIndex) {
        final java.util.Map<java.lang.String, java.lang.Object> map = com.github.underscore.lodash.U.newLinkedHashMap();
        map.putAll(attrMap);
        final org.w3c.dom.NodeList nodeList = node.getChildNodes();
        for (int index = 0; index < (nodeList.getLength()); index++) {
            final org.w3c.dom.Node currentNode = nodeList.item(index);
            final java.lang.String name = currentNode.getNodeName();
            final java.lang.Object value;
            final int attributesLength = ((currentNode.getAttributes()) == null) ? 0 : currentNode.getAttributes().getLength();
            if ((currentNode.getNodeType()) == (org.w3c.dom.Node.ELEMENT_NODE)) {
                sourceIndex[0] = ((source.indexOf(("<" + name), sourceIndex[0])) + (name.length())) + 2;
                final java.util.Map<java.lang.String, java.lang.Object> attrMapLocal = com.github.underscore.lodash.U.newLinkedHashMap();
                if (attributesLength > 0) {
                    final java.util.regex.Matcher matcher = com.github.underscore.lodash.Xml.ATTRS.matcher(source.substring(sourceIndex[0], source.indexOf(">", sourceIndex[0])));
                    while (matcher.find()) {
                        com.github.underscore.lodash.Xml.addNodeValue(attrMapLocal, ('-' + (matcher.group(1))), matcher.group(2), nodeMapper, uniqueIds);
                    } 
                }
                value = com.github.underscore.lodash.Xml.createMap(currentNode, nodeMapper, attrMapLocal, uniqueIds, valueMapper, source, sourceIndex);
            }else {
                if (com.github.underscore.lodash.Xml.COMMENT.equals(name)) {
                    sourceIndex[0] = (source.indexOf("-->", sourceIndex[0])) + 3;
                }else
                    if (com.github.underscore.lodash.Xml.CDATA.equals(name)) {
                        sourceIndex[0] = (source.indexOf("]]>", sourceIndex[0])) + 3;
                    }

                value = currentNode.getTextContent();
            }
            if ((com.github.underscore.lodash.Xml.TEXT.equals(name)) && (valueMapper.apply(value).toString().isEmpty())) {
                continue;
            }
            com.github.underscore.lodash.Xml.addNodeValue(map, name, value, nodeMapper, uniqueIds);
        }
        return map;
    }

    @java.lang.SuppressWarnings("unchecked")
    private static void addNodeValue(final java.util.Map<java.lang.String, java.lang.Object> map, final java.lang.String name, final java.lang.Object value, final com.github.underscore.Function<java.lang.Object, java.lang.Object> nodeMapper, int[] uniqueIds) {
        if (map.containsKey(name)) {
            if (com.github.underscore.lodash.Xml.TEXT.equals(name)) {
                map.put((name + (uniqueIds[0])), nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
                uniqueIds[0] += 1;
            }else
                if (com.github.underscore.lodash.Xml.COMMENT.equals(name)) {
                    map.put((name + (uniqueIds[1])), nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
                    uniqueIds[1] += 1;
                }else
                    if (com.github.underscore.lodash.Xml.CDATA.equals(name)) {
                        map.put((name + (uniqueIds[2])), nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
                        uniqueIds[2] += 1;
                    }else {
                        final java.lang.Object object = map.get(name);
                        if (object instanceof java.util.List) {
                            com.github.underscore.lodash.Xml.addText(map, name, ((java.util.List<java.lang.Object>) (object)), value);
                        }else {
                            final java.util.List<java.lang.Object> objects = com.github.underscore.lodash.U.newArrayList();
                            objects.add(object);
                            com.github.underscore.lodash.Xml.addText(map, name, objects, value);
                            map.put(name, objects);
                        }
                    }


        }else {
            map.put(name, nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
        }
    }

    @java.lang.SuppressWarnings("unchecked")
    private static void addText(final java.util.Map<java.lang.String, java.lang.Object> map, final java.lang.String name, final java.util.List<java.lang.Object> objects, final java.lang.Object value) {
        int lastIndex = (map.size()) - 1;
        final int index = objects.size();
        while (true) {
            final java.util.Map.Entry lastElement = ((java.util.Map.Entry) (map.entrySet().toArray()[lastIndex]));
            if (name.equals(java.lang.String.valueOf(lastElement.getKey()))) {
                break;
            }
            final java.util.Map<java.lang.String, java.lang.Object> text = com.github.underscore.lodash.U.newLinkedHashMap();
            text.put(java.lang.String.valueOf(lastElement.getKey()), map.remove(lastElement.getKey()));
            objects.add(index, text);
            lastIndex -= 1;
        } 
        objects.add(com.github.underscore.lodash.Xml.getValue(value));
    }

    @java.lang.SuppressWarnings("unchecked")
    public static java.lang.Object fromXml(final java.lang.String xml, final com.github.underscore.Function<java.lang.Object, java.lang.Object> valueMapper) {
        if (xml == null) {
            return null;
        }
        try {
            org.w3c.dom.Document document = com.github.underscore.lodash.Xml.createDocument(xml);
            final java.lang.Object result = com.github.underscore.lodash.Xml.createMap(document, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
                public java.lang.Object apply(java.lang.Object object) {
                    return object;
                }
            }, java.util.Collections.<java.lang.String, java.lang.Object>emptyMap(), new int[]{ 1, 1, 1 }, valueMapper, xml, new int[]{ 0 });
            if (((document.getXmlEncoding()) != null) && (!("UTF-8".equalsIgnoreCase(document.getXmlEncoding())))) {
                ((java.util.Map) (result)).put(com.github.underscore.lodash.Xml.ENCODING, document.getXmlEncoding());
            }else
                if ((((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getKey().equals("root")) && (((((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getValue()) instanceof java.util.List) || ((((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getValue()) instanceof java.util.Map))) {
                    return ((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getValue();
                }

            return result;
        } catch (java.lang.Exception ex) {
            throw new java.lang.IllegalArgumentException(ex);
        }
    }

    public static java.lang.Object fromXml(final java.lang.String xml) {
        return com.github.underscore.lodash.Xml.fromXml(xml, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
            public java.lang.Object apply(java.lang.Object object) {
                return java.lang.String.valueOf(object).trim();
            }
        });
    }

    private static org.w3c.dom.Document createDocument(final java.lang.String xml) throws java.io.IOException, javax.xml.parsers.ParserConfigurationException, org.xml.sax.SAXException {
        final javax.xml.parsers.DocumentBuilderFactory factory = javax.xml.parsers.DocumentBuilderFactory.newInstance();
        factory.setNamespaceAware(true);
        factory.setFeature(javax.xml.XMLConstants.FEATURE_SECURE_PROCESSING, true);
        final javax.xml.parsers.DocumentBuilder builder = factory.newDocumentBuilder();
        builder.setErrorHandler(new org.xml.sax.helpers.DefaultHandler());
        return builder.parse(new org.xml.sax.InputSource(new java.io.StringReader(xml)));
    }

    public static java.lang.Object fromXmlMakeArrays(final java.lang.String xml) {
        try {
            org.w3c.dom.Document document = com.github.underscore.lodash.Xml.createDocument(xml);
            return com.github.underscore.lodash.Xml.createMap(document, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
                public java.lang.Object apply(java.lang.Object object) {
                    return object instanceof java.util.List ? object : com.github.underscore.lodash.U.newArrayList(java.util.Arrays.asList(object));
                }
            }, java.util.Collections.<java.lang.String, java.lang.Object>emptyMap(), new int[]{ 1, 1, 1 }, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
                public java.lang.Object apply(java.lang.Object object) {
                    return java.lang.String.valueOf(object).trim();
                }
            }, xml, new int[]{ 0 });
        } catch (java.lang.Exception ex) {
            throw new java.lang.IllegalArgumentException(ex);
        }
    }

    @java.lang.SuppressWarnings("unchecked")
    public static java.lang.String formatXml(java.lang.String xml, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep) {
        java.lang.Object result = com.github.underscore.lodash.Xml.fromXml(xml);
        if (result instanceof java.util.Map) {
            return com.github.underscore.lodash.Xml.toXml(((java.util.Map) (result)), identStep);
        }
        return com.github.underscore.lodash.Xml.toXml(((java.util.List) (result)), identStep);
    }

    public static java.lang.String formatXml(java.lang.String xml) {
        return com.github.underscore.lodash.Xml.formatXml(xml, com.github.underscore.lodash.Xml.XmlStringBuilder.Step.THREE_SPACES);
    }
}
16:26:29.463 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
16:26:29.463 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:26:29.528 [pool-56-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (57 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:26:29.861 [pool-55-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Xml.java:434: error: non-static variable ident cannot be referenced from a static context
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectInput("com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident",com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                              ^
Xml.java:623: warning: com.sun.org.apache.xerces.internal.util.XMLChar is internal proprietary API and may be removed in a future release
            if ((com.sun.org.apache.xerces.internal.util.XMLChar.isNameStart(ch)) && (ch != ':')) {
                                                        ^
Xml.java:633: warning: com.sun.org.apache.xerces.internal.util.XMLChar is internal proprietary API and may be removed in a future release
                    if ((com.sun.org.apache.xerces.internal.util.XMLChar.isName(ch)) && (ch != ':')) {
                                                                ^
16:26:29.994 [pool-55-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public final class Xml {
    private static final java.lang.String NULL = "null";

    private static final java.lang.String ELEMENT_TEXT = "element";

    private static final java.lang.String CDATA = "#cdata-section";

    private static final java.lang.String COMMENT = "#comment";

    private static final java.lang.String ENCODING = "#encoding";

    private static final java.lang.String TEXT = "#text";

    private static final java.lang.String ELEMENT = ("<" + (com.github.underscore.lodash.Xml.ELEMENT_TEXT)) + ">";

    private static final java.lang.String CLOSED_ELEMENT = ("</" + (com.github.underscore.lodash.Xml.ELEMENT_TEXT)) + ">";

    private static final java.lang.String EMPTY_ELEMENT = (com.github.underscore.lodash.Xml.ELEMENT) + (com.github.underscore.lodash.Xml.CLOSED_ELEMENT);

    private static final java.lang.String NULL_ELEMENT = ((com.github.underscore.lodash.Xml.ELEMENT) + (com.github.underscore.lodash.Xml.NULL)) + (com.github.underscore.lodash.Xml.CLOSED_ELEMENT);

    private static final java.nio.charset.Charset UTF_8 = java.nio.charset.Charset.forName("UTF-8");

    private static final java.util.regex.Pattern ATTRS = java.util.regex.Pattern.compile(("((?:(?!\\s|=).)*)\\s*?=\\s*?[\"\']?((?:(?<=\")(?:(?<=\\\\)\"|[^\"])*|(?<=\')" + "(?:(?<=\\\\)\'|[^\'])*)|(?:(?!\"|\')(?:(?!\\/>|>|\\s).)+))"));

    public static class XmlStringBuilder {
        public enum Step {

            TWO_SPACES(2),
            THREE_SPACES(3),
            FOUR_SPACES(4),
            COMPACT(0),
            TABS(1);
            private int ident;

            Step(int ident) {
                this.ident = ident;
            }

            public int getIdent() {
                return ident;
            }
        }

        protected final java.lang.StringBuilder builder;

        private final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep;

        private int ident;

        public XmlStringBuilder() {
            builder = new java.lang.StringBuilder("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<root>\n");
            identStep = com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TWO_SPACES;
            ident = 2;
        }

        public XmlStringBuilder(java.lang.StringBuilder builder, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident) {
            this.builder = builder;
            this.identStep = identStep;
            this.ident = ident;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder append(final java.lang.String string) {
            builder.append(string);
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder fillSpaces() {
            for (int index = 0; index < (ident); index += 1) {
                builder.append(((identStep) == (com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TABS) ? '\t' : ' '));
            }
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder incIdent() {
            ident += identStep.getIdent();
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder decIdent() {
            ident -= identStep.getIdent();
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder newLine() {
            if ((identStep) != (com.github.underscore.lodash.Xml.XmlStringBuilder.Step.COMPACT)) {
                builder.append("\n");
            }
            return this;
        }

        public int getIdent() {
            return ident;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder.Step getIdentStep() {
            return identStep;
        }

        public java.lang.String toString() {
            return (builder.toString()) + "\n</root>";
        }
    }

    public static class XmlStringBuilderWithoutRoot extends com.github.underscore.lodash.Xml.XmlStringBuilder {
        public XmlStringBuilderWithoutRoot(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, java.lang.String encoding) {
            super(new java.lang.StringBuilder(((("<?xml version=\"1.0\" encoding=\"" + (com.github.underscore.lodash.U.escape(encoding))) + "\"?>") + (identStep == (com.github.underscore.lodash.Xml.XmlStringBuilder.Step.COMPACT) ? "" : "\n"))), identStep, 0);
        }

        public java.lang.String toString() {
            return builder.toString();
        }
    }

    public static class XmlStringBuilderWithoutHeader extends com.github.underscore.lodash.Xml.XmlStringBuilder {
        public XmlStringBuilderWithoutHeader(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident) {
            super(new java.lang.StringBuilder(), identStep, ident);
        }

        public java.lang.String toString() {
            return builder.toString();
        }
    }

    public static class XmlStringBuilderText extends com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader {
        public XmlStringBuilderText(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident) {
            super(identStep, ident);
        }
    }

    public static class XmlArray {
        public static void writeXml(java.util.Collection collection, java.lang.String name, com.github.underscore.lodash.Xml.XmlStringBuilder builder, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (collection == null) {
                builder.append(com.github.underscore.lodash.Xml.NULL);
                return;
            }
            if (name != null) {
                builder.fillSpaces().append("<").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(">").incIdent();
                if (!(collection.isEmpty())) {
                    builder.newLine();
                }
            }
            com.github.underscore.lodash.Xml.XmlArray.writeXml(collection, builder, name, parentTextFound, namespaces);
            if (name != null) {
                builder.decIdent().newLine().fillSpaces().append("</").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(">");
            }
        }

        @java.lang.SuppressWarnings("unchecked")
        private static void writeXml(java.util.Collection collection, com.github.underscore.lodash.Xml.XmlStringBuilder builder, java.lang.String name, final boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            boolean localParentTextFound = parentTextFound;
            final java.util.List entries = com.github.underscore.lodash.U.newArrayList(collection);
            for (int index = 0; index < (entries.size()); index += 1) {
                final java.lang.Object value = entries.get(index);
                final boolean addNewLine = (index < ((entries.size()) - 1)) && (!(java.lang.String.valueOf(entries.get((index + 1))).startsWith(("{" + (com.github.underscore.lodash.Xml.TEXT)))));
                if (value == null) {
                    builder.fillSpaces().append((((((("<" + (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">") + (com.github.underscore.lodash.Xml.NULL)) + "</") + (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">"));
                }else {
                    if ((value instanceof java.util.Map) && ((((java.util.Map) (value)).size()) == 1)) {
                        com.github.underscore.lodash.Xml.XmlObject.writeXml(((java.util.Map) (value)), null, builder, localParentTextFound, namespaces);
                        if (java.lang.String.valueOf(((java.util.Map.Entry) (((java.util.Map) (value)).entrySet().iterator().next())).getKey()).startsWith(com.github.underscore.lodash.Xml.TEXT)) {
                            localParentTextFound = true;
                            continue;
                        }
                    }else {
                        com.github.underscore.lodash.Xml.XmlValue.writeXml(value, (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : name), builder, localParentTextFound, namespaces);
                    }
                    localParentTextFound = false;
                }
                if (addNewLine) {
                    builder.newLine();
                }
            }
        }

        public static void writeXml(byte[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(short[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(int[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(long[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(float[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(double[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(boolean[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(char[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(java.lang.Object[] array, java.lang.String name, com.github.underscore.lodash.Xml.XmlStringBuilder builder, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        com.github.underscore.lodash.Xml.XmlValue.writeXml(array[i], (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : name), builder, parentTextFound, namespaces);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }
    }

    public static class XmlObject {
        @java.lang.SuppressWarnings("unchecked")
        public static void writeXml(java.util.Map map, java.lang.String name, final com.github.underscore.lodash.Xml.XmlStringBuilder builder, final boolean parentTextFound, final java.util.Set<java.lang.String> namespaces) {
            if (map == null) {
                com.github.underscore.lodash.Xml.XmlValue.writeXml(com.github.underscore.lodash.Xml.NULL, name, builder, false, namespaces);
                return;
            }
            final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems = com.github.underscore.lodash.U.newArrayList();
            final java.util.List<java.lang.String> attrs = com.github.underscore.lodash.U.newArrayList();
            final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep = builder.getIdentStep();
            final int ident = (builder.getIdent()) + (name == null ? 0 : builder.getIdentStep().getIdent());
            final java.util.List<java.util.Map.Entry> entries = com.github.underscore.lodash.U.newArrayList(map.entrySet());
            for (int index = 0; index < (entries.size()); index += 1) {
                final java.util.Map.Entry entry = entries.get(index);
                final boolean addNewLine = (index < ((entries.size()) - 1)) && (!(java.lang.String.valueOf(entries.get((index + 1)).getKey()).startsWith(com.github.underscore.lodash.Xml.TEXT)));
                if (((java.lang.String.valueOf(entry.getKey()).startsWith("-")) && (!((entry.getValue()) instanceof java.util.Map))) && (!((entry.getValue()) instanceof java.util.List))) {
                    attrs.add(((((" " + (com.github.underscore.lodash.Xml.XmlValue.escapeName(java.lang.String.valueOf(entry.getKey()).substring(1), namespaces))) + "=\"") + (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getValue())))) + "\""));
                    if (java.lang.String.valueOf(entry.getKey()).startsWith("-xmlns:")) {
                        namespaces.add(java.lang.String.valueOf(entry.getKey()).substring(7));
                    }
                }else
                    if (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getKey())).startsWith(com.github.underscore.lodash.Xml.TEXT)) {
                        com.github.underscore.lodash.Xml.XmlObject.addText(entry, elems, identStep, ident);
                    }else {
                        com.github.underscore.lodash.Xml.XmlObject.processElements(entry, identStep, ident, addNewLine, elems, namespaces);
                    }

            }
            if (name != null) {
                if (!parentTextFound) {
                    builder.fillSpaces();
                }
                builder.append("<").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(com.github.underscore.lodash.U.join(attrs, "")).append(">").incIdent();
                if ((!(elems.isEmpty())) && (!((elems.get(0)) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText))) {
                    builder.newLine();
                }
            }
            for (com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder1 : elems) {
                builder.append(localBuilder1.toString());
            }
            if (name != null) {
                builder.decIdent();
                if ((!(elems.isEmpty())) && (!((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText))) {
                    builder.newLine().fillSpaces();
                }
                builder.append("</").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(">");
            }
        }

        private static void processElements(final java.util.Map.Entry entry, final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident, final boolean addNewLine, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final java.util.Set<java.lang.String> namespaces) {
            if (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getKey())).startsWith(com.github.underscore.lodash.Xml.COMMENT)) {
                com.github.underscore.lodash.Xml.XmlObject.addComment(entry, identStep, ident, addNewLine, elems, "<!--", "-->");
            }else
                if (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getKey())).startsWith(com.github.underscore.lodash.Xml.CDATA)) {
                    com.github.underscore.lodash.Xml.XmlObject.addComment(entry, identStep, ident, addNewLine, elems, "<![CDATA[", "]]>");
                }else
                    if (((entry.getValue()) instanceof java.util.List) && (!(((java.util.List) (entry.getValue())).isEmpty()))) {
                        com.github.underscore.lodash.Xml.XmlObject.addElements(identStep, ident, entry, namespaces, elems, addNewLine);
                    }else {
                        com.github.underscore.lodash.Xml.XmlObject.addElement(identStep, ident, entry, namespaces, elems, addNewLine);
                    }


        }

        private static void addText(final java.util.Map.Entry entry, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident) {
            if ((entry.getValue()) instanceof java.util.List) {
                for (java.lang.Object value : ((java.util.List) (entry.getValue()))) {
                    elems.add(new com.github.underscore.lodash.Xml.XmlStringBuilderText(identStep, ident).append(com.github.underscore.lodash.U.escape(java.lang.String.valueOf(value))));
                }
            }else {
                elems.add(new com.github.underscore.lodash.Xml.XmlStringBuilderText(identStep, ident).append(com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getValue()))));
            }
        }

        private static void addElements(final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident, java.util.Map.Entry entry, java.util.Set<java.lang.String> namespaces, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final boolean addNewLine) {
            boolean parentTextFound = (!(elems.isEmpty())) && ((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText);
            final com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder;
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = (java.lang.String.valueOf(((java.util.List) (entry.getValue())).get(0)).startsWith(("{" + (com.github.underscore.lodash.Xml.TEXT)))) || (java.lang.String.valueOf(((java.util.List) (entry.getValue())).get(((((java.util.List) (entry.getValue())).size()) - 1))).startsWith(("{" + (com.github.underscore.lodash.Xml.TEXT))));
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(18).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectInput("com.github.underscore.lodash.Xml.ENCODING",com.github.underscore.lodash.Xml.ENCODING);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectInput("com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident",com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectInput("elems",elems);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectInput("com.github.underscore.lodash.Xml.NULL_ELEMENT",com.github.underscore.lodash.Xml.NULL_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectInput("addNewLine",addNewLine);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectInput("ident",ident);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectInput("com.github.underscore.lodash.Xml.ATTRS",com.github.underscore.lodash.Xml.ATTRS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectInput("(\"{\" + (com.github.underscore.lodash.Xml.TEXT))",("{" + (com.github.underscore.lodash.Xml.TEXT)));} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectInput("identStep",identStep);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectInput("\"{\"","{");} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectInput("com.github.underscore.lodash.Xml.TEXT",com.github.underscore.lodash.Xml.TEXT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectInput("com.github.underscore.lodash.Xml.NULL",com.github.underscore.lodash.Xml.NULL);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectInput("com.github.underscore.lodash.Xml.ELEMENT_TEXT",com.github.underscore.lodash.Xml.ELEMENT_TEXT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectInput("com.github.underscore.lodash.Xml.CLOSED_ELEMENT",com.github.underscore.lodash.Xml.CLOSED_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectInput("com.github.underscore.lodash.Xml.UTF_8",com.github.underscore.lodash.Xml.UTF_8);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectInput("com.github.underscore.lodash.Xml.CDATA",com.github.underscore.lodash.Xml.CDATA);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectInput("entry",entry);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectInput("parentTextFound",parentTextFound);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectInput("com.github.underscore.lodash.Xml.COMMENT",com.github.underscore.lodash.Xml.COMMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectInput("com.github.underscore.lodash.Xml.EMPTY_ELEMENT",com.github.underscore.lodash.Xml.EMPTY_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectInput("com.github.underscore.lodash.Xml.ELEMENT",com.github.underscore.lodash.Xml.ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectInput("namespaces",namespaces);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectionEnds();
            }
            if (runtimeAngelicValue) {
                localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderText(identStep, ident);
            }else {
                localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader(identStep, ident);
            }
            com.github.underscore.lodash.Xml.XmlArray.writeXml(((java.util.List) (entry.getValue())), localBuilder, java.lang.String.valueOf(entry.getKey()), parentTextFound, namespaces);
            if (addNewLine) {
                localBuilder.newLine();
            }
            elems.add(localBuilder);
        }

        private static void addElement(final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident, java.util.Map.Entry entry, java.util.Set<java.lang.String> namespaces, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final boolean addNewLine) {
            boolean parentTextFound = (!(elems.isEmpty())) && ((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText);
            com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader(identStep, ident);
            com.github.underscore.lodash.Xml.XmlValue.writeXml(entry.getValue(), java.lang.String.valueOf(entry.getKey()), localBuilder, parentTextFound, namespaces);
            if (addNewLine) {
                localBuilder.newLine();
            }
            elems.add(localBuilder);
        }

        private static void addComment(java.util.Map.Entry entry, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident, boolean addNewLine, java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, java.lang.String openElement, java.lang.String closeElement) {
            if ((entry.getValue()) instanceof java.util.List) {
                for (java.util.Iterator iterator = ((java.util.List) (entry.getValue())).iterator(); iterator.hasNext();) {
                    com.github.underscore.lodash.Xml.XmlObject.addCommentValue(identStep, ident, java.lang.String.valueOf(iterator.next()), ((iterator.hasNext()) || addNewLine), elems, openElement, closeElement);
                }
            }else {
                com.github.underscore.lodash.Xml.XmlObject.addCommentValue(identStep, ident, java.lang.String.valueOf(entry.getValue()), addNewLine, elems, openElement, closeElement);
            }
        }

        private static void addCommentValue(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident, java.lang.String value, boolean addNewLine, java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, java.lang.String openElement, java.lang.String closeElement) {
            boolean parentTextFound = (!(elems.isEmpty())) && ((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText);
            com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader(identStep, ident);
            if (!parentTextFound) {
                localBuilder.fillSpaces();
            }
            localBuilder.append(openElement).append(value).append(closeElement);
            if (addNewLine) {
                localBuilder.newLine();
            }
            elems.add(localBuilder);
        }
    }

    public static class XmlValue {
        public static void writeXml(java.lang.Object value, java.lang.String name, com.github.underscore.lodash.Xml.XmlStringBuilder builder, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (value instanceof java.util.Map) {
                com.github.underscore.lodash.Xml.XmlObject.writeXml(((java.util.Map) (value)), name, builder, parentTextFound, namespaces);
                return;
            }
            if (value instanceof java.util.Collection) {
                com.github.underscore.lodash.Xml.XmlArray.writeXml(((java.util.Collection) (value)), name, builder, parentTextFound, namespaces);
                return;
            }
            if (!parentTextFound) {
                builder.fillSpaces();
            }
            builder.append((("<" + (com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">"));
            if (value == null) {
                builder.append(com.github.underscore.lodash.Xml.NULL);
            }else
                if (value instanceof java.lang.String) {
                    builder.append(com.github.underscore.lodash.Xml.XmlValue.escape(((java.lang.String) (value))));
                }else {
                    com.github.underscore.lodash.Xml.XmlValue.processArrays(value, builder, name, parentTextFound, namespaces);
                }

            builder.append((("</" + (com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">"));
        }

        private static void processArrays(java.lang.Object value, com.github.underscore.lodash.Xml.XmlStringBuilder builder, java.lang.String name, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (value instanceof java.lang.Double) {
                if ((((java.lang.Double) (value)).isInfinite()) || (((java.lang.Double) (value)).isNaN())) {
                    builder.append(com.github.underscore.lodash.Xml.NULL);
                }else {
                    builder.append(value.toString());
                }
            }else
                if (value instanceof java.lang.Float) {
                    if ((((java.lang.Float) (value)).isInfinite()) || (((java.lang.Float) (value)).isNaN())) {
                        builder.append(com.github.underscore.lodash.Xml.NULL);
                    }else {
                        builder.append(value.toString());
                    }
                }else
                    if (value instanceof java.lang.Number) {
                        builder.append(value.toString());
                    }else
                        if (value instanceof java.lang.Boolean) {
                            builder.append(value.toString());
                        }else
                            if (value instanceof byte[]) {
                                builder.newLine().incIdent();
                                com.github.underscore.lodash.Xml.XmlArray.writeXml(((byte[]) (value)), builder);
                                builder.decIdent().newLine().fillSpaces();
                            }else
                                if (value instanceof short[]) {
                                    builder.newLine().incIdent();
                                    com.github.underscore.lodash.Xml.XmlArray.writeXml(((short[]) (value)), builder);
                                    builder.decIdent().newLine().fillSpaces();
                                }else {
                                    com.github.underscore.lodash.Xml.XmlValue.processArrays2(value, builder, name, parentTextFound, namespaces);
                                }





        }

        private static void processArrays2(java.lang.Object value, com.github.underscore.lodash.Xml.XmlStringBuilder builder, java.lang.String name, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (value instanceof int[]) {
                builder.newLine().incIdent();
                com.github.underscore.lodash.Xml.XmlArray.writeXml(((int[]) (value)), builder);
                builder.decIdent().newLine().fillSpaces();
            }else
                if (value instanceof long[]) {
                    builder.newLine().incIdent();
                    com.github.underscore.lodash.Xml.XmlArray.writeXml(((long[]) (value)), builder);
                    builder.decIdent().newLine().fillSpaces();
                }else
                    if (value instanceof float[]) {
                        builder.newLine().incIdent();
                        com.github.underscore.lodash.Xml.XmlArray.writeXml(((float[]) (value)), builder);
                        builder.decIdent().newLine().fillSpaces();
                    }else
                        if (value instanceof double[]) {
                            builder.newLine().incIdent();
                            com.github.underscore.lodash.Xml.XmlArray.writeXml(((double[]) (value)), builder);
                            builder.decIdent().newLine().fillSpaces();
                        }else
                            if (value instanceof boolean[]) {
                                builder.newLine().incIdent();
                                com.github.underscore.lodash.Xml.XmlArray.writeXml(((boolean[]) (value)), builder);
                                builder.decIdent().newLine().fillSpaces();
                            }else
                                if (value instanceof char[]) {
                                    builder.newLine().incIdent();
                                    com.github.underscore.lodash.Xml.XmlArray.writeXml(((char[]) (value)), builder);
                                    builder.decIdent().newLine().fillSpaces();
                                }else
                                    if (value instanceof java.lang.Object[]) {
                                        builder.newLine().incIdent();
                                        com.github.underscore.lodash.Xml.XmlArray.writeXml(((java.lang.Object[]) (value)), name, builder, parentTextFound, namespaces);
                                        builder.decIdent().newLine().fillSpaces();
                                    }else {
                                        builder.append(value.toString());
                                    }






        }

        public static java.lang.String escapeName(java.lang.String name, java.util.Set<java.lang.String> namespaces) {
            final int length = name.length();
            if (length == 0) {
                return "__EE__EMPTY__EE__";
            }
            final java.lang.StringBuilder result = new java.lang.StringBuilder();
            char ch = name.charAt(0);
            if ((com.sun.org.apache.xerces.internal.util.XMLChar.isNameStart(ch)) && (ch != ':')) {
                result.append(ch);
            }else {
                result.append("__").append(com.github.underscore.lodash.Base32.encode(java.lang.Character.toString(ch))).append("__");
            }
            for (int i = 1; i < length; ++i) {
                ch = name.charAt(i);
                if ((ch == ':') && (("xmlns".equals(name.substring(0, i))) || (namespaces.contains(name.substring(0, i))))) {
                    result.append(ch);
                }else
                    if ((com.sun.org.apache.xerces.internal.util.XMLChar.isName(ch)) && (ch != ':')) {
                        result.append(ch);
                    }else {
                        result.append("__").append(com.github.underscore.lodash.Base32.encode(java.lang.Character.toString(ch))).append("__");
                    }

            }
            return result.toString();
        }

        public static java.lang.String escape(java.lang.String s) {
            if (s == null) {
                return null;
            }
            java.lang.StringBuilder sb = new java.lang.StringBuilder();
            com.github.underscore.lodash.Xml.XmlValue.escape(s, sb);
            return sb.toString();
        }

        private static void escape(java.lang.String s, java.lang.StringBuilder sb) {
            final int len = s.length();
            for (int i = 0; i < len; i++) {
                char ch = s.charAt(i);
                switch (ch) {
                    case '"' :
                        sb.append("&quot;");
                        break;
                    case '\'' :
                        sb.append("'");
                        break;
                    case '&' :
                        sb.append("&amp;");
                        break;
                    case '<' :
                        sb.append("&lt;");
                        break;
                    case '>' :
                        sb.append("&gt;");
                        break;
                    case '\b' :
                        sb.append("\\b");
                        break;
                    case '\f' :
                        sb.append("\\f");
                        break;
                    case '\n' :
                        sb.append("\n");
                        break;
                    case '\r' :
                        sb.append("\\r");
                        break;
                    case '\t' :
                        sb.append("\t");
                        break;
                    default :
                        if (((ch <= '\u001f') || ((ch >= '\u007f') && (ch <= '\u009f'))) || ((ch >= '\u2000') && (ch <= '\u20ff'))) {
                            java.lang.String ss = java.lang.Integer.toHexString(ch);
                            sb.append("&#x");
                            for (int k = 0; k < (4 - (ss.length())); k++) {
                                sb.append('0');
                            }
                            sb.append(ss.toUpperCase()).append(";");
                        }else {
                            sb.append(ch);
                        }
                        break;
                }
            }
        }
    }

    public static java.lang.String toXml(java.util.Collection collection, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep) {
        final com.github.underscore.lodash.Xml.XmlStringBuilder builder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutRoot(identStep, com.github.underscore.lodash.Xml.UTF_8.name());
        builder.append("<root>").incIdent();
        if ((collection == null) || (!(collection.isEmpty()))) {
            builder.newLine();
        }
        com.github.underscore.lodash.Xml.XmlArray.writeXml(collection, null, builder, false, com.github.underscore.lodash.U.<java.lang.String>newLinkedHashSet());
        return builder.newLine().append("</root>").toString();
    }

    public static java.lang.String toXml(java.util.Collection collection) {
        return com.github.underscore.lodash.Xml.toXml(collection, com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TWO_SPACES);
    }

    public static java.lang.String toXml(java.util.Map map, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep) {
        final com.github.underscore.lodash.Xml.XmlStringBuilder builder;
        final java.util.Map localMap;
        if ((map != null) && (map.containsKey(com.github.underscore.lodash.Xml.ENCODING))) {
            builder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutRoot(identStep, java.lang.String.valueOf(map.get(com.github.underscore.lodash.Xml.ENCODING)));
            localMap = ((java.util.Map) (com.github.underscore.lodash.U.clone(map)));
            localMap.remove(com.github.underscore.lodash.Xml.ENCODING);
        }else {
            builder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutRoot(identStep, com.github.underscore.lodash.Xml.UTF_8.name());
            localMap = map;
        }
        if ((((localMap == null) || ((localMap.size()) != 1)) || (java.lang.String.valueOf(((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getKey()).startsWith("-"))) || ((((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getValue()) instanceof java.util.List)) {
            final java.lang.String name;
            if ((((localMap != null) && ((localMap.size()) == 1)) && ((((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getValue()) instanceof java.util.List)) && (!(((java.util.List) (((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getValue())).isEmpty()))) {
                name = java.lang.String.valueOf(((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getKey());
            }else {
                name = "root";
            }
            com.github.underscore.lodash.Xml.XmlObject.writeXml(localMap, name, builder, false, com.github.underscore.lodash.U.<java.lang.String>newLinkedHashSet());
        }else {
            com.github.underscore.lodash.Xml.XmlObject.writeXml(localMap, null, builder, false, com.github.underscore.lodash.U.<java.lang.String>newLinkedHashSet());
        }
        return builder.toString();
    }

    public static java.lang.String toXml(java.util.Map map) {
        return com.github.underscore.lodash.Xml.toXml(map, com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TWO_SPACES);
    }

    @java.lang.SuppressWarnings("unchecked")
    private static java.lang.Object getValue(final java.lang.Object value) {
        if ((value instanceof java.util.Map) && ((((java.util.Map<java.lang.String, java.lang.Object>) (value)).entrySet().size()) == 1)) {
            final java.util.Map.Entry<java.lang.String, java.lang.Object> entry = ((java.util.Map<java.lang.String, java.lang.Object>) (value)).entrySet().iterator().next();
            if ((com.github.underscore.lodash.Xml.TEXT.equals(entry.getKey())) || (entry.getKey().equals(com.github.underscore.lodash.Xml.ELEMENT_TEXT))) {
                return entry.getValue();
            }
        }
        return value;
    }

    @java.lang.SuppressWarnings("unchecked")
    private static java.util.Map<java.lang.String, java.lang.Object> createMap(final org.w3c.dom.Node node, final com.github.underscore.Function<java.lang.Object, java.lang.Object> nodeMapper, java.util.Map<java.lang.String, java.lang.Object> attrMap, int[] uniqueIds, final com.github.underscore.Function<java.lang.Object, java.lang.Object> valueMapper, java.lang.String source, int[] sourceIndex) {
        final java.util.Map<java.lang.String, java.lang.Object> map = com.github.underscore.lodash.U.newLinkedHashMap();
        map.putAll(attrMap);
        final org.w3c.dom.NodeList nodeList = node.getChildNodes();
        for (int index = 0; index < (nodeList.getLength()); index++) {
            final org.w3c.dom.Node currentNode = nodeList.item(index);
            final java.lang.String name = currentNode.getNodeName();
            final java.lang.Object value;
            final int attributesLength = ((currentNode.getAttributes()) == null) ? 0 : currentNode.getAttributes().getLength();
            if ((currentNode.getNodeType()) == (org.w3c.dom.Node.ELEMENT_NODE)) {
                sourceIndex[0] = ((source.indexOf(("<" + name), sourceIndex[0])) + (name.length())) + 2;
                final java.util.Map<java.lang.String, java.lang.Object> attrMapLocal = com.github.underscore.lodash.U.newLinkedHashMap();
                if (attributesLength > 0) {
                    final java.util.regex.Matcher matcher = com.github.underscore.lodash.Xml.ATTRS.matcher(source.substring(sourceIndex[0], source.indexOf(">", sourceIndex[0])));
                    while (matcher.find()) {
                        com.github.underscore.lodash.Xml.addNodeValue(attrMapLocal, ('-' + (matcher.group(1))), matcher.group(2), nodeMapper, uniqueIds);
                    } 
                }
                value = com.github.underscore.lodash.Xml.createMap(currentNode, nodeMapper, attrMapLocal, uniqueIds, valueMapper, source, sourceIndex);
            }else {
                if (com.github.underscore.lodash.Xml.COMMENT.equals(name)) {
                    sourceIndex[0] = (source.indexOf("-->", sourceIndex[0])) + 3;
                }else
                    if (com.github.underscore.lodash.Xml.CDATA.equals(name)) {
                        sourceIndex[0] = (source.indexOf("]]>", sourceIndex[0])) + 3;
                    }

                value = currentNode.getTextContent();
            }
            if ((com.github.underscore.lodash.Xml.TEXT.equals(name)) && (valueMapper.apply(value).toString().isEmpty())) {
                continue;
            }
            com.github.underscore.lodash.Xml.addNodeValue(map, name, value, nodeMapper, uniqueIds);
        }
        return map;
    }

    @java.lang.SuppressWarnings("unchecked")
    private static void addNodeValue(final java.util.Map<java.lang.String, java.lang.Object> map, final java.lang.String name, final java.lang.Object value, final com.github.underscore.Function<java.lang.Object, java.lang.Object> nodeMapper, int[] uniqueIds) {
        if (map.containsKey(name)) {
            if (com.github.underscore.lodash.Xml.TEXT.equals(name)) {
                map.put((name + (uniqueIds[0])), nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
                uniqueIds[0] += 1;
            }else
                if (com.github.underscore.lodash.Xml.COMMENT.equals(name)) {
                    map.put((name + (uniqueIds[1])), nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
                    uniqueIds[1] += 1;
                }else
                    if (com.github.underscore.lodash.Xml.CDATA.equals(name)) {
                        map.put((name + (uniqueIds[2])), nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
                        uniqueIds[2] += 1;
                    }else {
                        final java.lang.Object object = map.get(name);
                        if (object instanceof java.util.List) {
                            com.github.underscore.lodash.Xml.addText(map, name, ((java.util.List<java.lang.Object>) (object)), value);
                        }else {
                            final java.util.List<java.lang.Object> objects = com.github.underscore.lodash.U.newArrayList();
                            objects.add(object);
                            com.github.underscore.lodash.Xml.addText(map, name, objects, value);
                            map.put(name, objects);
                        }
                    }


        }else {
            map.put(name, nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
        }
    }

    @java.lang.SuppressWarnings("unchecked")
    private static void addText(final java.util.Map<java.lang.String, java.lang.Object> map, final java.lang.String name, final java.util.List<java.lang.Object> objects, final java.lang.Object value) {
        int lastIndex = (map.size()) - 1;
        final int index = objects.size();
        while (true) {
            final java.util.Map.Entry lastElement = ((java.util.Map.Entry) (map.entrySet().toArray()[lastIndex]));
            if (name.equals(java.lang.String.valueOf(lastElement.getKey()))) {
                break;
            }
            final java.util.Map<java.lang.String, java.lang.Object> text = com.github.underscore.lodash.U.newLinkedHashMap();
            text.put(java.lang.String.valueOf(lastElement.getKey()), map.remove(lastElement.getKey()));
            objects.add(index, text);
            lastIndex -= 1;
        } 
        objects.add(com.github.underscore.lodash.Xml.getValue(value));
    }

    @java.lang.SuppressWarnings("unchecked")
    public static java.lang.Object fromXml(final java.lang.String xml, final com.github.underscore.Function<java.lang.Object, java.lang.Object> valueMapper) {
        if (xml == null) {
            return null;
        }
        try {
            org.w3c.dom.Document document = com.github.underscore.lodash.Xml.createDocument(xml);
            final java.lang.Object result = com.github.underscore.lodash.Xml.createMap(document, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
                public java.lang.Object apply(java.lang.Object object) {
                    return object;
                }
            }, java.util.Collections.<java.lang.String, java.lang.Object>emptyMap(), new int[]{ 1, 1, 1 }, valueMapper, xml, new int[]{ 0 });
            if (((document.getXmlEncoding()) != null) && (!("UTF-8".equalsIgnoreCase(document.getXmlEncoding())))) {
                ((java.util.Map) (result)).put(com.github.underscore.lodash.Xml.ENCODING, document.getXmlEncoding());
            }else
                if ((((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getKey().equals("root")) && (((((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getValue()) instanceof java.util.List) || ((((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getValue()) instanceof java.util.Map))) {
                    return ((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getValue();
                }

            return result;
        } catch (java.lang.Exception ex) {
            throw new java.lang.IllegalArgumentException(ex);
        }
    }

    public static java.lang.Object fromXml(final java.lang.String xml) {
        return com.github.underscore.lodash.Xml.fromXml(xml, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
            public java.lang.Object apply(java.lang.Object object) {
                return java.lang.String.valueOf(object).trim();
            }
        });
    }

    private static org.w3c.dom.Document createDocument(final java.lang.String xml) throws java.io.IOException, javax.xml.parsers.ParserConfigurationException, org.xml.sax.SAXException {
        final javax.xml.parsers.DocumentBuilderFactory factory = javax.xml.parsers.DocumentBuilderFactory.newInstance();
        factory.setNamespaceAware(true);
        factory.setFeature(javax.xml.XMLConstants.FEATURE_SECURE_PROCESSING, true);
        final javax.xml.parsers.DocumentBuilder builder = factory.newDocumentBuilder();
        builder.setErrorHandler(new org.xml.sax.helpers.DefaultHandler());
        return builder.parse(new org.xml.sax.InputSource(new java.io.StringReader(xml)));
    }

    public static java.lang.Object fromXmlMakeArrays(final java.lang.String xml) {
        try {
            org.w3c.dom.Document document = com.github.underscore.lodash.Xml.createDocument(xml);
            return com.github.underscore.lodash.Xml.createMap(document, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
                public java.lang.Object apply(java.lang.Object object) {
                    return object instanceof java.util.List ? object : com.github.underscore.lodash.U.newArrayList(java.util.Arrays.asList(object));
                }
            }, java.util.Collections.<java.lang.String, java.lang.Object>emptyMap(), new int[]{ 1, 1, 1 }, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
                public java.lang.Object apply(java.lang.Object object) {
                    return java.lang.String.valueOf(object).trim();
                }
            }, xml, new int[]{ 0 });
        } catch (java.lang.Exception ex) {
            throw new java.lang.IllegalArgumentException(ex);
        }
    }

    @java.lang.SuppressWarnings("unchecked")
    public static java.lang.String formatXml(java.lang.String xml, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep) {
        java.lang.Object result = com.github.underscore.lodash.Xml.fromXml(xml);
        if (result instanceof java.util.Map) {
            return com.github.underscore.lodash.Xml.toXml(((java.util.Map) (result)), identStep);
        }
        return com.github.underscore.lodash.Xml.toXml(((java.util.List) (result)), identStep);
    }

    public static java.lang.String formatXml(java.lang.String xml) {
        return com.github.underscore.lodash.Xml.formatXml(xml, com.github.underscore.lodash.Xml.XmlStringBuilder.Step.THREE_SPACES);
    }
}
16:26:29.995 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
16:26:29.995 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #22
16:26:29.995 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlObject:431 which is executed by 8 tests
88056
16:26:30.094 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #23
16:26:30.094 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlObject:411 which is executed by 8 tests
88056
16:26:30.194 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:26:30.262 [pool-58-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (59 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:26:30.591 [pool-57-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Xml.java:413: error: non-static variable ident cannot be referenced from a static context
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(19).collectInput("com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident",com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                                          ^
Xml.java:622: warning: com.sun.org.apache.xerces.internal.util.XMLChar is internal proprietary API and may be removed in a future release
            if ((com.sun.org.apache.xerces.internal.util.XMLChar.isNameStart(ch)) && (ch != ':')) {
                                                        ^
Xml.java:632: warning: com.sun.org.apache.xerces.internal.util.XMLChar is internal proprietary API and may be removed in a future release
                    if ((com.sun.org.apache.xerces.internal.util.XMLChar.isName(ch)) && (ch != ':')) {
                                                                ^
16:26:30.726 [pool-57-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public final class Xml {
    private static final java.lang.String NULL = "null";

    private static final java.lang.String ELEMENT_TEXT = "element";

    private static final java.lang.String CDATA = "#cdata-section";

    private static final java.lang.String COMMENT = "#comment";

    private static final java.lang.String ENCODING = "#encoding";

    private static final java.lang.String TEXT = "#text";

    private static final java.lang.String ELEMENT = ("<" + (com.github.underscore.lodash.Xml.ELEMENT_TEXT)) + ">";

    private static final java.lang.String CLOSED_ELEMENT = ("</" + (com.github.underscore.lodash.Xml.ELEMENT_TEXT)) + ">";

    private static final java.lang.String EMPTY_ELEMENT = (com.github.underscore.lodash.Xml.ELEMENT) + (com.github.underscore.lodash.Xml.CLOSED_ELEMENT);

    private static final java.lang.String NULL_ELEMENT = ((com.github.underscore.lodash.Xml.ELEMENT) + (com.github.underscore.lodash.Xml.NULL)) + (com.github.underscore.lodash.Xml.CLOSED_ELEMENT);

    private static final java.nio.charset.Charset UTF_8 = java.nio.charset.Charset.forName("UTF-8");

    private static final java.util.regex.Pattern ATTRS = java.util.regex.Pattern.compile(("((?:(?!\\s|=).)*)\\s*?=\\s*?[\"\']?((?:(?<=\")(?:(?<=\\\\)\"|[^\"])*|(?<=\')" + "(?:(?<=\\\\)\'|[^\'])*)|(?:(?!\"|\')(?:(?!\\/>|>|\\s).)+))"));

    public static class XmlStringBuilder {
        public enum Step {

            TWO_SPACES(2),
            THREE_SPACES(3),
            FOUR_SPACES(4),
            COMPACT(0),
            TABS(1);
            private int ident;

            Step(int ident) {
                this.ident = ident;
            }

            public int getIdent() {
                return ident;
            }
        }

        protected final java.lang.StringBuilder builder;

        private final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep;

        private int ident;

        public XmlStringBuilder() {
            builder = new java.lang.StringBuilder("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<root>\n");
            identStep = com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TWO_SPACES;
            ident = 2;
        }

        public XmlStringBuilder(java.lang.StringBuilder builder, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident) {
            this.builder = builder;
            this.identStep = identStep;
            this.ident = ident;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder append(final java.lang.String string) {
            builder.append(string);
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder fillSpaces() {
            for (int index = 0; index < (ident); index += 1) {
                builder.append(((identStep) == (com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TABS) ? '\t' : ' '));
            }
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder incIdent() {
            ident += identStep.getIdent();
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder decIdent() {
            ident -= identStep.getIdent();
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder newLine() {
            if ((identStep) != (com.github.underscore.lodash.Xml.XmlStringBuilder.Step.COMPACT)) {
                builder.append("\n");
            }
            return this;
        }

        public int getIdent() {
            return ident;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder.Step getIdentStep() {
            return identStep;
        }

        public java.lang.String toString() {
            return (builder.toString()) + "\n</root>";
        }
    }

    public static class XmlStringBuilderWithoutRoot extends com.github.underscore.lodash.Xml.XmlStringBuilder {
        public XmlStringBuilderWithoutRoot(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, java.lang.String encoding) {
            super(new java.lang.StringBuilder(((("<?xml version=\"1.0\" encoding=\"" + (com.github.underscore.lodash.U.escape(encoding))) + "\"?>") + (identStep == (com.github.underscore.lodash.Xml.XmlStringBuilder.Step.COMPACT) ? "" : "\n"))), identStep, 0);
        }

        public java.lang.String toString() {
            return builder.toString();
        }
    }

    public static class XmlStringBuilderWithoutHeader extends com.github.underscore.lodash.Xml.XmlStringBuilder {
        public XmlStringBuilderWithoutHeader(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident) {
            super(new java.lang.StringBuilder(), identStep, ident);
        }

        public java.lang.String toString() {
            return builder.toString();
        }
    }

    public static class XmlStringBuilderText extends com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader {
        public XmlStringBuilderText(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident) {
            super(identStep, ident);
        }
    }

    public static class XmlArray {
        public static void writeXml(java.util.Collection collection, java.lang.String name, com.github.underscore.lodash.Xml.XmlStringBuilder builder, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (collection == null) {
                builder.append(com.github.underscore.lodash.Xml.NULL);
                return;
            }
            if (name != null) {
                builder.fillSpaces().append("<").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(">").incIdent();
                if (!(collection.isEmpty())) {
                    builder.newLine();
                }
            }
            com.github.underscore.lodash.Xml.XmlArray.writeXml(collection, builder, name, parentTextFound, namespaces);
            if (name != null) {
                builder.decIdent().newLine().fillSpaces().append("</").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(">");
            }
        }

        @java.lang.SuppressWarnings("unchecked")
        private static void writeXml(java.util.Collection collection, com.github.underscore.lodash.Xml.XmlStringBuilder builder, java.lang.String name, final boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            boolean localParentTextFound = parentTextFound;
            final java.util.List entries = com.github.underscore.lodash.U.newArrayList(collection);
            for (int index = 0; index < (entries.size()); index += 1) {
                final java.lang.Object value = entries.get(index);
                final boolean addNewLine = (index < ((entries.size()) - 1)) && (!(java.lang.String.valueOf(entries.get((index + 1))).startsWith(("{" + (com.github.underscore.lodash.Xml.TEXT)))));
                if (value == null) {
                    builder.fillSpaces().append((((((("<" + (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">") + (com.github.underscore.lodash.Xml.NULL)) + "</") + (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">"));
                }else {
                    if ((value instanceof java.util.Map) && ((((java.util.Map) (value)).size()) == 1)) {
                        com.github.underscore.lodash.Xml.XmlObject.writeXml(((java.util.Map) (value)), null, builder, localParentTextFound, namespaces);
                        if (java.lang.String.valueOf(((java.util.Map.Entry) (((java.util.Map) (value)).entrySet().iterator().next())).getKey()).startsWith(com.github.underscore.lodash.Xml.TEXT)) {
                            localParentTextFound = true;
                            continue;
                        }
                    }else {
                        com.github.underscore.lodash.Xml.XmlValue.writeXml(value, (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : name), builder, localParentTextFound, namespaces);
                    }
                    localParentTextFound = false;
                }
                if (addNewLine) {
                    builder.newLine();
                }
            }
        }

        public static void writeXml(byte[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(short[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(int[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(long[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(float[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(double[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(boolean[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(char[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(java.lang.Object[] array, java.lang.String name, com.github.underscore.lodash.Xml.XmlStringBuilder builder, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        com.github.underscore.lodash.Xml.XmlValue.writeXml(array[i], (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : name), builder, parentTextFound, namespaces);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }
    }

    public static class XmlObject {
        @java.lang.SuppressWarnings("unchecked")
        public static void writeXml(java.util.Map map, java.lang.String name, final com.github.underscore.lodash.Xml.XmlStringBuilder builder, final boolean parentTextFound, final java.util.Set<java.lang.String> namespaces) {
            if (map == null) {
                com.github.underscore.lodash.Xml.XmlValue.writeXml(com.github.underscore.lodash.Xml.NULL, name, builder, false, namespaces);
                return;
            }
            final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems = com.github.underscore.lodash.U.newArrayList();
            final java.util.List<java.lang.String> attrs = com.github.underscore.lodash.U.newArrayList();
            final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep = builder.getIdentStep();
            final int ident = (builder.getIdent()) + (name == null ? 0 : builder.getIdentStep().getIdent());
            final java.util.List<java.util.Map.Entry> entries = com.github.underscore.lodash.U.newArrayList(map.entrySet());
            for (int index = 0; index < (entries.size()); index += 1) {
                final java.util.Map.Entry entry = entries.get(index);
                final boolean addNewLine = (index < ((entries.size()) - 1)) && (!(java.lang.String.valueOf(entries.get((index + 1)).getKey()).startsWith(com.github.underscore.lodash.Xml.TEXT)));
                if (((java.lang.String.valueOf(entry.getKey()).startsWith("-")) && (!((entry.getValue()) instanceof java.util.Map))) && (!((entry.getValue()) instanceof java.util.List))) {
                    attrs.add(((((" " + (com.github.underscore.lodash.Xml.XmlValue.escapeName(java.lang.String.valueOf(entry.getKey()).substring(1), namespaces))) + "=\"") + (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getValue())))) + "\""));
                    if (java.lang.String.valueOf(entry.getKey()).startsWith("-xmlns:")) {
                        namespaces.add(java.lang.String.valueOf(entry.getKey()).substring(7));
                    }
                }else
                    if (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getKey())).startsWith(com.github.underscore.lodash.Xml.TEXT)) {
                        com.github.underscore.lodash.Xml.XmlObject.addText(entry, elems, identStep, ident);
                    }else {
                        com.github.underscore.lodash.Xml.XmlObject.processElements(entry, identStep, ident, addNewLine, elems, namespaces);
                    }

            }
            if (name != null) {
                if (!parentTextFound) {
                    builder.fillSpaces();
                }
                builder.append("<").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(com.github.underscore.lodash.U.join(attrs, "")).append(">").incIdent();
                if ((!(elems.isEmpty())) && (!((elems.get(0)) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText))) {
                    builder.newLine();
                }
            }
            for (com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder1 : elems) {
                builder.append(localBuilder1.toString());
            }
            if (name != null) {
                builder.decIdent();
                if ((!(elems.isEmpty())) && (!((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText))) {
                    builder.newLine().fillSpaces();
                }
                builder.append("</").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(">");
            }
        }

        private static void processElements(final java.util.Map.Entry entry, final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident, final boolean addNewLine, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final java.util.Set<java.lang.String> namespaces) {
            if (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getKey())).startsWith(com.github.underscore.lodash.Xml.COMMENT)) {
                com.github.underscore.lodash.Xml.XmlObject.addComment(entry, identStep, ident, addNewLine, elems, "<!--", "-->");
            }else
                if (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getKey())).startsWith(com.github.underscore.lodash.Xml.CDATA)) {
                    com.github.underscore.lodash.Xml.XmlObject.addComment(entry, identStep, ident, addNewLine, elems, "<![CDATA[", "]]>");
                }else
                    if (((entry.getValue()) instanceof java.util.List) && (!(((java.util.List) (entry.getValue())).isEmpty()))) {
                        boolean spoonDefaultValue = false;
                        try {
                            spoonDefaultValue = true;
                        } catch (java.lang.Exception __NopolProcessorException) {
                        }
                        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                        if (fr.inria.lille.commons.trace.RuntimeValues.instance(19).isEnabled()) {
                            fr.inria.lille.commons.trace.RuntimeValues.instance(19).collectionStarts();
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(19).collectInput("com.github.underscore.lodash.Xml.ENCODING",com.github.underscore.lodash.Xml.ENCODING);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(19).collectInput("com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident",com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(19).collectInput("elems",elems);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(19).collectInput("com.github.underscore.lodash.Xml.NULL_ELEMENT",com.github.underscore.lodash.Xml.NULL_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(19).collectInput("addNewLine",addNewLine);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(19).collectInput("ident",ident);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(19).collectInput("com.github.underscore.lodash.Xml.ATTRS",com.github.underscore.lodash.Xml.ATTRS);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(19).collectInput("identStep",identStep);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(19).collectInput("com.github.underscore.lodash.Xml.TEXT",com.github.underscore.lodash.Xml.TEXT);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(19).collectInput("com.github.underscore.lodash.Xml.NULL",com.github.underscore.lodash.Xml.NULL);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(19).collectInput("com.github.underscore.lodash.Xml.ELEMENT_TEXT",com.github.underscore.lodash.Xml.ELEMENT_TEXT);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(19).collectInput("com.github.underscore.lodash.Xml.CLOSED_ELEMENT",com.github.underscore.lodash.Xml.CLOSED_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(19).collectInput("com.github.underscore.lodash.Xml.UTF_8",com.github.underscore.lodash.Xml.UTF_8);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(19).collectInput("com.github.underscore.lodash.Xml.CDATA",com.github.underscore.lodash.Xml.CDATA);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(19).collectInput("entry",entry);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(19).collectInput("com.github.underscore.lodash.Xml.COMMENT",com.github.underscore.lodash.Xml.COMMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(19).collectInput("com.github.underscore.lodash.Xml.EMPTY_ELEMENT",com.github.underscore.lodash.Xml.EMPTY_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(19).collectInput("com.github.underscore.lodash.Xml.ELEMENT",com.github.underscore.lodash.Xml.ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(19).collectInput("namespaces",namespaces);} catch (Exception ex1) {ex1.printStackTrace();};
                            fr.inria.lille.commons.trace.RuntimeValues.instance(19).collectOutput(runtimeAngelicValue);
                            fr.inria.lille.commons.trace.RuntimeValues.instance(19).collectionEnds();
                        }
                        if (runtimeAngelicValue)
                            com.github.underscore.lodash.Xml.XmlObject.addElements(identStep, ident, entry, namespaces, elems, addNewLine);

                    }else {
                        com.github.underscore.lodash.Xml.XmlObject.addElement(identStep, ident, entry, namespaces, elems, addNewLine);
                    }


        }

        private static void addText(final java.util.Map.Entry entry, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident) {
            if ((entry.getValue()) instanceof java.util.List) {
                for (java.lang.Object value : ((java.util.List) (entry.getValue()))) {
                    elems.add(new com.github.underscore.lodash.Xml.XmlStringBuilderText(identStep, ident).append(com.github.underscore.lodash.U.escape(java.lang.String.valueOf(value))));
                }
            }else {
                elems.add(new com.github.underscore.lodash.Xml.XmlStringBuilderText(identStep, ident).append(com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getValue()))));
            }
        }

        private static void addElements(final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident, java.util.Map.Entry entry, java.util.Set<java.lang.String> namespaces, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final boolean addNewLine) {
            boolean parentTextFound = (!(elems.isEmpty())) && ((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText);
            final com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder;
            if ((java.lang.String.valueOf(((java.util.List) (entry.getValue())).get(0)).startsWith(("{" + (com.github.underscore.lodash.Xml.TEXT)))) || (java.lang.String.valueOf(((java.util.List) (entry.getValue())).get(((((java.util.List) (entry.getValue())).size()) - 1))).startsWith(("{" + (com.github.underscore.lodash.Xml.TEXT))))) {
                localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderText(identStep, ident);
            }else {
                localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader(identStep, ident);
            }
            com.github.underscore.lodash.Xml.XmlArray.writeXml(((java.util.List) (entry.getValue())), localBuilder, java.lang.String.valueOf(entry.getKey()), parentTextFound, namespaces);
            if (addNewLine) {
                localBuilder.newLine();
            }
            elems.add(localBuilder);
        }

        private static void addElement(final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident, java.util.Map.Entry entry, java.util.Set<java.lang.String> namespaces, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final boolean addNewLine) {
            boolean parentTextFound = (!(elems.isEmpty())) && ((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText);
            com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader(identStep, ident);
            com.github.underscore.lodash.Xml.XmlValue.writeXml(entry.getValue(), java.lang.String.valueOf(entry.getKey()), localBuilder, parentTextFound, namespaces);
            if (addNewLine) {
                localBuilder.newLine();
            }
            elems.add(localBuilder);
        }

        private static void addComment(java.util.Map.Entry entry, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident, boolean addNewLine, java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, java.lang.String openElement, java.lang.String closeElement) {
            if ((entry.getValue()) instanceof java.util.List) {
                for (java.util.Iterator iterator = ((java.util.List) (entry.getValue())).iterator(); iterator.hasNext();) {
                    com.github.underscore.lodash.Xml.XmlObject.addCommentValue(identStep, ident, java.lang.String.valueOf(iterator.next()), ((iterator.hasNext()) || addNewLine), elems, openElement, closeElement);
                }
            }else {
                com.github.underscore.lodash.Xml.XmlObject.addCommentValue(identStep, ident, java.lang.String.valueOf(entry.getValue()), addNewLine, elems, openElement, closeElement);
            }
        }

        private static void addCommentValue(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident, java.lang.String value, boolean addNewLine, java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, java.lang.String openElement, java.lang.String closeElement) {
            boolean parentTextFound = (!(elems.isEmpty())) && ((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText);
            com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader(identStep, ident);
            if (!parentTextFound) {
                localBuilder.fillSpaces();
            }
            localBuilder.append(openElement).append(value).append(closeElement);
            if (addNewLine) {
                localBuilder.newLine();
            }
            elems.add(localBuilder);
        }
    }

    public static class XmlValue {
        public static void writeXml(java.lang.Object value, java.lang.String name, com.github.underscore.lodash.Xml.XmlStringBuilder builder, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (value instanceof java.util.Map) {
                com.github.underscore.lodash.Xml.XmlObject.writeXml(((java.util.Map) (value)), name, builder, parentTextFound, namespaces);
                return;
            }
            if (value instanceof java.util.Collection) {
                com.github.underscore.lodash.Xml.XmlArray.writeXml(((java.util.Collection) (value)), name, builder, parentTextFound, namespaces);
                return;
            }
            if (!parentTextFound) {
                builder.fillSpaces();
            }
            builder.append((("<" + (com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">"));
            if (value == null) {
                builder.append(com.github.underscore.lodash.Xml.NULL);
            }else
                if (value instanceof java.lang.String) {
                    builder.append(com.github.underscore.lodash.Xml.XmlValue.escape(((java.lang.String) (value))));
                }else {
                    com.github.underscore.lodash.Xml.XmlValue.processArrays(value, builder, name, parentTextFound, namespaces);
                }

            builder.append((("</" + (com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">"));
        }

        private static void processArrays(java.lang.Object value, com.github.underscore.lodash.Xml.XmlStringBuilder builder, java.lang.String name, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (value instanceof java.lang.Double) {
                if ((((java.lang.Double) (value)).isInfinite()) || (((java.lang.Double) (value)).isNaN())) {
                    builder.append(com.github.underscore.lodash.Xml.NULL);
                }else {
                    builder.append(value.toString());
                }
            }else
                if (value instanceof java.lang.Float) {
                    if ((((java.lang.Float) (value)).isInfinite()) || (((java.lang.Float) (value)).isNaN())) {
                        builder.append(com.github.underscore.lodash.Xml.NULL);
                    }else {
                        builder.append(value.toString());
                    }
                }else
                    if (value instanceof java.lang.Number) {
                        builder.append(value.toString());
                    }else
                        if (value instanceof java.lang.Boolean) {
                            builder.append(value.toString());
                        }else
                            if (value instanceof byte[]) {
                                builder.newLine().incIdent();
                                com.github.underscore.lodash.Xml.XmlArray.writeXml(((byte[]) (value)), builder);
                                builder.decIdent().newLine().fillSpaces();
                            }else
                                if (value instanceof short[]) {
                                    builder.newLine().incIdent();
                                    com.github.underscore.lodash.Xml.XmlArray.writeXml(((short[]) (value)), builder);
                                    builder.decIdent().newLine().fillSpaces();
                                }else {
                                    com.github.underscore.lodash.Xml.XmlValue.processArrays2(value, builder, name, parentTextFound, namespaces);
                                }





        }

        private static void processArrays2(java.lang.Object value, com.github.underscore.lodash.Xml.XmlStringBuilder builder, java.lang.String name, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (value instanceof int[]) {
                builder.newLine().incIdent();
                com.github.underscore.lodash.Xml.XmlArray.writeXml(((int[]) (value)), builder);
                builder.decIdent().newLine().fillSpaces();
            }else
                if (value instanceof long[]) {
                    builder.newLine().incIdent();
                    com.github.underscore.lodash.Xml.XmlArray.writeXml(((long[]) (value)), builder);
                    builder.decIdent().newLine().fillSpaces();
                }else
                    if (value instanceof float[]) {
                        builder.newLine().incIdent();
                        com.github.underscore.lodash.Xml.XmlArray.writeXml(((float[]) (value)), builder);
                        builder.decIdent().newLine().fillSpaces();
                    }else
                        if (value instanceof double[]) {
                            builder.newLine().incIdent();
                            com.github.underscore.lodash.Xml.XmlArray.writeXml(((double[]) (value)), builder);
                            builder.decIdent().newLine().fillSpaces();
                        }else
                            if (value instanceof boolean[]) {
                                builder.newLine().incIdent();
                                com.github.underscore.lodash.Xml.XmlArray.writeXml(((boolean[]) (value)), builder);
                                builder.decIdent().newLine().fillSpaces();
                            }else
                                if (value instanceof char[]) {
                                    builder.newLine().incIdent();
                                    com.github.underscore.lodash.Xml.XmlArray.writeXml(((char[]) (value)), builder);
                                    builder.decIdent().newLine().fillSpaces();
                                }else
                                    if (value instanceof java.lang.Object[]) {
                                        builder.newLine().incIdent();
                                        com.github.underscore.lodash.Xml.XmlArray.writeXml(((java.lang.Object[]) (value)), name, builder, parentTextFound, namespaces);
                                        builder.decIdent().newLine().fillSpaces();
                                    }else {
                                        builder.append(value.toString());
                                    }






        }

        public static java.lang.String escapeName(java.lang.String name, java.util.Set<java.lang.String> namespaces) {
            final int length = name.length();
            if (length == 0) {
                return "__EE__EMPTY__EE__";
            }
            final java.lang.StringBuilder result = new java.lang.StringBuilder();
            char ch = name.charAt(0);
            if ((com.sun.org.apache.xerces.internal.util.XMLChar.isNameStart(ch)) && (ch != ':')) {
                result.append(ch);
            }else {
                result.append("__").append(com.github.underscore.lodash.Base32.encode(java.lang.Character.toString(ch))).append("__");
            }
            for (int i = 1; i < length; ++i) {
                ch = name.charAt(i);
                if ((ch == ':') && (("xmlns".equals(name.substring(0, i))) || (namespaces.contains(name.substring(0, i))))) {
                    result.append(ch);
                }else
                    if ((com.sun.org.apache.xerces.internal.util.XMLChar.isName(ch)) && (ch != ':')) {
                        result.append(ch);
                    }else {
                        result.append("__").append(com.github.underscore.lodash.Base32.encode(java.lang.Character.toString(ch))).append("__");
                    }

            }
            return result.toString();
        }

        public static java.lang.String escape(java.lang.String s) {
            if (s == null) {
                return null;
            }
            java.lang.StringBuilder sb = new java.lang.StringBuilder();
            com.github.underscore.lodash.Xml.XmlValue.escape(s, sb);
            return sb.toString();
        }

        private static void escape(java.lang.String s, java.lang.StringBuilder sb) {
            final int len = s.length();
            for (int i = 0; i < len; i++) {
                char ch = s.charAt(i);
                switch (ch) {
                    case '"' :
                        sb.append("&quot;");
                        break;
                    case '\'' :
                        sb.append("'");
                        break;
                    case '&' :
                        sb.append("&amp;");
                        break;
                    case '<' :
                        sb.append("&lt;");
                        break;
                    case '>' :
                        sb.append("&gt;");
                        break;
                    case '\b' :
                        sb.append("\\b");
                        break;
                    case '\f' :
                        sb.append("\\f");
                        break;
                    case '\n' :
                        sb.append("\n");
                        break;
                    case '\r' :
                        sb.append("\\r");
                        break;
                    case '\t' :
                        sb.append("\t");
                        break;
                    default :
                        if (((ch <= '\u001f') || ((ch >= '\u007f') && (ch <= '\u009f'))) || ((ch >= '\u2000') && (ch <= '\u20ff'))) {
                            java.lang.String ss = java.lang.Integer.toHexString(ch);
                            sb.append("&#x");
                            for (int k = 0; k < (4 - (ss.length())); k++) {
                                sb.append('0');
                            }
                            sb.append(ss.toUpperCase()).append(";");
                        }else {
                            sb.append(ch);
                        }
                        break;
                }
            }
        }
    }

    public static java.lang.String toXml(java.util.Collection collection, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep) {
        final com.github.underscore.lodash.Xml.XmlStringBuilder builder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutRoot(identStep, com.github.underscore.lodash.Xml.UTF_8.name());
        builder.append("<root>").incIdent();
        if ((collection == null) || (!(collection.isEmpty()))) {
            builder.newLine();
        }
        com.github.underscore.lodash.Xml.XmlArray.writeXml(collection, null, builder, false, com.github.underscore.lodash.U.<java.lang.String>newLinkedHashSet());
        return builder.newLine().append("</root>").toString();
    }

    public static java.lang.String toXml(java.util.Collection collection) {
        return com.github.underscore.lodash.Xml.toXml(collection, com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TWO_SPACES);
    }

    public static java.lang.String toXml(java.util.Map map, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep) {
        final com.github.underscore.lodash.Xml.XmlStringBuilder builder;
        final java.util.Map localMap;
        if ((map != null) && (map.containsKey(com.github.underscore.lodash.Xml.ENCODING))) {
            builder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutRoot(identStep, java.lang.String.valueOf(map.get(com.github.underscore.lodash.Xml.ENCODING)));
            localMap = ((java.util.Map) (com.github.underscore.lodash.U.clone(map)));
            localMap.remove(com.github.underscore.lodash.Xml.ENCODING);
        }else {
            builder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutRoot(identStep, com.github.underscore.lodash.Xml.UTF_8.name());
            localMap = map;
        }
        if ((((localMap == null) || ((localMap.size()) != 1)) || (java.lang.String.valueOf(((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getKey()).startsWith("-"))) || ((((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getValue()) instanceof java.util.List)) {
            final java.lang.String name;
            if ((((localMap != null) && ((localMap.size()) == 1)) && ((((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getValue()) instanceof java.util.List)) && (!(((java.util.List) (((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getValue())).isEmpty()))) {
                name = java.lang.String.valueOf(((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getKey());
            }else {
                name = "root";
            }
            com.github.underscore.lodash.Xml.XmlObject.writeXml(localMap, name, builder, false, com.github.underscore.lodash.U.<java.lang.String>newLinkedHashSet());
        }else {
            com.github.underscore.lodash.Xml.XmlObject.writeXml(localMap, null, builder, false, com.github.underscore.lodash.U.<java.lang.String>newLinkedHashSet());
        }
        return builder.toString();
    }

    public static java.lang.String toXml(java.util.Map map) {
        return com.github.underscore.lodash.Xml.toXml(map, com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TWO_SPACES);
    }

    @java.lang.SuppressWarnings("unchecked")
    private static java.lang.Object getValue(final java.lang.Object value) {
        if ((value instanceof java.util.Map) && ((((java.util.Map<java.lang.String, java.lang.Object>) (value)).entrySet().size()) == 1)) {
            final java.util.Map.Entry<java.lang.String, java.lang.Object> entry = ((java.util.Map<java.lang.String, java.lang.Object>) (value)).entrySet().iterator().next();
            if ((com.github.underscore.lodash.Xml.TEXT.equals(entry.getKey())) || (entry.getKey().equals(com.github.underscore.lodash.Xml.ELEMENT_TEXT))) {
                return entry.getValue();
            }
        }
        return value;
    }

    @java.lang.SuppressWarnings("unchecked")
    private static java.util.Map<java.lang.String, java.lang.Object> createMap(final org.w3c.dom.Node node, final com.github.underscore.Function<java.lang.Object, java.lang.Object> nodeMapper, java.util.Map<java.lang.String, java.lang.Object> attrMap, int[] uniqueIds, final com.github.underscore.Function<java.lang.Object, java.lang.Object> valueMapper, java.lang.String source, int[] sourceIndex) {
        final java.util.Map<java.lang.String, java.lang.Object> map = com.github.underscore.lodash.U.newLinkedHashMap();
        map.putAll(attrMap);
        final org.w3c.dom.NodeList nodeList = node.getChildNodes();
        for (int index = 0; index < (nodeList.getLength()); index++) {
            final org.w3c.dom.Node currentNode = nodeList.item(index);
            final java.lang.String name = currentNode.getNodeName();
            final java.lang.Object value;
            final int attributesLength = ((currentNode.getAttributes()) == null) ? 0 : currentNode.getAttributes().getLength();
            if ((currentNode.getNodeType()) == (org.w3c.dom.Node.ELEMENT_NODE)) {
                sourceIndex[0] = ((source.indexOf(("<" + name), sourceIndex[0])) + (name.length())) + 2;
                final java.util.Map<java.lang.String, java.lang.Object> attrMapLocal = com.github.underscore.lodash.U.newLinkedHashMap();
                if (attributesLength > 0) {
                    final java.util.regex.Matcher matcher = com.github.underscore.lodash.Xml.ATTRS.matcher(source.substring(sourceIndex[0], source.indexOf(">", sourceIndex[0])));
                    while (matcher.find()) {
                        com.github.underscore.lodash.Xml.addNodeValue(attrMapLocal, ('-' + (matcher.group(1))), matcher.group(2), nodeMapper, uniqueIds);
                    } 
                }
                value = com.github.underscore.lodash.Xml.createMap(currentNode, nodeMapper, attrMapLocal, uniqueIds, valueMapper, source, sourceIndex);
            }else {
                if (com.github.underscore.lodash.Xml.COMMENT.equals(name)) {
                    sourceIndex[0] = (source.indexOf("-->", sourceIndex[0])) + 3;
                }else
                    if (com.github.underscore.lodash.Xml.CDATA.equals(name)) {
                        sourceIndex[0] = (source.indexOf("]]>", sourceIndex[0])) + 3;
                    }

                value = currentNode.getTextContent();
            }
            if ((com.github.underscore.lodash.Xml.TEXT.equals(name)) && (valueMapper.apply(value).toString().isEmpty())) {
                continue;
            }
            com.github.underscore.lodash.Xml.addNodeValue(map, name, value, nodeMapper, uniqueIds);
        }
        return map;
    }

    @java.lang.SuppressWarnings("unchecked")
    private static void addNodeValue(final java.util.Map<java.lang.String, java.lang.Object> map, final java.lang.String name, final java.lang.Object value, final com.github.underscore.Function<java.lang.Object, java.lang.Object> nodeMapper, int[] uniqueIds) {
        if (map.containsKey(name)) {
            if (com.github.underscore.lodash.Xml.TEXT.equals(name)) {
                map.put((name + (uniqueIds[0])), nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
                uniqueIds[0] += 1;
            }else
                if (com.github.underscore.lodash.Xml.COMMENT.equals(name)) {
                    map.put((name + (uniqueIds[1])), nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
                    uniqueIds[1] += 1;
                }else
                    if (com.github.underscore.lodash.Xml.CDATA.equals(name)) {
                        map.put((name + (uniqueIds[2])), nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
                        uniqueIds[2] += 1;
                    }else {
                        final java.lang.Object object = map.get(name);
                        if (object instanceof java.util.List) {
                            com.github.underscore.lodash.Xml.addText(map, name, ((java.util.List<java.lang.Object>) (object)), value);
                        }else {
                            final java.util.List<java.lang.Object> objects = com.github.underscore.lodash.U.newArrayList();
                            objects.add(object);
                            com.github.underscore.lodash.Xml.addText(map, name, objects, value);
                            map.put(name, objects);
                        }
                    }


        }else {
            map.put(name, nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
        }
    }

    @java.lang.SuppressWarnings("unchecked")
    private static void addText(final java.util.Map<java.lang.String, java.lang.Object> map, final java.lang.String name, final java.util.List<java.lang.Object> objects, final java.lang.Object value) {
        int lastIndex = (map.size()) - 1;
        final int index = objects.size();
        while (true) {
            final java.util.Map.Entry lastElement = ((java.util.Map.Entry) (map.entrySet().toArray()[lastIndex]));
            if (name.equals(java.lang.String.valueOf(lastElement.getKey()))) {
                break;
            }
            final java.util.Map<java.lang.String, java.lang.Object> text = com.github.underscore.lodash.U.newLinkedHashMap();
            text.put(java.lang.String.valueOf(lastElement.getKey()), map.remove(lastElement.getKey()));
            objects.add(index, text);
            lastIndex -= 1;
        } 
        objects.add(com.github.underscore.lodash.Xml.getValue(value));
    }

    @java.lang.SuppressWarnings("unchecked")
    public static java.lang.Object fromXml(final java.lang.String xml, final com.github.underscore.Function<java.lang.Object, java.lang.Object> valueMapper) {
        if (xml == null) {
            return null;
        }
        try {
            org.w3c.dom.Document document = com.github.underscore.lodash.Xml.createDocument(xml);
            final java.lang.Object result = com.github.underscore.lodash.Xml.createMap(document, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
                public java.lang.Object apply(java.lang.Object object) {
                    return object;
                }
            }, java.util.Collections.<java.lang.String, java.lang.Object>emptyMap(), new int[]{ 1, 1, 1 }, valueMapper, xml, new int[]{ 0 });
            if (((document.getXmlEncoding()) != null) && (!("UTF-8".equalsIgnoreCase(document.getXmlEncoding())))) {
                ((java.util.Map) (result)).put(com.github.underscore.lodash.Xml.ENCODING, document.getXmlEncoding());
            }else
                if ((((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getKey().equals("root")) && (((((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getValue()) instanceof java.util.List) || ((((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getValue()) instanceof java.util.Map))) {
                    return ((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getValue();
                }

            return result;
        } catch (java.lang.Exception ex) {
            throw new java.lang.IllegalArgumentException(ex);
        }
    }

    public static java.lang.Object fromXml(final java.lang.String xml) {
        return com.github.underscore.lodash.Xml.fromXml(xml, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
            public java.lang.Object apply(java.lang.Object object) {
                return java.lang.String.valueOf(object).trim();
            }
        });
    }

    private static org.w3c.dom.Document createDocument(final java.lang.String xml) throws java.io.IOException, javax.xml.parsers.ParserConfigurationException, org.xml.sax.SAXException {
        final javax.xml.parsers.DocumentBuilderFactory factory = javax.xml.parsers.DocumentBuilderFactory.newInstance();
        factory.setNamespaceAware(true);
        factory.setFeature(javax.xml.XMLConstants.FEATURE_SECURE_PROCESSING, true);
        final javax.xml.parsers.DocumentBuilder builder = factory.newDocumentBuilder();
        builder.setErrorHandler(new org.xml.sax.helpers.DefaultHandler());
        return builder.parse(new org.xml.sax.InputSource(new java.io.StringReader(xml)));
    }

    public static java.lang.Object fromXmlMakeArrays(final java.lang.String xml) {
        try {
            org.w3c.dom.Document document = com.github.underscore.lodash.Xml.createDocument(xml);
            return com.github.underscore.lodash.Xml.createMap(document, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
                public java.lang.Object apply(java.lang.Object object) {
                    return object instanceof java.util.List ? object : com.github.underscore.lodash.U.newArrayList(java.util.Arrays.asList(object));
                }
            }, java.util.Collections.<java.lang.String, java.lang.Object>emptyMap(), new int[]{ 1, 1, 1 }, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
                public java.lang.Object apply(java.lang.Object object) {
                    return java.lang.String.valueOf(object).trim();
                }
            }, xml, new int[]{ 0 });
        } catch (java.lang.Exception ex) {
            throw new java.lang.IllegalArgumentException(ex);
        }
    }

    @java.lang.SuppressWarnings("unchecked")
    public static java.lang.String formatXml(java.lang.String xml, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep) {
        java.lang.Object result = com.github.underscore.lodash.Xml.fromXml(xml);
        if (result instanceof java.util.Map) {
            return com.github.underscore.lodash.Xml.toXml(((java.util.Map) (result)), identStep);
        }
        return com.github.underscore.lodash.Xml.toXml(((java.util.List) (result)), identStep);
    }

    public static java.lang.String formatXml(java.lang.String xml) {
        return com.github.underscore.lodash.Xml.formatXml(xml, com.github.underscore.lodash.Xml.XmlStringBuilder.Step.THREE_SPACES);
    }
}
16:26:30.727 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
16:26:30.727 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #24
16:26:30.727 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlArray:142 which is executed by 8 tests
88056
16:26:30.839 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #25
16:26:30.839 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlArray:185 which is executed by 10 tests
88056
16:26:30.970 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:26:31.041 [pool-60-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (62 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>

</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:31.483 [pool-61-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (14 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>

</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>

</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:31.485 [pool-62-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:26:31.486 [pool-59-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>

</a]>>]
16:26:31.486 [pool-59-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:26:31.486 [pool-59-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Xml$XmlArray:185.
16:26:31.486 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #26
16:26:31.486 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Json$JsonParser:763 which is executed by 10 tests
2318601
16:26:31.576 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:26:31.640 [pool-64-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (55 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

com.github.underscore.lodash.Json$ParseException: Expected digit at 1:8
    at com.github.underscore.lodash.Json$JsonParser.error(Json.java:890)
    at com.github.underscore.lodash.Json$JsonParser.expected(Json.java:883)
    at com.github.underscore.lodash.Json$JsonParser.readExponent(Json.java:812)
    at com.github.underscore.lodash.Json$JsonParser.readNumber(Json.java:769)
    at com.github.underscore.lodash.Json$JsonParser.readValue(Json.java:605)
    at com.github.underscore.lodash.Json$JsonParser.readArray(Json.java:620)
16:26:32.053 [pool-65-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (10 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[Expected digit at 1:8]
com.github.underscore.lodash.Json$ParseException: Expected digit at 1:8    at com.github.underscore.lodash.Json$JsonParser.error(Json.java:890)
    at com.github.underscore.lodash.Json$JsonParser.expected(Json.java:883)
    at com.github.underscore.lodash.Json$JsonParser.readExponent(Json.java:812)
    at com.github.underscore.lodash.Json$JsonParser.readNumber(Json.java:769)
    at com.github.underscore.lodash.Json$JsonParser.readValue(Json.java:605)
    at com.github.underscore.lodash.Json$JsonParser.readArray(Json.java:620)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:32.070 [pool-66-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:26:32.071 [pool-63-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): Expected digit at 1:8]
16:26:32.071 [pool-63-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:26:32.071 [pool-63-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Json$JsonParser:763.
16:26:32.071 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #27
16:26:32.071 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Json$JsonParser:745 which is executed by 10 tests
2318601
16:26:32.158 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:26:32.226 [pool-68-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (58 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:26:32.595 [pool-67-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Json.java:792: error: missing return statement
        }
        ^
16:26:32.827 [pool-67-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public final class Json {
    private static final java.lang.String NULL = "null";

    public static class JsonStringBuilder {
        public enum Step {

            TWO_SPACES(2),
            THREE_SPACES(3),
            FOUR_SPACES(4),
            COMPACT(0),
            TABS(1);
            private final int ident;

            Step(int ident) {
                this.ident = ident;
            }

            public int getIdent() {
                return ident;
            }
        }

        public enum Type {

            PURE("", "\n", "", "\""),
            JAVA("\"", "\\n\"\n + \"", "\";", "\\\"");
            private final java.lang.String initial;

            private final java.lang.String newLine;

            private final java.lang.String tailLine;

            private final java.lang.String wrapLine;

            Type(java.lang.String initial, java.lang.String newLine, java.lang.String tailLine, java.lang.String wrapLine) {
                this.initial = initial;
                this.newLine = newLine;
                this.tailLine = tailLine;
                this.wrapLine = wrapLine;
            }

            public java.lang.String getInitial() {
                return initial;
            }

            public java.lang.String getNewLine() {
                return newLine;
            }

            public java.lang.String getTailLine() {
                return tailLine;
            }

            public java.lang.String getWrapLine() {
                return wrapLine;
            }
        }

        private final java.lang.StringBuilder builder;

        private final com.github.underscore.lodash.Json.JsonStringBuilder.Step identStep;

        private final com.github.underscore.lodash.Json.JsonStringBuilder.Type type;

        private int ident;

        public JsonStringBuilder(com.github.underscore.lodash.Json.JsonStringBuilder.Step identStep) {
            builder = new java.lang.StringBuilder(com.github.underscore.lodash.Json.JsonStringBuilder.Type.PURE.getInitial());
            this.identStep = identStep;
            this.type = com.github.underscore.lodash.Json.JsonStringBuilder.Type.PURE;
        }

        public JsonStringBuilder(com.github.underscore.lodash.Json.JsonStringBuilder.Type type) {
            builder = new java.lang.StringBuilder(type.getInitial());
            this.identStep = com.github.underscore.lodash.Json.JsonStringBuilder.Step.TWO_SPACES;
            this.type = type;
        }

        public JsonStringBuilder() {
            builder = new java.lang.StringBuilder();
            this.identStep = com.github.underscore.lodash.Json.JsonStringBuilder.Step.TWO_SPACES;
            this.type = com.github.underscore.lodash.Json.JsonStringBuilder.Type.PURE;
        }

        public com.github.underscore.lodash.Json.JsonStringBuilder append(final char character) {
            builder.append(character);
            return this;
        }

        public com.github.underscore.lodash.Json.JsonStringBuilder append(final java.lang.String string) {
            builder.append(string);
            return this;
        }

        public com.github.underscore.lodash.Json.JsonStringBuilder fillSpaces() {
            for (int index = 0; index < (ident); index += 1) {
                builder.append(((identStep) == (com.github.underscore.lodash.Json.JsonStringBuilder.Step.TABS) ? '\t' : ' '));
            }
            return this;
        }

        public com.github.underscore.lodash.Json.JsonStringBuilder incIdent() {
            ident += identStep.getIdent();
            return this;
        }

        public com.github.underscore.lodash.Json.JsonStringBuilder decIdent() {
            ident -= identStep.getIdent();
            return this;
        }

        public com.github.underscore.lodash.Json.JsonStringBuilder newLine() {
            if ((identStep) != (com.github.underscore.lodash.Json.JsonStringBuilder.Step.COMPACT)) {
                builder.append(type.getNewLine());
            }
            return this;
        }

        public com.github.underscore.lodash.Json.JsonStringBuilder.Step getIdentStep() {
            return identStep;
        }

        public java.lang.String toString() {
            return (builder.toString()) + (type.getTailLine());
        }
    }

    public static class JsonArray {
        public static void writeJson(java.util.Collection collection, com.github.underscore.lodash.Json.JsonStringBuilder builder) {
            if (collection == null) {
                builder.append(com.github.underscore.lodash.Json.NULL);
                return;
            }
            java.util.Iterator iter = collection.iterator();
            builder.append('[').incIdent();
            if (!(collection.isEmpty())) {
                builder.newLine();
            }
            while (iter.hasNext()) {
                java.lang.Object value = iter.next();
                if (value == null) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Json.NULL);
                    continue;
                }
                builder.fillSpaces();
                com.github.underscore.lodash.Json.JsonValue.writeJson(value, builder);
                if (iter.hasNext()) {
                    builder.append(',').newLine();
                }
            } 
            builder.newLine().decIdent().fillSpaces().append(']');
        }

        public static void writeJson(byte[] array, com.github.underscore.lodash.Json.JsonStringBuilder builder) {
            if (array == null) {
                builder.append(com.github.underscore.lodash.Json.NULL);
            }else
                if ((array.length) == 0) {
                    builder.append("[]");
                }else {
                    builder.append('[').incIdent().newLine();
                    builder.fillSpaces().append(java.lang.String.valueOf(array[0]));
                    for (int i = 1; i < (array.length); i++) {
                        builder.append(',').newLine().fillSpaces();
                        builder.append(java.lang.String.valueOf(array[i]));
                    }
                    builder.newLine().decIdent().fillSpaces().append(']');
                }

        }

        public static void writeJson(short[] array, com.github.underscore.lodash.Json.JsonStringBuilder builder) {
            if (array == null) {
                builder.append(com.github.underscore.lodash.Json.NULL);
            }else
                if ((array.length) == 0) {
                    builder.append("[]");
                }else {
                    builder.append('[').incIdent().newLine();
                    builder.fillSpaces().append(java.lang.String.valueOf(array[0]));
                    for (int i = 1; i < (array.length); i++) {
                        builder.append(',').newLine().fillSpaces();
                        builder.append(java.lang.String.valueOf(array[i]));
                    }
                    builder.newLine().decIdent().fillSpaces().append(']');
                }

        }

        public static void writeJson(int[] array, com.github.underscore.lodash.Json.JsonStringBuilder builder) {
            if (array == null) {
                builder.append(com.github.underscore.lodash.Json.NULL);
            }else
                if ((array.length) == 0) {
                    builder.append("[]");
                }else {
                    builder.append('[').incIdent().newLine();
                    builder.fillSpaces().append(java.lang.String.valueOf(array[0]));
                    for (int i = 1; i < (array.length); i++) {
                        builder.append(',').newLine().fillSpaces();
                        builder.append(java.lang.String.valueOf(array[i]));
                    }
                    builder.newLine().decIdent().fillSpaces().append(']');
                }

        }

        public static void writeJson(long[] array, com.github.underscore.lodash.Json.JsonStringBuilder builder) {
            if (array == null) {
                builder.append(com.github.underscore.lodash.Json.NULL);
            }else
                if ((array.length) == 0) {
                    builder.append("[]");
                }else {
                    builder.append('[').incIdent().newLine();
                    builder.fillSpaces().append(java.lang.String.valueOf(array[0]));
                    for (int i = 1; i < (array.length); i++) {
                        builder.append(',').newLine().fillSpaces();
                        builder.append(java.lang.String.valueOf(array[i]));
                    }
                    builder.newLine().decIdent().fillSpaces().append(']');
                }

        }

        public static void writeJson(float[] array, com.github.underscore.lodash.Json.JsonStringBuilder builder) {
            if (array == null) {
                builder.append(com.github.underscore.lodash.Json.NULL);
            }else
                if ((array.length) == 0) {
                    builder.append("[]");
                }else {
                    builder.append('[').incIdent().newLine();
                    builder.fillSpaces().append(java.lang.String.valueOf(array[0]));
                    for (int i = 1; i < (array.length); i++) {
                        builder.append(',').newLine().fillSpaces();
                        builder.append(java.lang.String.valueOf(array[i]));
                    }
                    builder.newLine().decIdent().fillSpaces().append(']');
                }

        }

        public static void writeJson(double[] array, com.github.underscore.lodash.Json.JsonStringBuilder builder) {
            if (array == null) {
                builder.append(com.github.underscore.lodash.Json.NULL);
            }else
                if ((array.length) == 0) {
                    builder.append("[]");
                }else {
                    builder.append('[').incIdent().newLine();
                    builder.fillSpaces().append(java.lang.String.valueOf(array[0]));
                    for (int i = 1; i < (array.length); i++) {
                        builder.append(',').newLine().fillSpaces();
                        builder.append(java.lang.String.valueOf(array[i]));
                    }
                    builder.newLine().decIdent().fillSpaces().append(']');
                }

        }

        public static void writeJson(boolean[] array, com.github.underscore.lodash.Json.JsonStringBuilder builder) {
            if (array == null) {
                builder.append(com.github.underscore.lodash.Json.NULL);
            }else
                if ((array.length) == 0) {
                    builder.append("[]");
                }else {
                    builder.append('[').incIdent().newLine();
                    builder.fillSpaces().append(java.lang.String.valueOf(array[0]));
                    for (int i = 1; i < (array.length); i++) {
                        builder.append(',').newLine().fillSpaces();
                        builder.append(java.lang.String.valueOf(array[i]));
                    }
                    builder.newLine().decIdent().fillSpaces().append(']');
                }

        }

        public static void writeJson(char[] array, com.github.underscore.lodash.Json.JsonStringBuilder builder) {
            if (array == null) {
                builder.append(com.github.underscore.lodash.Json.NULL);
            }else
                if ((array.length) == 0) {
                    builder.append("[]");
                }else {
                    builder.append('[').incIdent().newLine();
                    builder.fillSpaces().append('\"').append(java.lang.String.valueOf(array[0])).append('\"');
                    for (int i = 1; i < (array.length); i++) {
                        builder.append(',').newLine().fillSpaces();
                        builder.append('\"').append(java.lang.String.valueOf(array[i])).append('\"');
                    }
                    builder.newLine().decIdent().fillSpaces().append(']');
                }

        }

        public static void writeJson(java.lang.Object[] array, com.github.underscore.lodash.Json.JsonStringBuilder builder) {
            if (array == null) {
                builder.append(com.github.underscore.lodash.Json.NULL);
            }else
                if ((array.length) == 0) {
                    builder.append("[]");
                }else {
                    builder.append('[').newLine().incIdent().fillSpaces();
                    com.github.underscore.lodash.Json.JsonValue.writeJson(array[0], builder);
                    for (int i = 1; i < (array.length); i++) {
                        builder.append(',').newLine().fillSpaces();
                        com.github.underscore.lodash.Json.JsonValue.writeJson(array[i], builder);
                    }
                    builder.newLine().decIdent().fillSpaces().append(']');
                }

        }
    }

    public static class JsonObject {
        public static void writeJson(java.util.Map map, com.github.underscore.lodash.Json.JsonStringBuilder builder) {
            if (map == null) {
                builder.append(com.github.underscore.lodash.Json.NULL);
                return;
            }
            java.util.Iterator iter = map.entrySet().iterator();
            builder.append('{').incIdent();
            if (!(map.isEmpty())) {
                builder.newLine();
            }
            while (iter.hasNext()) {
                java.util.Map.Entry entry = ((java.util.Map.Entry) (iter.next()));
                builder.fillSpaces().append(builder.type.getWrapLine());
                builder.append(com.github.underscore.lodash.Json.JsonValue.unescapeName(java.lang.String.valueOf(entry.getKey())));
                builder.append(builder.type.getWrapLine());
                builder.append(':');
                if ((builder.getIdentStep()) != (com.github.underscore.lodash.Json.JsonStringBuilder.Step.COMPACT)) {
                    builder.append(' ');
                }
                com.github.underscore.lodash.Json.JsonValue.writeJson(entry.getValue(), builder);
                if (iter.hasNext()) {
                    builder.append(',').newLine();
                }
            } 
            builder.newLine().decIdent().fillSpaces().append('}');
        }
    }

    public static class JsonValue {
        public static void writeJson(java.lang.Object value, com.github.underscore.lodash.Json.JsonStringBuilder builder) {
            if (value == null) {
                builder.append(com.github.underscore.lodash.Json.NULL);
            }else
                if (value instanceof java.lang.String) {
                    builder.append(builder.type.getWrapLine()).append(com.github.underscore.lodash.Json.JsonValue.escape(((java.lang.String) (value)))).append(builder.type.getWrapLine());
                }else
                    if (value instanceof java.lang.Double) {
                        if ((((java.lang.Double) (value)).isInfinite()) || (((java.lang.Double) (value)).isNaN())) {
                            builder.append(com.github.underscore.lodash.Json.NULL);
                        }else {
                            builder.append(value.toString());
                        }
                    }else
                        if (value instanceof java.lang.Float) {
                            if ((((java.lang.Float) (value)).isInfinite()) || (((java.lang.Float) (value)).isNaN())) {
                                builder.append(com.github.underscore.lodash.Json.NULL);
                            }else {
                                builder.append(value.toString());
                            }
                        }else
                            if (value instanceof java.lang.Number) {
                                builder.append(value.toString());
                            }else
                                if (value instanceof java.lang.Boolean) {
                                    builder.append(value.toString());
                                }else
                                    if (value instanceof java.util.Map) {
                                        com.github.underscore.lodash.Json.JsonObject.writeJson(((java.util.Map) (value)), builder);
                                    }else
                                        if (value instanceof java.util.Collection) {
                                            com.github.underscore.lodash.Json.JsonArray.writeJson(((java.util.Collection) (value)), builder);
                                        }else
                                            if (value instanceof byte[]) {
                                                com.github.underscore.lodash.Json.JsonArray.writeJson(((byte[]) (value)), builder);
                                            }else
                                                if (value instanceof short[]) {
                                                    com.github.underscore.lodash.Json.JsonArray.writeJson(((short[]) (value)), builder);
                                                }else
                                                    if (value instanceof int[]) {
                                                        com.github.underscore.lodash.Json.JsonArray.writeJson(((int[]) (value)), builder);
                                                    }else
                                                        if (value instanceof long[]) {
                                                            com.github.underscore.lodash.Json.JsonArray.writeJson(((long[]) (value)), builder);
                                                        }else
                                                            if (value instanceof float[]) {
                                                                com.github.underscore.lodash.Json.JsonArray.writeJson(((float[]) (value)), builder);
                                                            }else
                                                                if (value instanceof double[]) {
                                                                    com.github.underscore.lodash.Json.JsonArray.writeJson(((double[]) (value)), builder);
                                                                }else
                                                                    if (value instanceof boolean[]) {
                                                                        com.github.underscore.lodash.Json.JsonArray.writeJson(((boolean[]) (value)), builder);
                                                                    }else
                                                                        if (value instanceof char[]) {
                                                                            com.github.underscore.lodash.Json.JsonArray.writeJson(((char[]) (value)), builder);
                                                                        }else
                                                                            if (value instanceof java.lang.Object[]) {
                                                                                com.github.underscore.lodash.Json.JsonArray.writeJson(((java.lang.Object[]) (value)), builder);
                                                                            }else {
                                                                                builder.append(value.toString());
                                                                            }
















        }

        public static java.lang.String unescapeName(final java.lang.String name) {
            final int length = name.length();
            if ((length == 0) || ("__EE__EMPTY__EE__".equals(name))) {
                return "";
            }
            if ("-__EE__EMPTY__EE__".equals(name)) {
                return "-";
            }
            java.lang.StringBuilder result = new java.lang.StringBuilder();
            int underlineCount = 0;
            java.lang.StringBuilder lastChars = new java.lang.StringBuilder();
            outer : for (int i = 0; i < length; ++i) {
                char ch = name.charAt(i);
                if (ch == '_') {
                    lastChars.append(ch);
                }else {
                    if ((lastChars.length()) == 2) {
                        java.lang.StringBuilder nameToDecode = new java.lang.StringBuilder();
                        for (int j = i; j < length; ++j) {
                            if ((name.charAt(j)) == '_') {
                                underlineCount += 1;
                                if (underlineCount == 2) {
                                    result.append(com.github.underscore.lodash.Json.JsonValue.escape(com.github.underscore.lodash.Base32.decode(nameToDecode.toString())));
                                    i = j;
                                    underlineCount = 0;
                                    lastChars.setLength(0);
                                    continue outer;
                                }
                            }else {
                                nameToDecode.append(name.charAt(j));
                                underlineCount = 0;
                            }
                        }
                    }
                    result.append(lastChars).append(ch);
                    lastChars.setLength(0);
                }
            }
            return result.append(lastChars).toString();
        }

        public static java.lang.String escape(java.lang.String s) {
            if (s == null) {
                return null;
            }
            java.lang.StringBuilder sb = new java.lang.StringBuilder();
            com.github.underscore.lodash.Json.JsonValue.escape(s, sb);
            return sb.toString();
        }

        private static void escape(java.lang.String s, java.lang.StringBuilder sb) {
            final int len = s.length();
            for (int i = 0; i < len; i++) {
                char ch = s.charAt(i);
                switch (ch) {
                    case '"' :
                        sb.append("\\\"");
                        break;
                    case '\\' :
                        sb.append("\\\\");
                        break;
                    case '\b' :
                        sb.append("\\b");
                        break;
                    case '\f' :
                        sb.append("\\f");
                        break;
                    case '\n' :
                        sb.append("\\n");
                        break;
                    case '\r' :
                        sb.append("\\r");
                        break;
                    case '\t' :
                        sb.append("\\t");
                        break;
                    default :
                        if (((ch <= '\u001f') || ((ch >= '\u007f') && (ch <= '\u009f'))) || ((ch >= '\u2000') && (ch <= '\u20ff'))) {
                            java.lang.String ss = java.lang.Integer.toHexString(ch);
                            sb.append("\\u");
                            for (int k = 0; k < (4 - (ss.length())); k++) {
                                sb.append('0');
                            }
                            sb.append(ss.toUpperCase());
                        }else {
                            sb.append(ch);
                        }
                        break;
                }
            }
        }
    }

    public static class ParseException extends java.lang.RuntimeException {
        private final int offset;

        private final int line;

        private final int column;

        public ParseException(java.lang.String message, int offset, int line, int column) {
            super(((((message + " at ") + line) + ":") + column));
            this.offset = offset;
            this.line = line;
            this.column = column;
        }

        public int getOffset() {
            return offset;
        }

        public int getLine() {
            return line;
        }

        public int getColumn() {
            return column;
        }
    }

    public static class JsonParser {
        private final java.lang.String json;

        private int index;

        private int line;

        private int lineOffset;

        private int current;

        private java.lang.StringBuilder captureBuffer;

        private int captureStart;

        public JsonParser(java.lang.String string) {
            this.json = string;
            line = 1;
            captureStart = -1;
        }

        public java.lang.Object parse() {
            read();
            skipWhiteSpace();
            final java.lang.Object result = readValue();
            skipWhiteSpace();
            if (!(isEndOfText())) {
                throw error("Unexpected character");
            }
            return result;
        }

        private java.lang.Object readValue() {
            switch (current) {
                case 'n' :
                    return readNull();
                case 't' :
                    return readTrue();
                case 'f' :
                    return readFalse();
                case '"' :
                    return readString();
                case '[' :
                    return readArray();
                case '{' :
                    return readObject();
                case '-' :
                case '0' :
                case '1' :
                case '2' :
                case '3' :
                case '4' :
                case '5' :
                case '6' :
                case '7' :
                case '8' :
                case '9' :
                    return readNumber();
                default :
                    throw expected("value");
            }
        }

        private java.util.List<java.lang.Object> readArray() {
            read();
            java.util.List<java.lang.Object> array = com.github.underscore.lodash.U.newArrayList();
            skipWhiteSpace();
            if (readChar(']')) {
                return array;
            }
            do {
                skipWhiteSpace();
                array.add(readValue());
                skipWhiteSpace();
            } while (readChar(',') );
            if (!(readChar(']'))) {
                throw expected("',' or ']'");
            }
            return array;
        }

        private java.util.Map<java.lang.String, java.lang.Object> readObject() {
            read();
            java.util.Map<java.lang.String, java.lang.Object> object = com.github.underscore.lodash.U.newLinkedHashMap();
            skipWhiteSpace();
            if (readChar('}')) {
                return object;
            }
            do {
                skipWhiteSpace();
                java.lang.String name = readName();
                skipWhiteSpace();
                if (!(readChar(':'))) {
                    throw expected("':'");
                }
                skipWhiteSpace();
                object.put(name, readValue());
                skipWhiteSpace();
            } while (readChar(',') );
            if (!(readChar('}'))) {
                throw expected("',' or '}'");
            }
            return object;
        }

        private java.lang.String readName() {
            if ((current) != '"') {
                throw expected("name");
            }
            return readString();
        }

        private java.lang.String readNull() {
            read();
            readRequiredChar('u');
            readRequiredChar('l');
            readRequiredChar('l');
            return null;
        }

        private java.lang.Boolean readTrue() {
            read();
            readRequiredChar('r');
            readRequiredChar('u');
            readRequiredChar('e');
            return java.lang.Boolean.TRUE;
        }

        private java.lang.Boolean readFalse() {
            read();
            readRequiredChar('a');
            readRequiredChar('l');
            readRequiredChar('s');
            readRequiredChar('e');
            return java.lang.Boolean.FALSE;
        }

        private void readRequiredChar(char ch) {
            if (!(readChar(ch))) {
                throw expected((("'" + ch) + "'"));
            }
        }

        private java.lang.String readString() {
            read();
            startCapture();
            while ((current) != '"') {
                if ((current) == '\\') {
                    pauseCapture();
                    readEscape();
                    startCapture();
                }else
                    if ((current) < 32) {
                        throw expected("valid string character");
                    }else {
                        read();
                    }

            } 
            java.lang.String string = endCapture();
            read();
            return string;
        }

        private void readEscape() {
            read();
            switch (current) {
                case '"' :
                case '/' :
                case '\\' :
                    captureBuffer.append(((char) (current)));
                    break;
                case 'b' :
                    captureBuffer.append('\b');
                    break;
                case 'f' :
                    captureBuffer.append('\f');
                    break;
                case 'n' :
                    captureBuffer.append('\n');
                    break;
                case 'r' :
                    captureBuffer.append('\r');
                    break;
                case 't' :
                    captureBuffer.append('\t');
                    break;
                case 'u' :
                    char[] hexChars = new char[4];
                    boolean isHexCharsDigits = true;
                    for (int i = 0; i < 4; i++) {
                        read();
                        if (!(isHexDigit())) {
                            isHexCharsDigits = false;
                        }
                        hexChars[i] = ((char) (current));
                    }
                    if (isHexCharsDigits) {
                        captureBuffer.append(((char) (java.lang.Integer.parseInt(new java.lang.String(hexChars), 16))));
                    }else {
                        captureBuffer.append("\\u").append(hexChars[0]).append(hexChars[1]).append(hexChars[2]).append(hexChars[3]);
                    }
                    break;
                default :
                    throw expected("valid escape sequence");
            }
            read();
        }

        private java.lang.Number readNumber() {
            startCapture();
            readChar('-');
            int firstDigit = current;
            if (!(readDigit())) {
                throw expected("digit");
            }
            if (firstDigit != '0') {
                while (readDigit()) {
                } 
            }
            readFraction();
            readExponent();
            final java.lang.String number = endCapture();
            if (((number.contains(".")) || (number.contains("e"))) || (number.contains("E"))) {
                return java.lang.Double.valueOf(number);
            }else {
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(22).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(22).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(22).collectInput("firstDigit",firstDigit);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(22).collectInput("number",number);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(22).collectInput("com.github.underscore.lodash.Json.NULL",com.github.underscore.lodash.Json.NULL);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(22).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(22).collectionEnds();
                }
                if (runtimeAngelicValue)
                    return java.lang.Long.valueOf(number);

            }
        }

        private boolean readFraction() {
            if (!(readChar('.'))) {
                return false;
            }
            if (!(readDigit())) {
                throw expected("digit");
            }
            while (readDigit()) {
            } 
            return true;
        }

        private boolean readExponent() {
            if ((!(readChar('e'))) && (!(readChar('E')))) {
                return false;
            }
            if (!(readChar('+'))) {
                readChar('-');
            }
            if (!(readDigit())) {
                throw expected("digit");
            }
            while (readDigit()) {
            } 
            return true;
        }

        private boolean readChar(char ch) {
            if ((current) != ch) {
                return false;
            }
            read();
            return true;
        }

        private boolean readDigit() {
            if (!(isDigit())) {
                return false;
            }
            read();
            return true;
        }

        private void skipWhiteSpace() {
            while (isWhiteSpace()) {
                read();
            } 
        }

        private void read() {
            if ((index) == (json.length())) {
                current = -1;
                return;
            }
            if ((current) == '\n') {
                (line)++;
                lineOffset = index;
            }
            current = json.charAt(((index)++));
        }

        private void startCapture() {
            if ((captureBuffer) == null) {
                captureBuffer = new java.lang.StringBuilder();
            }
            captureStart = (index) - 1;
        }

        private void pauseCapture() {
            captureBuffer.append(json.substring(captureStart, ((index) - 1)));
            captureStart = -1;
        }

        private java.lang.String endCapture() {
            int end = ((current) == (-1)) ? index : (index) - 1;
            java.lang.String captured;
            if ((captureBuffer.length()) > 0) {
                captureBuffer.append(json.substring(captureStart, end));
                captured = captureBuffer.toString();
                captureBuffer.setLength(0);
            }else {
                captured = json.substring(captureStart, end);
            }
            captureStart = -1;
            return captured;
        }

        private com.github.underscore.lodash.Json.ParseException expected(java.lang.String expected) {
            if (isEndOfText()) {
                return error("Unexpected end of input");
            }
            return error(("Expected " + expected));
        }

        private com.github.underscore.lodash.Json.ParseException error(java.lang.String message) {
            int absIndex = index;
            int column = absIndex - (lineOffset);
            int offset = (isEndOfText()) ? absIndex : absIndex - 1;
            return new com.github.underscore.lodash.Json.ParseException(message, offset, line, (column - 1));
        }

        private boolean isWhiteSpace() {
            return ((((current) == ' ') || ((current) == '\t')) || ((current) == '\n')) || ((current) == '\r');
        }

        private boolean isDigit() {
            return ((current) >= '0') && ((current) <= '9');
        }

        private boolean isHexDigit() {
            return ((isDigit()) || (((current) >= 'a') && ((current) <= 'f'))) || (((current) >= 'A') && ((current) <= 'F'));
        }

        private boolean isEndOfText() {
            return (current) == (-1);
        }
    }

    public static java.lang.String toJson(java.util.Collection collection, com.github.underscore.lodash.Json.JsonStringBuilder.Step identStep) {
        final com.github.underscore.lodash.Json.JsonStringBuilder builder = new com.github.underscore.lodash.Json.JsonStringBuilder(identStep);
        com.github.underscore.lodash.Json.JsonArray.writeJson(collection, builder);
        return builder.toString();
    }

    public static java.lang.String toJson(java.util.Collection collection) {
        return com.github.underscore.lodash.Json.toJson(collection, com.github.underscore.lodash.Json.JsonStringBuilder.Step.TWO_SPACES);
    }

    public static java.lang.String toJson(java.util.Map map, com.github.underscore.lodash.Json.JsonStringBuilder.Step identStep) {
        final com.github.underscore.lodash.Json.JsonStringBuilder builder = new com.github.underscore.lodash.Json.JsonStringBuilder(identStep);
        com.github.underscore.lodash.Json.JsonObject.writeJson(map, builder);
        return builder.toString();
    }

    public static java.lang.String toJson(java.util.Map map) {
        return com.github.underscore.lodash.Json.toJson(map, com.github.underscore.lodash.Json.JsonStringBuilder.Step.TWO_SPACES);
    }

    public static java.lang.String toJsonJavaString(java.util.Collection collection) {
        final com.github.underscore.lodash.Json.JsonStringBuilder builder = new com.github.underscore.lodash.Json.JsonStringBuilder(com.github.underscore.lodash.Json.JsonStringBuilder.Type.JAVA);
        com.github.underscore.lodash.Json.JsonArray.writeJson(collection, builder);
        return builder.toString();
    }

    public static java.lang.String toJsonJavaString(java.util.Map map) {
        final com.github.underscore.lodash.Json.JsonStringBuilder builder = new com.github.underscore.lodash.Json.JsonStringBuilder(com.github.underscore.lodash.Json.JsonStringBuilder.Type.JAVA);
        com.github.underscore.lodash.Json.JsonObject.writeJson(map, builder);
        return builder.toString();
    }

    public static java.lang.Object fromJson(java.lang.String string) {
        return new com.github.underscore.lodash.Json.JsonParser(string).parse();
    }

    @java.lang.SuppressWarnings("unchecked")
    public static java.lang.String formatJson(java.lang.String json, com.github.underscore.lodash.Json.JsonStringBuilder.Step identStep) {
        java.lang.Object result = com.github.underscore.lodash.Json.fromJson(json);
        if (result instanceof java.util.Map) {
            return com.github.underscore.lodash.Json.toJson(((java.util.Map) (result)), identStep);
        }
        return com.github.underscore.lodash.Json.toJson(((java.util.List) (result)), identStep);
    }

    public static java.lang.String formatJson(java.lang.String json) {
        return com.github.underscore.lodash.Json.formatJson(json, com.github.underscore.lodash.Json.JsonStringBuilder.Step.THREE_SPACES);
    }
}
16:26:32.828 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
16:26:32.828 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #28
16:26:32.828 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Json$JsonParser:742 which is executed by 10 tests
2318601
16:26:32.913 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:26:32.978 [pool-70-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (56 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:33.406 [pool-71-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (14 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0.0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:33.408 [pool-72-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0.0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0.0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:26:33.408 [pool-69-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:26:33.408 [pool-69-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0.0</a>
</a]>>]
16:26:33.408 [pool-69-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Json$JsonParser:742.
16:26:33.408 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #29
16:26:33.408 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Json$JsonParser:741 which is executed by 10 tests
2318601
16:26:33.494 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #30
16:26:33.494 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlArray:188 which is executed by 11 tests
88056
16:26:33.591 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:26:33.659 [pool-74-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (60 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:34.025 [pool-75-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (14 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:34.028 [pool-76-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:26:34.028 [pool-73-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:26:34.028 [pool-73-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:26:34.028 [pool-73-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Xml$XmlArray:188.
16:26:34.029 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #31
16:26:34.029 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlArray:177 which is executed by 11 tests
88056
16:26:34.134 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:26:34.200 [pool-78-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (58 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>

</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:34.565 [pool-79-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (14 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>

</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>

</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:34.567 [pool-80-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:26:34.567 [pool-77-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>

</a]>>]
16:26:34.567 [pool-77-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:26:34.567 [pool-77-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Xml$XmlArray:177.
16:26:34.567 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:26:34.633 [pool-82-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (58 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:35.166 [pool-83-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (15 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

java.lang.ClassCastException: java.lang.Long cannot be cast to java.util.Map
    at com.github.underscore.lodash.Xml$XmlArray.writeXml(Xml.java:196)
    at com.github.underscore.lodash.Xml$XmlArray.access$200(Xml.java:132)
    at com.github.underscore.lodash.Xml$XmlObject.addElements(Xml.java:465)
    at com.github.underscore.lodash.Xml$XmlObject.processElements(Xml.java:439)
    at com.github.underscore.lodash.Xml$XmlObject.writeXml(Xml.java:406)
    at com.github.underscore.lodash.Xml.toXml(Xml.java:738)
16:26:35.178 [pool-84-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[java.lang.Long cannot be cast to java.util.Map]
java.lang.ClassCastException: java.lang.Long cannot be cast to java.util.Map    at com.github.underscore.lodash.Xml$XmlArray.writeXml(Xml.java:196)
    at com.github.underscore.lodash.Xml$XmlArray.access$200(Xml.java:132)
    at com.github.underscore.lodash.Xml$XmlObject.addElements(Xml.java:465)
    at com.github.underscore.lodash.Xml$XmlObject.processElements(Xml.java:439)
    at com.github.underscore.lodash.Xml$XmlObject.writeXml(Xml.java:406)
    at com.github.underscore.lodash.Xml.toXml(Xml.java:738)

16:26:35.179 [pool-81-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:26:35.179 [pool-81-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): java.lang.Long cannot be cast to java.util.Map]
16:26:35.179 [pool-81-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Xml$XmlArray:177.
16:26:35.179 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #32
16:26:35.179 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Json$JsonParser:762 which is executed by 11 tests
2318601
16:26:35.279 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:26:35.344 [pool-86-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (57 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

com.github.underscore.lodash.Json$ParseException: Expected digit at 1:8
    at com.github.underscore.lodash.Json$JsonParser.error(Json.java:890)
    at com.github.underscore.lodash.Json$JsonParser.expected(Json.java:883)
    at com.github.underscore.lodash.Json$JsonParser.readExponent(Json.java:812)
    at com.github.underscore.lodash.Json$JsonParser.readNumber(Json.java:769)
    at com.github.underscore.lodash.Json$JsonParser.readValue(Json.java:605)
    at com.github.underscore.lodash.Json$JsonParser.readArray(Json.java:620)
16:26:35.746 [pool-87-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (10 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[Expected digit at 1:8]
com.github.underscore.lodash.Json$ParseException: Expected digit at 1:8    at com.github.underscore.lodash.Json$JsonParser.error(Json.java:890)
    at com.github.underscore.lodash.Json$JsonParser.expected(Json.java:883)
    at com.github.underscore.lodash.Json$JsonParser.readExponent(Json.java:812)
    at com.github.underscore.lodash.Json$JsonParser.readNumber(Json.java:769)
    at com.github.underscore.lodash.Json$JsonParser.readValue(Json.java:605)
    at com.github.underscore.lodash.Json$JsonParser.readArray(Json.java:620)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:35.751 [pool-88-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:26:35.752 [pool-85-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): Expected digit at 1:8]
16:26:35.752 [pool-85-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:26:35.752 [pool-85-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Json$JsonParser:762.
16:26:35.752 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:26:35.814 [pool-90-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (55 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

com.github.underscore.lodash.Json$ParseException: Expected digit at 1:8
    at com.github.underscore.lodash.Json$JsonParser.error(Json.java:890)
    at com.github.underscore.lodash.Json$JsonParser.expected(Json.java:883)
    at com.github.underscore.lodash.Json$JsonParser.readExponent(Json.java:812)
    at com.github.underscore.lodash.Json$JsonParser.readNumber(Json.java:769)
    at com.github.underscore.lodash.Json$JsonParser.readValue(Json.java:605)
    at com.github.underscore.lodash.Json$JsonParser.readArray(Json.java:620)
16:26:36.213 [pool-91-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (10 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[Expected digit at 1:8]
com.github.underscore.lodash.Json$ParseException: Expected digit at 1:8    at com.github.underscore.lodash.Json$JsonParser.error(Json.java:890)
    at com.github.underscore.lodash.Json$JsonParser.expected(Json.java:883)
    at com.github.underscore.lodash.Json$JsonParser.readExponent(Json.java:812)
    at com.github.underscore.lodash.Json$JsonParser.readNumber(Json.java:769)
    at com.github.underscore.lodash.Json$JsonParser.readValue(Json.java:605)
    at com.github.underscore.lodash.Json$JsonParser.readArray(Json.java:620)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:36.218 [pool-92-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:26:36.218 [pool-89-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): Expected digit at 1:8]
16:26:36.218 [pool-89-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:26:36.218 [pool-89-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Json$JsonParser:762.
16:26:36.219 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #33
16:26:36.219 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Json$JsonParser:751 which is executed by 11 tests
2318601
16:26:36.304 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:26:36.365 [pool-94-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (54 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

com.github.underscore.lodash.Json$ParseException: Expected digit at 1:8
    at com.github.underscore.lodash.Json$JsonParser.error(Json.java:890)
    at com.github.underscore.lodash.Json$JsonParser.expected(Json.java:883)
    at com.github.underscore.lodash.Json$JsonParser.readFraction(Json.java:797)
    at com.github.underscore.lodash.Json$JsonParser.readNumber(Json.java:768)
    at com.github.underscore.lodash.Json$JsonParser.readValue(Json.java:605)
    at com.github.underscore.lodash.Json$JsonParser.readArray(Json.java:620)
16:26:36.754 [pool-95-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (9 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[Expected digit at 1:8]
com.github.underscore.lodash.Json$ParseException: Expected digit at 1:8    at com.github.underscore.lodash.Json$JsonParser.error(Json.java:890)
    at com.github.underscore.lodash.Json$JsonParser.expected(Json.java:883)
    at com.github.underscore.lodash.Json$JsonParser.readFraction(Json.java:797)
    at com.github.underscore.lodash.Json$JsonParser.readNumber(Json.java:768)
    at com.github.underscore.lodash.Json$JsonParser.readValue(Json.java:605)
    at com.github.underscore.lodash.Json$JsonParser.readArray(Json.java:620)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:36.759 [pool-96-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:26:36.760 [pool-93-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): Expected digit at 1:8]
16:26:36.760 [pool-93-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:26:36.760 [pool-93-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Json$JsonParser:751.
16:26:36.760 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #34
16:26:36.760 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Json$JsonParser:740 which is executed by 11 tests
2318601
16:26:36.845 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:26:36.907 [pool-98-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (56 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:37.354 [pool-99-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (13 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:37.356 [pool-100-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:26:37.356 [pool-97-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:26:37.356 [pool-97-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:26:37.357 [pool-97-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Json$JsonParser:740.
16:26:37.357 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #35
16:26:37.357 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlArray:190 which is executed by 12 tests
88056
16:26:37.480 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:26:37.548 [pool-102-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (60 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:37.944 [pool-103-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (13 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:37.946 [pool-104-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:26:37.948 [pool-101-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:26:37.948 [pool-101-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:26:37.948 [pool-101-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Xml$XmlArray:190.
16:26:37.948 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:26:38.010 [pool-106-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (55 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:38.366 [pool-107-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (13 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>

</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:38.368 [pool-108-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>

</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>

</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:26:38.374 [pool-105-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:26:38.375 [pool-105-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>

</a]>>]
16:26:38.375 [pool-105-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Xml$XmlArray:190.
16:26:38.375 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #36
16:26:38.375 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlArray:172 which is executed by 12 tests
88056
16:26:38.484 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:26:38.546 [pool-110-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (54 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>

</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:38.900 [pool-111-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (13 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>

</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>

</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:38.901 [pool-112-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:26:38.902 [pool-109-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>

</a]>>]
16:26:38.902 [pool-109-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:26:38.902 [pool-109-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Xml$XmlArray:172.
16:26:38.902 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:26:38.963 [pool-114-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (55 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:39.316 [pool-115-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (12 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>null</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:39.318 [pool-116-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>null</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>null</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:26:39.318 [pool-113-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:26:39.318 [pool-113-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>null</a>
</a]>>]
16:26:39.318 [pool-113-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Xml$XmlArray:172.
16:26:39.318 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #37
16:26:39.318 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlArray:170 which is executed by 12 tests
88056
16:26:39.410 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #38
16:26:39.411 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlArray:169 which is executed by 12 tests
88056
16:26:39.503 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #39
16:26:39.503 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Json$JsonParser:789 which is executed by 12 tests
2318601
16:26:39.587 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #40
16:26:39.588 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Json$JsonParser:788 which is executed by 12 tests
2318601
16:26:39.672 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:26:39.733 [pool-118-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (54 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

java.lang.NumberFormatException: For input string: ""
    at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)
    at java.lang.Long.parseLong(Long.java:601)
    at java.lang.Long.valueOf(Long.java:803)
    at com.github.underscore.lodash.Json$JsonParser.readNumber(Json.java:774)
    at com.github.underscore.lodash.Json$JsonParser.readValue(Json.java:605)
    at com.github.underscore.lodash.Json$JsonParser.readArray(Json.java:620)
16:26:40.125 [pool-119-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (9 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[For input string: ""]
java.lang.NumberFormatException: For input string: ""    at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)
    at java.lang.Long.parseLong(Long.java:601)
    at java.lang.Long.valueOf(Long.java:803)
    at com.github.underscore.lodash.Json$JsonParser.readNumber(Json.java:774)
    at com.github.underscore.lodash.Json$JsonParser.readValue(Json.java:605)
    at com.github.underscore.lodash.Json$JsonParser.readArray(Json.java:620)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:40.130 [pool-120-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:26:40.130 [pool-117-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): For input string: ""]
16:26:40.130 [pool-117-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:26:40.130 [pool-117-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Json$JsonParser:788.
16:26:40.130 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #41
16:26:40.130 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Json$JsonParser:750 which is executed by 12 tests
2318601
16:26:40.214 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:26:40.286 [pool-122-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (61 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

com.github.underscore.lodash.Json$ParseException: Expected digit at 1:8
    at com.github.underscore.lodash.Json$JsonParser.error(Json.java:889)
    at com.github.underscore.lodash.Json$JsonParser.expected(Json.java:882)
    at com.github.underscore.lodash.Json$JsonParser.readFraction(Json.java:796)
    at com.github.underscore.lodash.Json$JsonParser.readNumber(Json.java:768)
    at com.github.underscore.lodash.Json$JsonParser.readValue(Json.java:605)
    at com.github.underscore.lodash.Json$JsonParser.readArray(Json.java:620)
16:26:40.791 [pool-123-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (9 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[Expected digit at 1:8]
com.github.underscore.lodash.Json$ParseException: Expected digit at 1:8    at com.github.underscore.lodash.Json$JsonParser.error(Json.java:889)
    at com.github.underscore.lodash.Json$JsonParser.expected(Json.java:882)
    at com.github.underscore.lodash.Json$JsonParser.readFraction(Json.java:796)
    at com.github.underscore.lodash.Json$JsonParser.readNumber(Json.java:768)
    at com.github.underscore.lodash.Json$JsonParser.readValue(Json.java:605)
    at com.github.underscore.lodash.Json$JsonParser.readArray(Json.java:620)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:40.796 [pool-124-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:26:40.796 [pool-121-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): Expected digit at 1:8]
16:26:40.796 [pool-121-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:26:40.796 [pool-121-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Json$JsonParser:750.
16:26:40.796 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:26:40.855 [pool-126-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (52 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

com.github.underscore.lodash.Json$ParseException: Expected digit at 1:8
    at com.github.underscore.lodash.Json$JsonParser.error(Json.java:889)
    at com.github.underscore.lodash.Json$JsonParser.expected(Json.java:882)
    at com.github.underscore.lodash.Json$JsonParser.readFraction(Json.java:796)
    at com.github.underscore.lodash.Json$JsonParser.readNumber(Json.java:768)
    at com.github.underscore.lodash.Json$JsonParser.readValue(Json.java:605)
    at com.github.underscore.lodash.Json$JsonParser.readArray(Json.java:620)
16:26:41.233 [pool-127-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (9 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[Expected digit at 1:8]
com.github.underscore.lodash.Json$ParseException: Expected digit at 1:8    at com.github.underscore.lodash.Json$JsonParser.error(Json.java:889)
    at com.github.underscore.lodash.Json$JsonParser.expected(Json.java:882)
    at com.github.underscore.lodash.Json$JsonParser.readFraction(Json.java:796)
    at com.github.underscore.lodash.Json$JsonParser.readNumber(Json.java:768)
    at com.github.underscore.lodash.Json$JsonParser.readValue(Json.java:605)
    at com.github.underscore.lodash.Json$JsonParser.readArray(Json.java:620)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:41.238 [pool-128-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:26:41.238 [pool-125-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): Expected digit at 1:8]
16:26:41.238 [pool-125-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:26:41.238 [pool-125-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Json$JsonParser:750.
16:26:41.238 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #42
16:26:41.238 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Json$JsonParser:739 which is executed by 12 tests
2318601
16:26:41.321 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:26:41.382 [pool-130-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (55 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:41.764 [pool-131-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (13 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:41.765 [pool-132-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:26:41.765 [pool-129-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:26:41.765 [pool-129-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:26:41.765 [pool-129-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Json$JsonParser:739.
16:26:41.765 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #43
16:26:41.765 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Json$JsonParser:735 which is executed by 12 tests
2318601
16:26:41.849 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:26:41.909 [pool-134-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (54 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:42.302 [pool-135-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (13 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:42.303 [pool-136-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:26:42.303 [pool-133-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:26:42.304 [pool-133-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:26:42.304 [pool-133-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Json$JsonParser:735.
16:26:42.304 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:26:42.362 [pool-138-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (52 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:42.764 [pool-139-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (13 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:42.766 [pool-140-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:26:42.766 [pool-137-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:26:42.766 [pool-137-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:26:42.766 [pool-137-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Json$JsonParser:735.
16:26:42.766 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #44
16:26:42.766 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Json$JsonParser:785 which is executed by 13 tests
2318601
16:26:42.851 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:26:42.910 [pool-142-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (53 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:43.302 [pool-143-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (13 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:43.303 [pool-144-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:26:43.304 [pool-141-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:26:43.304 [pool-141-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:26:43.304 [pool-141-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Json$JsonParser:785.
16:26:43.304 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:26:43.366 [pool-146-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (55 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:43.746 [pool-147-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (13 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

com.github.underscore.lodash.Json$ParseException: Expected digit at 1:7
    at com.github.underscore.lodash.Json$JsonParser.error(Json.java:888)
    at com.github.underscore.lodash.Json$JsonParser.expected(Json.java:881)
    at com.github.underscore.lodash.Json$JsonParser.readNumber(Json.java:762)
    at com.github.underscore.lodash.Json$JsonParser.readValue(Json.java:605)
    at com.github.underscore.lodash.Json$JsonParser.readArray(Json.java:620)
    at com.github.underscore.lodash.Json$JsonParser.readValue(Json.java:591)
16:26:43.747 [pool-148-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[Expected digit at 1:7]
com.github.underscore.lodash.Json$ParseException: Expected digit at 1:7    at com.github.underscore.lodash.Json$JsonParser.error(Json.java:888)
    at com.github.underscore.lodash.Json$JsonParser.expected(Json.java:881)
    at com.github.underscore.lodash.Json$JsonParser.readNumber(Json.java:762)
    at com.github.underscore.lodash.Json$JsonParser.readValue(Json.java:605)
    at com.github.underscore.lodash.Json$JsonParser.readArray(Json.java:620)
    at com.github.underscore.lodash.Json$JsonParser.readValue(Json.java:591)

16:26:43.747 [pool-145-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:26:43.747 [pool-145-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): Expected digit at 1:7]
16:26:43.747 [pool-145-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Json$JsonParser:785.
16:26:43.748 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #45
16:26:43.748 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Json$JsonParser:732 which is executed by 13 tests
2318601
16:26:43.829 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:26:43.888 [pool-150-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (53 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

java.lang.NumberFormatException: For input string: ""
    at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)
    at java.lang.Long.parseLong(Long.java:601)
    at java.lang.Long.valueOf(Long.java:803)
    at com.github.underscore.lodash.Json$JsonParser.readNumber(Json.java:787)
    at com.github.underscore.lodash.Json$JsonParser.readValue(Json.java:605)
    at com.github.underscore.lodash.Json$JsonParser.readArray(Json.java:620)
16:26:44.269 [pool-151-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (10 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[For input string: ""]
java.lang.NumberFormatException: For input string: ""    at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)
    at java.lang.Long.parseLong(Long.java:601)
    at java.lang.Long.valueOf(Long.java:803)
    at com.github.underscore.lodash.Json$JsonParser.readNumber(Json.java:787)
    at com.github.underscore.lodash.Json$JsonParser.readValue(Json.java:605)
    at com.github.underscore.lodash.Json$JsonParser.readArray(Json.java:620)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:44.274 [pool-152-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:26:44.274 [pool-149-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): For input string: ""]
16:26:44.274 [pool-149-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:26:44.274 [pool-149-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Json$JsonParser:732.
16:26:44.274 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:26:44.339 [pool-154-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (56 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:44.720 [pool-155-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (13 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

com.github.underscore.lodash.Json$ParseException: Expected digit at 1:8
    at com.github.underscore.lodash.Json$JsonParser.error(Json.java:889)
    at com.github.underscore.lodash.Json$JsonParser.expected(Json.java:882)
    at com.github.underscore.lodash.Json$JsonParser.readNumber(Json.java:775)
    at com.github.underscore.lodash.Json$JsonParser.readValue(Json.java:605)
    at com.github.underscore.lodash.Json$JsonParser.readArray(Json.java:620)
    at com.github.underscore.lodash.Json$JsonParser.readValue(Json.java:591)
16:26:44.722 [pool-156-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[Expected digit at 1:8]
com.github.underscore.lodash.Json$ParseException: Expected digit at 1:8    at com.github.underscore.lodash.Json$JsonParser.error(Json.java:889)
    at com.github.underscore.lodash.Json$JsonParser.expected(Json.java:882)
    at com.github.underscore.lodash.Json$JsonParser.readNumber(Json.java:775)
    at com.github.underscore.lodash.Json$JsonParser.readValue(Json.java:605)
    at com.github.underscore.lodash.Json$JsonParser.readArray(Json.java:620)
    at com.github.underscore.lodash.Json$JsonParser.readValue(Json.java:591)

16:26:44.722 [pool-153-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:26:44.723 [pool-153-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): Expected digit at 1:8]
16:26:44.723 [pool-153-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Json$JsonParser:732.
16:26:44.723 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #46
16:26:44.723 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Json$JsonParser:731 which is executed by 13 tests
2318601
16:26:44.808 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #47
16:26:44.808 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Json$JsonParser:730 which is executed by 13 tests
2318601
16:26:44.892 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:26:44.953 [pool-158-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (54 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:45.331 [pool-159-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (13 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:45.332 [pool-160-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:26:45.332 [pool-157-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:26:45.332 [pool-157-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:26:45.332 [pool-157-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Json$JsonParser:730.
16:26:45.332 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #48
16:26:45.332 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Json$JsonParser:729 which is executed by 13 tests
2318601
16:26:45.414 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:26:45.472 [pool-162-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (52 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

java.lang.StringIndexOutOfBoundsException: String index out of range: -1
    at java.lang.String.substring(String.java:1960)
    at com.github.underscore.lodash.Json$JsonParser.endCapture(Json.java:873)
    at com.github.underscore.lodash.Json$JsonParser.readNumber(Json.java:784)
    at com.github.underscore.lodash.Json$JsonParser.readValue(Json.java:605)
    at com.github.underscore.lodash.Json$JsonParser.readArray(Json.java:620)
    at com.github.underscore.lodash.Json$JsonParser.readValue(Json.java:591)
16:26:45.880 [pool-163-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (10 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[String index out of range: -1]
java.lang.StringIndexOutOfBoundsException: String index out of range: -1    at java.lang.String.substring(String.java:1960)
    at com.github.underscore.lodash.Json$JsonParser.endCapture(Json.java:873)
    at com.github.underscore.lodash.Json$JsonParser.readNumber(Json.java:784)
    at com.github.underscore.lodash.Json$JsonParser.readValue(Json.java:605)
    at com.github.underscore.lodash.Json$JsonParser.readArray(Json.java:620)
    at com.github.underscore.lodash.Json$JsonParser.readValue(Json.java:591)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:45.885 [pool-164-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:26:45.885 [pool-161-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): String index out of range: -1]
16:26:45.885 [pool-161-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:26:45.885 [pool-161-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Json$JsonParser:729.
16:26:45.885 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #49
16:26:45.885 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Json$JsonParser:577 which is executed by 13 tests
2318601
16:26:45.966 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #50
16:26:45.966 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlArray:194 which is executed by 15 tests
88056
16:26:46.064 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #51
16:26:46.064 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlArray:168 which is executed by 15 tests
88056
16:26:46.172 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:26:46.234 [pool-166-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (55 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>

</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:46.580 [pool-167-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (14 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>

</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>

</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:46.582 [pool-168-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:26:46.583 [pool-165-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>

</a]>>]
16:26:46.583 [pool-165-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:26:46.583 [pool-165-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Xml$XmlArray:168.
16:26:46.583 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #52
16:26:46.583 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlArray:167 which is executed by 15 tests
88056
16:26:46.675 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #53
16:26:46.675 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlArray:166 which is executed by 15 tests
88056
16:26:46.766 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #54
16:26:46.766 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Json$JsonParser:855 which is executed by 18 tests
2318601
16:26:46.853 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #55
16:26:46.854 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlValue:500 which is executed by 19 tests
88056
16:26:46.946 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:26:47.006 [pool-170-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (54 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
<a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:47.339 [pool-171-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (13 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
<a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
<a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:47.340 [pool-172-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:26:47.349 [pool-169-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
<a>0</a>
</a]>>]
16:26:47.349 [pool-169-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:26:47.349 [pool-169-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Xml$XmlValue:500.
16:26:47.349 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #56
16:26:47.349 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlValue:511 which is executed by 20 tests
88056
16:26:47.444 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #57
16:26:47.444 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlValue:510 which is executed by 20 tests
88056
16:26:47.540 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:26:47.602 [pool-174-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (55 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:47.938 [pool-175-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (14 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:47.939 [pool-176-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:26:47.939 [pool-173-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0
</a]>>]
16:26:47.939 [pool-173-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:26:47.939 [pool-173-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Xml$XmlValue:510.
16:26:47.939 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #58
16:26:47.940 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlValue:505 which is executed by 20 tests
88056
16:26:48.038 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:26:48.096 [pool-178-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (52 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a></a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:48.435 [pool-179-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (12 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a></a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a></a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:48.436 [pool-180-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:26:48.436 [pool-177-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a></a>
</a]>>]
16:26:48.436 [pool-177-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:26:48.436 [pool-177-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Xml$XmlValue:505.
16:26:48.436 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:26:48.494 [pool-182-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (52 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:48.826 [pool-183-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (13 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

java.lang.ClassCastException: java.lang.Long cannot be cast to java.lang.String
    at com.github.underscore.lodash.Xml$XmlValue.writeXml(Xml.java:519)
    at com.github.underscore.lodash.Xml$XmlArray.writeXml(Xml.java:167)
    at com.github.underscore.lodash.Xml$XmlArray.access$000(Xml.java:132)
    at com.github.underscore.lodash.Xml$XmlObject.addElements(Xml.java:430)
    at com.github.underscore.lodash.Xml$XmlObject.processElements(Xml.java:404)
    at com.github.underscore.lodash.Xml$XmlObject.writeXml(Xml.java:371)
16:26:48.827 [pool-184-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[java.lang.Long cannot be cast to java.lang.String]
java.lang.ClassCastException: java.lang.Long cannot be cast to java.lang.String    at com.github.underscore.lodash.Xml$XmlValue.writeXml(Xml.java:519)
    at com.github.underscore.lodash.Xml$XmlArray.writeXml(Xml.java:167)
    at com.github.underscore.lodash.Xml$XmlArray.access$000(Xml.java:132)
    at com.github.underscore.lodash.Xml$XmlObject.addElements(Xml.java:430)
    at com.github.underscore.lodash.Xml$XmlObject.processElements(Xml.java:404)
    at com.github.underscore.lodash.Xml$XmlObject.writeXml(Xml.java:371)

16:26:48.827 [pool-181-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:26:48.827 [pool-181-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): java.lang.Long cannot be cast to java.lang.String]
16:26:48.827 [pool-181-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Xml$XmlValue:505.
16:26:48.827 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #59
16:26:48.827 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlValue:503 which is executed by 20 tests
88056
16:26:48.947 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:26:49.005 [pool-186-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (52 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a></a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:49.338 [pool-187-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (13 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a></a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a></a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:49.339 [pool-188-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:26:49.340 [pool-185-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a></a>
</a]>>]
16:26:49.340 [pool-185-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:26:49.340 [pool-185-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Xml$XmlValue:503.
16:26:49.340 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:26:49.399 [pool-190-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (53 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:49.729 [pool-191-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (13 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>null</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:49.731 [pool-192-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>null</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>null</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:26:49.731 [pool-189-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:26:49.731 [pool-189-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>null</a>
</a]>>]
16:26:49.731 [pool-189-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Xml$XmlValue:503.
16:26:49.731 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #60
16:26:49.731 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlValue:502 which is executed by 20 tests
88056
16:26:49.824 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:26:49.882 [pool-194-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (52 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:50.212 [pool-195-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (13 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:50.213 [pool-196-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:26:50.213 [pool-193-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  0</a>
</a]>>]
16:26:50.213 [pool-193-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:26:50.213 [pool-193-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Xml$XmlValue:502.
16:26:50.213 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #61
16:26:50.213 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlValue:499 which is executed by 20 tests
88056
16:26:50.303 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:26:50.361 [pool-198-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (52 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
<a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:50.689 [pool-199-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (13 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
<a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
<a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:50.691 [pool-200-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:26:50.691 [pool-197-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
<a>0</a>
</a]>>]
16:26:50.691 [pool-197-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:26:50.691 [pool-197-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Xml$XmlValue:499.
16:26:50.691 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:26:50.747 [pool-202-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (50 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
<a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:51.075 [pool-203-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (13 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
<a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
<a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:51.077 [pool-204-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:26:51.077 [pool-201-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
<a>0</a>
</a]>>]
16:26:51.077 [pool-201-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:26:51.077 [pool-201-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Xml$XmlValue:499.
16:26:51.077 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #62
16:26:51.077 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlValue:495 which is executed by 20 tests
88056
16:26:51.170 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:26:51.232 [pool-206-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (56 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:51.567 [pool-207-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (12 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:51.569 [pool-208-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:26:51.569 [pool-205-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:26:51.569 [pool-205-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:26:51.569 [pool-205-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Xml$XmlValue:495.
16:26:51.569 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:26:51.626 [pool-210-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (51 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:51.955 [pool-211-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (13 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

java.lang.ClassCastException: java.lang.Long cannot be cast to java.util.Collection
    at com.github.underscore.lodash.Xml$XmlValue.writeXml(Xml.java:508)
    at com.github.underscore.lodash.Xml$XmlArray.writeXml(Xml.java:167)
    at com.github.underscore.lodash.Xml$XmlArray.access$000(Xml.java:132)
    at com.github.underscore.lodash.Xml$XmlObject.addElements(Xml.java:430)
    at com.github.underscore.lodash.Xml$XmlObject.processElements(Xml.java:404)
    at com.github.underscore.lodash.Xml$XmlObject.writeXml(Xml.java:371)
16:26:51.956 [pool-212-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[java.lang.Long cannot be cast to java.util.Collection]
java.lang.ClassCastException: java.lang.Long cannot be cast to java.util.Collection    at com.github.underscore.lodash.Xml$XmlValue.writeXml(Xml.java:508)
    at com.github.underscore.lodash.Xml$XmlArray.writeXml(Xml.java:167)
    at com.github.underscore.lodash.Xml$XmlArray.access$000(Xml.java:132)
    at com.github.underscore.lodash.Xml$XmlObject.addElements(Xml.java:430)
    at com.github.underscore.lodash.Xml$XmlObject.processElements(Xml.java:404)
    at com.github.underscore.lodash.Xml$XmlObject.writeXml(Xml.java:371)

16:26:51.956 [pool-209-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:26:51.956 [pool-209-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): java.lang.Long cannot be cast to java.util.Collection]
16:26:51.956 [pool-209-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Xml$XmlValue:495.
16:26:51.957 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #63
16:26:51.957 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlObject:388 which is executed by 21 tests
88056
16:26:52.070 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:26:52.128 [pool-214-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (52 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:52.461 [pool-215-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (13 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:52.462 [pool-216-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:26:52.463 [pool-213-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>  <a>0</a>
</a]>>]
16:26:52.463 [pool-213-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:26:52.463 [pool-213-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Xml$XmlObject:388.
16:26:52.463 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #64
16:26:52.463 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlObject:397 which is executed by 22 tests
88056
16:26:52.553 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:26:52.610 [pool-218-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (51 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a></a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:52.938 [pool-219-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (13 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a></a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a></a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:52.940 [pool-220-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:26:52.940 [pool-217-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a></a]>>]
16:26:52.940 [pool-217-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:26:52.940 [pool-217-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Xml$XmlObject:397.
16:26:52.940 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #65
16:26:52.940 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml:711 which is executed by 25 tests
88056
16:26:53.033 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #66
16:26:53.033 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.U:1803 which is executed by 25 tests
86
16:26:53.300 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #67
16:26:53.300 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml:694 which is executed by 25 tests
88056
16:26:53.416 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #68
16:26:53.416 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml:693 which is executed by 26 tests
88056
16:26:53.527 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #69
16:26:53.527 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml:690 which is executed by 26 tests
88056
16:26:53.635 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:26:53.698 [pool-222-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (56 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:26:54.036 [pool-221-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Xml.java:590: warning: com.sun.org.apache.xerces.internal.util.XMLChar is internal proprietary API and may be removed in a future release
            if ((com.sun.org.apache.xerces.internal.util.XMLChar.isNameStart(ch)) && (ch != ':')) {
                                                        ^
Xml.java:600: warning: com.sun.org.apache.xerces.internal.util.XMLChar is internal proprietary API and may be removed in a future release
                    if ((com.sun.org.apache.xerces.internal.util.XMLChar.isName(ch)) && (ch != ':')) {
                                                                ^
Xml.java:703: error: non-static variable ident cannot be referenced from a static context
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(61).collectInput("com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident",com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                              ^
16:26:54.164 [pool-221-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public final class Xml {
    private static final java.lang.String NULL = "null";

    private static final java.lang.String ELEMENT_TEXT = "element";

    private static final java.lang.String CDATA = "#cdata-section";

    private static final java.lang.String COMMENT = "#comment";

    private static final java.lang.String ENCODING = "#encoding";

    private static final java.lang.String TEXT = "#text";

    private static final java.lang.String ELEMENT = ("<" + (com.github.underscore.lodash.Xml.ELEMENT_TEXT)) + ">";

    private static final java.lang.String CLOSED_ELEMENT = ("</" + (com.github.underscore.lodash.Xml.ELEMENT_TEXT)) + ">";

    private static final java.lang.String EMPTY_ELEMENT = (com.github.underscore.lodash.Xml.ELEMENT) + (com.github.underscore.lodash.Xml.CLOSED_ELEMENT);

    private static final java.lang.String NULL_ELEMENT = ((com.github.underscore.lodash.Xml.ELEMENT) + (com.github.underscore.lodash.Xml.NULL)) + (com.github.underscore.lodash.Xml.CLOSED_ELEMENT);

    private static final java.nio.charset.Charset UTF_8 = java.nio.charset.Charset.forName("UTF-8");

    private static final java.util.regex.Pattern ATTRS = java.util.regex.Pattern.compile(("((?:(?!\\s|=).)*)\\s*?=\\s*?[\"\']?((?:(?<=\")(?:(?<=\\\\)\"|[^\"])*|(?<=\')" + "(?:(?<=\\\\)\'|[^\'])*)|(?:(?!\"|\')(?:(?!\\/>|>|\\s).)+))"));

    public static class XmlStringBuilder {
        public enum Step {

            TWO_SPACES(2),
            THREE_SPACES(3),
            FOUR_SPACES(4),
            COMPACT(0),
            TABS(1);
            private int ident;

            Step(int ident) {
                this.ident = ident;
            }

            public int getIdent() {
                return ident;
            }
        }

        protected final java.lang.StringBuilder builder;

        private final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep;

        private int ident;

        public XmlStringBuilder() {
            builder = new java.lang.StringBuilder("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<root>\n");
            identStep = com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TWO_SPACES;
            ident = 2;
        }

        public XmlStringBuilder(java.lang.StringBuilder builder, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident) {
            this.builder = builder;
            this.identStep = identStep;
            this.ident = ident;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder append(final java.lang.String string) {
            builder.append(string);
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder fillSpaces() {
            for (int index = 0; index < (ident); index += 1) {
                builder.append(((identStep) == (com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TABS) ? '\t' : ' '));
            }
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder incIdent() {
            ident += identStep.getIdent();
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder decIdent() {
            ident -= identStep.getIdent();
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder newLine() {
            if ((identStep) != (com.github.underscore.lodash.Xml.XmlStringBuilder.Step.COMPACT)) {
                builder.append("\n");
            }
            return this;
        }

        public int getIdent() {
            return ident;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder.Step getIdentStep() {
            return identStep;
        }

        public java.lang.String toString() {
            return (builder.toString()) + "\n</root>";
        }
    }

    public static class XmlStringBuilderWithoutRoot extends com.github.underscore.lodash.Xml.XmlStringBuilder {
        public XmlStringBuilderWithoutRoot(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, java.lang.String encoding) {
            super(new java.lang.StringBuilder(((("<?xml version=\"1.0\" encoding=\"" + (com.github.underscore.lodash.U.escape(encoding))) + "\"?>") + (identStep == (com.github.underscore.lodash.Xml.XmlStringBuilder.Step.COMPACT) ? "" : "\n"))), identStep, 0);
        }

        public java.lang.String toString() {
            return builder.toString();
        }
    }

    public static class XmlStringBuilderWithoutHeader extends com.github.underscore.lodash.Xml.XmlStringBuilder {
        public XmlStringBuilderWithoutHeader(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident) {
            super(new java.lang.StringBuilder(), identStep, ident);
        }

        public java.lang.String toString() {
            return builder.toString();
        }
    }

    public static class XmlStringBuilderText extends com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader {
        public XmlStringBuilderText(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident) {
            super(identStep, ident);
        }
    }

    public static class XmlArray {
        public static void writeXml(java.util.Collection collection, java.lang.String name, com.github.underscore.lodash.Xml.XmlStringBuilder builder, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (collection == null) {
                builder.append(com.github.underscore.lodash.Xml.NULL);
                return;
            }
            if (name != null) {
                builder.fillSpaces().append("<").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(">").incIdent();
                if (!(collection.isEmpty())) {
                    builder.newLine();
                }
            }
            com.github.underscore.lodash.Xml.XmlArray.writeXml(collection, builder, name, parentTextFound, namespaces);
            if (name != null) {
                builder.decIdent().newLine().fillSpaces().append("</").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(">");
            }
        }

        @java.lang.SuppressWarnings("unchecked")
        private static void writeXml(java.util.Collection collection, com.github.underscore.lodash.Xml.XmlStringBuilder builder, java.lang.String name, final boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            boolean localParentTextFound = parentTextFound;
            final java.util.List entries = com.github.underscore.lodash.U.newArrayList(collection);
            for (int index = 0; index < (entries.size()); index += 1) {
                final java.lang.Object value = entries.get(index);
                final boolean addNewLine = (index < ((entries.size()) - 1)) && (!(java.lang.String.valueOf(entries.get((index + 1))).startsWith(("{" + (com.github.underscore.lodash.Xml.TEXT)))));
                if (value == null) {
                    builder.fillSpaces().append((((((("<" + (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">") + (com.github.underscore.lodash.Xml.NULL)) + "</") + (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">"));
                }else {
                    if ((value instanceof java.util.Map) && ((((java.util.Map) (value)).size()) == 1)) {
                        com.github.underscore.lodash.Xml.XmlObject.writeXml(((java.util.Map) (value)), null, builder, localParentTextFound, namespaces);
                        if (java.lang.String.valueOf(((java.util.Map.Entry) (((java.util.Map) (value)).entrySet().iterator().next())).getKey()).startsWith(com.github.underscore.lodash.Xml.TEXT)) {
                            localParentTextFound = true;
                            continue;
                        }
                    }else {
                        com.github.underscore.lodash.Xml.XmlValue.writeXml(value, (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : name), builder, localParentTextFound, namespaces);
                    }
                    localParentTextFound = false;
                }
                if (addNewLine) {
                    builder.newLine();
                }
            }
        }

        public static void writeXml(byte[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(short[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(int[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(long[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(float[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(double[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(boolean[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(char[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(java.lang.Object[] array, java.lang.String name, com.github.underscore.lodash.Xml.XmlStringBuilder builder, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        com.github.underscore.lodash.Xml.XmlValue.writeXml(array[i], (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : name), builder, parentTextFound, namespaces);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }
    }

    public static class XmlObject {
        @java.lang.SuppressWarnings("unchecked")
        public static void writeXml(java.util.Map map, java.lang.String name, final com.github.underscore.lodash.Xml.XmlStringBuilder builder, final boolean parentTextFound, final java.util.Set<java.lang.String> namespaces) {
            if (map == null) {
                com.github.underscore.lodash.Xml.XmlValue.writeXml(com.github.underscore.lodash.Xml.NULL, name, builder, false, namespaces);
                return;
            }
            final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems = com.github.underscore.lodash.U.newArrayList();
            final java.util.List<java.lang.String> attrs = com.github.underscore.lodash.U.newArrayList();
            final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep = builder.getIdentStep();
            final int ident = (builder.getIdent()) + (name == null ? 0 : builder.getIdentStep().getIdent());
            final java.util.List<java.util.Map.Entry> entries = com.github.underscore.lodash.U.newArrayList(map.entrySet());
            for (int index = 0; index < (entries.size()); index += 1) {
                final java.util.Map.Entry entry = entries.get(index);
                final boolean addNewLine = (index < ((entries.size()) - 1)) && (!(java.lang.String.valueOf(entries.get((index + 1)).getKey()).startsWith(com.github.underscore.lodash.Xml.TEXT)));
                if (((java.lang.String.valueOf(entry.getKey()).startsWith("-")) && (!((entry.getValue()) instanceof java.util.Map))) && (!((entry.getValue()) instanceof java.util.List))) {
                    attrs.add(((((" " + (com.github.underscore.lodash.Xml.XmlValue.escapeName(java.lang.String.valueOf(entry.getKey()).substring(1), namespaces))) + "=\"") + (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getValue())))) + "\""));
                    if (java.lang.String.valueOf(entry.getKey()).startsWith("-xmlns:")) {
                        namespaces.add(java.lang.String.valueOf(entry.getKey()).substring(7));
                    }
                }else
                    if (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getKey())).startsWith(com.github.underscore.lodash.Xml.TEXT)) {
                        com.github.underscore.lodash.Xml.XmlObject.addText(entry, elems, identStep, ident);
                    }else {
                        com.github.underscore.lodash.Xml.XmlObject.processElements(entry, identStep, ident, addNewLine, elems, namespaces);
                    }

            }
            if (name != null) {
                if (!parentTextFound) {
                    builder.fillSpaces();
                }
                builder.append("<").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(com.github.underscore.lodash.U.join(attrs, "")).append(">").incIdent();
                if ((!(elems.isEmpty())) && (!((elems.get(0)) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText))) {
                    builder.newLine();
                }
            }
            for (com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder1 : elems) {
                builder.append(localBuilder1.toString());
            }
            if (name != null) {
                builder.decIdent();
                if ((!(elems.isEmpty())) && (!((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText))) {
                    builder.newLine().fillSpaces();
                }
                builder.append("</").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(">");
            }
        }

        private static void processElements(final java.util.Map.Entry entry, final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident, final boolean addNewLine, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final java.util.Set<java.lang.String> namespaces) {
            if (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getKey())).startsWith(com.github.underscore.lodash.Xml.COMMENT)) {
                com.github.underscore.lodash.Xml.XmlObject.addComment(entry, identStep, ident, addNewLine, elems, "<!--", "-->");
            }else
                if (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getKey())).startsWith(com.github.underscore.lodash.Xml.CDATA)) {
                    com.github.underscore.lodash.Xml.XmlObject.addComment(entry, identStep, ident, addNewLine, elems, "<![CDATA[", "]]>");
                }else
                    if (((entry.getValue()) instanceof java.util.List) && (!(((java.util.List) (entry.getValue())).isEmpty()))) {
                        com.github.underscore.lodash.Xml.XmlObject.addElements(identStep, ident, entry, namespaces, elems, addNewLine);
                    }else {
                        com.github.underscore.lodash.Xml.XmlObject.addElement(identStep, ident, entry, namespaces, elems, addNewLine);
                    }


        }

        private static void addText(final java.util.Map.Entry entry, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident) {
            if ((entry.getValue()) instanceof java.util.List) {
                for (java.lang.Object value : ((java.util.List) (entry.getValue()))) {
                    elems.add(new com.github.underscore.lodash.Xml.XmlStringBuilderText(identStep, ident).append(com.github.underscore.lodash.U.escape(java.lang.String.valueOf(value))));
                }
            }else {
                elems.add(new com.github.underscore.lodash.Xml.XmlStringBuilderText(identStep, ident).append(com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getValue()))));
            }
        }

        private static void addElements(final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident, java.util.Map.Entry entry, java.util.Set<java.lang.String> namespaces, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final boolean addNewLine) {
            boolean parentTextFound = (!(elems.isEmpty())) && ((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText);
            final com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder;
            if ((java.lang.String.valueOf(((java.util.List) (entry.getValue())).get(0)).startsWith(("{" + (com.github.underscore.lodash.Xml.TEXT)))) || (java.lang.String.valueOf(((java.util.List) (entry.getValue())).get(((((java.util.List) (entry.getValue())).size()) - 1))).startsWith(("{" + (com.github.underscore.lodash.Xml.TEXT))))) {
                localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderText(identStep, ident);
            }else {
                localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader(identStep, ident);
            }
            com.github.underscore.lodash.Xml.XmlArray.writeXml(((java.util.List) (entry.getValue())), localBuilder, java.lang.String.valueOf(entry.getKey()), parentTextFound, namespaces);
            if (addNewLine) {
                localBuilder.newLine();
            }
            elems.add(localBuilder);
        }

        private static void addElement(final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident, java.util.Map.Entry entry, java.util.Set<java.lang.String> namespaces, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final boolean addNewLine) {
            boolean parentTextFound = (!(elems.isEmpty())) && ((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText);
            com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader(identStep, ident);
            com.github.underscore.lodash.Xml.XmlValue.writeXml(entry.getValue(), java.lang.String.valueOf(entry.getKey()), localBuilder, parentTextFound, namespaces);
            if (addNewLine) {
                localBuilder.newLine();
            }
            elems.add(localBuilder);
        }

        private static void addComment(java.util.Map.Entry entry, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident, boolean addNewLine, java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, java.lang.String openElement, java.lang.String closeElement) {
            if ((entry.getValue()) instanceof java.util.List) {
                for (java.util.Iterator iterator = ((java.util.List) (entry.getValue())).iterator(); iterator.hasNext();) {
                    com.github.underscore.lodash.Xml.XmlObject.addCommentValue(identStep, ident, java.lang.String.valueOf(iterator.next()), ((iterator.hasNext()) || addNewLine), elems, openElement, closeElement);
                }
            }else {
                com.github.underscore.lodash.Xml.XmlObject.addCommentValue(identStep, ident, java.lang.String.valueOf(entry.getValue()), addNewLine, elems, openElement, closeElement);
            }
        }

        private static void addCommentValue(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident, java.lang.String value, boolean addNewLine, java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, java.lang.String openElement, java.lang.String closeElement) {
            boolean parentTextFound = (!(elems.isEmpty())) && ((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText);
            com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader(identStep, ident);
            if (!parentTextFound) {
                localBuilder.fillSpaces();
            }
            localBuilder.append(openElement).append(value).append(closeElement);
            if (addNewLine) {
                localBuilder.newLine();
            }
            elems.add(localBuilder);
        }
    }

    public static class XmlValue {
        public static void writeXml(java.lang.Object value, java.lang.String name, com.github.underscore.lodash.Xml.XmlStringBuilder builder, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (value instanceof java.util.Map) {
                com.github.underscore.lodash.Xml.XmlObject.writeXml(((java.util.Map) (value)), name, builder, parentTextFound, namespaces);
                return;
            }
            if (value instanceof java.util.Collection) {
                com.github.underscore.lodash.Xml.XmlArray.writeXml(((java.util.Collection) (value)), name, builder, parentTextFound, namespaces);
                return;
            }
            if (!parentTextFound) {
                builder.fillSpaces();
            }
            builder.append((("<" + (com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">"));
            if (value == null) {
                builder.append(com.github.underscore.lodash.Xml.NULL);
            }else
                if (value instanceof java.lang.String) {
                    builder.append(com.github.underscore.lodash.Xml.XmlValue.escape(((java.lang.String) (value))));
                }else {
                    com.github.underscore.lodash.Xml.XmlValue.processArrays(value, builder, name, parentTextFound, namespaces);
                }

            builder.append((("</" + (com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">"));
        }

        private static void processArrays(java.lang.Object value, com.github.underscore.lodash.Xml.XmlStringBuilder builder, java.lang.String name, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (value instanceof java.lang.Double) {
                if ((((java.lang.Double) (value)).isInfinite()) || (((java.lang.Double) (value)).isNaN())) {
                    builder.append(com.github.underscore.lodash.Xml.NULL);
                }else {
                    builder.append(value.toString());
                }
            }else
                if (value instanceof java.lang.Float) {
                    if ((((java.lang.Float) (value)).isInfinite()) || (((java.lang.Float) (value)).isNaN())) {
                        builder.append(com.github.underscore.lodash.Xml.NULL);
                    }else {
                        builder.append(value.toString());
                    }
                }else
                    if (value instanceof java.lang.Number) {
                        builder.append(value.toString());
                    }else
                        if (value instanceof java.lang.Boolean) {
                            builder.append(value.toString());
                        }else
                            if (value instanceof byte[]) {
                                builder.newLine().incIdent();
                                com.github.underscore.lodash.Xml.XmlArray.writeXml(((byte[]) (value)), builder);
                                builder.decIdent().newLine().fillSpaces();
                            }else
                                if (value instanceof short[]) {
                                    builder.newLine().incIdent();
                                    com.github.underscore.lodash.Xml.XmlArray.writeXml(((short[]) (value)), builder);
                                    builder.decIdent().newLine().fillSpaces();
                                }else {
                                    com.github.underscore.lodash.Xml.XmlValue.processArrays2(value, builder, name, parentTextFound, namespaces);
                                }





        }

        private static void processArrays2(java.lang.Object value, com.github.underscore.lodash.Xml.XmlStringBuilder builder, java.lang.String name, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (value instanceof int[]) {
                builder.newLine().incIdent();
                com.github.underscore.lodash.Xml.XmlArray.writeXml(((int[]) (value)), builder);
                builder.decIdent().newLine().fillSpaces();
            }else
                if (value instanceof long[]) {
                    builder.newLine().incIdent();
                    com.github.underscore.lodash.Xml.XmlArray.writeXml(((long[]) (value)), builder);
                    builder.decIdent().newLine().fillSpaces();
                }else
                    if (value instanceof float[]) {
                        builder.newLine().incIdent();
                        com.github.underscore.lodash.Xml.XmlArray.writeXml(((float[]) (value)), builder);
                        builder.decIdent().newLine().fillSpaces();
                    }else
                        if (value instanceof double[]) {
                            builder.newLine().incIdent();
                            com.github.underscore.lodash.Xml.XmlArray.writeXml(((double[]) (value)), builder);
                            builder.decIdent().newLine().fillSpaces();
                        }else
                            if (value instanceof boolean[]) {
                                builder.newLine().incIdent();
                                com.github.underscore.lodash.Xml.XmlArray.writeXml(((boolean[]) (value)), builder);
                                builder.decIdent().newLine().fillSpaces();
                            }else
                                if (value instanceof char[]) {
                                    builder.newLine().incIdent();
                                    com.github.underscore.lodash.Xml.XmlArray.writeXml(((char[]) (value)), builder);
                                    builder.decIdent().newLine().fillSpaces();
                                }else
                                    if (value instanceof java.lang.Object[]) {
                                        builder.newLine().incIdent();
                                        com.github.underscore.lodash.Xml.XmlArray.writeXml(((java.lang.Object[]) (value)), name, builder, parentTextFound, namespaces);
                                        builder.decIdent().newLine().fillSpaces();
                                    }else {
                                        builder.append(value.toString());
                                    }






        }

        public static java.lang.String escapeName(java.lang.String name, java.util.Set<java.lang.String> namespaces) {
            final int length = name.length();
            if (length == 0) {
                return "__EE__EMPTY__EE__";
            }
            final java.lang.StringBuilder result = new java.lang.StringBuilder();
            char ch = name.charAt(0);
            if ((com.sun.org.apache.xerces.internal.util.XMLChar.isNameStart(ch)) && (ch != ':')) {
                result.append(ch);
            }else {
                result.append("__").append(com.github.underscore.lodash.Base32.encode(java.lang.Character.toString(ch))).append("__");
            }
            for (int i = 1; i < length; ++i) {
                ch = name.charAt(i);
                if ((ch == ':') && (("xmlns".equals(name.substring(0, i))) || (namespaces.contains(name.substring(0, i))))) {
                    result.append(ch);
                }else
                    if ((com.sun.org.apache.xerces.internal.util.XMLChar.isName(ch)) && (ch != ':')) {
                        result.append(ch);
                    }else {
                        result.append("__").append(com.github.underscore.lodash.Base32.encode(java.lang.Character.toString(ch))).append("__");
                    }

            }
            return result.toString();
        }

        public static java.lang.String escape(java.lang.String s) {
            if (s == null) {
                return null;
            }
            java.lang.StringBuilder sb = new java.lang.StringBuilder();
            com.github.underscore.lodash.Xml.XmlValue.escape(s, sb);
            return sb.toString();
        }

        private static void escape(java.lang.String s, java.lang.StringBuilder sb) {
            final int len = s.length();
            for (int i = 0; i < len; i++) {
                char ch = s.charAt(i);
                switch (ch) {
                    case '"' :
                        sb.append("&quot;");
                        break;
                    case '\'' :
                        sb.append("'");
                        break;
                    case '&' :
                        sb.append("&amp;");
                        break;
                    case '<' :
                        sb.append("&lt;");
                        break;
                    case '>' :
                        sb.append("&gt;");
                        break;
                    case '\b' :
                        sb.append("\\b");
                        break;
                    case '\f' :
                        sb.append("\\f");
                        break;
                    case '\n' :
                        sb.append("\n");
                        break;
                    case '\r' :
                        sb.append("\\r");
                        break;
                    case '\t' :
                        sb.append("\t");
                        break;
                    default :
                        if (((ch <= '\u001f') || ((ch >= '\u007f') && (ch <= '\u009f'))) || ((ch >= '\u2000') && (ch <= '\u20ff'))) {
                            java.lang.String ss = java.lang.Integer.toHexString(ch);
                            sb.append("&#x");
                            for (int k = 0; k < (4 - (ss.length())); k++) {
                                sb.append('0');
                            }
                            sb.append(ss.toUpperCase()).append(";");
                        }else {
                            sb.append(ch);
                        }
                        break;
                }
            }
        }
    }

    public static java.lang.String toXml(java.util.Collection collection, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep) {
        final com.github.underscore.lodash.Xml.XmlStringBuilder builder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutRoot(identStep, com.github.underscore.lodash.Xml.UTF_8.name());
        builder.append("<root>").incIdent();
        if ((collection == null) || (!(collection.isEmpty()))) {
            builder.newLine();
        }
        com.github.underscore.lodash.Xml.XmlArray.writeXml(collection, null, builder, false, com.github.underscore.lodash.U.<java.lang.String>newLinkedHashSet());
        return builder.newLine().append("</root>").toString();
    }

    public static java.lang.String toXml(java.util.Collection collection) {
        return com.github.underscore.lodash.Xml.toXml(collection, com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TWO_SPACES);
    }

    public static java.lang.String toXml(java.util.Map map, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep) {
        final com.github.underscore.lodash.Xml.XmlStringBuilder builder;
        final java.util.Map localMap;
        if ((map != null) && (map.containsKey(com.github.underscore.lodash.Xml.ENCODING))) {
            builder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutRoot(identStep, java.lang.String.valueOf(map.get(com.github.underscore.lodash.Xml.ENCODING)));
            localMap = ((java.util.Map) (com.github.underscore.lodash.U.clone(map)));
            localMap.remove(com.github.underscore.lodash.Xml.ENCODING);
        }else {
            builder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutRoot(identStep, com.github.underscore.lodash.Xml.UTF_8.name());
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(61).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(61).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(61).collectInput("com.github.underscore.lodash.Xml.ENCODING",com.github.underscore.lodash.Xml.ENCODING);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(61).collectInput("com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident",com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(61).collectInput("com.github.underscore.lodash.Xml.NULL_ELEMENT",com.github.underscore.lodash.Xml.NULL_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(61).collectInput("com.github.underscore.lodash.Xml.ATTRS",com.github.underscore.lodash.Xml.ATTRS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(61).collectInput("identStep",identStep);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(61).collectInput("com.github.underscore.lodash.Xml.TEXT",com.github.underscore.lodash.Xml.TEXT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(61).collectInput("com.github.underscore.lodash.Xml.NULL",com.github.underscore.lodash.Xml.NULL);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(61).collectInput("com.github.underscore.lodash.Xml.ELEMENT_TEXT",com.github.underscore.lodash.Xml.ELEMENT_TEXT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(61).collectInput("com.github.underscore.lodash.Xml.CLOSED_ELEMENT",com.github.underscore.lodash.Xml.CLOSED_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(61).collectInput("com.github.underscore.lodash.Xml.UTF_8",com.github.underscore.lodash.Xml.UTF_8);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(61).collectInput("com.github.underscore.lodash.Xml.CDATA",com.github.underscore.lodash.Xml.CDATA);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(61).collectInput("com.github.underscore.lodash.Xml.COMMENT",com.github.underscore.lodash.Xml.COMMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(61).collectInput("com.github.underscore.lodash.Xml.EMPTY_ELEMENT",com.github.underscore.lodash.Xml.EMPTY_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(61).collectInput("com.github.underscore.lodash.Xml.ELEMENT",com.github.underscore.lodash.Xml.ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(61).collectInput("map",map);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(61).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(61).collectionEnds();
            }
            if (runtimeAngelicValue)
                localMap = map;

        }
        if ((((localMap == null) || ((localMap.size()) != 1)) || (java.lang.String.valueOf(((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getKey()).startsWith("-"))) || ((((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getValue()) instanceof java.util.List)) {
            final java.lang.String name;
            if ((((localMap != null) && ((localMap.size()) == 1)) && ((((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getValue()) instanceof java.util.List)) && (!(((java.util.List) (((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getValue())).isEmpty()))) {
                name = java.lang.String.valueOf(((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getKey());
            }else {
                name = "root";
            }
            com.github.underscore.lodash.Xml.XmlObject.writeXml(localMap, name, builder, false, com.github.underscore.lodash.U.<java.lang.String>newLinkedHashSet());
        }else {
            com.github.underscore.lodash.Xml.XmlObject.writeXml(localMap, null, builder, false, com.github.underscore.lodash.U.<java.lang.String>newLinkedHashSet());
        }
        return builder.toString();
    }

    public static java.lang.String toXml(java.util.Map map) {
        return com.github.underscore.lodash.Xml.toXml(map, com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TWO_SPACES);
    }

    @java.lang.SuppressWarnings("unchecked")
    private static java.lang.Object getValue(final java.lang.Object value) {
        if ((value instanceof java.util.Map) && ((((java.util.Map<java.lang.String, java.lang.Object>) (value)).entrySet().size()) == 1)) {
            final java.util.Map.Entry<java.lang.String, java.lang.Object> entry = ((java.util.Map<java.lang.String, java.lang.Object>) (value)).entrySet().iterator().next();
            if ((com.github.underscore.lodash.Xml.TEXT.equals(entry.getKey())) || (entry.getKey().equals(com.github.underscore.lodash.Xml.ELEMENT_TEXT))) {
                return entry.getValue();
            }
        }
        return value;
    }

    @java.lang.SuppressWarnings("unchecked")
    private static java.util.Map<java.lang.String, java.lang.Object> createMap(final org.w3c.dom.Node node, final com.github.underscore.Function<java.lang.Object, java.lang.Object> nodeMapper, java.util.Map<java.lang.String, java.lang.Object> attrMap, int[] uniqueIds, final com.github.underscore.Function<java.lang.Object, java.lang.Object> valueMapper, java.lang.String source, int[] sourceIndex) {
        final java.util.Map<java.lang.String, java.lang.Object> map = com.github.underscore.lodash.U.newLinkedHashMap();
        map.putAll(attrMap);
        final org.w3c.dom.NodeList nodeList = node.getChildNodes();
        for (int index = 0; index < (nodeList.getLength()); index++) {
            final org.w3c.dom.Node currentNode = nodeList.item(index);
            final java.lang.String name = currentNode.getNodeName();
            final java.lang.Object value;
            final int attributesLength = ((currentNode.getAttributes()) == null) ? 0 : currentNode.getAttributes().getLength();
            if ((currentNode.getNodeType()) == (org.w3c.dom.Node.ELEMENT_NODE)) {
                sourceIndex[0] = ((source.indexOf(("<" + name), sourceIndex[0])) + (name.length())) + 2;
                final java.util.Map<java.lang.String, java.lang.Object> attrMapLocal = com.github.underscore.lodash.U.newLinkedHashMap();
                if (attributesLength > 0) {
                    final java.util.regex.Matcher matcher = com.github.underscore.lodash.Xml.ATTRS.matcher(source.substring(sourceIndex[0], source.indexOf(">", sourceIndex[0])));
                    while (matcher.find()) {
                        com.github.underscore.lodash.Xml.addNodeValue(attrMapLocal, ('-' + (matcher.group(1))), matcher.group(2), nodeMapper, uniqueIds);
                    } 
                }
                value = com.github.underscore.lodash.Xml.createMap(currentNode, nodeMapper, attrMapLocal, uniqueIds, valueMapper, source, sourceIndex);
            }else {
                if (com.github.underscore.lodash.Xml.COMMENT.equals(name)) {
                    sourceIndex[0] = (source.indexOf("-->", sourceIndex[0])) + 3;
                }else
                    if (com.github.underscore.lodash.Xml.CDATA.equals(name)) {
                        sourceIndex[0] = (source.indexOf("]]>", sourceIndex[0])) + 3;
                    }

                value = currentNode.getTextContent();
            }
            if ((com.github.underscore.lodash.Xml.TEXT.equals(name)) && (valueMapper.apply(value).toString().isEmpty())) {
                continue;
            }
            com.github.underscore.lodash.Xml.addNodeValue(map, name, value, nodeMapper, uniqueIds);
        }
        return map;
    }

    @java.lang.SuppressWarnings("unchecked")
    private static void addNodeValue(final java.util.Map<java.lang.String, java.lang.Object> map, final java.lang.String name, final java.lang.Object value, final com.github.underscore.Function<java.lang.Object, java.lang.Object> nodeMapper, int[] uniqueIds) {
        if (map.containsKey(name)) {
            if (com.github.underscore.lodash.Xml.TEXT.equals(name)) {
                map.put((name + (uniqueIds[0])), nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
                uniqueIds[0] += 1;
            }else
                if (com.github.underscore.lodash.Xml.COMMENT.equals(name)) {
                    map.put((name + (uniqueIds[1])), nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
                    uniqueIds[1] += 1;
                }else
                    if (com.github.underscore.lodash.Xml.CDATA.equals(name)) {
                        map.put((name + (uniqueIds[2])), nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
                        uniqueIds[2] += 1;
                    }else {
                        final java.lang.Object object = map.get(name);
                        if (object instanceof java.util.List) {
                            com.github.underscore.lodash.Xml.addText(map, name, ((java.util.List<java.lang.Object>) (object)), value);
                        }else {
                            final java.util.List<java.lang.Object> objects = com.github.underscore.lodash.U.newArrayList();
                            objects.add(object);
                            com.github.underscore.lodash.Xml.addText(map, name, objects, value);
                            map.put(name, objects);
                        }
                    }


        }else {
            map.put(name, nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
        }
    }

    @java.lang.SuppressWarnings("unchecked")
    private static void addText(final java.util.Map<java.lang.String, java.lang.Object> map, final java.lang.String name, final java.util.List<java.lang.Object> objects, final java.lang.Object value) {
        int lastIndex = (map.size()) - 1;
        final int index = objects.size();
        while (true) {
            final java.util.Map.Entry lastElement = ((java.util.Map.Entry) (map.entrySet().toArray()[lastIndex]));
            if (name.equals(java.lang.String.valueOf(lastElement.getKey()))) {
                break;
            }
            final java.util.Map<java.lang.String, java.lang.Object> text = com.github.underscore.lodash.U.newLinkedHashMap();
            text.put(java.lang.String.valueOf(lastElement.getKey()), map.remove(lastElement.getKey()));
            objects.add(index, text);
            lastIndex -= 1;
        } 
        objects.add(com.github.underscore.lodash.Xml.getValue(value));
    }

    @java.lang.SuppressWarnings("unchecked")
    public static java.lang.Object fromXml(final java.lang.String xml, final com.github.underscore.Function<java.lang.Object, java.lang.Object> valueMapper) {
        if (xml == null) {
            return null;
        }
        try {
            org.w3c.dom.Document document = com.github.underscore.lodash.Xml.createDocument(xml);
            final java.lang.Object result = com.github.underscore.lodash.Xml.createMap(document, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
                public java.lang.Object apply(java.lang.Object object) {
                    return object;
                }
            }, java.util.Collections.<java.lang.String, java.lang.Object>emptyMap(), new int[]{ 1, 1, 1 }, valueMapper, xml, new int[]{ 0 });
            if (((document.getXmlEncoding()) != null) && (!("UTF-8".equalsIgnoreCase(document.getXmlEncoding())))) {
                ((java.util.Map) (result)).put(com.github.underscore.lodash.Xml.ENCODING, document.getXmlEncoding());
            }else
                if ((((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getKey().equals("root")) && (((((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getValue()) instanceof java.util.List) || ((((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getValue()) instanceof java.util.Map))) {
                    return ((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getValue();
                }

            return result;
        } catch (java.lang.Exception ex) {
            throw new java.lang.IllegalArgumentException(ex);
        }
    }

    public static java.lang.Object fromXml(final java.lang.String xml) {
        return com.github.underscore.lodash.Xml.fromXml(xml, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
            public java.lang.Object apply(java.lang.Object object) {
                return java.lang.String.valueOf(object).trim();
            }
        });
    }

    private static org.w3c.dom.Document createDocument(final java.lang.String xml) throws java.io.IOException, javax.xml.parsers.ParserConfigurationException, org.xml.sax.SAXException {
        final javax.xml.parsers.DocumentBuilderFactory factory = javax.xml.parsers.DocumentBuilderFactory.newInstance();
        factory.setNamespaceAware(true);
        factory.setFeature(javax.xml.XMLConstants.FEATURE_SECURE_PROCESSING, true);
        final javax.xml.parsers.DocumentBuilder builder = factory.newDocumentBuilder();
        builder.setErrorHandler(new org.xml.sax.helpers.DefaultHandler());
        return builder.parse(new org.xml.sax.InputSource(new java.io.StringReader(xml)));
    }

    public static java.lang.Object fromXmlMakeArrays(final java.lang.String xml) {
        try {
            org.w3c.dom.Document document = com.github.underscore.lodash.Xml.createDocument(xml);
            return com.github.underscore.lodash.Xml.createMap(document, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
                public java.lang.Object apply(java.lang.Object object) {
                    return object instanceof java.util.List ? object : com.github.underscore.lodash.U.newArrayList(java.util.Arrays.asList(object));
                }
            }, java.util.Collections.<java.lang.String, java.lang.Object>emptyMap(), new int[]{ 1, 1, 1 }, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
                public java.lang.Object apply(java.lang.Object object) {
                    return java.lang.String.valueOf(object).trim();
                }
            }, xml, new int[]{ 0 });
        } catch (java.lang.Exception ex) {
            throw new java.lang.IllegalArgumentException(ex);
        }
    }

    @java.lang.SuppressWarnings("unchecked")
    public static java.lang.String formatXml(java.lang.String xml, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep) {
        java.lang.Object result = com.github.underscore.lodash.Xml.fromXml(xml);
        if (result instanceof java.util.Map) {
            return com.github.underscore.lodash.Xml.toXml(((java.util.Map) (result)), identStep);
        }
        return com.github.underscore.lodash.Xml.toXml(((java.util.List) (result)), identStep);
    }

    public static java.lang.String formatXml(java.lang.String xml) {
        return com.github.underscore.lodash.Xml.formatXml(xml, com.github.underscore.lodash.Xml.XmlStringBuilder.Step.THREE_SPACES);
    }
}
16:26:54.165 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
16:26:54.165 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #70
16:26:54.165 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml:689 which is executed by 26 tests
88056
16:26:54.262 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:26:54.320 [pool-224-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (52 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:26:54.640 [pool-223-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Xml.java:590: warning: com.sun.org.apache.xerces.internal.util.XMLChar is internal proprietary API and may be removed in a future release
            if ((com.sun.org.apache.xerces.internal.util.XMLChar.isNameStart(ch)) && (ch != ':')) {
                                                        ^
Xml.java:600: warning: com.sun.org.apache.xerces.internal.util.XMLChar is internal proprietary API and may be removed in a future release
                    if ((com.sun.org.apache.xerces.internal.util.XMLChar.isName(ch)) && (ch != ':')) {
                                                                ^
Xml.java:702: error: non-static variable ident cannot be referenced from a static context
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident",com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                              ^
16:26:54.767 [pool-223-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public final class Xml {
    private static final java.lang.String NULL = "null";

    private static final java.lang.String ELEMENT_TEXT = "element";

    private static final java.lang.String CDATA = "#cdata-section";

    private static final java.lang.String COMMENT = "#comment";

    private static final java.lang.String ENCODING = "#encoding";

    private static final java.lang.String TEXT = "#text";

    private static final java.lang.String ELEMENT = ("<" + (com.github.underscore.lodash.Xml.ELEMENT_TEXT)) + ">";

    private static final java.lang.String CLOSED_ELEMENT = ("</" + (com.github.underscore.lodash.Xml.ELEMENT_TEXT)) + ">";

    private static final java.lang.String EMPTY_ELEMENT = (com.github.underscore.lodash.Xml.ELEMENT) + (com.github.underscore.lodash.Xml.CLOSED_ELEMENT);

    private static final java.lang.String NULL_ELEMENT = ((com.github.underscore.lodash.Xml.ELEMENT) + (com.github.underscore.lodash.Xml.NULL)) + (com.github.underscore.lodash.Xml.CLOSED_ELEMENT);

    private static final java.nio.charset.Charset UTF_8 = java.nio.charset.Charset.forName("UTF-8");

    private static final java.util.regex.Pattern ATTRS = java.util.regex.Pattern.compile(("((?:(?!\\s|=).)*)\\s*?=\\s*?[\"\']?((?:(?<=\")(?:(?<=\\\\)\"|[^\"])*|(?<=\')" + "(?:(?<=\\\\)\'|[^\'])*)|(?:(?!\"|\')(?:(?!\\/>|>|\\s).)+))"));

    public static class XmlStringBuilder {
        public enum Step {

            TWO_SPACES(2),
            THREE_SPACES(3),
            FOUR_SPACES(4),
            COMPACT(0),
            TABS(1);
            private int ident;

            Step(int ident) {
                this.ident = ident;
            }

            public int getIdent() {
                return ident;
            }
        }

        protected final java.lang.StringBuilder builder;

        private final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep;

        private int ident;

        public XmlStringBuilder() {
            builder = new java.lang.StringBuilder("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<root>\n");
            identStep = com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TWO_SPACES;
            ident = 2;
        }

        public XmlStringBuilder(java.lang.StringBuilder builder, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident) {
            this.builder = builder;
            this.identStep = identStep;
            this.ident = ident;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder append(final java.lang.String string) {
            builder.append(string);
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder fillSpaces() {
            for (int index = 0; index < (ident); index += 1) {
                builder.append(((identStep) == (com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TABS) ? '\t' : ' '));
            }
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder incIdent() {
            ident += identStep.getIdent();
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder decIdent() {
            ident -= identStep.getIdent();
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder newLine() {
            if ((identStep) != (com.github.underscore.lodash.Xml.XmlStringBuilder.Step.COMPACT)) {
                builder.append("\n");
            }
            return this;
        }

        public int getIdent() {
            return ident;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder.Step getIdentStep() {
            return identStep;
        }

        public java.lang.String toString() {
            return (builder.toString()) + "\n</root>";
        }
    }

    public static class XmlStringBuilderWithoutRoot extends com.github.underscore.lodash.Xml.XmlStringBuilder {
        public XmlStringBuilderWithoutRoot(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, java.lang.String encoding) {
            super(new java.lang.StringBuilder(((("<?xml version=\"1.0\" encoding=\"" + (com.github.underscore.lodash.U.escape(encoding))) + "\"?>") + (identStep == (com.github.underscore.lodash.Xml.XmlStringBuilder.Step.COMPACT) ? "" : "\n"))), identStep, 0);
        }

        public java.lang.String toString() {
            return builder.toString();
        }
    }

    public static class XmlStringBuilderWithoutHeader extends com.github.underscore.lodash.Xml.XmlStringBuilder {
        public XmlStringBuilderWithoutHeader(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident) {
            super(new java.lang.StringBuilder(), identStep, ident);
        }

        public java.lang.String toString() {
            return builder.toString();
        }
    }

    public static class XmlStringBuilderText extends com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader {
        public XmlStringBuilderText(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident) {
            super(identStep, ident);
        }
    }

    public static class XmlArray {
        public static void writeXml(java.util.Collection collection, java.lang.String name, com.github.underscore.lodash.Xml.XmlStringBuilder builder, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (collection == null) {
                builder.append(com.github.underscore.lodash.Xml.NULL);
                return;
            }
            if (name != null) {
                builder.fillSpaces().append("<").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(">").incIdent();
                if (!(collection.isEmpty())) {
                    builder.newLine();
                }
            }
            com.github.underscore.lodash.Xml.XmlArray.writeXml(collection, builder, name, parentTextFound, namespaces);
            if (name != null) {
                builder.decIdent().newLine().fillSpaces().append("</").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(">");
            }
        }

        @java.lang.SuppressWarnings("unchecked")
        private static void writeXml(java.util.Collection collection, com.github.underscore.lodash.Xml.XmlStringBuilder builder, java.lang.String name, final boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            boolean localParentTextFound = parentTextFound;
            final java.util.List entries = com.github.underscore.lodash.U.newArrayList(collection);
            for (int index = 0; index < (entries.size()); index += 1) {
                final java.lang.Object value = entries.get(index);
                final boolean addNewLine = (index < ((entries.size()) - 1)) && (!(java.lang.String.valueOf(entries.get((index + 1))).startsWith(("{" + (com.github.underscore.lodash.Xml.TEXT)))));
                if (value == null) {
                    builder.fillSpaces().append((((((("<" + (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">") + (com.github.underscore.lodash.Xml.NULL)) + "</") + (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">"));
                }else {
                    if ((value instanceof java.util.Map) && ((((java.util.Map) (value)).size()) == 1)) {
                        com.github.underscore.lodash.Xml.XmlObject.writeXml(((java.util.Map) (value)), null, builder, localParentTextFound, namespaces);
                        if (java.lang.String.valueOf(((java.util.Map.Entry) (((java.util.Map) (value)).entrySet().iterator().next())).getKey()).startsWith(com.github.underscore.lodash.Xml.TEXT)) {
                            localParentTextFound = true;
                            continue;
                        }
                    }else {
                        com.github.underscore.lodash.Xml.XmlValue.writeXml(value, (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : name), builder, localParentTextFound, namespaces);
                    }
                    localParentTextFound = false;
                }
                if (addNewLine) {
                    builder.newLine();
                }
            }
        }

        public static void writeXml(byte[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(short[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(int[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(long[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(float[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(double[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(boolean[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(char[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(java.lang.Object[] array, java.lang.String name, com.github.underscore.lodash.Xml.XmlStringBuilder builder, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        com.github.underscore.lodash.Xml.XmlValue.writeXml(array[i], (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : name), builder, parentTextFound, namespaces);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }
    }

    public static class XmlObject {
        @java.lang.SuppressWarnings("unchecked")
        public static void writeXml(java.util.Map map, java.lang.String name, final com.github.underscore.lodash.Xml.XmlStringBuilder builder, final boolean parentTextFound, final java.util.Set<java.lang.String> namespaces) {
            if (map == null) {
                com.github.underscore.lodash.Xml.XmlValue.writeXml(com.github.underscore.lodash.Xml.NULL, name, builder, false, namespaces);
                return;
            }
            final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems = com.github.underscore.lodash.U.newArrayList();
            final java.util.List<java.lang.String> attrs = com.github.underscore.lodash.U.newArrayList();
            final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep = builder.getIdentStep();
            final int ident = (builder.getIdent()) + (name == null ? 0 : builder.getIdentStep().getIdent());
            final java.util.List<java.util.Map.Entry> entries = com.github.underscore.lodash.U.newArrayList(map.entrySet());
            for (int index = 0; index < (entries.size()); index += 1) {
                final java.util.Map.Entry entry = entries.get(index);
                final boolean addNewLine = (index < ((entries.size()) - 1)) && (!(java.lang.String.valueOf(entries.get((index + 1)).getKey()).startsWith(com.github.underscore.lodash.Xml.TEXT)));
                if (((java.lang.String.valueOf(entry.getKey()).startsWith("-")) && (!((entry.getValue()) instanceof java.util.Map))) && (!((entry.getValue()) instanceof java.util.List))) {
                    attrs.add(((((" " + (com.github.underscore.lodash.Xml.XmlValue.escapeName(java.lang.String.valueOf(entry.getKey()).substring(1), namespaces))) + "=\"") + (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getValue())))) + "\""));
                    if (java.lang.String.valueOf(entry.getKey()).startsWith("-xmlns:")) {
                        namespaces.add(java.lang.String.valueOf(entry.getKey()).substring(7));
                    }
                }else
                    if (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getKey())).startsWith(com.github.underscore.lodash.Xml.TEXT)) {
                        com.github.underscore.lodash.Xml.XmlObject.addText(entry, elems, identStep, ident);
                    }else {
                        com.github.underscore.lodash.Xml.XmlObject.processElements(entry, identStep, ident, addNewLine, elems, namespaces);
                    }

            }
            if (name != null) {
                if (!parentTextFound) {
                    builder.fillSpaces();
                }
                builder.append("<").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(com.github.underscore.lodash.U.join(attrs, "")).append(">").incIdent();
                if ((!(elems.isEmpty())) && (!((elems.get(0)) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText))) {
                    builder.newLine();
                }
            }
            for (com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder1 : elems) {
                builder.append(localBuilder1.toString());
            }
            if (name != null) {
                builder.decIdent();
                if ((!(elems.isEmpty())) && (!((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText))) {
                    builder.newLine().fillSpaces();
                }
                builder.append("</").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(">");
            }
        }

        private static void processElements(final java.util.Map.Entry entry, final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident, final boolean addNewLine, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final java.util.Set<java.lang.String> namespaces) {
            if (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getKey())).startsWith(com.github.underscore.lodash.Xml.COMMENT)) {
                com.github.underscore.lodash.Xml.XmlObject.addComment(entry, identStep, ident, addNewLine, elems, "<!--", "-->");
            }else
                if (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getKey())).startsWith(com.github.underscore.lodash.Xml.CDATA)) {
                    com.github.underscore.lodash.Xml.XmlObject.addComment(entry, identStep, ident, addNewLine, elems, "<![CDATA[", "]]>");
                }else
                    if (((entry.getValue()) instanceof java.util.List) && (!(((java.util.List) (entry.getValue())).isEmpty()))) {
                        com.github.underscore.lodash.Xml.XmlObject.addElements(identStep, ident, entry, namespaces, elems, addNewLine);
                    }else {
                        com.github.underscore.lodash.Xml.XmlObject.addElement(identStep, ident, entry, namespaces, elems, addNewLine);
                    }


        }

        private static void addText(final java.util.Map.Entry entry, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident) {
            if ((entry.getValue()) instanceof java.util.List) {
                for (java.lang.Object value : ((java.util.List) (entry.getValue()))) {
                    elems.add(new com.github.underscore.lodash.Xml.XmlStringBuilderText(identStep, ident).append(com.github.underscore.lodash.U.escape(java.lang.String.valueOf(value))));
                }
            }else {
                elems.add(new com.github.underscore.lodash.Xml.XmlStringBuilderText(identStep, ident).append(com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getValue()))));
            }
        }

        private static void addElements(final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident, java.util.Map.Entry entry, java.util.Set<java.lang.String> namespaces, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final boolean addNewLine) {
            boolean parentTextFound = (!(elems.isEmpty())) && ((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText);
            final com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder;
            if ((java.lang.String.valueOf(((java.util.List) (entry.getValue())).get(0)).startsWith(("{" + (com.github.underscore.lodash.Xml.TEXT)))) || (java.lang.String.valueOf(((java.util.List) (entry.getValue())).get(((((java.util.List) (entry.getValue())).size()) - 1))).startsWith(("{" + (com.github.underscore.lodash.Xml.TEXT))))) {
                localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderText(identStep, ident);
            }else {
                localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader(identStep, ident);
            }
            com.github.underscore.lodash.Xml.XmlArray.writeXml(((java.util.List) (entry.getValue())), localBuilder, java.lang.String.valueOf(entry.getKey()), parentTextFound, namespaces);
            if (addNewLine) {
                localBuilder.newLine();
            }
            elems.add(localBuilder);
        }

        private static void addElement(final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident, java.util.Map.Entry entry, java.util.Set<java.lang.String> namespaces, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final boolean addNewLine) {
            boolean parentTextFound = (!(elems.isEmpty())) && ((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText);
            com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader(identStep, ident);
            com.github.underscore.lodash.Xml.XmlValue.writeXml(entry.getValue(), java.lang.String.valueOf(entry.getKey()), localBuilder, parentTextFound, namespaces);
            if (addNewLine) {
                localBuilder.newLine();
            }
            elems.add(localBuilder);
        }

        private static void addComment(java.util.Map.Entry entry, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident, boolean addNewLine, java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, java.lang.String openElement, java.lang.String closeElement) {
            if ((entry.getValue()) instanceof java.util.List) {
                for (java.util.Iterator iterator = ((java.util.List) (entry.getValue())).iterator(); iterator.hasNext();) {
                    com.github.underscore.lodash.Xml.XmlObject.addCommentValue(identStep, ident, java.lang.String.valueOf(iterator.next()), ((iterator.hasNext()) || addNewLine), elems, openElement, closeElement);
                }
            }else {
                com.github.underscore.lodash.Xml.XmlObject.addCommentValue(identStep, ident, java.lang.String.valueOf(entry.getValue()), addNewLine, elems, openElement, closeElement);
            }
        }

        private static void addCommentValue(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident, java.lang.String value, boolean addNewLine, java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, java.lang.String openElement, java.lang.String closeElement) {
            boolean parentTextFound = (!(elems.isEmpty())) && ((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText);
            com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader(identStep, ident);
            if (!parentTextFound) {
                localBuilder.fillSpaces();
            }
            localBuilder.append(openElement).append(value).append(closeElement);
            if (addNewLine) {
                localBuilder.newLine();
            }
            elems.add(localBuilder);
        }
    }

    public static class XmlValue {
        public static void writeXml(java.lang.Object value, java.lang.String name, com.github.underscore.lodash.Xml.XmlStringBuilder builder, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (value instanceof java.util.Map) {
                com.github.underscore.lodash.Xml.XmlObject.writeXml(((java.util.Map) (value)), name, builder, parentTextFound, namespaces);
                return;
            }
            if (value instanceof java.util.Collection) {
                com.github.underscore.lodash.Xml.XmlArray.writeXml(((java.util.Collection) (value)), name, builder, parentTextFound, namespaces);
                return;
            }
            if (!parentTextFound) {
                builder.fillSpaces();
            }
            builder.append((("<" + (com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">"));
            if (value == null) {
                builder.append(com.github.underscore.lodash.Xml.NULL);
            }else
                if (value instanceof java.lang.String) {
                    builder.append(com.github.underscore.lodash.Xml.XmlValue.escape(((java.lang.String) (value))));
                }else {
                    com.github.underscore.lodash.Xml.XmlValue.processArrays(value, builder, name, parentTextFound, namespaces);
                }

            builder.append((("</" + (com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">"));
        }

        private static void processArrays(java.lang.Object value, com.github.underscore.lodash.Xml.XmlStringBuilder builder, java.lang.String name, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (value instanceof java.lang.Double) {
                if ((((java.lang.Double) (value)).isInfinite()) || (((java.lang.Double) (value)).isNaN())) {
                    builder.append(com.github.underscore.lodash.Xml.NULL);
                }else {
                    builder.append(value.toString());
                }
            }else
                if (value instanceof java.lang.Float) {
                    if ((((java.lang.Float) (value)).isInfinite()) || (((java.lang.Float) (value)).isNaN())) {
                        builder.append(com.github.underscore.lodash.Xml.NULL);
                    }else {
                        builder.append(value.toString());
                    }
                }else
                    if (value instanceof java.lang.Number) {
                        builder.append(value.toString());
                    }else
                        if (value instanceof java.lang.Boolean) {
                            builder.append(value.toString());
                        }else
                            if (value instanceof byte[]) {
                                builder.newLine().incIdent();
                                com.github.underscore.lodash.Xml.XmlArray.writeXml(((byte[]) (value)), builder);
                                builder.decIdent().newLine().fillSpaces();
                            }else
                                if (value instanceof short[]) {
                                    builder.newLine().incIdent();
                                    com.github.underscore.lodash.Xml.XmlArray.writeXml(((short[]) (value)), builder);
                                    builder.decIdent().newLine().fillSpaces();
                                }else {
                                    com.github.underscore.lodash.Xml.XmlValue.processArrays2(value, builder, name, parentTextFound, namespaces);
                                }





        }

        private static void processArrays2(java.lang.Object value, com.github.underscore.lodash.Xml.XmlStringBuilder builder, java.lang.String name, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (value instanceof int[]) {
                builder.newLine().incIdent();
                com.github.underscore.lodash.Xml.XmlArray.writeXml(((int[]) (value)), builder);
                builder.decIdent().newLine().fillSpaces();
            }else
                if (value instanceof long[]) {
                    builder.newLine().incIdent();
                    com.github.underscore.lodash.Xml.XmlArray.writeXml(((long[]) (value)), builder);
                    builder.decIdent().newLine().fillSpaces();
                }else
                    if (value instanceof float[]) {
                        builder.newLine().incIdent();
                        com.github.underscore.lodash.Xml.XmlArray.writeXml(((float[]) (value)), builder);
                        builder.decIdent().newLine().fillSpaces();
                    }else
                        if (value instanceof double[]) {
                            builder.newLine().incIdent();
                            com.github.underscore.lodash.Xml.XmlArray.writeXml(((double[]) (value)), builder);
                            builder.decIdent().newLine().fillSpaces();
                        }else
                            if (value instanceof boolean[]) {
                                builder.newLine().incIdent();
                                com.github.underscore.lodash.Xml.XmlArray.writeXml(((boolean[]) (value)), builder);
                                builder.decIdent().newLine().fillSpaces();
                            }else
                                if (value instanceof char[]) {
                                    builder.newLine().incIdent();
                                    com.github.underscore.lodash.Xml.XmlArray.writeXml(((char[]) (value)), builder);
                                    builder.decIdent().newLine().fillSpaces();
                                }else
                                    if (value instanceof java.lang.Object[]) {
                                        builder.newLine().incIdent();
                                        com.github.underscore.lodash.Xml.XmlArray.writeXml(((java.lang.Object[]) (value)), name, builder, parentTextFound, namespaces);
                                        builder.decIdent().newLine().fillSpaces();
                                    }else {
                                        builder.append(value.toString());
                                    }






        }

        public static java.lang.String escapeName(java.lang.String name, java.util.Set<java.lang.String> namespaces) {
            final int length = name.length();
            if (length == 0) {
                return "__EE__EMPTY__EE__";
            }
            final java.lang.StringBuilder result = new java.lang.StringBuilder();
            char ch = name.charAt(0);
            if ((com.sun.org.apache.xerces.internal.util.XMLChar.isNameStart(ch)) && (ch != ':')) {
                result.append(ch);
            }else {
                result.append("__").append(com.github.underscore.lodash.Base32.encode(java.lang.Character.toString(ch))).append("__");
            }
            for (int i = 1; i < length; ++i) {
                ch = name.charAt(i);
                if ((ch == ':') && (("xmlns".equals(name.substring(0, i))) || (namespaces.contains(name.substring(0, i))))) {
                    result.append(ch);
                }else
                    if ((com.sun.org.apache.xerces.internal.util.XMLChar.isName(ch)) && (ch != ':')) {
                        result.append(ch);
                    }else {
                        result.append("__").append(com.github.underscore.lodash.Base32.encode(java.lang.Character.toString(ch))).append("__");
                    }

            }
            return result.toString();
        }

        public static java.lang.String escape(java.lang.String s) {
            if (s == null) {
                return null;
            }
            java.lang.StringBuilder sb = new java.lang.StringBuilder();
            com.github.underscore.lodash.Xml.XmlValue.escape(s, sb);
            return sb.toString();
        }

        private static void escape(java.lang.String s, java.lang.StringBuilder sb) {
            final int len = s.length();
            for (int i = 0; i < len; i++) {
                char ch = s.charAt(i);
                switch (ch) {
                    case '"' :
                        sb.append("&quot;");
                        break;
                    case '\'' :
                        sb.append("'");
                        break;
                    case '&' :
                        sb.append("&amp;");
                        break;
                    case '<' :
                        sb.append("&lt;");
                        break;
                    case '>' :
                        sb.append("&gt;");
                        break;
                    case '\b' :
                        sb.append("\\b");
                        break;
                    case '\f' :
                        sb.append("\\f");
                        break;
                    case '\n' :
                        sb.append("\n");
                        break;
                    case '\r' :
                        sb.append("\\r");
                        break;
                    case '\t' :
                        sb.append("\t");
                        break;
                    default :
                        if (((ch <= '\u001f') || ((ch >= '\u007f') && (ch <= '\u009f'))) || ((ch >= '\u2000') && (ch <= '\u20ff'))) {
                            java.lang.String ss = java.lang.Integer.toHexString(ch);
                            sb.append("&#x");
                            for (int k = 0; k < (4 - (ss.length())); k++) {
                                sb.append('0');
                            }
                            sb.append(ss.toUpperCase()).append(";");
                        }else {
                            sb.append(ch);
                        }
                        break;
                }
            }
        }
    }

    public static java.lang.String toXml(java.util.Collection collection, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep) {
        final com.github.underscore.lodash.Xml.XmlStringBuilder builder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutRoot(identStep, com.github.underscore.lodash.Xml.UTF_8.name());
        builder.append("<root>").incIdent();
        if ((collection == null) || (!(collection.isEmpty()))) {
            builder.newLine();
        }
        com.github.underscore.lodash.Xml.XmlArray.writeXml(collection, null, builder, false, com.github.underscore.lodash.U.<java.lang.String>newLinkedHashSet());
        return builder.newLine().append("</root>").toString();
    }

    public static java.lang.String toXml(java.util.Collection collection) {
        return com.github.underscore.lodash.Xml.toXml(collection, com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TWO_SPACES);
    }

    public static java.lang.String toXml(java.util.Map map, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep) {
        final com.github.underscore.lodash.Xml.XmlStringBuilder builder;
        final java.util.Map localMap;
        if ((map != null) && (map.containsKey(com.github.underscore.lodash.Xml.ENCODING))) {
            builder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutRoot(identStep, java.lang.String.valueOf(map.get(com.github.underscore.lodash.Xml.ENCODING)));
            localMap = ((java.util.Map) (com.github.underscore.lodash.U.clone(map)));
            localMap.remove(com.github.underscore.lodash.Xml.ENCODING);
        }else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(62).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.github.underscore.lodash.Xml.ENCODING",com.github.underscore.lodash.Xml.ENCODING);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident",com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.github.underscore.lodash.Xml.NULL_ELEMENT",com.github.underscore.lodash.Xml.NULL_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.github.underscore.lodash.Xml.ATTRS",com.github.underscore.lodash.Xml.ATTRS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("identStep",identStep);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.github.underscore.lodash.Xml.TEXT",com.github.underscore.lodash.Xml.TEXT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.github.underscore.lodash.Xml.NULL",com.github.underscore.lodash.Xml.NULL);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.github.underscore.lodash.Xml.ELEMENT_TEXT",com.github.underscore.lodash.Xml.ELEMENT_TEXT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.github.underscore.lodash.Xml.CLOSED_ELEMENT",com.github.underscore.lodash.Xml.CLOSED_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.github.underscore.lodash.Xml.UTF_8",com.github.underscore.lodash.Xml.UTF_8);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.github.underscore.lodash.Xml.CDATA",com.github.underscore.lodash.Xml.CDATA);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.github.underscore.lodash.Xml.COMMENT",com.github.underscore.lodash.Xml.COMMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.github.underscore.lodash.Xml.EMPTY_ELEMENT",com.github.underscore.lodash.Xml.EMPTY_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.github.underscore.lodash.Xml.ELEMENT",com.github.underscore.lodash.Xml.ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("map",map);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectionEnds();
            }
            if (runtimeAngelicValue)
                builder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutRoot(identStep, com.github.underscore.lodash.Xml.UTF_8.name());

            localMap = map;
        }
        if ((((localMap == null) || ((localMap.size()) != 1)) || (java.lang.String.valueOf(((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getKey()).startsWith("-"))) || ((((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getValue()) instanceof java.util.List)) {
            final java.lang.String name;
            if ((((localMap != null) && ((localMap.size()) == 1)) && ((((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getValue()) instanceof java.util.List)) && (!(((java.util.List) (((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getValue())).isEmpty()))) {
                name = java.lang.String.valueOf(((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getKey());
            }else {
                name = "root";
            }
            com.github.underscore.lodash.Xml.XmlObject.writeXml(localMap, name, builder, false, com.github.underscore.lodash.U.<java.lang.String>newLinkedHashSet());
        }else {
            com.github.underscore.lodash.Xml.XmlObject.writeXml(localMap, null, builder, false, com.github.underscore.lodash.U.<java.lang.String>newLinkedHashSet());
        }
        return builder.toString();
    }

    public static java.lang.String toXml(java.util.Map map) {
        return com.github.underscore.lodash.Xml.toXml(map, com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TWO_SPACES);
    }

    @java.lang.SuppressWarnings("unchecked")
    private static java.lang.Object getValue(final java.lang.Object value) {
        if ((value instanceof java.util.Map) && ((((java.util.Map<java.lang.String, java.lang.Object>) (value)).entrySet().size()) == 1)) {
            final java.util.Map.Entry<java.lang.String, java.lang.Object> entry = ((java.util.Map<java.lang.String, java.lang.Object>) (value)).entrySet().iterator().next();
            if ((com.github.underscore.lodash.Xml.TEXT.equals(entry.getKey())) || (entry.getKey().equals(com.github.underscore.lodash.Xml.ELEMENT_TEXT))) {
                return entry.getValue();
            }
        }
        return value;
    }

    @java.lang.SuppressWarnings("unchecked")
    private static java.util.Map<java.lang.String, java.lang.Object> createMap(final org.w3c.dom.Node node, final com.github.underscore.Function<java.lang.Object, java.lang.Object> nodeMapper, java.util.Map<java.lang.String, java.lang.Object> attrMap, int[] uniqueIds, final com.github.underscore.Function<java.lang.Object, java.lang.Object> valueMapper, java.lang.String source, int[] sourceIndex) {
        final java.util.Map<java.lang.String, java.lang.Object> map = com.github.underscore.lodash.U.newLinkedHashMap();
        map.putAll(attrMap);
        final org.w3c.dom.NodeList nodeList = node.getChildNodes();
        for (int index = 0; index < (nodeList.getLength()); index++) {
            final org.w3c.dom.Node currentNode = nodeList.item(index);
            final java.lang.String name = currentNode.getNodeName();
            final java.lang.Object value;
            final int attributesLength = ((currentNode.getAttributes()) == null) ? 0 : currentNode.getAttributes().getLength();
            if ((currentNode.getNodeType()) == (org.w3c.dom.Node.ELEMENT_NODE)) {
                sourceIndex[0] = ((source.indexOf(("<" + name), sourceIndex[0])) + (name.length())) + 2;
                final java.util.Map<java.lang.String, java.lang.Object> attrMapLocal = com.github.underscore.lodash.U.newLinkedHashMap();
                if (attributesLength > 0) {
                    final java.util.regex.Matcher matcher = com.github.underscore.lodash.Xml.ATTRS.matcher(source.substring(sourceIndex[0], source.indexOf(">", sourceIndex[0])));
                    while (matcher.find()) {
                        com.github.underscore.lodash.Xml.addNodeValue(attrMapLocal, ('-' + (matcher.group(1))), matcher.group(2), nodeMapper, uniqueIds);
                    } 
                }
                value = com.github.underscore.lodash.Xml.createMap(currentNode, nodeMapper, attrMapLocal, uniqueIds, valueMapper, source, sourceIndex);
            }else {
                if (com.github.underscore.lodash.Xml.COMMENT.equals(name)) {
                    sourceIndex[0] = (source.indexOf("-->", sourceIndex[0])) + 3;
                }else
                    if (com.github.underscore.lodash.Xml.CDATA.equals(name)) {
                        sourceIndex[0] = (source.indexOf("]]>", sourceIndex[0])) + 3;
                    }

                value = currentNode.getTextContent();
            }
            if ((com.github.underscore.lodash.Xml.TEXT.equals(name)) && (valueMapper.apply(value).toString().isEmpty())) {
                continue;
            }
            com.github.underscore.lodash.Xml.addNodeValue(map, name, value, nodeMapper, uniqueIds);
        }
        return map;
    }

    @java.lang.SuppressWarnings("unchecked")
    private static void addNodeValue(final java.util.Map<java.lang.String, java.lang.Object> map, final java.lang.String name, final java.lang.Object value, final com.github.underscore.Function<java.lang.Object, java.lang.Object> nodeMapper, int[] uniqueIds) {
        if (map.containsKey(name)) {
            if (com.github.underscore.lodash.Xml.TEXT.equals(name)) {
                map.put((name + (uniqueIds[0])), nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
                uniqueIds[0] += 1;
            }else
                if (com.github.underscore.lodash.Xml.COMMENT.equals(name)) {
                    map.put((name + (uniqueIds[1])), nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
                    uniqueIds[1] += 1;
                }else
                    if (com.github.underscore.lodash.Xml.CDATA.equals(name)) {
                        map.put((name + (uniqueIds[2])), nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
                        uniqueIds[2] += 1;
                    }else {
                        final java.lang.Object object = map.get(name);
                        if (object instanceof java.util.List) {
                            com.github.underscore.lodash.Xml.addText(map, name, ((java.util.List<java.lang.Object>) (object)), value);
                        }else {
                            final java.util.List<java.lang.Object> objects = com.github.underscore.lodash.U.newArrayList();
                            objects.add(object);
                            com.github.underscore.lodash.Xml.addText(map, name, objects, value);
                            map.put(name, objects);
                        }
                    }


        }else {
            map.put(name, nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
        }
    }

    @java.lang.SuppressWarnings("unchecked")
    private static void addText(final java.util.Map<java.lang.String, java.lang.Object> map, final java.lang.String name, final java.util.List<java.lang.Object> objects, final java.lang.Object value) {
        int lastIndex = (map.size()) - 1;
        final int index = objects.size();
        while (true) {
            final java.util.Map.Entry lastElement = ((java.util.Map.Entry) (map.entrySet().toArray()[lastIndex]));
            if (name.equals(java.lang.String.valueOf(lastElement.getKey()))) {
                break;
            }
            final java.util.Map<java.lang.String, java.lang.Object> text = com.github.underscore.lodash.U.newLinkedHashMap();
            text.put(java.lang.String.valueOf(lastElement.getKey()), map.remove(lastElement.getKey()));
            objects.add(index, text);
            lastIndex -= 1;
        } 
        objects.add(com.github.underscore.lodash.Xml.getValue(value));
    }

    @java.lang.SuppressWarnings("unchecked")
    public static java.lang.Object fromXml(final java.lang.String xml, final com.github.underscore.Function<java.lang.Object, java.lang.Object> valueMapper) {
        if (xml == null) {
            return null;
        }
        try {
            org.w3c.dom.Document document = com.github.underscore.lodash.Xml.createDocument(xml);
            final java.lang.Object result = com.github.underscore.lodash.Xml.createMap(document, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
                public java.lang.Object apply(java.lang.Object object) {
                    return object;
                }
            }, java.util.Collections.<java.lang.String, java.lang.Object>emptyMap(), new int[]{ 1, 1, 1 }, valueMapper, xml, new int[]{ 0 });
            if (((document.getXmlEncoding()) != null) && (!("UTF-8".equalsIgnoreCase(document.getXmlEncoding())))) {
                ((java.util.Map) (result)).put(com.github.underscore.lodash.Xml.ENCODING, document.getXmlEncoding());
            }else
                if ((((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getKey().equals("root")) && (((((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getValue()) instanceof java.util.List) || ((((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getValue()) instanceof java.util.Map))) {
                    return ((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getValue();
                }

            return result;
        } catch (java.lang.Exception ex) {
            throw new java.lang.IllegalArgumentException(ex);
        }
    }

    public static java.lang.Object fromXml(final java.lang.String xml) {
        return com.github.underscore.lodash.Xml.fromXml(xml, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
            public java.lang.Object apply(java.lang.Object object) {
                return java.lang.String.valueOf(object).trim();
            }
        });
    }

    private static org.w3c.dom.Document createDocument(final java.lang.String xml) throws java.io.IOException, javax.xml.parsers.ParserConfigurationException, org.xml.sax.SAXException {
        final javax.xml.parsers.DocumentBuilderFactory factory = javax.xml.parsers.DocumentBuilderFactory.newInstance();
        factory.setNamespaceAware(true);
        factory.setFeature(javax.xml.XMLConstants.FEATURE_SECURE_PROCESSING, true);
        final javax.xml.parsers.DocumentBuilder builder = factory.newDocumentBuilder();
        builder.setErrorHandler(new org.xml.sax.helpers.DefaultHandler());
        return builder.parse(new org.xml.sax.InputSource(new java.io.StringReader(xml)));
    }

    public static java.lang.Object fromXmlMakeArrays(final java.lang.String xml) {
        try {
            org.w3c.dom.Document document = com.github.underscore.lodash.Xml.createDocument(xml);
            return com.github.underscore.lodash.Xml.createMap(document, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
                public java.lang.Object apply(java.lang.Object object) {
                    return object instanceof java.util.List ? object : com.github.underscore.lodash.U.newArrayList(java.util.Arrays.asList(object));
                }
            }, java.util.Collections.<java.lang.String, java.lang.Object>emptyMap(), new int[]{ 1, 1, 1 }, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
                public java.lang.Object apply(java.lang.Object object) {
                    return java.lang.String.valueOf(object).trim();
                }
            }, xml, new int[]{ 0 });
        } catch (java.lang.Exception ex) {
            throw new java.lang.IllegalArgumentException(ex);
        }
    }

    @java.lang.SuppressWarnings("unchecked")
    public static java.lang.String formatXml(java.lang.String xml, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep) {
        java.lang.Object result = com.github.underscore.lodash.Xml.fromXml(xml);
        if (result instanceof java.util.Map) {
            return com.github.underscore.lodash.Xml.toXml(((java.util.Map) (result)), identStep);
        }
        return com.github.underscore.lodash.Xml.toXml(((java.util.List) (result)), identStep);
    }

    public static java.lang.String formatXml(java.lang.String xml) {
        return com.github.underscore.lodash.Xml.formatXml(xml, com.github.underscore.lodash.Xml.XmlStringBuilder.Step.THREE_SPACES);
    }
}
16:26:54.768 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
16:26:54.768 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #71
16:26:54.768 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlObject:415 which is executed by 27 tests
88056
16:26:54.863 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #72
16:26:54.863 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlObject:410 which is executed by 27 tests
88056
16:26:54.959 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:26:55.016 [pool-226-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (51 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:26:55.328 [pool-225-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Xml.java:412: error: non-static variable ident cannot be referenced from a static context
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident",com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                                      ^
Xml.java:620: warning: com.sun.org.apache.xerces.internal.util.XMLChar is internal proprietary API and may be removed in a future release
            if ((com.sun.org.apache.xerces.internal.util.XMLChar.isNameStart(ch)) && (ch != ':')) {
                                                        ^
Xml.java:630: warning: com.sun.org.apache.xerces.internal.util.XMLChar is internal proprietary API and may be removed in a future release
                    if ((com.sun.org.apache.xerces.internal.util.XMLChar.isName(ch)) && (ch != ':')) {
                                                                ^
16:26:55.450 [pool-225-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public final class Xml {
    private static final java.lang.String NULL = "null";

    private static final java.lang.String ELEMENT_TEXT = "element";

    private static final java.lang.String CDATA = "#cdata-section";

    private static final java.lang.String COMMENT = "#comment";

    private static final java.lang.String ENCODING = "#encoding";

    private static final java.lang.String TEXT = "#text";

    private static final java.lang.String ELEMENT = ("<" + (com.github.underscore.lodash.Xml.ELEMENT_TEXT)) + ">";

    private static final java.lang.String CLOSED_ELEMENT = ("</" + (com.github.underscore.lodash.Xml.ELEMENT_TEXT)) + ">";

    private static final java.lang.String EMPTY_ELEMENT = (com.github.underscore.lodash.Xml.ELEMENT) + (com.github.underscore.lodash.Xml.CLOSED_ELEMENT);

    private static final java.lang.String NULL_ELEMENT = ((com.github.underscore.lodash.Xml.ELEMENT) + (com.github.underscore.lodash.Xml.NULL)) + (com.github.underscore.lodash.Xml.CLOSED_ELEMENT);

    private static final java.nio.charset.Charset UTF_8 = java.nio.charset.Charset.forName("UTF-8");

    private static final java.util.regex.Pattern ATTRS = java.util.regex.Pattern.compile(("((?:(?!\\s|=).)*)\\s*?=\\s*?[\"\']?((?:(?<=\")(?:(?<=\\\\)\"|[^\"])*|(?<=\')" + "(?:(?<=\\\\)\'|[^\'])*)|(?:(?!\"|\')(?:(?!\\/>|>|\\s).)+))"));

    public static class XmlStringBuilder {
        public enum Step {

            TWO_SPACES(2),
            THREE_SPACES(3),
            FOUR_SPACES(4),
            COMPACT(0),
            TABS(1);
            private int ident;

            Step(int ident) {
                this.ident = ident;
            }

            public int getIdent() {
                return ident;
            }
        }

        protected final java.lang.StringBuilder builder;

        private final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep;

        private int ident;

        public XmlStringBuilder() {
            builder = new java.lang.StringBuilder("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<root>\n");
            identStep = com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TWO_SPACES;
            ident = 2;
        }

        public XmlStringBuilder(java.lang.StringBuilder builder, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident) {
            this.builder = builder;
            this.identStep = identStep;
            this.ident = ident;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder append(final java.lang.String string) {
            builder.append(string);
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder fillSpaces() {
            for (int index = 0; index < (ident); index += 1) {
                builder.append(((identStep) == (com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TABS) ? '\t' : ' '));
            }
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder incIdent() {
            ident += identStep.getIdent();
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder decIdent() {
            ident -= identStep.getIdent();
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder newLine() {
            if ((identStep) != (com.github.underscore.lodash.Xml.XmlStringBuilder.Step.COMPACT)) {
                builder.append("\n");
            }
            return this;
        }

        public int getIdent() {
            return ident;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder.Step getIdentStep() {
            return identStep;
        }

        public java.lang.String toString() {
            return (builder.toString()) + "\n</root>";
        }
    }

    public static class XmlStringBuilderWithoutRoot extends com.github.underscore.lodash.Xml.XmlStringBuilder {
        public XmlStringBuilderWithoutRoot(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, java.lang.String encoding) {
            super(new java.lang.StringBuilder(((("<?xml version=\"1.0\" encoding=\"" + (com.github.underscore.lodash.U.escape(encoding))) + "\"?>") + (identStep == (com.github.underscore.lodash.Xml.XmlStringBuilder.Step.COMPACT) ? "" : "\n"))), identStep, 0);
        }

        public java.lang.String toString() {
            return builder.toString();
        }
    }

    public static class XmlStringBuilderWithoutHeader extends com.github.underscore.lodash.Xml.XmlStringBuilder {
        public XmlStringBuilderWithoutHeader(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident) {
            super(new java.lang.StringBuilder(), identStep, ident);
        }

        public java.lang.String toString() {
            return builder.toString();
        }
    }

    public static class XmlStringBuilderText extends com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader {
        public XmlStringBuilderText(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident) {
            super(identStep, ident);
        }
    }

    public static class XmlArray {
        public static void writeXml(java.util.Collection collection, java.lang.String name, com.github.underscore.lodash.Xml.XmlStringBuilder builder, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (collection == null) {
                builder.append(com.github.underscore.lodash.Xml.NULL);
                return;
            }
            if (name != null) {
                builder.fillSpaces().append("<").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(">").incIdent();
                if (!(collection.isEmpty())) {
                    builder.newLine();
                }
            }
            com.github.underscore.lodash.Xml.XmlArray.writeXml(collection, builder, name, parentTextFound, namespaces);
            if (name != null) {
                builder.decIdent().newLine().fillSpaces().append("</").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(">");
            }
        }

        @java.lang.SuppressWarnings("unchecked")
        private static void writeXml(java.util.Collection collection, com.github.underscore.lodash.Xml.XmlStringBuilder builder, java.lang.String name, final boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            boolean localParentTextFound = parentTextFound;
            final java.util.List entries = com.github.underscore.lodash.U.newArrayList(collection);
            for (int index = 0; index < (entries.size()); index += 1) {
                final java.lang.Object value = entries.get(index);
                final boolean addNewLine = (index < ((entries.size()) - 1)) && (!(java.lang.String.valueOf(entries.get((index + 1))).startsWith(("{" + (com.github.underscore.lodash.Xml.TEXT)))));
                if (value == null) {
                    builder.fillSpaces().append((((((("<" + (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">") + (com.github.underscore.lodash.Xml.NULL)) + "</") + (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">"));
                }else {
                    if ((value instanceof java.util.Map) && ((((java.util.Map) (value)).size()) == 1)) {
                        com.github.underscore.lodash.Xml.XmlObject.writeXml(((java.util.Map) (value)), null, builder, localParentTextFound, namespaces);
                        if (java.lang.String.valueOf(((java.util.Map.Entry) (((java.util.Map) (value)).entrySet().iterator().next())).getKey()).startsWith(com.github.underscore.lodash.Xml.TEXT)) {
                            localParentTextFound = true;
                            continue;
                        }
                    }else {
                        com.github.underscore.lodash.Xml.XmlValue.writeXml(value, (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : name), builder, localParentTextFound, namespaces);
                    }
                    localParentTextFound = false;
                }
                if (addNewLine) {
                    builder.newLine();
                }
            }
        }

        public static void writeXml(byte[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(short[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(int[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(long[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(float[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(double[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(boolean[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(char[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(java.lang.Object[] array, java.lang.String name, com.github.underscore.lodash.Xml.XmlStringBuilder builder, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        com.github.underscore.lodash.Xml.XmlValue.writeXml(array[i], (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : name), builder, parentTextFound, namespaces);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }
    }

    public static class XmlObject {
        @java.lang.SuppressWarnings("unchecked")
        public static void writeXml(java.util.Map map, java.lang.String name, final com.github.underscore.lodash.Xml.XmlStringBuilder builder, final boolean parentTextFound, final java.util.Set<java.lang.String> namespaces) {
            if (map == null) {
                com.github.underscore.lodash.Xml.XmlValue.writeXml(com.github.underscore.lodash.Xml.NULL, name, builder, false, namespaces);
                return;
            }
            final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems = com.github.underscore.lodash.U.newArrayList();
            final java.util.List<java.lang.String> attrs = com.github.underscore.lodash.U.newArrayList();
            final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep = builder.getIdentStep();
            final int ident = (builder.getIdent()) + (name == null ? 0 : builder.getIdentStep().getIdent());
            final java.util.List<java.util.Map.Entry> entries = com.github.underscore.lodash.U.newArrayList(map.entrySet());
            for (int index = 0; index < (entries.size()); index += 1) {
                final java.util.Map.Entry entry = entries.get(index);
                final boolean addNewLine = (index < ((entries.size()) - 1)) && (!(java.lang.String.valueOf(entries.get((index + 1)).getKey()).startsWith(com.github.underscore.lodash.Xml.TEXT)));
                if (((java.lang.String.valueOf(entry.getKey()).startsWith("-")) && (!((entry.getValue()) instanceof java.util.Map))) && (!((entry.getValue()) instanceof java.util.List))) {
                    attrs.add(((((" " + (com.github.underscore.lodash.Xml.XmlValue.escapeName(java.lang.String.valueOf(entry.getKey()).substring(1), namespaces))) + "=\"") + (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getValue())))) + "\""));
                    if (java.lang.String.valueOf(entry.getKey()).startsWith("-xmlns:")) {
                        namespaces.add(java.lang.String.valueOf(entry.getKey()).substring(7));
                    }
                }else
                    if (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getKey())).startsWith(com.github.underscore.lodash.Xml.TEXT)) {
                        com.github.underscore.lodash.Xml.XmlObject.addText(entry, elems, identStep, ident);
                    }else {
                        com.github.underscore.lodash.Xml.XmlObject.processElements(entry, identStep, ident, addNewLine, elems, namespaces);
                    }

            }
            if (name != null) {
                if (!parentTextFound) {
                    builder.fillSpaces();
                }
                builder.append("<").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(com.github.underscore.lodash.U.join(attrs, "")).append(">").incIdent();
                if ((!(elems.isEmpty())) && (!((elems.get(0)) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText))) {
                    builder.newLine();
                }
            }
            for (com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder1 : elems) {
                builder.append(localBuilder1.toString());
            }
            if (name != null) {
                builder.decIdent();
                if ((!(elems.isEmpty())) && (!((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText))) {
                    builder.newLine().fillSpaces();
                }
                builder.append("</").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(">");
            }
        }

        private static void processElements(final java.util.Map.Entry entry, final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident, final boolean addNewLine, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final java.util.Set<java.lang.String> namespaces) {
            if (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getKey())).startsWith(com.github.underscore.lodash.Xml.COMMENT)) {
                com.github.underscore.lodash.Xml.XmlObject.addComment(entry, identStep, ident, addNewLine, elems, "<!--", "-->");
            }else
                if (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getKey())).startsWith(com.github.underscore.lodash.Xml.CDATA)) {
                    com.github.underscore.lodash.Xml.XmlObject.addComment(entry, identStep, ident, addNewLine, elems, "<![CDATA[", "]]>");
                }else {
                    boolean spoonDefaultValue = false;
                    try {
                        spoonDefaultValue = true;
                    } catch (java.lang.Exception __NopolProcessorException) {
                    }
                    boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                    if (fr.inria.lille.commons.trace.RuntimeValues.instance(63).isEnabled()) {
                        fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectionStarts();
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.github.underscore.lodash.Xml.ENCODING",com.github.underscore.lodash.Xml.ENCODING);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident",com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("elems",elems);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.github.underscore.lodash.Xml.NULL_ELEMENT",com.github.underscore.lodash.Xml.NULL_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("addNewLine",addNewLine);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("ident",ident);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.github.underscore.lodash.Xml.ATTRS",com.github.underscore.lodash.Xml.ATTRS);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("identStep",identStep);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.github.underscore.lodash.Xml.TEXT",com.github.underscore.lodash.Xml.TEXT);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.github.underscore.lodash.Xml.NULL",com.github.underscore.lodash.Xml.NULL);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.github.underscore.lodash.Xml.ELEMENT_TEXT",com.github.underscore.lodash.Xml.ELEMENT_TEXT);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.github.underscore.lodash.Xml.CLOSED_ELEMENT",com.github.underscore.lodash.Xml.CLOSED_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.github.underscore.lodash.Xml.UTF_8",com.github.underscore.lodash.Xml.UTF_8);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.github.underscore.lodash.Xml.CDATA",com.github.underscore.lodash.Xml.CDATA);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("entry",entry);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.github.underscore.lodash.Xml.COMMENT",com.github.underscore.lodash.Xml.COMMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.github.underscore.lodash.Xml.EMPTY_ELEMENT",com.github.underscore.lodash.Xml.EMPTY_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.github.underscore.lodash.Xml.ELEMENT",com.github.underscore.lodash.Xml.ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("namespaces",namespaces);} catch (Exception ex1) {ex1.printStackTrace();};
                        fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectOutput(runtimeAngelicValue);
                        fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectionEnds();
                    }
                    if (runtimeAngelicValue) if (((entry.getValue()) instanceof java.util.List) && (!(((java.util.List) (entry.getValue())).isEmpty()))) {
                        com.github.underscore.lodash.Xml.XmlObject.addElements(identStep, ident, entry, namespaces, elems, addNewLine);
                    }else {
                        com.github.underscore.lodash.Xml.XmlObject.addElement(identStep, ident, entry, namespaces, elems, addNewLine);
                    }
                }

        }

        private static void addText(final java.util.Map.Entry entry, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident) {
            if ((entry.getValue()) instanceof java.util.List) {
                for (java.lang.Object value : ((java.util.List) (entry.getValue()))) {
                    elems.add(new com.github.underscore.lodash.Xml.XmlStringBuilderText(identStep, ident).append(com.github.underscore.lodash.U.escape(java.lang.String.valueOf(value))));
                }
            }else {
                elems.add(new com.github.underscore.lodash.Xml.XmlStringBuilderText(identStep, ident).append(com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getValue()))));
            }
        }

        private static void addElements(final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident, java.util.Map.Entry entry, java.util.Set<java.lang.String> namespaces, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final boolean addNewLine) {
            boolean parentTextFound = (!(elems.isEmpty())) && ((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText);
            final com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder;
            if ((java.lang.String.valueOf(((java.util.List) (entry.getValue())).get(0)).startsWith(("{" + (com.github.underscore.lodash.Xml.TEXT)))) || (java.lang.String.valueOf(((java.util.List) (entry.getValue())).get(((((java.util.List) (entry.getValue())).size()) - 1))).startsWith(("{" + (com.github.underscore.lodash.Xml.TEXT))))) {
                localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderText(identStep, ident);
            }else {
                localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader(identStep, ident);
            }
            com.github.underscore.lodash.Xml.XmlArray.writeXml(((java.util.List) (entry.getValue())), localBuilder, java.lang.String.valueOf(entry.getKey()), parentTextFound, namespaces);
            if (addNewLine) {
                localBuilder.newLine();
            }
            elems.add(localBuilder);
        }

        private static void addElement(final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident, java.util.Map.Entry entry, java.util.Set<java.lang.String> namespaces, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final boolean addNewLine) {
            boolean parentTextFound = (!(elems.isEmpty())) && ((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText);
            com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader(identStep, ident);
            com.github.underscore.lodash.Xml.XmlValue.writeXml(entry.getValue(), java.lang.String.valueOf(entry.getKey()), localBuilder, parentTextFound, namespaces);
            if (addNewLine) {
                localBuilder.newLine();
            }
            elems.add(localBuilder);
        }

        private static void addComment(java.util.Map.Entry entry, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident, boolean addNewLine, java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, java.lang.String openElement, java.lang.String closeElement) {
            if ((entry.getValue()) instanceof java.util.List) {
                for (java.util.Iterator iterator = ((java.util.List) (entry.getValue())).iterator(); iterator.hasNext();) {
                    com.github.underscore.lodash.Xml.XmlObject.addCommentValue(identStep, ident, java.lang.String.valueOf(iterator.next()), ((iterator.hasNext()) || addNewLine), elems, openElement, closeElement);
                }
            }else {
                com.github.underscore.lodash.Xml.XmlObject.addCommentValue(identStep, ident, java.lang.String.valueOf(entry.getValue()), addNewLine, elems, openElement, closeElement);
            }
        }

        private static void addCommentValue(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident, java.lang.String value, boolean addNewLine, java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, java.lang.String openElement, java.lang.String closeElement) {
            boolean parentTextFound = (!(elems.isEmpty())) && ((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText);
            com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader(identStep, ident);
            if (!parentTextFound) {
                localBuilder.fillSpaces();
            }
            localBuilder.append(openElement).append(value).append(closeElement);
            if (addNewLine) {
                localBuilder.newLine();
            }
            elems.add(localBuilder);
        }
    }

    public static class XmlValue {
        public static void writeXml(java.lang.Object value, java.lang.String name, com.github.underscore.lodash.Xml.XmlStringBuilder builder, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (value instanceof java.util.Map) {
                com.github.underscore.lodash.Xml.XmlObject.writeXml(((java.util.Map) (value)), name, builder, parentTextFound, namespaces);
                return;
            }
            if (value instanceof java.util.Collection) {
                com.github.underscore.lodash.Xml.XmlArray.writeXml(((java.util.Collection) (value)), name, builder, parentTextFound, namespaces);
                return;
            }
            if (!parentTextFound) {
                builder.fillSpaces();
            }
            builder.append((("<" + (com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">"));
            if (value == null) {
                builder.append(com.github.underscore.lodash.Xml.NULL);
            }else
                if (value instanceof java.lang.String) {
                    builder.append(com.github.underscore.lodash.Xml.XmlValue.escape(((java.lang.String) (value))));
                }else {
                    com.github.underscore.lodash.Xml.XmlValue.processArrays(value, builder, name, parentTextFound, namespaces);
                }

            builder.append((("</" + (com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">"));
        }

        private static void processArrays(java.lang.Object value, com.github.underscore.lodash.Xml.XmlStringBuilder builder, java.lang.String name, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (value instanceof java.lang.Double) {
                if ((((java.lang.Double) (value)).isInfinite()) || (((java.lang.Double) (value)).isNaN())) {
                    builder.append(com.github.underscore.lodash.Xml.NULL);
                }else {
                    builder.append(value.toString());
                }
            }else
                if (value instanceof java.lang.Float) {
                    if ((((java.lang.Float) (value)).isInfinite()) || (((java.lang.Float) (value)).isNaN())) {
                        builder.append(com.github.underscore.lodash.Xml.NULL);
                    }else {
                        builder.append(value.toString());
                    }
                }else
                    if (value instanceof java.lang.Number) {
                        builder.append(value.toString());
                    }else
                        if (value instanceof java.lang.Boolean) {
                            builder.append(value.toString());
                        }else
                            if (value instanceof byte[]) {
                                builder.newLine().incIdent();
                                com.github.underscore.lodash.Xml.XmlArray.writeXml(((byte[]) (value)), builder);
                                builder.decIdent().newLine().fillSpaces();
                            }else
                                if (value instanceof short[]) {
                                    builder.newLine().incIdent();
                                    com.github.underscore.lodash.Xml.XmlArray.writeXml(((short[]) (value)), builder);
                                    builder.decIdent().newLine().fillSpaces();
                                }else {
                                    com.github.underscore.lodash.Xml.XmlValue.processArrays2(value, builder, name, parentTextFound, namespaces);
                                }





        }

        private static void processArrays2(java.lang.Object value, com.github.underscore.lodash.Xml.XmlStringBuilder builder, java.lang.String name, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (value instanceof int[]) {
                builder.newLine().incIdent();
                com.github.underscore.lodash.Xml.XmlArray.writeXml(((int[]) (value)), builder);
                builder.decIdent().newLine().fillSpaces();
            }else
                if (value instanceof long[]) {
                    builder.newLine().incIdent();
                    com.github.underscore.lodash.Xml.XmlArray.writeXml(((long[]) (value)), builder);
                    builder.decIdent().newLine().fillSpaces();
                }else
                    if (value instanceof float[]) {
                        builder.newLine().incIdent();
                        com.github.underscore.lodash.Xml.XmlArray.writeXml(((float[]) (value)), builder);
                        builder.decIdent().newLine().fillSpaces();
                    }else
                        if (value instanceof double[]) {
                            builder.newLine().incIdent();
                            com.github.underscore.lodash.Xml.XmlArray.writeXml(((double[]) (value)), builder);
                            builder.decIdent().newLine().fillSpaces();
                        }else
                            if (value instanceof boolean[]) {
                                builder.newLine().incIdent();
                                com.github.underscore.lodash.Xml.XmlArray.writeXml(((boolean[]) (value)), builder);
                                builder.decIdent().newLine().fillSpaces();
                            }else
                                if (value instanceof char[]) {
                                    builder.newLine().incIdent();
                                    com.github.underscore.lodash.Xml.XmlArray.writeXml(((char[]) (value)), builder);
                                    builder.decIdent().newLine().fillSpaces();
                                }else
                                    if (value instanceof java.lang.Object[]) {
                                        builder.newLine().incIdent();
                                        com.github.underscore.lodash.Xml.XmlArray.writeXml(((java.lang.Object[]) (value)), name, builder, parentTextFound, namespaces);
                                        builder.decIdent().newLine().fillSpaces();
                                    }else {
                                        builder.append(value.toString());
                                    }






        }

        public static java.lang.String escapeName(java.lang.String name, java.util.Set<java.lang.String> namespaces) {
            final int length = name.length();
            if (length == 0) {
                return "__EE__EMPTY__EE__";
            }
            final java.lang.StringBuilder result = new java.lang.StringBuilder();
            char ch = name.charAt(0);
            if ((com.sun.org.apache.xerces.internal.util.XMLChar.isNameStart(ch)) && (ch != ':')) {
                result.append(ch);
            }else {
                result.append("__").append(com.github.underscore.lodash.Base32.encode(java.lang.Character.toString(ch))).append("__");
            }
            for (int i = 1; i < length; ++i) {
                ch = name.charAt(i);
                if ((ch == ':') && (("xmlns".equals(name.substring(0, i))) || (namespaces.contains(name.substring(0, i))))) {
                    result.append(ch);
                }else
                    if ((com.sun.org.apache.xerces.internal.util.XMLChar.isName(ch)) && (ch != ':')) {
                        result.append(ch);
                    }else {
                        result.append("__").append(com.github.underscore.lodash.Base32.encode(java.lang.Character.toString(ch))).append("__");
                    }

            }
            return result.toString();
        }

        public static java.lang.String escape(java.lang.String s) {
            if (s == null) {
                return null;
            }
            java.lang.StringBuilder sb = new java.lang.StringBuilder();
            com.github.underscore.lodash.Xml.XmlValue.escape(s, sb);
            return sb.toString();
        }

        private static void escape(java.lang.String s, java.lang.StringBuilder sb) {
            final int len = s.length();
            for (int i = 0; i < len; i++) {
                char ch = s.charAt(i);
                switch (ch) {
                    case '"' :
                        sb.append("&quot;");
                        break;
                    case '\'' :
                        sb.append("'");
                        break;
                    case '&' :
                        sb.append("&amp;");
                        break;
                    case '<' :
                        sb.append("&lt;");
                        break;
                    case '>' :
                        sb.append("&gt;");
                        break;
                    case '\b' :
                        sb.append("\\b");
                        break;
                    case '\f' :
                        sb.append("\\f");
                        break;
                    case '\n' :
                        sb.append("\n");
                        break;
                    case '\r' :
                        sb.append("\\r");
                        break;
                    case '\t' :
                        sb.append("\t");
                        break;
                    default :
                        if (((ch <= '\u001f') || ((ch >= '\u007f') && (ch <= '\u009f'))) || ((ch >= '\u2000') && (ch <= '\u20ff'))) {
                            java.lang.String ss = java.lang.Integer.toHexString(ch);
                            sb.append("&#x");
                            for (int k = 0; k < (4 - (ss.length())); k++) {
                                sb.append('0');
                            }
                            sb.append(ss.toUpperCase()).append(";");
                        }else {
                            sb.append(ch);
                        }
                        break;
                }
            }
        }
    }

    public static java.lang.String toXml(java.util.Collection collection, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep) {
        final com.github.underscore.lodash.Xml.XmlStringBuilder builder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutRoot(identStep, com.github.underscore.lodash.Xml.UTF_8.name());
        builder.append("<root>").incIdent();
        if ((collection == null) || (!(collection.isEmpty()))) {
            builder.newLine();
        }
        com.github.underscore.lodash.Xml.XmlArray.writeXml(collection, null, builder, false, com.github.underscore.lodash.U.<java.lang.String>newLinkedHashSet());
        return builder.newLine().append("</root>").toString();
    }

    public static java.lang.String toXml(java.util.Collection collection) {
        return com.github.underscore.lodash.Xml.toXml(collection, com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TWO_SPACES);
    }

    public static java.lang.String toXml(java.util.Map map, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep) {
        final com.github.underscore.lodash.Xml.XmlStringBuilder builder;
        final java.util.Map localMap;
        if ((map != null) && (map.containsKey(com.github.underscore.lodash.Xml.ENCODING))) {
            builder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutRoot(identStep, java.lang.String.valueOf(map.get(com.github.underscore.lodash.Xml.ENCODING)));
            localMap = ((java.util.Map) (com.github.underscore.lodash.U.clone(map)));
            localMap.remove(com.github.underscore.lodash.Xml.ENCODING);
        }else {
            builder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutRoot(identStep, com.github.underscore.lodash.Xml.UTF_8.name());
            localMap = map;
        }
        if ((((localMap == null) || ((localMap.size()) != 1)) || (java.lang.String.valueOf(((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getKey()).startsWith("-"))) || ((((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getValue()) instanceof java.util.List)) {
            final java.lang.String name;
            if ((((localMap != null) && ((localMap.size()) == 1)) && ((((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getValue()) instanceof java.util.List)) && (!(((java.util.List) (((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getValue())).isEmpty()))) {
                name = java.lang.String.valueOf(((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getKey());
            }else {
                name = "root";
            }
            com.github.underscore.lodash.Xml.XmlObject.writeXml(localMap, name, builder, false, com.github.underscore.lodash.U.<java.lang.String>newLinkedHashSet());
        }else {
            com.github.underscore.lodash.Xml.XmlObject.writeXml(localMap, null, builder, false, com.github.underscore.lodash.U.<java.lang.String>newLinkedHashSet());
        }
        return builder.toString();
    }

    public static java.lang.String toXml(java.util.Map map) {
        return com.github.underscore.lodash.Xml.toXml(map, com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TWO_SPACES);
    }

    @java.lang.SuppressWarnings("unchecked")
    private static java.lang.Object getValue(final java.lang.Object value) {
        if ((value instanceof java.util.Map) && ((((java.util.Map<java.lang.String, java.lang.Object>) (value)).entrySet().size()) == 1)) {
            final java.util.Map.Entry<java.lang.String, java.lang.Object> entry = ((java.util.Map<java.lang.String, java.lang.Object>) (value)).entrySet().iterator().next();
            if ((com.github.underscore.lodash.Xml.TEXT.equals(entry.getKey())) || (entry.getKey().equals(com.github.underscore.lodash.Xml.ELEMENT_TEXT))) {
                return entry.getValue();
            }
        }
        return value;
    }

    @java.lang.SuppressWarnings("unchecked")
    private static java.util.Map<java.lang.String, java.lang.Object> createMap(final org.w3c.dom.Node node, final com.github.underscore.Function<java.lang.Object, java.lang.Object> nodeMapper, java.util.Map<java.lang.String, java.lang.Object> attrMap, int[] uniqueIds, final com.github.underscore.Function<java.lang.Object, java.lang.Object> valueMapper, java.lang.String source, int[] sourceIndex) {
        final java.util.Map<java.lang.String, java.lang.Object> map = com.github.underscore.lodash.U.newLinkedHashMap();
        map.putAll(attrMap);
        final org.w3c.dom.NodeList nodeList = node.getChildNodes();
        for (int index = 0; index < (nodeList.getLength()); index++) {
            final org.w3c.dom.Node currentNode = nodeList.item(index);
            final java.lang.String name = currentNode.getNodeName();
            final java.lang.Object value;
            final int attributesLength = ((currentNode.getAttributes()) == null) ? 0 : currentNode.getAttributes().getLength();
            if ((currentNode.getNodeType()) == (org.w3c.dom.Node.ELEMENT_NODE)) {
                sourceIndex[0] = ((source.indexOf(("<" + name), sourceIndex[0])) + (name.length())) + 2;
                final java.util.Map<java.lang.String, java.lang.Object> attrMapLocal = com.github.underscore.lodash.U.newLinkedHashMap();
                if (attributesLength > 0) {
                    final java.util.regex.Matcher matcher = com.github.underscore.lodash.Xml.ATTRS.matcher(source.substring(sourceIndex[0], source.indexOf(">", sourceIndex[0])));
                    while (matcher.find()) {
                        com.github.underscore.lodash.Xml.addNodeValue(attrMapLocal, ('-' + (matcher.group(1))), matcher.group(2), nodeMapper, uniqueIds);
                    } 
                }
                value = com.github.underscore.lodash.Xml.createMap(currentNode, nodeMapper, attrMapLocal, uniqueIds, valueMapper, source, sourceIndex);
            }else {
                if (com.github.underscore.lodash.Xml.COMMENT.equals(name)) {
                    sourceIndex[0] = (source.indexOf("-->", sourceIndex[0])) + 3;
                }else
                    if (com.github.underscore.lodash.Xml.CDATA.equals(name)) {
                        sourceIndex[0] = (source.indexOf("]]>", sourceIndex[0])) + 3;
                    }

                value = currentNode.getTextContent();
            }
            if ((com.github.underscore.lodash.Xml.TEXT.equals(name)) && (valueMapper.apply(value).toString().isEmpty())) {
                continue;
            }
            com.github.underscore.lodash.Xml.addNodeValue(map, name, value, nodeMapper, uniqueIds);
        }
        return map;
    }

    @java.lang.SuppressWarnings("unchecked")
    private static void addNodeValue(final java.util.Map<java.lang.String, java.lang.Object> map, final java.lang.String name, final java.lang.Object value, final com.github.underscore.Function<java.lang.Object, java.lang.Object> nodeMapper, int[] uniqueIds) {
        if (map.containsKey(name)) {
            if (com.github.underscore.lodash.Xml.TEXT.equals(name)) {
                map.put((name + (uniqueIds[0])), nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
                uniqueIds[0] += 1;
            }else
                if (com.github.underscore.lodash.Xml.COMMENT.equals(name)) {
                    map.put((name + (uniqueIds[1])), nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
                    uniqueIds[1] += 1;
                }else
                    if (com.github.underscore.lodash.Xml.CDATA.equals(name)) {
                        map.put((name + (uniqueIds[2])), nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
                        uniqueIds[2] += 1;
                    }else {
                        final java.lang.Object object = map.get(name);
                        if (object instanceof java.util.List) {
                            com.github.underscore.lodash.Xml.addText(map, name, ((java.util.List<java.lang.Object>) (object)), value);
                        }else {
                            final java.util.List<java.lang.Object> objects = com.github.underscore.lodash.U.newArrayList();
                            objects.add(object);
                            com.github.underscore.lodash.Xml.addText(map, name, objects, value);
                            map.put(name, objects);
                        }
                    }


        }else {
            map.put(name, nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
        }
    }

    @java.lang.SuppressWarnings("unchecked")
    private static void addText(final java.util.Map<java.lang.String, java.lang.Object> map, final java.lang.String name, final java.util.List<java.lang.Object> objects, final java.lang.Object value) {
        int lastIndex = (map.size()) - 1;
        final int index = objects.size();
        while (true) {
            final java.util.Map.Entry lastElement = ((java.util.Map.Entry) (map.entrySet().toArray()[lastIndex]));
            if (name.equals(java.lang.String.valueOf(lastElement.getKey()))) {
                break;
            }
            final java.util.Map<java.lang.String, java.lang.Object> text = com.github.underscore.lodash.U.newLinkedHashMap();
            text.put(java.lang.String.valueOf(lastElement.getKey()), map.remove(lastElement.getKey()));
            objects.add(index, text);
            lastIndex -= 1;
        } 
        objects.add(com.github.underscore.lodash.Xml.getValue(value));
    }

    @java.lang.SuppressWarnings("unchecked")
    public static java.lang.Object fromXml(final java.lang.String xml, final com.github.underscore.Function<java.lang.Object, java.lang.Object> valueMapper) {
        if (xml == null) {
            return null;
        }
        try {
            org.w3c.dom.Document document = com.github.underscore.lodash.Xml.createDocument(xml);
            final java.lang.Object result = com.github.underscore.lodash.Xml.createMap(document, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
                public java.lang.Object apply(java.lang.Object object) {
                    return object;
                }
            }, java.util.Collections.<java.lang.String, java.lang.Object>emptyMap(), new int[]{ 1, 1, 1 }, valueMapper, xml, new int[]{ 0 });
            if (((document.getXmlEncoding()) != null) && (!("UTF-8".equalsIgnoreCase(document.getXmlEncoding())))) {
                ((java.util.Map) (result)).put(com.github.underscore.lodash.Xml.ENCODING, document.getXmlEncoding());
            }else
                if ((((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getKey().equals("root")) && (((((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getValue()) instanceof java.util.List) || ((((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getValue()) instanceof java.util.Map))) {
                    return ((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getValue();
                }

            return result;
        } catch (java.lang.Exception ex) {
            throw new java.lang.IllegalArgumentException(ex);
        }
    }

    public static java.lang.Object fromXml(final java.lang.String xml) {
        return com.github.underscore.lodash.Xml.fromXml(xml, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
            public java.lang.Object apply(java.lang.Object object) {
                return java.lang.String.valueOf(object).trim();
            }
        });
    }

    private static org.w3c.dom.Document createDocument(final java.lang.String xml) throws java.io.IOException, javax.xml.parsers.ParserConfigurationException, org.xml.sax.SAXException {
        final javax.xml.parsers.DocumentBuilderFactory factory = javax.xml.parsers.DocumentBuilderFactory.newInstance();
        factory.setNamespaceAware(true);
        factory.setFeature(javax.xml.XMLConstants.FEATURE_SECURE_PROCESSING, true);
        final javax.xml.parsers.DocumentBuilder builder = factory.newDocumentBuilder();
        builder.setErrorHandler(new org.xml.sax.helpers.DefaultHandler());
        return builder.parse(new org.xml.sax.InputSource(new java.io.StringReader(xml)));
    }

    public static java.lang.Object fromXmlMakeArrays(final java.lang.String xml) {
        try {
            org.w3c.dom.Document document = com.github.underscore.lodash.Xml.createDocument(xml);
            return com.github.underscore.lodash.Xml.createMap(document, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
                public java.lang.Object apply(java.lang.Object object) {
                    return object instanceof java.util.List ? object : com.github.underscore.lodash.U.newArrayList(java.util.Arrays.asList(object));
                }
            }, java.util.Collections.<java.lang.String, java.lang.Object>emptyMap(), new int[]{ 1, 1, 1 }, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
                public java.lang.Object apply(java.lang.Object object) {
                    return java.lang.String.valueOf(object).trim();
                }
            }, xml, new int[]{ 0 });
        } catch (java.lang.Exception ex) {
            throw new java.lang.IllegalArgumentException(ex);
        }
    }

    @java.lang.SuppressWarnings("unchecked")
    public static java.lang.String formatXml(java.lang.String xml, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep) {
        java.lang.Object result = com.github.underscore.lodash.Xml.fromXml(xml);
        if (result instanceof java.util.Map) {
            return com.github.underscore.lodash.Xml.toXml(((java.util.Map) (result)), identStep);
        }
        return com.github.underscore.lodash.Xml.toXml(((java.util.List) (result)), identStep);
    }

    public static java.lang.String formatXml(java.lang.String xml) {
        return com.github.underscore.lodash.Xml.formatXml(xml, com.github.underscore.lodash.Xml.XmlStringBuilder.Step.THREE_SPACES);
    }
}
16:26:55.451 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
16:26:55.451 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:26:55.508 [pool-228-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (50 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:26:55.801 [pool-227-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Xml.java:412: error: non-static variable ident cannot be referenced from a static context
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident",com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                                      ^
Xml.java:620: warning: com.sun.org.apache.xerces.internal.util.XMLChar is internal proprietary API and may be removed in a future release
            if ((com.sun.org.apache.xerces.internal.util.XMLChar.isNameStart(ch)) && (ch != ':')) {
                                                        ^
Xml.java:630: warning: com.sun.org.apache.xerces.internal.util.XMLChar is internal proprietary API and may be removed in a future release
                    if ((com.sun.org.apache.xerces.internal.util.XMLChar.isName(ch)) && (ch != ':')) {
                                                                ^
16:26:55.929 [pool-227-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public final class Xml {
    private static final java.lang.String NULL = "null";

    private static final java.lang.String ELEMENT_TEXT = "element";

    private static final java.lang.String CDATA = "#cdata-section";

    private static final java.lang.String COMMENT = "#comment";

    private static final java.lang.String ENCODING = "#encoding";

    private static final java.lang.String TEXT = "#text";

    private static final java.lang.String ELEMENT = ("<" + (com.github.underscore.lodash.Xml.ELEMENT_TEXT)) + ">";

    private static final java.lang.String CLOSED_ELEMENT = ("</" + (com.github.underscore.lodash.Xml.ELEMENT_TEXT)) + ">";

    private static final java.lang.String EMPTY_ELEMENT = (com.github.underscore.lodash.Xml.ELEMENT) + (com.github.underscore.lodash.Xml.CLOSED_ELEMENT);

    private static final java.lang.String NULL_ELEMENT = ((com.github.underscore.lodash.Xml.ELEMENT) + (com.github.underscore.lodash.Xml.NULL)) + (com.github.underscore.lodash.Xml.CLOSED_ELEMENT);

    private static final java.nio.charset.Charset UTF_8 = java.nio.charset.Charset.forName("UTF-8");

    private static final java.util.regex.Pattern ATTRS = java.util.regex.Pattern.compile(("((?:(?!\\s|=).)*)\\s*?=\\s*?[\"\']?((?:(?<=\")(?:(?<=\\\\)\"|[^\"])*|(?<=\')" + "(?:(?<=\\\\)\'|[^\'])*)|(?:(?!\"|\')(?:(?!\\/>|>|\\s).)+))"));

    public static class XmlStringBuilder {
        public enum Step {

            TWO_SPACES(2),
            THREE_SPACES(3),
            FOUR_SPACES(4),
            COMPACT(0),
            TABS(1);
            private int ident;

            Step(int ident) {
                this.ident = ident;
            }

            public int getIdent() {
                return ident;
            }
        }

        protected final java.lang.StringBuilder builder;

        private final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep;

        private int ident;

        public XmlStringBuilder() {
            builder = new java.lang.StringBuilder("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<root>\n");
            identStep = com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TWO_SPACES;
            ident = 2;
        }

        public XmlStringBuilder(java.lang.StringBuilder builder, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident) {
            this.builder = builder;
            this.identStep = identStep;
            this.ident = ident;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder append(final java.lang.String string) {
            builder.append(string);
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder fillSpaces() {
            for (int index = 0; index < (ident); index += 1) {
                builder.append(((identStep) == (com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TABS) ? '\t' : ' '));
            }
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder incIdent() {
            ident += identStep.getIdent();
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder decIdent() {
            ident -= identStep.getIdent();
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder newLine() {
            if ((identStep) != (com.github.underscore.lodash.Xml.XmlStringBuilder.Step.COMPACT)) {
                builder.append("\n");
            }
            return this;
        }

        public int getIdent() {
            return ident;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder.Step getIdentStep() {
            return identStep;
        }

        public java.lang.String toString() {
            return (builder.toString()) + "\n</root>";
        }
    }

    public static class XmlStringBuilderWithoutRoot extends com.github.underscore.lodash.Xml.XmlStringBuilder {
        public XmlStringBuilderWithoutRoot(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, java.lang.String encoding) {
            super(new java.lang.StringBuilder(((("<?xml version=\"1.0\" encoding=\"" + (com.github.underscore.lodash.U.escape(encoding))) + "\"?>") + (identStep == (com.github.underscore.lodash.Xml.XmlStringBuilder.Step.COMPACT) ? "" : "\n"))), identStep, 0);
        }

        public java.lang.String toString() {
            return builder.toString();
        }
    }

    public static class XmlStringBuilderWithoutHeader extends com.github.underscore.lodash.Xml.XmlStringBuilder {
        public XmlStringBuilderWithoutHeader(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident) {
            super(new java.lang.StringBuilder(), identStep, ident);
        }

        public java.lang.String toString() {
            return builder.toString();
        }
    }

    public static class XmlStringBuilderText extends com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader {
        public XmlStringBuilderText(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident) {
            super(identStep, ident);
        }
    }

    public static class XmlArray {
        public static void writeXml(java.util.Collection collection, java.lang.String name, com.github.underscore.lodash.Xml.XmlStringBuilder builder, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (collection == null) {
                builder.append(com.github.underscore.lodash.Xml.NULL);
                return;
            }
            if (name != null) {
                builder.fillSpaces().append("<").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(">").incIdent();
                if (!(collection.isEmpty())) {
                    builder.newLine();
                }
            }
            com.github.underscore.lodash.Xml.XmlArray.writeXml(collection, builder, name, parentTextFound, namespaces);
            if (name != null) {
                builder.decIdent().newLine().fillSpaces().append("</").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(">");
            }
        }

        @java.lang.SuppressWarnings("unchecked")
        private static void writeXml(java.util.Collection collection, com.github.underscore.lodash.Xml.XmlStringBuilder builder, java.lang.String name, final boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            boolean localParentTextFound = parentTextFound;
            final java.util.List entries = com.github.underscore.lodash.U.newArrayList(collection);
            for (int index = 0; index < (entries.size()); index += 1) {
                final java.lang.Object value = entries.get(index);
                final boolean addNewLine = (index < ((entries.size()) - 1)) && (!(java.lang.String.valueOf(entries.get((index + 1))).startsWith(("{" + (com.github.underscore.lodash.Xml.TEXT)))));
                if (value == null) {
                    builder.fillSpaces().append((((((("<" + (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">") + (com.github.underscore.lodash.Xml.NULL)) + "</") + (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">"));
                }else {
                    if ((value instanceof java.util.Map) && ((((java.util.Map) (value)).size()) == 1)) {
                        com.github.underscore.lodash.Xml.XmlObject.writeXml(((java.util.Map) (value)), null, builder, localParentTextFound, namespaces);
                        if (java.lang.String.valueOf(((java.util.Map.Entry) (((java.util.Map) (value)).entrySet().iterator().next())).getKey()).startsWith(com.github.underscore.lodash.Xml.TEXT)) {
                            localParentTextFound = true;
                            continue;
                        }
                    }else {
                        com.github.underscore.lodash.Xml.XmlValue.writeXml(value, (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : name), builder, localParentTextFound, namespaces);
                    }
                    localParentTextFound = false;
                }
                if (addNewLine) {
                    builder.newLine();
                }
            }
        }

        public static void writeXml(byte[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(short[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(int[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(long[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(float[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(double[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(boolean[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(char[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(java.lang.Object[] array, java.lang.String name, com.github.underscore.lodash.Xml.XmlStringBuilder builder, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        com.github.underscore.lodash.Xml.XmlValue.writeXml(array[i], (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : name), builder, parentTextFound, namespaces);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }
    }

    public static class XmlObject {
        @java.lang.SuppressWarnings("unchecked")
        public static void writeXml(java.util.Map map, java.lang.String name, final com.github.underscore.lodash.Xml.XmlStringBuilder builder, final boolean parentTextFound, final java.util.Set<java.lang.String> namespaces) {
            if (map == null) {
                com.github.underscore.lodash.Xml.XmlValue.writeXml(com.github.underscore.lodash.Xml.NULL, name, builder, false, namespaces);
                return;
            }
            final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems = com.github.underscore.lodash.U.newArrayList();
            final java.util.List<java.lang.String> attrs = com.github.underscore.lodash.U.newArrayList();
            final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep = builder.getIdentStep();
            final int ident = (builder.getIdent()) + (name == null ? 0 : builder.getIdentStep().getIdent());
            final java.util.List<java.util.Map.Entry> entries = com.github.underscore.lodash.U.newArrayList(map.entrySet());
            for (int index = 0; index < (entries.size()); index += 1) {
                final java.util.Map.Entry entry = entries.get(index);
                final boolean addNewLine = (index < ((entries.size()) - 1)) && (!(java.lang.String.valueOf(entries.get((index + 1)).getKey()).startsWith(com.github.underscore.lodash.Xml.TEXT)));
                if (((java.lang.String.valueOf(entry.getKey()).startsWith("-")) && (!((entry.getValue()) instanceof java.util.Map))) && (!((entry.getValue()) instanceof java.util.List))) {
                    attrs.add(((((" " + (com.github.underscore.lodash.Xml.XmlValue.escapeName(java.lang.String.valueOf(entry.getKey()).substring(1), namespaces))) + "=\"") + (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getValue())))) + "\""));
                    if (java.lang.String.valueOf(entry.getKey()).startsWith("-xmlns:")) {
                        namespaces.add(java.lang.String.valueOf(entry.getKey()).substring(7));
                    }
                }else
                    if (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getKey())).startsWith(com.github.underscore.lodash.Xml.TEXT)) {
                        com.github.underscore.lodash.Xml.XmlObject.addText(entry, elems, identStep, ident);
                    }else {
                        com.github.underscore.lodash.Xml.XmlObject.processElements(entry, identStep, ident, addNewLine, elems, namespaces);
                    }

            }
            if (name != null) {
                if (!parentTextFound) {
                    builder.fillSpaces();
                }
                builder.append("<").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(com.github.underscore.lodash.U.join(attrs, "")).append(">").incIdent();
                if ((!(elems.isEmpty())) && (!((elems.get(0)) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText))) {
                    builder.newLine();
                }
            }
            for (com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder1 : elems) {
                builder.append(localBuilder1.toString());
            }
            if (name != null) {
                builder.decIdent();
                if ((!(elems.isEmpty())) && (!((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText))) {
                    builder.newLine().fillSpaces();
                }
                builder.append("</").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(">");
            }
        }

        private static void processElements(final java.util.Map.Entry entry, final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident, final boolean addNewLine, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final java.util.Set<java.lang.String> namespaces) {
            if (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getKey())).startsWith(com.github.underscore.lodash.Xml.COMMENT)) {
                com.github.underscore.lodash.Xml.XmlObject.addComment(entry, identStep, ident, addNewLine, elems, "<!--", "-->");
            }else
                if (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getKey())).startsWith(com.github.underscore.lodash.Xml.CDATA)) {
                    com.github.underscore.lodash.Xml.XmlObject.addComment(entry, identStep, ident, addNewLine, elems, "<![CDATA[", "]]>");
                }else {
                    boolean spoonDefaultValue = false;
                    try {
                        spoonDefaultValue = ((entry.getValue()) instanceof java.util.List) && (!(((java.util.List) (entry.getValue())).isEmpty()));
                    } catch (java.lang.Exception __NopolProcessorException) {
                    }
                    boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                    if (fr.inria.lille.commons.trace.RuntimeValues.instance(64).isEnabled()) {
                        fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectionStarts();
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.github.underscore.lodash.Xml.ENCODING",com.github.underscore.lodash.Xml.ENCODING);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident",com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("elems",elems);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.github.underscore.lodash.Xml.NULL_ELEMENT",com.github.underscore.lodash.Xml.NULL_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("addNewLine",addNewLine);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("ident",ident);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.github.underscore.lodash.Xml.ATTRS",com.github.underscore.lodash.Xml.ATTRS);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("identStep",identStep);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.github.underscore.lodash.Xml.TEXT",com.github.underscore.lodash.Xml.TEXT);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.github.underscore.lodash.Xml.NULL",com.github.underscore.lodash.Xml.NULL);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.github.underscore.lodash.Xml.ELEMENT_TEXT",com.github.underscore.lodash.Xml.ELEMENT_TEXT);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.github.underscore.lodash.Xml.CLOSED_ELEMENT",com.github.underscore.lodash.Xml.CLOSED_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.github.underscore.lodash.Xml.UTF_8",com.github.underscore.lodash.Xml.UTF_8);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.github.underscore.lodash.Xml.CDATA",com.github.underscore.lodash.Xml.CDATA);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("entry",entry);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.github.underscore.lodash.Xml.COMMENT",com.github.underscore.lodash.Xml.COMMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.github.underscore.lodash.Xml.EMPTY_ELEMENT",com.github.underscore.lodash.Xml.EMPTY_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.github.underscore.lodash.Xml.ELEMENT",com.github.underscore.lodash.Xml.ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("namespaces",namespaces);} catch (Exception ex1) {ex1.printStackTrace();};
                        fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectOutput(runtimeAngelicValue);
                        fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectionEnds();
                    }
                    if (runtimeAngelicValue) {
                        com.github.underscore.lodash.Xml.XmlObject.addElements(identStep, ident, entry, namespaces, elems, addNewLine);
                    }else {
                        com.github.underscore.lodash.Xml.XmlObject.addElement(identStep, ident, entry, namespaces, elems, addNewLine);
                    }
                }

        }

        private static void addText(final java.util.Map.Entry entry, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident) {
            if ((entry.getValue()) instanceof java.util.List) {
                for (java.lang.Object value : ((java.util.List) (entry.getValue()))) {
                    elems.add(new com.github.underscore.lodash.Xml.XmlStringBuilderText(identStep, ident).append(com.github.underscore.lodash.U.escape(java.lang.String.valueOf(value))));
                }
            }else {
                elems.add(new com.github.underscore.lodash.Xml.XmlStringBuilderText(identStep, ident).append(com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getValue()))));
            }
        }

        private static void addElements(final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident, java.util.Map.Entry entry, java.util.Set<java.lang.String> namespaces, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final boolean addNewLine) {
            boolean parentTextFound = (!(elems.isEmpty())) && ((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText);
            final com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder;
            if ((java.lang.String.valueOf(((java.util.List) (entry.getValue())).get(0)).startsWith(("{" + (com.github.underscore.lodash.Xml.TEXT)))) || (java.lang.String.valueOf(((java.util.List) (entry.getValue())).get(((((java.util.List) (entry.getValue())).size()) - 1))).startsWith(("{" + (com.github.underscore.lodash.Xml.TEXT))))) {
                localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderText(identStep, ident);
            }else {
                localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader(identStep, ident);
            }
            com.github.underscore.lodash.Xml.XmlArray.writeXml(((java.util.List) (entry.getValue())), localBuilder, java.lang.String.valueOf(entry.getKey()), parentTextFound, namespaces);
            if (addNewLine) {
                localBuilder.newLine();
            }
            elems.add(localBuilder);
        }

        private static void addElement(final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident, java.util.Map.Entry entry, java.util.Set<java.lang.String> namespaces, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final boolean addNewLine) {
            boolean parentTextFound = (!(elems.isEmpty())) && ((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText);
            com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader(identStep, ident);
            com.github.underscore.lodash.Xml.XmlValue.writeXml(entry.getValue(), java.lang.String.valueOf(entry.getKey()), localBuilder, parentTextFound, namespaces);
            if (addNewLine) {
                localBuilder.newLine();
            }
            elems.add(localBuilder);
        }

        private static void addComment(java.util.Map.Entry entry, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident, boolean addNewLine, java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, java.lang.String openElement, java.lang.String closeElement) {
            if ((entry.getValue()) instanceof java.util.List) {
                for (java.util.Iterator iterator = ((java.util.List) (entry.getValue())).iterator(); iterator.hasNext();) {
                    com.github.underscore.lodash.Xml.XmlObject.addCommentValue(identStep, ident, java.lang.String.valueOf(iterator.next()), ((iterator.hasNext()) || addNewLine), elems, openElement, closeElement);
                }
            }else {
                com.github.underscore.lodash.Xml.XmlObject.addCommentValue(identStep, ident, java.lang.String.valueOf(entry.getValue()), addNewLine, elems, openElement, closeElement);
            }
        }

        private static void addCommentValue(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident, java.lang.String value, boolean addNewLine, java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, java.lang.String openElement, java.lang.String closeElement) {
            boolean parentTextFound = (!(elems.isEmpty())) && ((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText);
            com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader(identStep, ident);
            if (!parentTextFound) {
                localBuilder.fillSpaces();
            }
            localBuilder.append(openElement).append(value).append(closeElement);
            if (addNewLine) {
                localBuilder.newLine();
            }
            elems.add(localBuilder);
        }
    }

    public static class XmlValue {
        public static void writeXml(java.lang.Object value, java.lang.String name, com.github.underscore.lodash.Xml.XmlStringBuilder builder, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (value instanceof java.util.Map) {
                com.github.underscore.lodash.Xml.XmlObject.writeXml(((java.util.Map) (value)), name, builder, parentTextFound, namespaces);
                return;
            }
            if (value instanceof java.util.Collection) {
                com.github.underscore.lodash.Xml.XmlArray.writeXml(((java.util.Collection) (value)), name, builder, parentTextFound, namespaces);
                return;
            }
            if (!parentTextFound) {
                builder.fillSpaces();
            }
            builder.append((("<" + (com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">"));
            if (value == null) {
                builder.append(com.github.underscore.lodash.Xml.NULL);
            }else
                if (value instanceof java.lang.String) {
                    builder.append(com.github.underscore.lodash.Xml.XmlValue.escape(((java.lang.String) (value))));
                }else {
                    com.github.underscore.lodash.Xml.XmlValue.processArrays(value, builder, name, parentTextFound, namespaces);
                }

            builder.append((("</" + (com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">"));
        }

        private static void processArrays(java.lang.Object value, com.github.underscore.lodash.Xml.XmlStringBuilder builder, java.lang.String name, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (value instanceof java.lang.Double) {
                if ((((java.lang.Double) (value)).isInfinite()) || (((java.lang.Double) (value)).isNaN())) {
                    builder.append(com.github.underscore.lodash.Xml.NULL);
                }else {
                    builder.append(value.toString());
                }
            }else
                if (value instanceof java.lang.Float) {
                    if ((((java.lang.Float) (value)).isInfinite()) || (((java.lang.Float) (value)).isNaN())) {
                        builder.append(com.github.underscore.lodash.Xml.NULL);
                    }else {
                        builder.append(value.toString());
                    }
                }else
                    if (value instanceof java.lang.Number) {
                        builder.append(value.toString());
                    }else
                        if (value instanceof java.lang.Boolean) {
                            builder.append(value.toString());
                        }else
                            if (value instanceof byte[]) {
                                builder.newLine().incIdent();
                                com.github.underscore.lodash.Xml.XmlArray.writeXml(((byte[]) (value)), builder);
                                builder.decIdent().newLine().fillSpaces();
                            }else
                                if (value instanceof short[]) {
                                    builder.newLine().incIdent();
                                    com.github.underscore.lodash.Xml.XmlArray.writeXml(((short[]) (value)), builder);
                                    builder.decIdent().newLine().fillSpaces();
                                }else {
                                    com.github.underscore.lodash.Xml.XmlValue.processArrays2(value, builder, name, parentTextFound, namespaces);
                                }





        }

        private static void processArrays2(java.lang.Object value, com.github.underscore.lodash.Xml.XmlStringBuilder builder, java.lang.String name, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (value instanceof int[]) {
                builder.newLine().incIdent();
                com.github.underscore.lodash.Xml.XmlArray.writeXml(((int[]) (value)), builder);
                builder.decIdent().newLine().fillSpaces();
            }else
                if (value instanceof long[]) {
                    builder.newLine().incIdent();
                    com.github.underscore.lodash.Xml.XmlArray.writeXml(((long[]) (value)), builder);
                    builder.decIdent().newLine().fillSpaces();
                }else
                    if (value instanceof float[]) {
                        builder.newLine().incIdent();
                        com.github.underscore.lodash.Xml.XmlArray.writeXml(((float[]) (value)), builder);
                        builder.decIdent().newLine().fillSpaces();
                    }else
                        if (value instanceof double[]) {
                            builder.newLine().incIdent();
                            com.github.underscore.lodash.Xml.XmlArray.writeXml(((double[]) (value)), builder);
                            builder.decIdent().newLine().fillSpaces();
                        }else
                            if (value instanceof boolean[]) {
                                builder.newLine().incIdent();
                                com.github.underscore.lodash.Xml.XmlArray.writeXml(((boolean[]) (value)), builder);
                                builder.decIdent().newLine().fillSpaces();
                            }else
                                if (value instanceof char[]) {
                                    builder.newLine().incIdent();
                                    com.github.underscore.lodash.Xml.XmlArray.writeXml(((char[]) (value)), builder);
                                    builder.decIdent().newLine().fillSpaces();
                                }else
                                    if (value instanceof java.lang.Object[]) {
                                        builder.newLine().incIdent();
                                        com.github.underscore.lodash.Xml.XmlArray.writeXml(((java.lang.Object[]) (value)), name, builder, parentTextFound, namespaces);
                                        builder.decIdent().newLine().fillSpaces();
                                    }else {
                                        builder.append(value.toString());
                                    }






        }

        public static java.lang.String escapeName(java.lang.String name, java.util.Set<java.lang.String> namespaces) {
            final int length = name.length();
            if (length == 0) {
                return "__EE__EMPTY__EE__";
            }
            final java.lang.StringBuilder result = new java.lang.StringBuilder();
            char ch = name.charAt(0);
            if ((com.sun.org.apache.xerces.internal.util.XMLChar.isNameStart(ch)) && (ch != ':')) {
                result.append(ch);
            }else {
                result.append("__").append(com.github.underscore.lodash.Base32.encode(java.lang.Character.toString(ch))).append("__");
            }
            for (int i = 1; i < length; ++i) {
                ch = name.charAt(i);
                if ((ch == ':') && (("xmlns".equals(name.substring(0, i))) || (namespaces.contains(name.substring(0, i))))) {
                    result.append(ch);
                }else
                    if ((com.sun.org.apache.xerces.internal.util.XMLChar.isName(ch)) && (ch != ':')) {
                        result.append(ch);
                    }else {
                        result.append("__").append(com.github.underscore.lodash.Base32.encode(java.lang.Character.toString(ch))).append("__");
                    }

            }
            return result.toString();
        }

        public static java.lang.String escape(java.lang.String s) {
            if (s == null) {
                return null;
            }
            java.lang.StringBuilder sb = new java.lang.StringBuilder();
            com.github.underscore.lodash.Xml.XmlValue.escape(s, sb);
            return sb.toString();
        }

        private static void escape(java.lang.String s, java.lang.StringBuilder sb) {
            final int len = s.length();
            for (int i = 0; i < len; i++) {
                char ch = s.charAt(i);
                switch (ch) {
                    case '"' :
                        sb.append("&quot;");
                        break;
                    case '\'' :
                        sb.append("'");
                        break;
                    case '&' :
                        sb.append("&amp;");
                        break;
                    case '<' :
                        sb.append("&lt;");
                        break;
                    case '>' :
                        sb.append("&gt;");
                        break;
                    case '\b' :
                        sb.append("\\b");
                        break;
                    case '\f' :
                        sb.append("\\f");
                        break;
                    case '\n' :
                        sb.append("\n");
                        break;
                    case '\r' :
                        sb.append("\\r");
                        break;
                    case '\t' :
                        sb.append("\t");
                        break;
                    default :
                        if (((ch <= '\u001f') || ((ch >= '\u007f') && (ch <= '\u009f'))) || ((ch >= '\u2000') && (ch <= '\u20ff'))) {
                            java.lang.String ss = java.lang.Integer.toHexString(ch);
                            sb.append("&#x");
                            for (int k = 0; k < (4 - (ss.length())); k++) {
                                sb.append('0');
                            }
                            sb.append(ss.toUpperCase()).append(";");
                        }else {
                            sb.append(ch);
                        }
                        break;
                }
            }
        }
    }

    public static java.lang.String toXml(java.util.Collection collection, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep) {
        final com.github.underscore.lodash.Xml.XmlStringBuilder builder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutRoot(identStep, com.github.underscore.lodash.Xml.UTF_8.name());
        builder.append("<root>").incIdent();
        if ((collection == null) || (!(collection.isEmpty()))) {
            builder.newLine();
        }
        com.github.underscore.lodash.Xml.XmlArray.writeXml(collection, null, builder, false, com.github.underscore.lodash.U.<java.lang.String>newLinkedHashSet());
        return builder.newLine().append("</root>").toString();
    }

    public static java.lang.String toXml(java.util.Collection collection) {
        return com.github.underscore.lodash.Xml.toXml(collection, com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TWO_SPACES);
    }

    public static java.lang.String toXml(java.util.Map map, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep) {
        final com.github.underscore.lodash.Xml.XmlStringBuilder builder;
        final java.util.Map localMap;
        if ((map != null) && (map.containsKey(com.github.underscore.lodash.Xml.ENCODING))) {
            builder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutRoot(identStep, java.lang.String.valueOf(map.get(com.github.underscore.lodash.Xml.ENCODING)));
            localMap = ((java.util.Map) (com.github.underscore.lodash.U.clone(map)));
            localMap.remove(com.github.underscore.lodash.Xml.ENCODING);
        }else {
            builder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutRoot(identStep, com.github.underscore.lodash.Xml.UTF_8.name());
            localMap = map;
        }
        if ((((localMap == null) || ((localMap.size()) != 1)) || (java.lang.String.valueOf(((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getKey()).startsWith("-"))) || ((((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getValue()) instanceof java.util.List)) {
            final java.lang.String name;
            if ((((localMap != null) && ((localMap.size()) == 1)) && ((((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getValue()) instanceof java.util.List)) && (!(((java.util.List) (((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getValue())).isEmpty()))) {
                name = java.lang.String.valueOf(((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getKey());
            }else {
                name = "root";
            }
            com.github.underscore.lodash.Xml.XmlObject.writeXml(localMap, name, builder, false, com.github.underscore.lodash.U.<java.lang.String>newLinkedHashSet());
        }else {
            com.github.underscore.lodash.Xml.XmlObject.writeXml(localMap, null, builder, false, com.github.underscore.lodash.U.<java.lang.String>newLinkedHashSet());
        }
        return builder.toString();
    }

    public static java.lang.String toXml(java.util.Map map) {
        return com.github.underscore.lodash.Xml.toXml(map, com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TWO_SPACES);
    }

    @java.lang.SuppressWarnings("unchecked")
    private static java.lang.Object getValue(final java.lang.Object value) {
        if ((value instanceof java.util.Map) && ((((java.util.Map<java.lang.String, java.lang.Object>) (value)).entrySet().size()) == 1)) {
            final java.util.Map.Entry<java.lang.String, java.lang.Object> entry = ((java.util.Map<java.lang.String, java.lang.Object>) (value)).entrySet().iterator().next();
            if ((com.github.underscore.lodash.Xml.TEXT.equals(entry.getKey())) || (entry.getKey().equals(com.github.underscore.lodash.Xml.ELEMENT_TEXT))) {
                return entry.getValue();
            }
        }
        return value;
    }

    @java.lang.SuppressWarnings("unchecked")
    private static java.util.Map<java.lang.String, java.lang.Object> createMap(final org.w3c.dom.Node node, final com.github.underscore.Function<java.lang.Object, java.lang.Object> nodeMapper, java.util.Map<java.lang.String, java.lang.Object> attrMap, int[] uniqueIds, final com.github.underscore.Function<java.lang.Object, java.lang.Object> valueMapper, java.lang.String source, int[] sourceIndex) {
        final java.util.Map<java.lang.String, java.lang.Object> map = com.github.underscore.lodash.U.newLinkedHashMap();
        map.putAll(attrMap);
        final org.w3c.dom.NodeList nodeList = node.getChildNodes();
        for (int index = 0; index < (nodeList.getLength()); index++) {
            final org.w3c.dom.Node currentNode = nodeList.item(index);
            final java.lang.String name = currentNode.getNodeName();
            final java.lang.Object value;
            final int attributesLength = ((currentNode.getAttributes()) == null) ? 0 : currentNode.getAttributes().getLength();
            if ((currentNode.getNodeType()) == (org.w3c.dom.Node.ELEMENT_NODE)) {
                sourceIndex[0] = ((source.indexOf(("<" + name), sourceIndex[0])) + (name.length())) + 2;
                final java.util.Map<java.lang.String, java.lang.Object> attrMapLocal = com.github.underscore.lodash.U.newLinkedHashMap();
                if (attributesLength > 0) {
                    final java.util.regex.Matcher matcher = com.github.underscore.lodash.Xml.ATTRS.matcher(source.substring(sourceIndex[0], source.indexOf(">", sourceIndex[0])));
                    while (matcher.find()) {
                        com.github.underscore.lodash.Xml.addNodeValue(attrMapLocal, ('-' + (matcher.group(1))), matcher.group(2), nodeMapper, uniqueIds);
                    } 
                }
                value = com.github.underscore.lodash.Xml.createMap(currentNode, nodeMapper, attrMapLocal, uniqueIds, valueMapper, source, sourceIndex);
            }else {
                if (com.github.underscore.lodash.Xml.COMMENT.equals(name)) {
                    sourceIndex[0] = (source.indexOf("-->", sourceIndex[0])) + 3;
                }else
                    if (com.github.underscore.lodash.Xml.CDATA.equals(name)) {
                        sourceIndex[0] = (source.indexOf("]]>", sourceIndex[0])) + 3;
                    }

                value = currentNode.getTextContent();
            }
            if ((com.github.underscore.lodash.Xml.TEXT.equals(name)) && (valueMapper.apply(value).toString().isEmpty())) {
                continue;
            }
            com.github.underscore.lodash.Xml.addNodeValue(map, name, value, nodeMapper, uniqueIds);
        }
        return map;
    }

    @java.lang.SuppressWarnings("unchecked")
    private static void addNodeValue(final java.util.Map<java.lang.String, java.lang.Object> map, final java.lang.String name, final java.lang.Object value, final com.github.underscore.Function<java.lang.Object, java.lang.Object> nodeMapper, int[] uniqueIds) {
        if (map.containsKey(name)) {
            if (com.github.underscore.lodash.Xml.TEXT.equals(name)) {
                map.put((name + (uniqueIds[0])), nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
                uniqueIds[0] += 1;
            }else
                if (com.github.underscore.lodash.Xml.COMMENT.equals(name)) {
                    map.put((name + (uniqueIds[1])), nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
                    uniqueIds[1] += 1;
                }else
                    if (com.github.underscore.lodash.Xml.CDATA.equals(name)) {
                        map.put((name + (uniqueIds[2])), nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
                        uniqueIds[2] += 1;
                    }else {
                        final java.lang.Object object = map.get(name);
                        if (object instanceof java.util.List) {
                            com.github.underscore.lodash.Xml.addText(map, name, ((java.util.List<java.lang.Object>) (object)), value);
                        }else {
                            final java.util.List<java.lang.Object> objects = com.github.underscore.lodash.U.newArrayList();
                            objects.add(object);
                            com.github.underscore.lodash.Xml.addText(map, name, objects, value);
                            map.put(name, objects);
                        }
                    }


        }else {
            map.put(name, nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
        }
    }

    @java.lang.SuppressWarnings("unchecked")
    private static void addText(final java.util.Map<java.lang.String, java.lang.Object> map, final java.lang.String name, final java.util.List<java.lang.Object> objects, final java.lang.Object value) {
        int lastIndex = (map.size()) - 1;
        final int index = objects.size();
        while (true) {
            final java.util.Map.Entry lastElement = ((java.util.Map.Entry) (map.entrySet().toArray()[lastIndex]));
            if (name.equals(java.lang.String.valueOf(lastElement.getKey()))) {
                break;
            }
            final java.util.Map<java.lang.String, java.lang.Object> text = com.github.underscore.lodash.U.newLinkedHashMap();
            text.put(java.lang.String.valueOf(lastElement.getKey()), map.remove(lastElement.getKey()));
            objects.add(index, text);
            lastIndex -= 1;
        } 
        objects.add(com.github.underscore.lodash.Xml.getValue(value));
    }

    @java.lang.SuppressWarnings("unchecked")
    public static java.lang.Object fromXml(final java.lang.String xml, final com.github.underscore.Function<java.lang.Object, java.lang.Object> valueMapper) {
        if (xml == null) {
            return null;
        }
        try {
            org.w3c.dom.Document document = com.github.underscore.lodash.Xml.createDocument(xml);
            final java.lang.Object result = com.github.underscore.lodash.Xml.createMap(document, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
                public java.lang.Object apply(java.lang.Object object) {
                    return object;
                }
            }, java.util.Collections.<java.lang.String, java.lang.Object>emptyMap(), new int[]{ 1, 1, 1 }, valueMapper, xml, new int[]{ 0 });
            if (((document.getXmlEncoding()) != null) && (!("UTF-8".equalsIgnoreCase(document.getXmlEncoding())))) {
                ((java.util.Map) (result)).put(com.github.underscore.lodash.Xml.ENCODING, document.getXmlEncoding());
            }else
                if ((((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getKey().equals("root")) && (((((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getValue()) instanceof java.util.List) || ((((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getValue()) instanceof java.util.Map))) {
                    return ((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getValue();
                }

            return result;
        } catch (java.lang.Exception ex) {
            throw new java.lang.IllegalArgumentException(ex);
        }
    }

    public static java.lang.Object fromXml(final java.lang.String xml) {
        return com.github.underscore.lodash.Xml.fromXml(xml, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
            public java.lang.Object apply(java.lang.Object object) {
                return java.lang.String.valueOf(object).trim();
            }
        });
    }

    private static org.w3c.dom.Document createDocument(final java.lang.String xml) throws java.io.IOException, javax.xml.parsers.ParserConfigurationException, org.xml.sax.SAXException {
        final javax.xml.parsers.DocumentBuilderFactory factory = javax.xml.parsers.DocumentBuilderFactory.newInstance();
        factory.setNamespaceAware(true);
        factory.setFeature(javax.xml.XMLConstants.FEATURE_SECURE_PROCESSING, true);
        final javax.xml.parsers.DocumentBuilder builder = factory.newDocumentBuilder();
        builder.setErrorHandler(new org.xml.sax.helpers.DefaultHandler());
        return builder.parse(new org.xml.sax.InputSource(new java.io.StringReader(xml)));
    }

    public static java.lang.Object fromXmlMakeArrays(final java.lang.String xml) {
        try {
            org.w3c.dom.Document document = com.github.underscore.lodash.Xml.createDocument(xml);
            return com.github.underscore.lodash.Xml.createMap(document, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
                public java.lang.Object apply(java.lang.Object object) {
                    return object instanceof java.util.List ? object : com.github.underscore.lodash.U.newArrayList(java.util.Arrays.asList(object));
                }
            }, java.util.Collections.<java.lang.String, java.lang.Object>emptyMap(), new int[]{ 1, 1, 1 }, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
                public java.lang.Object apply(java.lang.Object object) {
                    return java.lang.String.valueOf(object).trim();
                }
            }, xml, new int[]{ 0 });
        } catch (java.lang.Exception ex) {
            throw new java.lang.IllegalArgumentException(ex);
        }
    }

    @java.lang.SuppressWarnings("unchecked")
    public static java.lang.String formatXml(java.lang.String xml, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep) {
        java.lang.Object result = com.github.underscore.lodash.Xml.fromXml(xml);
        if (result instanceof java.util.Map) {
            return com.github.underscore.lodash.Xml.toXml(((java.util.Map) (result)), identStep);
        }
        return com.github.underscore.lodash.Xml.toXml(((java.util.List) (result)), identStep);
    }

    public static java.lang.String formatXml(java.lang.String xml) {
        return com.github.underscore.lodash.Xml.formatXml(xml, com.github.underscore.lodash.Xml.XmlStringBuilder.Step.THREE_SPACES);
    }
}
16:26:55.930 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
16:26:55.930 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #73
16:26:55.930 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlObject:408 which is executed by 27 tests
88056
16:26:56.027 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:26:56.084 [pool-230-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (50 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:26:56.377 [pool-229-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Xml.java:409: error: non-static variable ident cannot be referenced from a static context
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident",com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                                  ^
Xml.java:620: warning: com.sun.org.apache.xerces.internal.util.XMLChar is internal proprietary API and may be removed in a future release
            if ((com.sun.org.apache.xerces.internal.util.XMLChar.isNameStart(ch)) && (ch != ':')) {
                                                        ^
Xml.java:630: warning: com.sun.org.apache.xerces.internal.util.XMLChar is internal proprietary API and may be removed in a future release
                    if ((com.sun.org.apache.xerces.internal.util.XMLChar.isName(ch)) && (ch != ':')) {
                                                                ^
16:26:56.506 [pool-229-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public final class Xml {
    private static final java.lang.String NULL = "null";

    private static final java.lang.String ELEMENT_TEXT = "element";

    private static final java.lang.String CDATA = "#cdata-section";

    private static final java.lang.String COMMENT = "#comment";

    private static final java.lang.String ENCODING = "#encoding";

    private static final java.lang.String TEXT = "#text";

    private static final java.lang.String ELEMENT = ("<" + (com.github.underscore.lodash.Xml.ELEMENT_TEXT)) + ">";

    private static final java.lang.String CLOSED_ELEMENT = ("</" + (com.github.underscore.lodash.Xml.ELEMENT_TEXT)) + ">";

    private static final java.lang.String EMPTY_ELEMENT = (com.github.underscore.lodash.Xml.ELEMENT) + (com.github.underscore.lodash.Xml.CLOSED_ELEMENT);

    private static final java.lang.String NULL_ELEMENT = ((com.github.underscore.lodash.Xml.ELEMENT) + (com.github.underscore.lodash.Xml.NULL)) + (com.github.underscore.lodash.Xml.CLOSED_ELEMENT);

    private static final java.nio.charset.Charset UTF_8 = java.nio.charset.Charset.forName("UTF-8");

    private static final java.util.regex.Pattern ATTRS = java.util.regex.Pattern.compile(("((?:(?!\\s|=).)*)\\s*?=\\s*?[\"\']?((?:(?<=\")(?:(?<=\\\\)\"|[^\"])*|(?<=\')" + "(?:(?<=\\\\)\'|[^\'])*)|(?:(?!\"|\')(?:(?!\\/>|>|\\s).)+))"));

    public static class XmlStringBuilder {
        public enum Step {

            TWO_SPACES(2),
            THREE_SPACES(3),
            FOUR_SPACES(4),
            COMPACT(0),
            TABS(1);
            private int ident;

            Step(int ident) {
                this.ident = ident;
            }

            public int getIdent() {
                return ident;
            }
        }

        protected final java.lang.StringBuilder builder;

        private final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep;

        private int ident;

        public XmlStringBuilder() {
            builder = new java.lang.StringBuilder("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<root>\n");
            identStep = com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TWO_SPACES;
            ident = 2;
        }

        public XmlStringBuilder(java.lang.StringBuilder builder, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident) {
            this.builder = builder;
            this.identStep = identStep;
            this.ident = ident;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder append(final java.lang.String string) {
            builder.append(string);
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder fillSpaces() {
            for (int index = 0; index < (ident); index += 1) {
                builder.append(((identStep) == (com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TABS) ? '\t' : ' '));
            }
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder incIdent() {
            ident += identStep.getIdent();
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder decIdent() {
            ident -= identStep.getIdent();
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder newLine() {
            if ((identStep) != (com.github.underscore.lodash.Xml.XmlStringBuilder.Step.COMPACT)) {
                builder.append("\n");
            }
            return this;
        }

        public int getIdent() {
            return ident;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder.Step getIdentStep() {
            return identStep;
        }

        public java.lang.String toString() {
            return (builder.toString()) + "\n</root>";
        }
    }

    public static class XmlStringBuilderWithoutRoot extends com.github.underscore.lodash.Xml.XmlStringBuilder {
        public XmlStringBuilderWithoutRoot(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, java.lang.String encoding) {
            super(new java.lang.StringBuilder(((("<?xml version=\"1.0\" encoding=\"" + (com.github.underscore.lodash.U.escape(encoding))) + "\"?>") + (identStep == (com.github.underscore.lodash.Xml.XmlStringBuilder.Step.COMPACT) ? "" : "\n"))), identStep, 0);
        }

        public java.lang.String toString() {
            return builder.toString();
        }
    }

    public static class XmlStringBuilderWithoutHeader extends com.github.underscore.lodash.Xml.XmlStringBuilder {
        public XmlStringBuilderWithoutHeader(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident) {
            super(new java.lang.StringBuilder(), identStep, ident);
        }

        public java.lang.String toString() {
            return builder.toString();
        }
    }

    public static class XmlStringBuilderText extends com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader {
        public XmlStringBuilderText(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident) {
            super(identStep, ident);
        }
    }

    public static class XmlArray {
        public static void writeXml(java.util.Collection collection, java.lang.String name, com.github.underscore.lodash.Xml.XmlStringBuilder builder, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (collection == null) {
                builder.append(com.github.underscore.lodash.Xml.NULL);
                return;
            }
            if (name != null) {
                builder.fillSpaces().append("<").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(">").incIdent();
                if (!(collection.isEmpty())) {
                    builder.newLine();
                }
            }
            com.github.underscore.lodash.Xml.XmlArray.writeXml(collection, builder, name, parentTextFound, namespaces);
            if (name != null) {
                builder.decIdent().newLine().fillSpaces().append("</").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(">");
            }
        }

        @java.lang.SuppressWarnings("unchecked")
        private static void writeXml(java.util.Collection collection, com.github.underscore.lodash.Xml.XmlStringBuilder builder, java.lang.String name, final boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            boolean localParentTextFound = parentTextFound;
            final java.util.List entries = com.github.underscore.lodash.U.newArrayList(collection);
            for (int index = 0; index < (entries.size()); index += 1) {
                final java.lang.Object value = entries.get(index);
                final boolean addNewLine = (index < ((entries.size()) - 1)) && (!(java.lang.String.valueOf(entries.get((index + 1))).startsWith(("{" + (com.github.underscore.lodash.Xml.TEXT)))));
                if (value == null) {
                    builder.fillSpaces().append((((((("<" + (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">") + (com.github.underscore.lodash.Xml.NULL)) + "</") + (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">"));
                }else {
                    if ((value instanceof java.util.Map) && ((((java.util.Map) (value)).size()) == 1)) {
                        com.github.underscore.lodash.Xml.XmlObject.writeXml(((java.util.Map) (value)), null, builder, localParentTextFound, namespaces);
                        if (java.lang.String.valueOf(((java.util.Map.Entry) (((java.util.Map) (value)).entrySet().iterator().next())).getKey()).startsWith(com.github.underscore.lodash.Xml.TEXT)) {
                            localParentTextFound = true;
                            continue;
                        }
                    }else {
                        com.github.underscore.lodash.Xml.XmlValue.writeXml(value, (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : name), builder, localParentTextFound, namespaces);
                    }
                    localParentTextFound = false;
                }
                if (addNewLine) {
                    builder.newLine();
                }
            }
        }

        public static void writeXml(byte[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(short[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(int[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(long[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(float[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(double[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(boolean[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(char[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(java.lang.Object[] array, java.lang.String name, com.github.underscore.lodash.Xml.XmlStringBuilder builder, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        com.github.underscore.lodash.Xml.XmlValue.writeXml(array[i], (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : name), builder, parentTextFound, namespaces);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }
    }

    public static class XmlObject {
        @java.lang.SuppressWarnings("unchecked")
        public static void writeXml(java.util.Map map, java.lang.String name, final com.github.underscore.lodash.Xml.XmlStringBuilder builder, final boolean parentTextFound, final java.util.Set<java.lang.String> namespaces) {
            if (map == null) {
                com.github.underscore.lodash.Xml.XmlValue.writeXml(com.github.underscore.lodash.Xml.NULL, name, builder, false, namespaces);
                return;
            }
            final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems = com.github.underscore.lodash.U.newArrayList();
            final java.util.List<java.lang.String> attrs = com.github.underscore.lodash.U.newArrayList();
            final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep = builder.getIdentStep();
            final int ident = (builder.getIdent()) + (name == null ? 0 : builder.getIdentStep().getIdent());
            final java.util.List<java.util.Map.Entry> entries = com.github.underscore.lodash.U.newArrayList(map.entrySet());
            for (int index = 0; index < (entries.size()); index += 1) {
                final java.util.Map.Entry entry = entries.get(index);
                final boolean addNewLine = (index < ((entries.size()) - 1)) && (!(java.lang.String.valueOf(entries.get((index + 1)).getKey()).startsWith(com.github.underscore.lodash.Xml.TEXT)));
                if (((java.lang.String.valueOf(entry.getKey()).startsWith("-")) && (!((entry.getValue()) instanceof java.util.Map))) && (!((entry.getValue()) instanceof java.util.List))) {
                    attrs.add(((((" " + (com.github.underscore.lodash.Xml.XmlValue.escapeName(java.lang.String.valueOf(entry.getKey()).substring(1), namespaces))) + "=\"") + (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getValue())))) + "\""));
                    if (java.lang.String.valueOf(entry.getKey()).startsWith("-xmlns:")) {
                        namespaces.add(java.lang.String.valueOf(entry.getKey()).substring(7));
                    }
                }else
                    if (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getKey())).startsWith(com.github.underscore.lodash.Xml.TEXT)) {
                        com.github.underscore.lodash.Xml.XmlObject.addText(entry, elems, identStep, ident);
                    }else {
                        com.github.underscore.lodash.Xml.XmlObject.processElements(entry, identStep, ident, addNewLine, elems, namespaces);
                    }

            }
            if (name != null) {
                if (!parentTextFound) {
                    builder.fillSpaces();
                }
                builder.append("<").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(com.github.underscore.lodash.U.join(attrs, "")).append(">").incIdent();
                if ((!(elems.isEmpty())) && (!((elems.get(0)) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText))) {
                    builder.newLine();
                }
            }
            for (com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder1 : elems) {
                builder.append(localBuilder1.toString());
            }
            if (name != null) {
                builder.decIdent();
                if ((!(elems.isEmpty())) && (!((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText))) {
                    builder.newLine().fillSpaces();
                }
                builder.append("</").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(">");
            }
        }

        private static void processElements(final java.util.Map.Entry entry, final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident, final boolean addNewLine, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final java.util.Set<java.lang.String> namespaces) {
            if (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getKey())).startsWith(com.github.underscore.lodash.Xml.COMMENT)) {
                com.github.underscore.lodash.Xml.XmlObject.addComment(entry, identStep, ident, addNewLine, elems, "<!--", "-->");
            }else {
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(65).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.github.underscore.lodash.Xml.ENCODING",com.github.underscore.lodash.Xml.ENCODING);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident",com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("elems",elems);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.github.underscore.lodash.Xml.NULL_ELEMENT",com.github.underscore.lodash.Xml.NULL_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("addNewLine",addNewLine);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("ident",ident);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.github.underscore.lodash.Xml.ATTRS",com.github.underscore.lodash.Xml.ATTRS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("identStep",identStep);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.github.underscore.lodash.Xml.TEXT",com.github.underscore.lodash.Xml.TEXT);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.github.underscore.lodash.Xml.NULL",com.github.underscore.lodash.Xml.NULL);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.github.underscore.lodash.Xml.ELEMENT_TEXT",com.github.underscore.lodash.Xml.ELEMENT_TEXT);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.github.underscore.lodash.Xml.CLOSED_ELEMENT",com.github.underscore.lodash.Xml.CLOSED_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.github.underscore.lodash.Xml.UTF_8",com.github.underscore.lodash.Xml.UTF_8);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.github.underscore.lodash.Xml.CDATA",com.github.underscore.lodash.Xml.CDATA);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("entry",entry);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.github.underscore.lodash.Xml.COMMENT",com.github.underscore.lodash.Xml.COMMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.github.underscore.lodash.Xml.EMPTY_ELEMENT",com.github.underscore.lodash.Xml.EMPTY_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.github.underscore.lodash.Xml.ELEMENT",com.github.underscore.lodash.Xml.ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("namespaces",namespaces);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectionEnds();
                }
                if (runtimeAngelicValue) if (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getKey())).startsWith(com.github.underscore.lodash.Xml.CDATA)) {
                    com.github.underscore.lodash.Xml.XmlObject.addComment(entry, identStep, ident, addNewLine, elems, "<![CDATA[", "]]>");
                }else
                    if (((entry.getValue()) instanceof java.util.List) && (!(((java.util.List) (entry.getValue())).isEmpty()))) {
                        com.github.underscore.lodash.Xml.XmlObject.addElements(identStep, ident, entry, namespaces, elems, addNewLine);
                    }else {
                        com.github.underscore.lodash.Xml.XmlObject.addElement(identStep, ident, entry, namespaces, elems, addNewLine);
                    }

            }
        }

        private static void addText(final java.util.Map.Entry entry, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident) {
            if ((entry.getValue()) instanceof java.util.List) {
                for (java.lang.Object value : ((java.util.List) (entry.getValue()))) {
                    elems.add(new com.github.underscore.lodash.Xml.XmlStringBuilderText(identStep, ident).append(com.github.underscore.lodash.U.escape(java.lang.String.valueOf(value))));
                }
            }else {
                elems.add(new com.github.underscore.lodash.Xml.XmlStringBuilderText(identStep, ident).append(com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getValue()))));
            }
        }

        private static void addElements(final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident, java.util.Map.Entry entry, java.util.Set<java.lang.String> namespaces, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final boolean addNewLine) {
            boolean parentTextFound = (!(elems.isEmpty())) && ((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText);
            final com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder;
            if ((java.lang.String.valueOf(((java.util.List) (entry.getValue())).get(0)).startsWith(("{" + (com.github.underscore.lodash.Xml.TEXT)))) || (java.lang.String.valueOf(((java.util.List) (entry.getValue())).get(((((java.util.List) (entry.getValue())).size()) - 1))).startsWith(("{" + (com.github.underscore.lodash.Xml.TEXT))))) {
                localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderText(identStep, ident);
            }else {
                localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader(identStep, ident);
            }
            com.github.underscore.lodash.Xml.XmlArray.writeXml(((java.util.List) (entry.getValue())), localBuilder, java.lang.String.valueOf(entry.getKey()), parentTextFound, namespaces);
            if (addNewLine) {
                localBuilder.newLine();
            }
            elems.add(localBuilder);
        }

        private static void addElement(final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident, java.util.Map.Entry entry, java.util.Set<java.lang.String> namespaces, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final boolean addNewLine) {
            boolean parentTextFound = (!(elems.isEmpty())) && ((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText);
            com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader(identStep, ident);
            com.github.underscore.lodash.Xml.XmlValue.writeXml(entry.getValue(), java.lang.String.valueOf(entry.getKey()), localBuilder, parentTextFound, namespaces);
            if (addNewLine) {
                localBuilder.newLine();
            }
            elems.add(localBuilder);
        }

        private static void addComment(java.util.Map.Entry entry, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident, boolean addNewLine, java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, java.lang.String openElement, java.lang.String closeElement) {
            if ((entry.getValue()) instanceof java.util.List) {
                for (java.util.Iterator iterator = ((java.util.List) (entry.getValue())).iterator(); iterator.hasNext();) {
                    com.github.underscore.lodash.Xml.XmlObject.addCommentValue(identStep, ident, java.lang.String.valueOf(iterator.next()), ((iterator.hasNext()) || addNewLine), elems, openElement, closeElement);
                }
            }else {
                com.github.underscore.lodash.Xml.XmlObject.addCommentValue(identStep, ident, java.lang.String.valueOf(entry.getValue()), addNewLine, elems, openElement, closeElement);
            }
        }

        private static void addCommentValue(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident, java.lang.String value, boolean addNewLine, java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, java.lang.String openElement, java.lang.String closeElement) {
            boolean parentTextFound = (!(elems.isEmpty())) && ((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText);
            com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader(identStep, ident);
            if (!parentTextFound) {
                localBuilder.fillSpaces();
            }
            localBuilder.append(openElement).append(value).append(closeElement);
            if (addNewLine) {
                localBuilder.newLine();
            }
            elems.add(localBuilder);
        }
    }

    public static class XmlValue {
        public static void writeXml(java.lang.Object value, java.lang.String name, com.github.underscore.lodash.Xml.XmlStringBuilder builder, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (value instanceof java.util.Map) {
                com.github.underscore.lodash.Xml.XmlObject.writeXml(((java.util.Map) (value)), name, builder, parentTextFound, namespaces);
                return;
            }
            if (value instanceof java.util.Collection) {
                com.github.underscore.lodash.Xml.XmlArray.writeXml(((java.util.Collection) (value)), name, builder, parentTextFound, namespaces);
                return;
            }
            if (!parentTextFound) {
                builder.fillSpaces();
            }
            builder.append((("<" + (com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">"));
            if (value == null) {
                builder.append(com.github.underscore.lodash.Xml.NULL);
            }else
                if (value instanceof java.lang.String) {
                    builder.append(com.github.underscore.lodash.Xml.XmlValue.escape(((java.lang.String) (value))));
                }else {
                    com.github.underscore.lodash.Xml.XmlValue.processArrays(value, builder, name, parentTextFound, namespaces);
                }

            builder.append((("</" + (com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">"));
        }

        private static void processArrays(java.lang.Object value, com.github.underscore.lodash.Xml.XmlStringBuilder builder, java.lang.String name, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (value instanceof java.lang.Double) {
                if ((((java.lang.Double) (value)).isInfinite()) || (((java.lang.Double) (value)).isNaN())) {
                    builder.append(com.github.underscore.lodash.Xml.NULL);
                }else {
                    builder.append(value.toString());
                }
            }else
                if (value instanceof java.lang.Float) {
                    if ((((java.lang.Float) (value)).isInfinite()) || (((java.lang.Float) (value)).isNaN())) {
                        builder.append(com.github.underscore.lodash.Xml.NULL);
                    }else {
                        builder.append(value.toString());
                    }
                }else
                    if (value instanceof java.lang.Number) {
                        builder.append(value.toString());
                    }else
                        if (value instanceof java.lang.Boolean) {
                            builder.append(value.toString());
                        }else
                            if (value instanceof byte[]) {
                                builder.newLine().incIdent();
                                com.github.underscore.lodash.Xml.XmlArray.writeXml(((byte[]) (value)), builder);
                                builder.decIdent().newLine().fillSpaces();
                            }else
                                if (value instanceof short[]) {
                                    builder.newLine().incIdent();
                                    com.github.underscore.lodash.Xml.XmlArray.writeXml(((short[]) (value)), builder);
                                    builder.decIdent().newLine().fillSpaces();
                                }else {
                                    com.github.underscore.lodash.Xml.XmlValue.processArrays2(value, builder, name, parentTextFound, namespaces);
                                }





        }

        private static void processArrays2(java.lang.Object value, com.github.underscore.lodash.Xml.XmlStringBuilder builder, java.lang.String name, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (value instanceof int[]) {
                builder.newLine().incIdent();
                com.github.underscore.lodash.Xml.XmlArray.writeXml(((int[]) (value)), builder);
                builder.decIdent().newLine().fillSpaces();
            }else
                if (value instanceof long[]) {
                    builder.newLine().incIdent();
                    com.github.underscore.lodash.Xml.XmlArray.writeXml(((long[]) (value)), builder);
                    builder.decIdent().newLine().fillSpaces();
                }else
                    if (value instanceof float[]) {
                        builder.newLine().incIdent();
                        com.github.underscore.lodash.Xml.XmlArray.writeXml(((float[]) (value)), builder);
                        builder.decIdent().newLine().fillSpaces();
                    }else
                        if (value instanceof double[]) {
                            builder.newLine().incIdent();
                            com.github.underscore.lodash.Xml.XmlArray.writeXml(((double[]) (value)), builder);
                            builder.decIdent().newLine().fillSpaces();
                        }else
                            if (value instanceof boolean[]) {
                                builder.newLine().incIdent();
                                com.github.underscore.lodash.Xml.XmlArray.writeXml(((boolean[]) (value)), builder);
                                builder.decIdent().newLine().fillSpaces();
                            }else
                                if (value instanceof char[]) {
                                    builder.newLine().incIdent();
                                    com.github.underscore.lodash.Xml.XmlArray.writeXml(((char[]) (value)), builder);
                                    builder.decIdent().newLine().fillSpaces();
                                }else
                                    if (value instanceof java.lang.Object[]) {
                                        builder.newLine().incIdent();
                                        com.github.underscore.lodash.Xml.XmlArray.writeXml(((java.lang.Object[]) (value)), name, builder, parentTextFound, namespaces);
                                        builder.decIdent().newLine().fillSpaces();
                                    }else {
                                        builder.append(value.toString());
                                    }






        }

        public static java.lang.String escapeName(java.lang.String name, java.util.Set<java.lang.String> namespaces) {
            final int length = name.length();
            if (length == 0) {
                return "__EE__EMPTY__EE__";
            }
            final java.lang.StringBuilder result = new java.lang.StringBuilder();
            char ch = name.charAt(0);
            if ((com.sun.org.apache.xerces.internal.util.XMLChar.isNameStart(ch)) && (ch != ':')) {
                result.append(ch);
            }else {
                result.append("__").append(com.github.underscore.lodash.Base32.encode(java.lang.Character.toString(ch))).append("__");
            }
            for (int i = 1; i < length; ++i) {
                ch = name.charAt(i);
                if ((ch == ':') && (("xmlns".equals(name.substring(0, i))) || (namespaces.contains(name.substring(0, i))))) {
                    result.append(ch);
                }else
                    if ((com.sun.org.apache.xerces.internal.util.XMLChar.isName(ch)) && (ch != ':')) {
                        result.append(ch);
                    }else {
                        result.append("__").append(com.github.underscore.lodash.Base32.encode(java.lang.Character.toString(ch))).append("__");
                    }

            }
            return result.toString();
        }

        public static java.lang.String escape(java.lang.String s) {
            if (s == null) {
                return null;
            }
            java.lang.StringBuilder sb = new java.lang.StringBuilder();
            com.github.underscore.lodash.Xml.XmlValue.escape(s, sb);
            return sb.toString();
        }

        private static void escape(java.lang.String s, java.lang.StringBuilder sb) {
            final int len = s.length();
            for (int i = 0; i < len; i++) {
                char ch = s.charAt(i);
                switch (ch) {
                    case '"' :
                        sb.append("&quot;");
                        break;
                    case '\'' :
                        sb.append("'");
                        break;
                    case '&' :
                        sb.append("&amp;");
                        break;
                    case '<' :
                        sb.append("&lt;");
                        break;
                    case '>' :
                        sb.append("&gt;");
                        break;
                    case '\b' :
                        sb.append("\\b");
                        break;
                    case '\f' :
                        sb.append("\\f");
                        break;
                    case '\n' :
                        sb.append("\n");
                        break;
                    case '\r' :
                        sb.append("\\r");
                        break;
                    case '\t' :
                        sb.append("\t");
                        break;
                    default :
                        if (((ch <= '\u001f') || ((ch >= '\u007f') && (ch <= '\u009f'))) || ((ch >= '\u2000') && (ch <= '\u20ff'))) {
                            java.lang.String ss = java.lang.Integer.toHexString(ch);
                            sb.append("&#x");
                            for (int k = 0; k < (4 - (ss.length())); k++) {
                                sb.append('0');
                            }
                            sb.append(ss.toUpperCase()).append(";");
                        }else {
                            sb.append(ch);
                        }
                        break;
                }
            }
        }
    }

    public static java.lang.String toXml(java.util.Collection collection, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep) {
        final com.github.underscore.lodash.Xml.XmlStringBuilder builder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutRoot(identStep, com.github.underscore.lodash.Xml.UTF_8.name());
        builder.append("<root>").incIdent();
        if ((collection == null) || (!(collection.isEmpty()))) {
            builder.newLine();
        }
        com.github.underscore.lodash.Xml.XmlArray.writeXml(collection, null, builder, false, com.github.underscore.lodash.U.<java.lang.String>newLinkedHashSet());
        return builder.newLine().append("</root>").toString();
    }

    public static java.lang.String toXml(java.util.Collection collection) {
        return com.github.underscore.lodash.Xml.toXml(collection, com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TWO_SPACES);
    }

    public static java.lang.String toXml(java.util.Map map, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep) {
        final com.github.underscore.lodash.Xml.XmlStringBuilder builder;
        final java.util.Map localMap;
        if ((map != null) && (map.containsKey(com.github.underscore.lodash.Xml.ENCODING))) {
            builder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutRoot(identStep, java.lang.String.valueOf(map.get(com.github.underscore.lodash.Xml.ENCODING)));
            localMap = ((java.util.Map) (com.github.underscore.lodash.U.clone(map)));
            localMap.remove(com.github.underscore.lodash.Xml.ENCODING);
        }else {
            builder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutRoot(identStep, com.github.underscore.lodash.Xml.UTF_8.name());
            localMap = map;
        }
        if ((((localMap == null) || ((localMap.size()) != 1)) || (java.lang.String.valueOf(((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getKey()).startsWith("-"))) || ((((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getValue()) instanceof java.util.List)) {
            final java.lang.String name;
            if ((((localMap != null) && ((localMap.size()) == 1)) && ((((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getValue()) instanceof java.util.List)) && (!(((java.util.List) (((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getValue())).isEmpty()))) {
                name = java.lang.String.valueOf(((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getKey());
            }else {
                name = "root";
            }
            com.github.underscore.lodash.Xml.XmlObject.writeXml(localMap, name, builder, false, com.github.underscore.lodash.U.<java.lang.String>newLinkedHashSet());
        }else {
            com.github.underscore.lodash.Xml.XmlObject.writeXml(localMap, null, builder, false, com.github.underscore.lodash.U.<java.lang.String>newLinkedHashSet());
        }
        return builder.toString();
    }

    public static java.lang.String toXml(java.util.Map map) {
        return com.github.underscore.lodash.Xml.toXml(map, com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TWO_SPACES);
    }

    @java.lang.SuppressWarnings("unchecked")
    private static java.lang.Object getValue(final java.lang.Object value) {
        if ((value instanceof java.util.Map) && ((((java.util.Map<java.lang.String, java.lang.Object>) (value)).entrySet().size()) == 1)) {
            final java.util.Map.Entry<java.lang.String, java.lang.Object> entry = ((java.util.Map<java.lang.String, java.lang.Object>) (value)).entrySet().iterator().next();
            if ((com.github.underscore.lodash.Xml.TEXT.equals(entry.getKey())) || (entry.getKey().equals(com.github.underscore.lodash.Xml.ELEMENT_TEXT))) {
                return entry.getValue();
            }
        }
        return value;
    }

    @java.lang.SuppressWarnings("unchecked")
    private static java.util.Map<java.lang.String, java.lang.Object> createMap(final org.w3c.dom.Node node, final com.github.underscore.Function<java.lang.Object, java.lang.Object> nodeMapper, java.util.Map<java.lang.String, java.lang.Object> attrMap, int[] uniqueIds, final com.github.underscore.Function<java.lang.Object, java.lang.Object> valueMapper, java.lang.String source, int[] sourceIndex) {
        final java.util.Map<java.lang.String, java.lang.Object> map = com.github.underscore.lodash.U.newLinkedHashMap();
        map.putAll(attrMap);
        final org.w3c.dom.NodeList nodeList = node.getChildNodes();
        for (int index = 0; index < (nodeList.getLength()); index++) {
            final org.w3c.dom.Node currentNode = nodeList.item(index);
            final java.lang.String name = currentNode.getNodeName();
            final java.lang.Object value;
            final int attributesLength = ((currentNode.getAttributes()) == null) ? 0 : currentNode.getAttributes().getLength();
            if ((currentNode.getNodeType()) == (org.w3c.dom.Node.ELEMENT_NODE)) {
                sourceIndex[0] = ((source.indexOf(("<" + name), sourceIndex[0])) + (name.length())) + 2;
                final java.util.Map<java.lang.String, java.lang.Object> attrMapLocal = com.github.underscore.lodash.U.newLinkedHashMap();
                if (attributesLength > 0) {
                    final java.util.regex.Matcher matcher = com.github.underscore.lodash.Xml.ATTRS.matcher(source.substring(sourceIndex[0], source.indexOf(">", sourceIndex[0])));
                    while (matcher.find()) {
                        com.github.underscore.lodash.Xml.addNodeValue(attrMapLocal, ('-' + (matcher.group(1))), matcher.group(2), nodeMapper, uniqueIds);
                    } 
                }
                value = com.github.underscore.lodash.Xml.createMap(currentNode, nodeMapper, attrMapLocal, uniqueIds, valueMapper, source, sourceIndex);
            }else {
                if (com.github.underscore.lodash.Xml.COMMENT.equals(name)) {
                    sourceIndex[0] = (source.indexOf("-->", sourceIndex[0])) + 3;
                }else
                    if (com.github.underscore.lodash.Xml.CDATA.equals(name)) {
                        sourceIndex[0] = (source.indexOf("]]>", sourceIndex[0])) + 3;
                    }

                value = currentNode.getTextContent();
            }
            if ((com.github.underscore.lodash.Xml.TEXT.equals(name)) && (valueMapper.apply(value).toString().isEmpty())) {
                continue;
            }
            com.github.underscore.lodash.Xml.addNodeValue(map, name, value, nodeMapper, uniqueIds);
        }
        return map;
    }

    @java.lang.SuppressWarnings("unchecked")
    private static void addNodeValue(final java.util.Map<java.lang.String, java.lang.Object> map, final java.lang.String name, final java.lang.Object value, final com.github.underscore.Function<java.lang.Object, java.lang.Object> nodeMapper, int[] uniqueIds) {
        if (map.containsKey(name)) {
            if (com.github.underscore.lodash.Xml.TEXT.equals(name)) {
                map.put((name + (uniqueIds[0])), nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
                uniqueIds[0] += 1;
            }else
                if (com.github.underscore.lodash.Xml.COMMENT.equals(name)) {
                    map.put((name + (uniqueIds[1])), nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
                    uniqueIds[1] += 1;
                }else
                    if (com.github.underscore.lodash.Xml.CDATA.equals(name)) {
                        map.put((name + (uniqueIds[2])), nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
                        uniqueIds[2] += 1;
                    }else {
                        final java.lang.Object object = map.get(name);
                        if (object instanceof java.util.List) {
                            com.github.underscore.lodash.Xml.addText(map, name, ((java.util.List<java.lang.Object>) (object)), value);
                        }else {
                            final java.util.List<java.lang.Object> objects = com.github.underscore.lodash.U.newArrayList();
                            objects.add(object);
                            com.github.underscore.lodash.Xml.addText(map, name, objects, value);
                            map.put(name, objects);
                        }
                    }


        }else {
            map.put(name, nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
        }
    }

    @java.lang.SuppressWarnings("unchecked")
    private static void addText(final java.util.Map<java.lang.String, java.lang.Object> map, final java.lang.String name, final java.util.List<java.lang.Object> objects, final java.lang.Object value) {
        int lastIndex = (map.size()) - 1;
        final int index = objects.size();
        while (true) {
            final java.util.Map.Entry lastElement = ((java.util.Map.Entry) (map.entrySet().toArray()[lastIndex]));
            if (name.equals(java.lang.String.valueOf(lastElement.getKey()))) {
                break;
            }
            final java.util.Map<java.lang.String, java.lang.Object> text = com.github.underscore.lodash.U.newLinkedHashMap();
            text.put(java.lang.String.valueOf(lastElement.getKey()), map.remove(lastElement.getKey()));
            objects.add(index, text);
            lastIndex -= 1;
        } 
        objects.add(com.github.underscore.lodash.Xml.getValue(value));
    }

    @java.lang.SuppressWarnings("unchecked")
    public static java.lang.Object fromXml(final java.lang.String xml, final com.github.underscore.Function<java.lang.Object, java.lang.Object> valueMapper) {
        if (xml == null) {
            return null;
        }
        try {
            org.w3c.dom.Document document = com.github.underscore.lodash.Xml.createDocument(xml);
            final java.lang.Object result = com.github.underscore.lodash.Xml.createMap(document, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
                public java.lang.Object apply(java.lang.Object object) {
                    return object;
                }
            }, java.util.Collections.<java.lang.String, java.lang.Object>emptyMap(), new int[]{ 1, 1, 1 }, valueMapper, xml, new int[]{ 0 });
            if (((document.getXmlEncoding()) != null) && (!("UTF-8".equalsIgnoreCase(document.getXmlEncoding())))) {
                ((java.util.Map) (result)).put(com.github.underscore.lodash.Xml.ENCODING, document.getXmlEncoding());
            }else
                if ((((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getKey().equals("root")) && (((((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getValue()) instanceof java.util.List) || ((((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getValue()) instanceof java.util.Map))) {
                    return ((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getValue();
                }

            return result;
        } catch (java.lang.Exception ex) {
            throw new java.lang.IllegalArgumentException(ex);
        }
    }

    public static java.lang.Object fromXml(final java.lang.String xml) {
        return com.github.underscore.lodash.Xml.fromXml(xml, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
            public java.lang.Object apply(java.lang.Object object) {
                return java.lang.String.valueOf(object).trim();
            }
        });
    }

    private static org.w3c.dom.Document createDocument(final java.lang.String xml) throws java.io.IOException, javax.xml.parsers.ParserConfigurationException, org.xml.sax.SAXException {
        final javax.xml.parsers.DocumentBuilderFactory factory = javax.xml.parsers.DocumentBuilderFactory.newInstance();
        factory.setNamespaceAware(true);
        factory.setFeature(javax.xml.XMLConstants.FEATURE_SECURE_PROCESSING, true);
        final javax.xml.parsers.DocumentBuilder builder = factory.newDocumentBuilder();
        builder.setErrorHandler(new org.xml.sax.helpers.DefaultHandler());
        return builder.parse(new org.xml.sax.InputSource(new java.io.StringReader(xml)));
    }

    public static java.lang.Object fromXmlMakeArrays(final java.lang.String xml) {
        try {
            org.w3c.dom.Document document = com.github.underscore.lodash.Xml.createDocument(xml);
            return com.github.underscore.lodash.Xml.createMap(document, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
                public java.lang.Object apply(java.lang.Object object) {
                    return object instanceof java.util.List ? object : com.github.underscore.lodash.U.newArrayList(java.util.Arrays.asList(object));
                }
            }, java.util.Collections.<java.lang.String, java.lang.Object>emptyMap(), new int[]{ 1, 1, 1 }, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
                public java.lang.Object apply(java.lang.Object object) {
                    return java.lang.String.valueOf(object).trim();
                }
            }, xml, new int[]{ 0 });
        } catch (java.lang.Exception ex) {
            throw new java.lang.IllegalArgumentException(ex);
        }
    }

    @java.lang.SuppressWarnings("unchecked")
    public static java.lang.String formatXml(java.lang.String xml, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep) {
        java.lang.Object result = com.github.underscore.lodash.Xml.fromXml(xml);
        if (result instanceof java.util.Map) {
            return com.github.underscore.lodash.Xml.toXml(((java.util.Map) (result)), identStep);
        }
        return com.github.underscore.lodash.Xml.toXml(((java.util.List) (result)), identStep);
    }

    public static java.lang.String formatXml(java.lang.String xml) {
        return com.github.underscore.lodash.Xml.formatXml(xml, com.github.underscore.lodash.Xml.XmlStringBuilder.Step.THREE_SPACES);
    }
}
16:26:56.507 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
16:26:56.507 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:26:56.564 [pool-232-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (50 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:26:56.856 [pool-231-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Xml.java:409: error: non-static variable ident cannot be referenced from a static context
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident",com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                                  ^
Xml.java:620: warning: com.sun.org.apache.xerces.internal.util.XMLChar is internal proprietary API and may be removed in a future release
            if ((com.sun.org.apache.xerces.internal.util.XMLChar.isNameStart(ch)) && (ch != ':')) {
                                                        ^
Xml.java:630: warning: com.sun.org.apache.xerces.internal.util.XMLChar is internal proprietary API and may be removed in a future release
                    if ((com.sun.org.apache.xerces.internal.util.XMLChar.isName(ch)) && (ch != ':')) {
                                                                ^
16:26:56.984 [pool-231-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public final class Xml {
    private static final java.lang.String NULL = "null";

    private static final java.lang.String ELEMENT_TEXT = "element";

    private static final java.lang.String CDATA = "#cdata-section";

    private static final java.lang.String COMMENT = "#comment";

    private static final java.lang.String ENCODING = "#encoding";

    private static final java.lang.String TEXT = "#text";

    private static final java.lang.String ELEMENT = ("<" + (com.github.underscore.lodash.Xml.ELEMENT_TEXT)) + ">";

    private static final java.lang.String CLOSED_ELEMENT = ("</" + (com.github.underscore.lodash.Xml.ELEMENT_TEXT)) + ">";

    private static final java.lang.String EMPTY_ELEMENT = (com.github.underscore.lodash.Xml.ELEMENT) + (com.github.underscore.lodash.Xml.CLOSED_ELEMENT);

    private static final java.lang.String NULL_ELEMENT = ((com.github.underscore.lodash.Xml.ELEMENT) + (com.github.underscore.lodash.Xml.NULL)) + (com.github.underscore.lodash.Xml.CLOSED_ELEMENT);

    private static final java.nio.charset.Charset UTF_8 = java.nio.charset.Charset.forName("UTF-8");

    private static final java.util.regex.Pattern ATTRS = java.util.regex.Pattern.compile(("((?:(?!\\s|=).)*)\\s*?=\\s*?[\"\']?((?:(?<=\")(?:(?<=\\\\)\"|[^\"])*|(?<=\')" + "(?:(?<=\\\\)\'|[^\'])*)|(?:(?!\"|\')(?:(?!\\/>|>|\\s).)+))"));

    public static class XmlStringBuilder {
        public enum Step {

            TWO_SPACES(2),
            THREE_SPACES(3),
            FOUR_SPACES(4),
            COMPACT(0),
            TABS(1);
            private int ident;

            Step(int ident) {
                this.ident = ident;
            }

            public int getIdent() {
                return ident;
            }
        }

        protected final java.lang.StringBuilder builder;

        private final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep;

        private int ident;

        public XmlStringBuilder() {
            builder = new java.lang.StringBuilder("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<root>\n");
            identStep = com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TWO_SPACES;
            ident = 2;
        }

        public XmlStringBuilder(java.lang.StringBuilder builder, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident) {
            this.builder = builder;
            this.identStep = identStep;
            this.ident = ident;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder append(final java.lang.String string) {
            builder.append(string);
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder fillSpaces() {
            for (int index = 0; index < (ident); index += 1) {
                builder.append(((identStep) == (com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TABS) ? '\t' : ' '));
            }
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder incIdent() {
            ident += identStep.getIdent();
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder decIdent() {
            ident -= identStep.getIdent();
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder newLine() {
            if ((identStep) != (com.github.underscore.lodash.Xml.XmlStringBuilder.Step.COMPACT)) {
                builder.append("\n");
            }
            return this;
        }

        public int getIdent() {
            return ident;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder.Step getIdentStep() {
            return identStep;
        }

        public java.lang.String toString() {
            return (builder.toString()) + "\n</root>";
        }
    }

    public static class XmlStringBuilderWithoutRoot extends com.github.underscore.lodash.Xml.XmlStringBuilder {
        public XmlStringBuilderWithoutRoot(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, java.lang.String encoding) {
            super(new java.lang.StringBuilder(((("<?xml version=\"1.0\" encoding=\"" + (com.github.underscore.lodash.U.escape(encoding))) + "\"?>") + (identStep == (com.github.underscore.lodash.Xml.XmlStringBuilder.Step.COMPACT) ? "" : "\n"))), identStep, 0);
        }

        public java.lang.String toString() {
            return builder.toString();
        }
    }

    public static class XmlStringBuilderWithoutHeader extends com.github.underscore.lodash.Xml.XmlStringBuilder {
        public XmlStringBuilderWithoutHeader(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident) {
            super(new java.lang.StringBuilder(), identStep, ident);
        }

        public java.lang.String toString() {
            return builder.toString();
        }
    }

    public static class XmlStringBuilderText extends com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader {
        public XmlStringBuilderText(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident) {
            super(identStep, ident);
        }
    }

    public static class XmlArray {
        public static void writeXml(java.util.Collection collection, java.lang.String name, com.github.underscore.lodash.Xml.XmlStringBuilder builder, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (collection == null) {
                builder.append(com.github.underscore.lodash.Xml.NULL);
                return;
            }
            if (name != null) {
                builder.fillSpaces().append("<").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(">").incIdent();
                if (!(collection.isEmpty())) {
                    builder.newLine();
                }
            }
            com.github.underscore.lodash.Xml.XmlArray.writeXml(collection, builder, name, parentTextFound, namespaces);
            if (name != null) {
                builder.decIdent().newLine().fillSpaces().append("</").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(">");
            }
        }

        @java.lang.SuppressWarnings("unchecked")
        private static void writeXml(java.util.Collection collection, com.github.underscore.lodash.Xml.XmlStringBuilder builder, java.lang.String name, final boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            boolean localParentTextFound = parentTextFound;
            final java.util.List entries = com.github.underscore.lodash.U.newArrayList(collection);
            for (int index = 0; index < (entries.size()); index += 1) {
                final java.lang.Object value = entries.get(index);
                final boolean addNewLine = (index < ((entries.size()) - 1)) && (!(java.lang.String.valueOf(entries.get((index + 1))).startsWith(("{" + (com.github.underscore.lodash.Xml.TEXT)))));
                if (value == null) {
                    builder.fillSpaces().append((((((("<" + (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">") + (com.github.underscore.lodash.Xml.NULL)) + "</") + (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">"));
                }else {
                    if ((value instanceof java.util.Map) && ((((java.util.Map) (value)).size()) == 1)) {
                        com.github.underscore.lodash.Xml.XmlObject.writeXml(((java.util.Map) (value)), null, builder, localParentTextFound, namespaces);
                        if (java.lang.String.valueOf(((java.util.Map.Entry) (((java.util.Map) (value)).entrySet().iterator().next())).getKey()).startsWith(com.github.underscore.lodash.Xml.TEXT)) {
                            localParentTextFound = true;
                            continue;
                        }
                    }else {
                        com.github.underscore.lodash.Xml.XmlValue.writeXml(value, (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : name), builder, localParentTextFound, namespaces);
                    }
                    localParentTextFound = false;
                }
                if (addNewLine) {
                    builder.newLine();
                }
            }
        }

        public static void writeXml(byte[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(short[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(int[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(long[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(float[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(double[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(boolean[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(char[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(java.lang.Object[] array, java.lang.String name, com.github.underscore.lodash.Xml.XmlStringBuilder builder, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        com.github.underscore.lodash.Xml.XmlValue.writeXml(array[i], (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : name), builder, parentTextFound, namespaces);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }
    }

    public static class XmlObject {
        @java.lang.SuppressWarnings("unchecked")
        public static void writeXml(java.util.Map map, java.lang.String name, final com.github.underscore.lodash.Xml.XmlStringBuilder builder, final boolean parentTextFound, final java.util.Set<java.lang.String> namespaces) {
            if (map == null) {
                com.github.underscore.lodash.Xml.XmlValue.writeXml(com.github.underscore.lodash.Xml.NULL, name, builder, false, namespaces);
                return;
            }
            final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems = com.github.underscore.lodash.U.newArrayList();
            final java.util.List<java.lang.String> attrs = com.github.underscore.lodash.U.newArrayList();
            final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep = builder.getIdentStep();
            final int ident = (builder.getIdent()) + (name == null ? 0 : builder.getIdentStep().getIdent());
            final java.util.List<java.util.Map.Entry> entries = com.github.underscore.lodash.U.newArrayList(map.entrySet());
            for (int index = 0; index < (entries.size()); index += 1) {
                final java.util.Map.Entry entry = entries.get(index);
                final boolean addNewLine = (index < ((entries.size()) - 1)) && (!(java.lang.String.valueOf(entries.get((index + 1)).getKey()).startsWith(com.github.underscore.lodash.Xml.TEXT)));
                if (((java.lang.String.valueOf(entry.getKey()).startsWith("-")) && (!((entry.getValue()) instanceof java.util.Map))) && (!((entry.getValue()) instanceof java.util.List))) {
                    attrs.add(((((" " + (com.github.underscore.lodash.Xml.XmlValue.escapeName(java.lang.String.valueOf(entry.getKey()).substring(1), namespaces))) + "=\"") + (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getValue())))) + "\""));
                    if (java.lang.String.valueOf(entry.getKey()).startsWith("-xmlns:")) {
                        namespaces.add(java.lang.String.valueOf(entry.getKey()).substring(7));
                    }
                }else
                    if (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getKey())).startsWith(com.github.underscore.lodash.Xml.TEXT)) {
                        com.github.underscore.lodash.Xml.XmlObject.addText(entry, elems, identStep, ident);
                    }else {
                        com.github.underscore.lodash.Xml.XmlObject.processElements(entry, identStep, ident, addNewLine, elems, namespaces);
                    }

            }
            if (name != null) {
                if (!parentTextFound) {
                    builder.fillSpaces();
                }
                builder.append("<").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(com.github.underscore.lodash.U.join(attrs, "")).append(">").incIdent();
                if ((!(elems.isEmpty())) && (!((elems.get(0)) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText))) {
                    builder.newLine();
                }
            }
            for (com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder1 : elems) {
                builder.append(localBuilder1.toString());
            }
            if (name != null) {
                builder.decIdent();
                if ((!(elems.isEmpty())) && (!((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText))) {
                    builder.newLine().fillSpaces();
                }
                builder.append("</").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(">");
            }
        }

        private static void processElements(final java.util.Map.Entry entry, final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident, final boolean addNewLine, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final java.util.Set<java.lang.String> namespaces) {
            if (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getKey())).startsWith(com.github.underscore.lodash.Xml.COMMENT)) {
                com.github.underscore.lodash.Xml.XmlObject.addComment(entry, identStep, ident, addNewLine, elems, "<!--", "-->");
            }else {
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getKey())).startsWith(com.github.underscore.lodash.Xml.CDATA);
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(66).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.github.underscore.lodash.Xml.ENCODING",com.github.underscore.lodash.Xml.ENCODING);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident",com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("elems",elems);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.github.underscore.lodash.Xml.NULL_ELEMENT",com.github.underscore.lodash.Xml.NULL_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("addNewLine",addNewLine);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("ident",ident);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.github.underscore.lodash.Xml.ATTRS",com.github.underscore.lodash.Xml.ATTRS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("identStep",identStep);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.github.underscore.lodash.Xml.TEXT",com.github.underscore.lodash.Xml.TEXT);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.github.underscore.lodash.Xml.NULL",com.github.underscore.lodash.Xml.NULL);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.github.underscore.lodash.Xml.ELEMENT_TEXT",com.github.underscore.lodash.Xml.ELEMENT_TEXT);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.github.underscore.lodash.Xml.CLOSED_ELEMENT",com.github.underscore.lodash.Xml.CLOSED_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.github.underscore.lodash.Xml.UTF_8",com.github.underscore.lodash.Xml.UTF_8);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.github.underscore.lodash.Xml.CDATA",com.github.underscore.lodash.Xml.CDATA);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("entry",entry);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.github.underscore.lodash.Xml.COMMENT",com.github.underscore.lodash.Xml.COMMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.github.underscore.lodash.Xml.EMPTY_ELEMENT",com.github.underscore.lodash.Xml.EMPTY_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.github.underscore.lodash.Xml.ELEMENT",com.github.underscore.lodash.Xml.ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("namespaces",namespaces);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectionEnds();
                }
                if (runtimeAngelicValue) {
                    com.github.underscore.lodash.Xml.XmlObject.addComment(entry, identStep, ident, addNewLine, elems, "<![CDATA[", "]]>");
                }else
                    if (((entry.getValue()) instanceof java.util.List) && (!(((java.util.List) (entry.getValue())).isEmpty()))) {
                        com.github.underscore.lodash.Xml.XmlObject.addElements(identStep, ident, entry, namespaces, elems, addNewLine);
                    }else {
                        com.github.underscore.lodash.Xml.XmlObject.addElement(identStep, ident, entry, namespaces, elems, addNewLine);
                    }

            }
        }

        private static void addText(final java.util.Map.Entry entry, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident) {
            if ((entry.getValue()) instanceof java.util.List) {
                for (java.lang.Object value : ((java.util.List) (entry.getValue()))) {
                    elems.add(new com.github.underscore.lodash.Xml.XmlStringBuilderText(identStep, ident).append(com.github.underscore.lodash.U.escape(java.lang.String.valueOf(value))));
                }
            }else {
                elems.add(new com.github.underscore.lodash.Xml.XmlStringBuilderText(identStep, ident).append(com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getValue()))));
            }
        }

        private static void addElements(final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident, java.util.Map.Entry entry, java.util.Set<java.lang.String> namespaces, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final boolean addNewLine) {
            boolean parentTextFound = (!(elems.isEmpty())) && ((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText);
            final com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder;
            if ((java.lang.String.valueOf(((java.util.List) (entry.getValue())).get(0)).startsWith(("{" + (com.github.underscore.lodash.Xml.TEXT)))) || (java.lang.String.valueOf(((java.util.List) (entry.getValue())).get(((((java.util.List) (entry.getValue())).size()) - 1))).startsWith(("{" + (com.github.underscore.lodash.Xml.TEXT))))) {
                localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderText(identStep, ident);
            }else {
                localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader(identStep, ident);
            }
            com.github.underscore.lodash.Xml.XmlArray.writeXml(((java.util.List) (entry.getValue())), localBuilder, java.lang.String.valueOf(entry.getKey()), parentTextFound, namespaces);
            if (addNewLine) {
                localBuilder.newLine();
            }
            elems.add(localBuilder);
        }

        private static void addElement(final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident, java.util.Map.Entry entry, java.util.Set<java.lang.String> namespaces, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final boolean addNewLine) {
            boolean parentTextFound = (!(elems.isEmpty())) && ((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText);
            com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader(identStep, ident);
            com.github.underscore.lodash.Xml.XmlValue.writeXml(entry.getValue(), java.lang.String.valueOf(entry.getKey()), localBuilder, parentTextFound, namespaces);
            if (addNewLine) {
                localBuilder.newLine();
            }
            elems.add(localBuilder);
        }

        private static void addComment(java.util.Map.Entry entry, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident, boolean addNewLine, java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, java.lang.String openElement, java.lang.String closeElement) {
            if ((entry.getValue()) instanceof java.util.List) {
                for (java.util.Iterator iterator = ((java.util.List) (entry.getValue())).iterator(); iterator.hasNext();) {
                    com.github.underscore.lodash.Xml.XmlObject.addCommentValue(identStep, ident, java.lang.String.valueOf(iterator.next()), ((iterator.hasNext()) || addNewLine), elems, openElement, closeElement);
                }
            }else {
                com.github.underscore.lodash.Xml.XmlObject.addCommentValue(identStep, ident, java.lang.String.valueOf(entry.getValue()), addNewLine, elems, openElement, closeElement);
            }
        }

        private static void addCommentValue(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident, java.lang.String value, boolean addNewLine, java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, java.lang.String openElement, java.lang.String closeElement) {
            boolean parentTextFound = (!(elems.isEmpty())) && ((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText);
            com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader(identStep, ident);
            if (!parentTextFound) {
                localBuilder.fillSpaces();
            }
            localBuilder.append(openElement).append(value).append(closeElement);
            if (addNewLine) {
                localBuilder.newLine();
            }
            elems.add(localBuilder);
        }
    }

    public static class XmlValue {
        public static void writeXml(java.lang.Object value, java.lang.String name, com.github.underscore.lodash.Xml.XmlStringBuilder builder, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (value instanceof java.util.Map) {
                com.github.underscore.lodash.Xml.XmlObject.writeXml(((java.util.Map) (value)), name, builder, parentTextFound, namespaces);
                return;
            }
            if (value instanceof java.util.Collection) {
                com.github.underscore.lodash.Xml.XmlArray.writeXml(((java.util.Collection) (value)), name, builder, parentTextFound, namespaces);
                return;
            }
            if (!parentTextFound) {
                builder.fillSpaces();
            }
            builder.append((("<" + (com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">"));
            if (value == null) {
                builder.append(com.github.underscore.lodash.Xml.NULL);
            }else
                if (value instanceof java.lang.String) {
                    builder.append(com.github.underscore.lodash.Xml.XmlValue.escape(((java.lang.String) (value))));
                }else {
                    com.github.underscore.lodash.Xml.XmlValue.processArrays(value, builder, name, parentTextFound, namespaces);
                }

            builder.append((("</" + (com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">"));
        }

        private static void processArrays(java.lang.Object value, com.github.underscore.lodash.Xml.XmlStringBuilder builder, java.lang.String name, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (value instanceof java.lang.Double) {
                if ((((java.lang.Double) (value)).isInfinite()) || (((java.lang.Double) (value)).isNaN())) {
                    builder.append(com.github.underscore.lodash.Xml.NULL);
                }else {
                    builder.append(value.toString());
                }
            }else
                if (value instanceof java.lang.Float) {
                    if ((((java.lang.Float) (value)).isInfinite()) || (((java.lang.Float) (value)).isNaN())) {
                        builder.append(com.github.underscore.lodash.Xml.NULL);
                    }else {
                        builder.append(value.toString());
                    }
                }else
                    if (value instanceof java.lang.Number) {
                        builder.append(value.toString());
                    }else
                        if (value instanceof java.lang.Boolean) {
                            builder.append(value.toString());
                        }else
                            if (value instanceof byte[]) {
                                builder.newLine().incIdent();
                                com.github.underscore.lodash.Xml.XmlArray.writeXml(((byte[]) (value)), builder);
                                builder.decIdent().newLine().fillSpaces();
                            }else
                                if (value instanceof short[]) {
                                    builder.newLine().incIdent();
                                    com.github.underscore.lodash.Xml.XmlArray.writeXml(((short[]) (value)), builder);
                                    builder.decIdent().newLine().fillSpaces();
                                }else {
                                    com.github.underscore.lodash.Xml.XmlValue.processArrays2(value, builder, name, parentTextFound, namespaces);
                                }





        }

        private static void processArrays2(java.lang.Object value, com.github.underscore.lodash.Xml.XmlStringBuilder builder, java.lang.String name, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (value instanceof int[]) {
                builder.newLine().incIdent();
                com.github.underscore.lodash.Xml.XmlArray.writeXml(((int[]) (value)), builder);
                builder.decIdent().newLine().fillSpaces();
            }else
                if (value instanceof long[]) {
                    builder.newLine().incIdent();
                    com.github.underscore.lodash.Xml.XmlArray.writeXml(((long[]) (value)), builder);
                    builder.decIdent().newLine().fillSpaces();
                }else
                    if (value instanceof float[]) {
                        builder.newLine().incIdent();
                        com.github.underscore.lodash.Xml.XmlArray.writeXml(((float[]) (value)), builder);
                        builder.decIdent().newLine().fillSpaces();
                    }else
                        if (value instanceof double[]) {
                            builder.newLine().incIdent();
                            com.github.underscore.lodash.Xml.XmlArray.writeXml(((double[]) (value)), builder);
                            builder.decIdent().newLine().fillSpaces();
                        }else
                            if (value instanceof boolean[]) {
                                builder.newLine().incIdent();
                                com.github.underscore.lodash.Xml.XmlArray.writeXml(((boolean[]) (value)), builder);
                                builder.decIdent().newLine().fillSpaces();
                            }else
                                if (value instanceof char[]) {
                                    builder.newLine().incIdent();
                                    com.github.underscore.lodash.Xml.XmlArray.writeXml(((char[]) (value)), builder);
                                    builder.decIdent().newLine().fillSpaces();
                                }else
                                    if (value instanceof java.lang.Object[]) {
                                        builder.newLine().incIdent();
                                        com.github.underscore.lodash.Xml.XmlArray.writeXml(((java.lang.Object[]) (value)), name, builder, parentTextFound, namespaces);
                                        builder.decIdent().newLine().fillSpaces();
                                    }else {
                                        builder.append(value.toString());
                                    }






        }

        public static java.lang.String escapeName(java.lang.String name, java.util.Set<java.lang.String> namespaces) {
            final int length = name.length();
            if (length == 0) {
                return "__EE__EMPTY__EE__";
            }
            final java.lang.StringBuilder result = new java.lang.StringBuilder();
            char ch = name.charAt(0);
            if ((com.sun.org.apache.xerces.internal.util.XMLChar.isNameStart(ch)) && (ch != ':')) {
                result.append(ch);
            }else {
                result.append("__").append(com.github.underscore.lodash.Base32.encode(java.lang.Character.toString(ch))).append("__");
            }
            for (int i = 1; i < length; ++i) {
                ch = name.charAt(i);
                if ((ch == ':') && (("xmlns".equals(name.substring(0, i))) || (namespaces.contains(name.substring(0, i))))) {
                    result.append(ch);
                }else
                    if ((com.sun.org.apache.xerces.internal.util.XMLChar.isName(ch)) && (ch != ':')) {
                        result.append(ch);
                    }else {
                        result.append("__").append(com.github.underscore.lodash.Base32.encode(java.lang.Character.toString(ch))).append("__");
                    }

            }
            return result.toString();
        }

        public static java.lang.String escape(java.lang.String s) {
            if (s == null) {
                return null;
            }
            java.lang.StringBuilder sb = new java.lang.StringBuilder();
            com.github.underscore.lodash.Xml.XmlValue.escape(s, sb);
            return sb.toString();
        }

        private static void escape(java.lang.String s, java.lang.StringBuilder sb) {
            final int len = s.length();
            for (int i = 0; i < len; i++) {
                char ch = s.charAt(i);
                switch (ch) {
                    case '"' :
                        sb.append("&quot;");
                        break;
                    case '\'' :
                        sb.append("'");
                        break;
                    case '&' :
                        sb.append("&amp;");
                        break;
                    case '<' :
                        sb.append("&lt;");
                        break;
                    case '>' :
                        sb.append("&gt;");
                        break;
                    case '\b' :
                        sb.append("\\b");
                        break;
                    case '\f' :
                        sb.append("\\f");
                        break;
                    case '\n' :
                        sb.append("\n");
                        break;
                    case '\r' :
                        sb.append("\\r");
                        break;
                    case '\t' :
                        sb.append("\t");
                        break;
                    default :
                        if (((ch <= '\u001f') || ((ch >= '\u007f') && (ch <= '\u009f'))) || ((ch >= '\u2000') && (ch <= '\u20ff'))) {
                            java.lang.String ss = java.lang.Integer.toHexString(ch);
                            sb.append("&#x");
                            for (int k = 0; k < (4 - (ss.length())); k++) {
                                sb.append('0');
                            }
                            sb.append(ss.toUpperCase()).append(";");
                        }else {
                            sb.append(ch);
                        }
                        break;
                }
            }
        }
    }

    public static java.lang.String toXml(java.util.Collection collection, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep) {
        final com.github.underscore.lodash.Xml.XmlStringBuilder builder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutRoot(identStep, com.github.underscore.lodash.Xml.UTF_8.name());
        builder.append("<root>").incIdent();
        if ((collection == null) || (!(collection.isEmpty()))) {
            builder.newLine();
        }
        com.github.underscore.lodash.Xml.XmlArray.writeXml(collection, null, builder, false, com.github.underscore.lodash.U.<java.lang.String>newLinkedHashSet());
        return builder.newLine().append("</root>").toString();
    }

    public static java.lang.String toXml(java.util.Collection collection) {
        return com.github.underscore.lodash.Xml.toXml(collection, com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TWO_SPACES);
    }

    public static java.lang.String toXml(java.util.Map map, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep) {
        final com.github.underscore.lodash.Xml.XmlStringBuilder builder;
        final java.util.Map localMap;
        if ((map != null) && (map.containsKey(com.github.underscore.lodash.Xml.ENCODING))) {
            builder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutRoot(identStep, java.lang.String.valueOf(map.get(com.github.underscore.lodash.Xml.ENCODING)));
            localMap = ((java.util.Map) (com.github.underscore.lodash.U.clone(map)));
            localMap.remove(com.github.underscore.lodash.Xml.ENCODING);
        }else {
            builder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutRoot(identStep, com.github.underscore.lodash.Xml.UTF_8.name());
            localMap = map;
        }
        if ((((localMap == null) || ((localMap.size()) != 1)) || (java.lang.String.valueOf(((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getKey()).startsWith("-"))) || ((((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getValue()) instanceof java.util.List)) {
            final java.lang.String name;
            if ((((localMap != null) && ((localMap.size()) == 1)) && ((((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getValue()) instanceof java.util.List)) && (!(((java.util.List) (((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getValue())).isEmpty()))) {
                name = java.lang.String.valueOf(((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getKey());
            }else {
                name = "root";
            }
            com.github.underscore.lodash.Xml.XmlObject.writeXml(localMap, name, builder, false, com.github.underscore.lodash.U.<java.lang.String>newLinkedHashSet());
        }else {
            com.github.underscore.lodash.Xml.XmlObject.writeXml(localMap, null, builder, false, com.github.underscore.lodash.U.<java.lang.String>newLinkedHashSet());
        }
        return builder.toString();
    }

    public static java.lang.String toXml(java.util.Map map) {
        return com.github.underscore.lodash.Xml.toXml(map, com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TWO_SPACES);
    }

    @java.lang.SuppressWarnings("unchecked")
    private static java.lang.Object getValue(final java.lang.Object value) {
        if ((value instanceof java.util.Map) && ((((java.util.Map<java.lang.String, java.lang.Object>) (value)).entrySet().size()) == 1)) {
            final java.util.Map.Entry<java.lang.String, java.lang.Object> entry = ((java.util.Map<java.lang.String, java.lang.Object>) (value)).entrySet().iterator().next();
            if ((com.github.underscore.lodash.Xml.TEXT.equals(entry.getKey())) || (entry.getKey().equals(com.github.underscore.lodash.Xml.ELEMENT_TEXT))) {
                return entry.getValue();
            }
        }
        return value;
    }

    @java.lang.SuppressWarnings("unchecked")
    private static java.util.Map<java.lang.String, java.lang.Object> createMap(final org.w3c.dom.Node node, final com.github.underscore.Function<java.lang.Object, java.lang.Object> nodeMapper, java.util.Map<java.lang.String, java.lang.Object> attrMap, int[] uniqueIds, final com.github.underscore.Function<java.lang.Object, java.lang.Object> valueMapper, java.lang.String source, int[] sourceIndex) {
        final java.util.Map<java.lang.String, java.lang.Object> map = com.github.underscore.lodash.U.newLinkedHashMap();
        map.putAll(attrMap);
        final org.w3c.dom.NodeList nodeList = node.getChildNodes();
        for (int index = 0; index < (nodeList.getLength()); index++) {
            final org.w3c.dom.Node currentNode = nodeList.item(index);
            final java.lang.String name = currentNode.getNodeName();
            final java.lang.Object value;
            final int attributesLength = ((currentNode.getAttributes()) == null) ? 0 : currentNode.getAttributes().getLength();
            if ((currentNode.getNodeType()) == (org.w3c.dom.Node.ELEMENT_NODE)) {
                sourceIndex[0] = ((source.indexOf(("<" + name), sourceIndex[0])) + (name.length())) + 2;
                final java.util.Map<java.lang.String, java.lang.Object> attrMapLocal = com.github.underscore.lodash.U.newLinkedHashMap();
                if (attributesLength > 0) {
                    final java.util.regex.Matcher matcher = com.github.underscore.lodash.Xml.ATTRS.matcher(source.substring(sourceIndex[0], source.indexOf(">", sourceIndex[0])));
                    while (matcher.find()) {
                        com.github.underscore.lodash.Xml.addNodeValue(attrMapLocal, ('-' + (matcher.group(1))), matcher.group(2), nodeMapper, uniqueIds);
                    } 
                }
                value = com.github.underscore.lodash.Xml.createMap(currentNode, nodeMapper, attrMapLocal, uniqueIds, valueMapper, source, sourceIndex);
            }else {
                if (com.github.underscore.lodash.Xml.COMMENT.equals(name)) {
                    sourceIndex[0] = (source.indexOf("-->", sourceIndex[0])) + 3;
                }else
                    if (com.github.underscore.lodash.Xml.CDATA.equals(name)) {
                        sourceIndex[0] = (source.indexOf("]]>", sourceIndex[0])) + 3;
                    }

                value = currentNode.getTextContent();
            }
            if ((com.github.underscore.lodash.Xml.TEXT.equals(name)) && (valueMapper.apply(value).toString().isEmpty())) {
                continue;
            }
            com.github.underscore.lodash.Xml.addNodeValue(map, name, value, nodeMapper, uniqueIds);
        }
        return map;
    }

    @java.lang.SuppressWarnings("unchecked")
    private static void addNodeValue(final java.util.Map<java.lang.String, java.lang.Object> map, final java.lang.String name, final java.lang.Object value, final com.github.underscore.Function<java.lang.Object, java.lang.Object> nodeMapper, int[] uniqueIds) {
        if (map.containsKey(name)) {
            if (com.github.underscore.lodash.Xml.TEXT.equals(name)) {
                map.put((name + (uniqueIds[0])), nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
                uniqueIds[0] += 1;
            }else
                if (com.github.underscore.lodash.Xml.COMMENT.equals(name)) {
                    map.put((name + (uniqueIds[1])), nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
                    uniqueIds[1] += 1;
                }else
                    if (com.github.underscore.lodash.Xml.CDATA.equals(name)) {
                        map.put((name + (uniqueIds[2])), nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
                        uniqueIds[2] += 1;
                    }else {
                        final java.lang.Object object = map.get(name);
                        if (object instanceof java.util.List) {
                            com.github.underscore.lodash.Xml.addText(map, name, ((java.util.List<java.lang.Object>) (object)), value);
                        }else {
                            final java.util.List<java.lang.Object> objects = com.github.underscore.lodash.U.newArrayList();
                            objects.add(object);
                            com.github.underscore.lodash.Xml.addText(map, name, objects, value);
                            map.put(name, objects);
                        }
                    }


        }else {
            map.put(name, nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
        }
    }

    @java.lang.SuppressWarnings("unchecked")
    private static void addText(final java.util.Map<java.lang.String, java.lang.Object> map, final java.lang.String name, final java.util.List<java.lang.Object> objects, final java.lang.Object value) {
        int lastIndex = (map.size()) - 1;
        final int index = objects.size();
        while (true) {
            final java.util.Map.Entry lastElement = ((java.util.Map.Entry) (map.entrySet().toArray()[lastIndex]));
            if (name.equals(java.lang.String.valueOf(lastElement.getKey()))) {
                break;
            }
            final java.util.Map<java.lang.String, java.lang.Object> text = com.github.underscore.lodash.U.newLinkedHashMap();
            text.put(java.lang.String.valueOf(lastElement.getKey()), map.remove(lastElement.getKey()));
            objects.add(index, text);
            lastIndex -= 1;
        } 
        objects.add(com.github.underscore.lodash.Xml.getValue(value));
    }

    @java.lang.SuppressWarnings("unchecked")
    public static java.lang.Object fromXml(final java.lang.String xml, final com.github.underscore.Function<java.lang.Object, java.lang.Object> valueMapper) {
        if (xml == null) {
            return null;
        }
        try {
            org.w3c.dom.Document document = com.github.underscore.lodash.Xml.createDocument(xml);
            final java.lang.Object result = com.github.underscore.lodash.Xml.createMap(document, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
                public java.lang.Object apply(java.lang.Object object) {
                    return object;
                }
            }, java.util.Collections.<java.lang.String, java.lang.Object>emptyMap(), new int[]{ 1, 1, 1 }, valueMapper, xml, new int[]{ 0 });
            if (((document.getXmlEncoding()) != null) && (!("UTF-8".equalsIgnoreCase(document.getXmlEncoding())))) {
                ((java.util.Map) (result)).put(com.github.underscore.lodash.Xml.ENCODING, document.getXmlEncoding());
            }else
                if ((((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getKey().equals("root")) && (((((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getValue()) instanceof java.util.List) || ((((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getValue()) instanceof java.util.Map))) {
                    return ((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getValue();
                }

            return result;
        } catch (java.lang.Exception ex) {
            throw new java.lang.IllegalArgumentException(ex);
        }
    }

    public static java.lang.Object fromXml(final java.lang.String xml) {
        return com.github.underscore.lodash.Xml.fromXml(xml, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
            public java.lang.Object apply(java.lang.Object object) {
                return java.lang.String.valueOf(object).trim();
            }
        });
    }

    private static org.w3c.dom.Document createDocument(final java.lang.String xml) throws java.io.IOException, javax.xml.parsers.ParserConfigurationException, org.xml.sax.SAXException {
        final javax.xml.parsers.DocumentBuilderFactory factory = javax.xml.parsers.DocumentBuilderFactory.newInstance();
        factory.setNamespaceAware(true);
        factory.setFeature(javax.xml.XMLConstants.FEATURE_SECURE_PROCESSING, true);
        final javax.xml.parsers.DocumentBuilder builder = factory.newDocumentBuilder();
        builder.setErrorHandler(new org.xml.sax.helpers.DefaultHandler());
        return builder.parse(new org.xml.sax.InputSource(new java.io.StringReader(xml)));
    }

    public static java.lang.Object fromXmlMakeArrays(final java.lang.String xml) {
        try {
            org.w3c.dom.Document document = com.github.underscore.lodash.Xml.createDocument(xml);
            return com.github.underscore.lodash.Xml.createMap(document, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
                public java.lang.Object apply(java.lang.Object object) {
                    return object instanceof java.util.List ? object : com.github.underscore.lodash.U.newArrayList(java.util.Arrays.asList(object));
                }
            }, java.util.Collections.<java.lang.String, java.lang.Object>emptyMap(), new int[]{ 1, 1, 1 }, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
                public java.lang.Object apply(java.lang.Object object) {
                    return java.lang.String.valueOf(object).trim();
                }
            }, xml, new int[]{ 0 });
        } catch (java.lang.Exception ex) {
            throw new java.lang.IllegalArgumentException(ex);
        }
    }

    @java.lang.SuppressWarnings("unchecked")
    public static java.lang.String formatXml(java.lang.String xml, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep) {
        java.lang.Object result = com.github.underscore.lodash.Xml.fromXml(xml);
        if (result instanceof java.util.Map) {
            return com.github.underscore.lodash.Xml.toXml(((java.util.Map) (result)), identStep);
        }
        return com.github.underscore.lodash.Xml.toXml(((java.util.List) (result)), identStep);
    }

    public static java.lang.String formatXml(java.lang.String xml) {
        return com.github.underscore.lodash.Xml.formatXml(xml, com.github.underscore.lodash.Xml.XmlStringBuilder.Step.THREE_SPACES);
    }
}
16:26:56.984 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
16:26:56.984 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #74
16:26:56.985 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlObject:406 which is executed by 27 tests
88056
16:26:57.084 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:26:57.143 [pool-234-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (53 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:26:57.439 [pool-233-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Xml.java:406: error: non-static variable ident cannot be referenced from a static context
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectInput("com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident",com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                              ^
Xml.java:620: warning: com.sun.org.apache.xerces.internal.util.XMLChar is internal proprietary API and may be removed in a future release
            if ((com.sun.org.apache.xerces.internal.util.XMLChar.isNameStart(ch)) && (ch != ':')) {
                                                        ^
Xml.java:630: warning: com.sun.org.apache.xerces.internal.util.XMLChar is internal proprietary API and may be removed in a future release
                    if ((com.sun.org.apache.xerces.internal.util.XMLChar.isName(ch)) && (ch != ':')) {
                                                                ^
16:26:57.567 [pool-233-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public final class Xml {
    private static final java.lang.String NULL = "null";

    private static final java.lang.String ELEMENT_TEXT = "element";

    private static final java.lang.String CDATA = "#cdata-section";

    private static final java.lang.String COMMENT = "#comment";

    private static final java.lang.String ENCODING = "#encoding";

    private static final java.lang.String TEXT = "#text";

    private static final java.lang.String ELEMENT = ("<" + (com.github.underscore.lodash.Xml.ELEMENT_TEXT)) + ">";

    private static final java.lang.String CLOSED_ELEMENT = ("</" + (com.github.underscore.lodash.Xml.ELEMENT_TEXT)) + ">";

    private static final java.lang.String EMPTY_ELEMENT = (com.github.underscore.lodash.Xml.ELEMENT) + (com.github.underscore.lodash.Xml.CLOSED_ELEMENT);

    private static final java.lang.String NULL_ELEMENT = ((com.github.underscore.lodash.Xml.ELEMENT) + (com.github.underscore.lodash.Xml.NULL)) + (com.github.underscore.lodash.Xml.CLOSED_ELEMENT);

    private static final java.nio.charset.Charset UTF_8 = java.nio.charset.Charset.forName("UTF-8");

    private static final java.util.regex.Pattern ATTRS = java.util.regex.Pattern.compile(("((?:(?!\\s|=).)*)\\s*?=\\s*?[\"\']?((?:(?<=\")(?:(?<=\\\\)\"|[^\"])*|(?<=\')" + "(?:(?<=\\\\)\'|[^\'])*)|(?:(?!\"|\')(?:(?!\\/>|>|\\s).)+))"));

    public static class XmlStringBuilder {
        public enum Step {

            TWO_SPACES(2),
            THREE_SPACES(3),
            FOUR_SPACES(4),
            COMPACT(0),
            TABS(1);
            private int ident;

            Step(int ident) {
                this.ident = ident;
            }

            public int getIdent() {
                return ident;
            }
        }

        protected final java.lang.StringBuilder builder;

        private final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep;

        private int ident;

        public XmlStringBuilder() {
            builder = new java.lang.StringBuilder("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<root>\n");
            identStep = com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TWO_SPACES;
            ident = 2;
        }

        public XmlStringBuilder(java.lang.StringBuilder builder, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident) {
            this.builder = builder;
            this.identStep = identStep;
            this.ident = ident;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder append(final java.lang.String string) {
            builder.append(string);
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder fillSpaces() {
            for (int index = 0; index < (ident); index += 1) {
                builder.append(((identStep) == (com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TABS) ? '\t' : ' '));
            }
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder incIdent() {
            ident += identStep.getIdent();
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder decIdent() {
            ident -= identStep.getIdent();
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder newLine() {
            if ((identStep) != (com.github.underscore.lodash.Xml.XmlStringBuilder.Step.COMPACT)) {
                builder.append("\n");
            }
            return this;
        }

        public int getIdent() {
            return ident;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder.Step getIdentStep() {
            return identStep;
        }

        public java.lang.String toString() {
            return (builder.toString()) + "\n</root>";
        }
    }

    public static class XmlStringBuilderWithoutRoot extends com.github.underscore.lodash.Xml.XmlStringBuilder {
        public XmlStringBuilderWithoutRoot(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, java.lang.String encoding) {
            super(new java.lang.StringBuilder(((("<?xml version=\"1.0\" encoding=\"" + (com.github.underscore.lodash.U.escape(encoding))) + "\"?>") + (identStep == (com.github.underscore.lodash.Xml.XmlStringBuilder.Step.COMPACT) ? "" : "\n"))), identStep, 0);
        }

        public java.lang.String toString() {
            return builder.toString();
        }
    }

    public static class XmlStringBuilderWithoutHeader extends com.github.underscore.lodash.Xml.XmlStringBuilder {
        public XmlStringBuilderWithoutHeader(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident) {
            super(new java.lang.StringBuilder(), identStep, ident);
        }

        public java.lang.String toString() {
            return builder.toString();
        }
    }

    public static class XmlStringBuilderText extends com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader {
        public XmlStringBuilderText(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident) {
            super(identStep, ident);
        }
    }

    public static class XmlArray {
        public static void writeXml(java.util.Collection collection, java.lang.String name, com.github.underscore.lodash.Xml.XmlStringBuilder builder, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (collection == null) {
                builder.append(com.github.underscore.lodash.Xml.NULL);
                return;
            }
            if (name != null) {
                builder.fillSpaces().append("<").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(">").incIdent();
                if (!(collection.isEmpty())) {
                    builder.newLine();
                }
            }
            com.github.underscore.lodash.Xml.XmlArray.writeXml(collection, builder, name, parentTextFound, namespaces);
            if (name != null) {
                builder.decIdent().newLine().fillSpaces().append("</").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(">");
            }
        }

        @java.lang.SuppressWarnings("unchecked")
        private static void writeXml(java.util.Collection collection, com.github.underscore.lodash.Xml.XmlStringBuilder builder, java.lang.String name, final boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            boolean localParentTextFound = parentTextFound;
            final java.util.List entries = com.github.underscore.lodash.U.newArrayList(collection);
            for (int index = 0; index < (entries.size()); index += 1) {
                final java.lang.Object value = entries.get(index);
                final boolean addNewLine = (index < ((entries.size()) - 1)) && (!(java.lang.String.valueOf(entries.get((index + 1))).startsWith(("{" + (com.github.underscore.lodash.Xml.TEXT)))));
                if (value == null) {
                    builder.fillSpaces().append((((((("<" + (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">") + (com.github.underscore.lodash.Xml.NULL)) + "</") + (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">"));
                }else {
                    if ((value instanceof java.util.Map) && ((((java.util.Map) (value)).size()) == 1)) {
                        com.github.underscore.lodash.Xml.XmlObject.writeXml(((java.util.Map) (value)), null, builder, localParentTextFound, namespaces);
                        if (java.lang.String.valueOf(((java.util.Map.Entry) (((java.util.Map) (value)).entrySet().iterator().next())).getKey()).startsWith(com.github.underscore.lodash.Xml.TEXT)) {
                            localParentTextFound = true;
                            continue;
                        }
                    }else {
                        com.github.underscore.lodash.Xml.XmlValue.writeXml(value, (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : name), builder, localParentTextFound, namespaces);
                    }
                    localParentTextFound = false;
                }
                if (addNewLine) {
                    builder.newLine();
                }
            }
        }

        public static void writeXml(byte[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(short[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(int[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(long[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(float[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(double[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(boolean[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(char[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(java.lang.Object[] array, java.lang.String name, com.github.underscore.lodash.Xml.XmlStringBuilder builder, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        com.github.underscore.lodash.Xml.XmlValue.writeXml(array[i], (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : name), builder, parentTextFound, namespaces);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }
    }

    public static class XmlObject {
        @java.lang.SuppressWarnings("unchecked")
        public static void writeXml(java.util.Map map, java.lang.String name, final com.github.underscore.lodash.Xml.XmlStringBuilder builder, final boolean parentTextFound, final java.util.Set<java.lang.String> namespaces) {
            if (map == null) {
                com.github.underscore.lodash.Xml.XmlValue.writeXml(com.github.underscore.lodash.Xml.NULL, name, builder, false, namespaces);
                return;
            }
            final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems = com.github.underscore.lodash.U.newArrayList();
            final java.util.List<java.lang.String> attrs = com.github.underscore.lodash.U.newArrayList();
            final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep = builder.getIdentStep();
            final int ident = (builder.getIdent()) + (name == null ? 0 : builder.getIdentStep().getIdent());
            final java.util.List<java.util.Map.Entry> entries = com.github.underscore.lodash.U.newArrayList(map.entrySet());
            for (int index = 0; index < (entries.size()); index += 1) {
                final java.util.Map.Entry entry = entries.get(index);
                final boolean addNewLine = (index < ((entries.size()) - 1)) && (!(java.lang.String.valueOf(entries.get((index + 1)).getKey()).startsWith(com.github.underscore.lodash.Xml.TEXT)));
                if (((java.lang.String.valueOf(entry.getKey()).startsWith("-")) && (!((entry.getValue()) instanceof java.util.Map))) && (!((entry.getValue()) instanceof java.util.List))) {
                    attrs.add(((((" " + (com.github.underscore.lodash.Xml.XmlValue.escapeName(java.lang.String.valueOf(entry.getKey()).substring(1), namespaces))) + "=\"") + (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getValue())))) + "\""));
                    if (java.lang.String.valueOf(entry.getKey()).startsWith("-xmlns:")) {
                        namespaces.add(java.lang.String.valueOf(entry.getKey()).substring(7));
                    }
                }else
                    if (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getKey())).startsWith(com.github.underscore.lodash.Xml.TEXT)) {
                        com.github.underscore.lodash.Xml.XmlObject.addText(entry, elems, identStep, ident);
                    }else {
                        com.github.underscore.lodash.Xml.XmlObject.processElements(entry, identStep, ident, addNewLine, elems, namespaces);
                    }

            }
            if (name != null) {
                if (!parentTextFound) {
                    builder.fillSpaces();
                }
                builder.append("<").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(com.github.underscore.lodash.U.join(attrs, "")).append(">").incIdent();
                if ((!(elems.isEmpty())) && (!((elems.get(0)) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText))) {
                    builder.newLine();
                }
            }
            for (com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder1 : elems) {
                builder.append(localBuilder1.toString());
            }
            if (name != null) {
                builder.decIdent();
                if ((!(elems.isEmpty())) && (!((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText))) {
                    builder.newLine().fillSpaces();
                }
                builder.append("</").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(">");
            }
        }

        private static void processElements(final java.util.Map.Entry entry, final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident, final boolean addNewLine, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final java.util.Set<java.lang.String> namespaces) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(67).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectInput("com.github.underscore.lodash.Xml.ENCODING",com.github.underscore.lodash.Xml.ENCODING);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectInput("com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident",com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectInput("elems",elems);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectInput("com.github.underscore.lodash.Xml.NULL_ELEMENT",com.github.underscore.lodash.Xml.NULL_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectInput("addNewLine",addNewLine);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectInput("ident",ident);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectInput("com.github.underscore.lodash.Xml.ATTRS",com.github.underscore.lodash.Xml.ATTRS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectInput("identStep",identStep);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectInput("com.github.underscore.lodash.Xml.TEXT",com.github.underscore.lodash.Xml.TEXT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectInput("com.github.underscore.lodash.Xml.NULL",com.github.underscore.lodash.Xml.NULL);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectInput("com.github.underscore.lodash.Xml.ELEMENT_TEXT",com.github.underscore.lodash.Xml.ELEMENT_TEXT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectInput("com.github.underscore.lodash.Xml.CLOSED_ELEMENT",com.github.underscore.lodash.Xml.CLOSED_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectInput("com.github.underscore.lodash.Xml.UTF_8",com.github.underscore.lodash.Xml.UTF_8);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectInput("com.github.underscore.lodash.Xml.CDATA",com.github.underscore.lodash.Xml.CDATA);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectInput("entry",entry);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectInput("com.github.underscore.lodash.Xml.COMMENT",com.github.underscore.lodash.Xml.COMMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectInput("com.github.underscore.lodash.Xml.EMPTY_ELEMENT",com.github.underscore.lodash.Xml.EMPTY_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectInput("com.github.underscore.lodash.Xml.ELEMENT",com.github.underscore.lodash.Xml.ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectInput("namespaces",namespaces);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectionEnds();
            }
            if (runtimeAngelicValue) if (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getKey())).startsWith(com.github.underscore.lodash.Xml.COMMENT)) {
                com.github.underscore.lodash.Xml.XmlObject.addComment(entry, identStep, ident, addNewLine, elems, "<!--", "-->");
            }else
                if (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getKey())).startsWith(com.github.underscore.lodash.Xml.CDATA)) {
                    com.github.underscore.lodash.Xml.XmlObject.addComment(entry, identStep, ident, addNewLine, elems, "<![CDATA[", "]]>");
                }else
                    if (((entry.getValue()) instanceof java.util.List) && (!(((java.util.List) (entry.getValue())).isEmpty()))) {
                        com.github.underscore.lodash.Xml.XmlObject.addElements(identStep, ident, entry, namespaces, elems, addNewLine);
                    }else {
                        com.github.underscore.lodash.Xml.XmlObject.addElement(identStep, ident, entry, namespaces, elems, addNewLine);
                    }


        }

        private static void addText(final java.util.Map.Entry entry, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident) {
            if ((entry.getValue()) instanceof java.util.List) {
                for (java.lang.Object value : ((java.util.List) (entry.getValue()))) {
                    elems.add(new com.github.underscore.lodash.Xml.XmlStringBuilderText(identStep, ident).append(com.github.underscore.lodash.U.escape(java.lang.String.valueOf(value))));
                }
            }else {
                elems.add(new com.github.underscore.lodash.Xml.XmlStringBuilderText(identStep, ident).append(com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getValue()))));
            }
        }

        private static void addElements(final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident, java.util.Map.Entry entry, java.util.Set<java.lang.String> namespaces, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final boolean addNewLine) {
            boolean parentTextFound = (!(elems.isEmpty())) && ((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText);
            final com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder;
            if ((java.lang.String.valueOf(((java.util.List) (entry.getValue())).get(0)).startsWith(("{" + (com.github.underscore.lodash.Xml.TEXT)))) || (java.lang.String.valueOf(((java.util.List) (entry.getValue())).get(((((java.util.List) (entry.getValue())).size()) - 1))).startsWith(("{" + (com.github.underscore.lodash.Xml.TEXT))))) {
                localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderText(identStep, ident);
            }else {
                localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader(identStep, ident);
            }
            com.github.underscore.lodash.Xml.XmlArray.writeXml(((java.util.List) (entry.getValue())), localBuilder, java.lang.String.valueOf(entry.getKey()), parentTextFound, namespaces);
            if (addNewLine) {
                localBuilder.newLine();
            }
            elems.add(localBuilder);
        }

        private static void addElement(final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident, java.util.Map.Entry entry, java.util.Set<java.lang.String> namespaces, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final boolean addNewLine) {
            boolean parentTextFound = (!(elems.isEmpty())) && ((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText);
            com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader(identStep, ident);
            com.github.underscore.lodash.Xml.XmlValue.writeXml(entry.getValue(), java.lang.String.valueOf(entry.getKey()), localBuilder, parentTextFound, namespaces);
            if (addNewLine) {
                localBuilder.newLine();
            }
            elems.add(localBuilder);
        }

        private static void addComment(java.util.Map.Entry entry, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident, boolean addNewLine, java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, java.lang.String openElement, java.lang.String closeElement) {
            if ((entry.getValue()) instanceof java.util.List) {
                for (java.util.Iterator iterator = ((java.util.List) (entry.getValue())).iterator(); iterator.hasNext();) {
                    com.github.underscore.lodash.Xml.XmlObject.addCommentValue(identStep, ident, java.lang.String.valueOf(iterator.next()), ((iterator.hasNext()) || addNewLine), elems, openElement, closeElement);
                }
            }else {
                com.github.underscore.lodash.Xml.XmlObject.addCommentValue(identStep, ident, java.lang.String.valueOf(entry.getValue()), addNewLine, elems, openElement, closeElement);
            }
        }

        private static void addCommentValue(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident, java.lang.String value, boolean addNewLine, java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, java.lang.String openElement, java.lang.String closeElement) {
            boolean parentTextFound = (!(elems.isEmpty())) && ((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText);
            com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader(identStep, ident);
            if (!parentTextFound) {
                localBuilder.fillSpaces();
            }
            localBuilder.append(openElement).append(value).append(closeElement);
            if (addNewLine) {
                localBuilder.newLine();
            }
            elems.add(localBuilder);
        }
    }

    public static class XmlValue {
        public static void writeXml(java.lang.Object value, java.lang.String name, com.github.underscore.lodash.Xml.XmlStringBuilder builder, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (value instanceof java.util.Map) {
                com.github.underscore.lodash.Xml.XmlObject.writeXml(((java.util.Map) (value)), name, builder, parentTextFound, namespaces);
                return;
            }
            if (value instanceof java.util.Collection) {
                com.github.underscore.lodash.Xml.XmlArray.writeXml(((java.util.Collection) (value)), name, builder, parentTextFound, namespaces);
                return;
            }
            if (!parentTextFound) {
                builder.fillSpaces();
            }
            builder.append((("<" + (com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">"));
            if (value == null) {
                builder.append(com.github.underscore.lodash.Xml.NULL);
            }else
                if (value instanceof java.lang.String) {
                    builder.append(com.github.underscore.lodash.Xml.XmlValue.escape(((java.lang.String) (value))));
                }else {
                    com.github.underscore.lodash.Xml.XmlValue.processArrays(value, builder, name, parentTextFound, namespaces);
                }

            builder.append((("</" + (com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">"));
        }

        private static void processArrays(java.lang.Object value, com.github.underscore.lodash.Xml.XmlStringBuilder builder, java.lang.String name, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (value instanceof java.lang.Double) {
                if ((((java.lang.Double) (value)).isInfinite()) || (((java.lang.Double) (value)).isNaN())) {
                    builder.append(com.github.underscore.lodash.Xml.NULL);
                }else {
                    builder.append(value.toString());
                }
            }else
                if (value instanceof java.lang.Float) {
                    if ((((java.lang.Float) (value)).isInfinite()) || (((java.lang.Float) (value)).isNaN())) {
                        builder.append(com.github.underscore.lodash.Xml.NULL);
                    }else {
                        builder.append(value.toString());
                    }
                }else
                    if (value instanceof java.lang.Number) {
                        builder.append(value.toString());
                    }else
                        if (value instanceof java.lang.Boolean) {
                            builder.append(value.toString());
                        }else
                            if (value instanceof byte[]) {
                                builder.newLine().incIdent();
                                com.github.underscore.lodash.Xml.XmlArray.writeXml(((byte[]) (value)), builder);
                                builder.decIdent().newLine().fillSpaces();
                            }else
                                if (value instanceof short[]) {
                                    builder.newLine().incIdent();
                                    com.github.underscore.lodash.Xml.XmlArray.writeXml(((short[]) (value)), builder);
                                    builder.decIdent().newLine().fillSpaces();
                                }else {
                                    com.github.underscore.lodash.Xml.XmlValue.processArrays2(value, builder, name, parentTextFound, namespaces);
                                }





        }

        private static void processArrays2(java.lang.Object value, com.github.underscore.lodash.Xml.XmlStringBuilder builder, java.lang.String name, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (value instanceof int[]) {
                builder.newLine().incIdent();
                com.github.underscore.lodash.Xml.XmlArray.writeXml(((int[]) (value)), builder);
                builder.decIdent().newLine().fillSpaces();
            }else
                if (value instanceof long[]) {
                    builder.newLine().incIdent();
                    com.github.underscore.lodash.Xml.XmlArray.writeXml(((long[]) (value)), builder);
                    builder.decIdent().newLine().fillSpaces();
                }else
                    if (value instanceof float[]) {
                        builder.newLine().incIdent();
                        com.github.underscore.lodash.Xml.XmlArray.writeXml(((float[]) (value)), builder);
                        builder.decIdent().newLine().fillSpaces();
                    }else
                        if (value instanceof double[]) {
                            builder.newLine().incIdent();
                            com.github.underscore.lodash.Xml.XmlArray.writeXml(((double[]) (value)), builder);
                            builder.decIdent().newLine().fillSpaces();
                        }else
                            if (value instanceof boolean[]) {
                                builder.newLine().incIdent();
                                com.github.underscore.lodash.Xml.XmlArray.writeXml(((boolean[]) (value)), builder);
                                builder.decIdent().newLine().fillSpaces();
                            }else
                                if (value instanceof char[]) {
                                    builder.newLine().incIdent();
                                    com.github.underscore.lodash.Xml.XmlArray.writeXml(((char[]) (value)), builder);
                                    builder.decIdent().newLine().fillSpaces();
                                }else
                                    if (value instanceof java.lang.Object[]) {
                                        builder.newLine().incIdent();
                                        com.github.underscore.lodash.Xml.XmlArray.writeXml(((java.lang.Object[]) (value)), name, builder, parentTextFound, namespaces);
                                        builder.decIdent().newLine().fillSpaces();
                                    }else {
                                        builder.append(value.toString());
                                    }






        }

        public static java.lang.String escapeName(java.lang.String name, java.util.Set<java.lang.String> namespaces) {
            final int length = name.length();
            if (length == 0) {
                return "__EE__EMPTY__EE__";
            }
            final java.lang.StringBuilder result = new java.lang.StringBuilder();
            char ch = name.charAt(0);
            if ((com.sun.org.apache.xerces.internal.util.XMLChar.isNameStart(ch)) && (ch != ':')) {
                result.append(ch);
            }else {
                result.append("__").append(com.github.underscore.lodash.Base32.encode(java.lang.Character.toString(ch))).append("__");
            }
            for (int i = 1; i < length; ++i) {
                ch = name.charAt(i);
                if ((ch == ':') && (("xmlns".equals(name.substring(0, i))) || (namespaces.contains(name.substring(0, i))))) {
                    result.append(ch);
                }else
                    if ((com.sun.org.apache.xerces.internal.util.XMLChar.isName(ch)) && (ch != ':')) {
                        result.append(ch);
                    }else {
                        result.append("__").append(com.github.underscore.lodash.Base32.encode(java.lang.Character.toString(ch))).append("__");
                    }

            }
            return result.toString();
        }

        public static java.lang.String escape(java.lang.String s) {
            if (s == null) {
                return null;
            }
            java.lang.StringBuilder sb = new java.lang.StringBuilder();
            com.github.underscore.lodash.Xml.XmlValue.escape(s, sb);
            return sb.toString();
        }

        private static void escape(java.lang.String s, java.lang.StringBuilder sb) {
            final int len = s.length();
            for (int i = 0; i < len; i++) {
                char ch = s.charAt(i);
                switch (ch) {
                    case '"' :
                        sb.append("&quot;");
                        break;
                    case '\'' :
                        sb.append("'");
                        break;
                    case '&' :
                        sb.append("&amp;");
                        break;
                    case '<' :
                        sb.append("&lt;");
                        break;
                    case '>' :
                        sb.append("&gt;");
                        break;
                    case '\b' :
                        sb.append("\\b");
                        break;
                    case '\f' :
                        sb.append("\\f");
                        break;
                    case '\n' :
                        sb.append("\n");
                        break;
                    case '\r' :
                        sb.append("\\r");
                        break;
                    case '\t' :
                        sb.append("\t");
                        break;
                    default :
                        if (((ch <= '\u001f') || ((ch >= '\u007f') && (ch <= '\u009f'))) || ((ch >= '\u2000') && (ch <= '\u20ff'))) {
                            java.lang.String ss = java.lang.Integer.toHexString(ch);
                            sb.append("&#x");
                            for (int k = 0; k < (4 - (ss.length())); k++) {
                                sb.append('0');
                            }
                            sb.append(ss.toUpperCase()).append(";");
                        }else {
                            sb.append(ch);
                        }
                        break;
                }
            }
        }
    }

    public static java.lang.String toXml(java.util.Collection collection, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep) {
        final com.github.underscore.lodash.Xml.XmlStringBuilder builder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutRoot(identStep, com.github.underscore.lodash.Xml.UTF_8.name());
        builder.append("<root>").incIdent();
        if ((collection == null) || (!(collection.isEmpty()))) {
            builder.newLine();
        }
        com.github.underscore.lodash.Xml.XmlArray.writeXml(collection, null, builder, false, com.github.underscore.lodash.U.<java.lang.String>newLinkedHashSet());
        return builder.newLine().append("</root>").toString();
    }

    public static java.lang.String toXml(java.util.Collection collection) {
        return com.github.underscore.lodash.Xml.toXml(collection, com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TWO_SPACES);
    }

    public static java.lang.String toXml(java.util.Map map, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep) {
        final com.github.underscore.lodash.Xml.XmlStringBuilder builder;
        final java.util.Map localMap;
        if ((map != null) && (map.containsKey(com.github.underscore.lodash.Xml.ENCODING))) {
            builder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutRoot(identStep, java.lang.String.valueOf(map.get(com.github.underscore.lodash.Xml.ENCODING)));
            localMap = ((java.util.Map) (com.github.underscore.lodash.U.clone(map)));
            localMap.remove(com.github.underscore.lodash.Xml.ENCODING);
        }else {
            builder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutRoot(identStep, com.github.underscore.lodash.Xml.UTF_8.name());
            localMap = map;
        }
        if ((((localMap == null) || ((localMap.size()) != 1)) || (java.lang.String.valueOf(((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getKey()).startsWith("-"))) || ((((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getValue()) instanceof java.util.List)) {
            final java.lang.String name;
            if ((((localMap != null) && ((localMap.size()) == 1)) && ((((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getValue()) instanceof java.util.List)) && (!(((java.util.List) (((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getValue())).isEmpty()))) {
                name = java.lang.String.valueOf(((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getKey());
            }else {
                name = "root";
            }
            com.github.underscore.lodash.Xml.XmlObject.writeXml(localMap, name, builder, false, com.github.underscore.lodash.U.<java.lang.String>newLinkedHashSet());
        }else {
            com.github.underscore.lodash.Xml.XmlObject.writeXml(localMap, null, builder, false, com.github.underscore.lodash.U.<java.lang.String>newLinkedHashSet());
        }
        return builder.toString();
    }

    public static java.lang.String toXml(java.util.Map map) {
        return com.github.underscore.lodash.Xml.toXml(map, com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TWO_SPACES);
    }

    @java.lang.SuppressWarnings("unchecked")
    private static java.lang.Object getValue(final java.lang.Object value) {
        if ((value instanceof java.util.Map) && ((((java.util.Map<java.lang.String, java.lang.Object>) (value)).entrySet().size()) == 1)) {
            final java.util.Map.Entry<java.lang.String, java.lang.Object> entry = ((java.util.Map<java.lang.String, java.lang.Object>) (value)).entrySet().iterator().next();
            if ((com.github.underscore.lodash.Xml.TEXT.equals(entry.getKey())) || (entry.getKey().equals(com.github.underscore.lodash.Xml.ELEMENT_TEXT))) {
                return entry.getValue();
            }
        }
        return value;
    }

    @java.lang.SuppressWarnings("unchecked")
    private static java.util.Map<java.lang.String, java.lang.Object> createMap(final org.w3c.dom.Node node, final com.github.underscore.Function<java.lang.Object, java.lang.Object> nodeMapper, java.util.Map<java.lang.String, java.lang.Object> attrMap, int[] uniqueIds, final com.github.underscore.Function<java.lang.Object, java.lang.Object> valueMapper, java.lang.String source, int[] sourceIndex) {
        final java.util.Map<java.lang.String, java.lang.Object> map = com.github.underscore.lodash.U.newLinkedHashMap();
        map.putAll(attrMap);
        final org.w3c.dom.NodeList nodeList = node.getChildNodes();
        for (int index = 0; index < (nodeList.getLength()); index++) {
            final org.w3c.dom.Node currentNode = nodeList.item(index);
            final java.lang.String name = currentNode.getNodeName();
            final java.lang.Object value;
            final int attributesLength = ((currentNode.getAttributes()) == null) ? 0 : currentNode.getAttributes().getLength();
            if ((currentNode.getNodeType()) == (org.w3c.dom.Node.ELEMENT_NODE)) {
                sourceIndex[0] = ((source.indexOf(("<" + name), sourceIndex[0])) + (name.length())) + 2;
                final java.util.Map<java.lang.String, java.lang.Object> attrMapLocal = com.github.underscore.lodash.U.newLinkedHashMap();
                if (attributesLength > 0) {
                    final java.util.regex.Matcher matcher = com.github.underscore.lodash.Xml.ATTRS.matcher(source.substring(sourceIndex[0], source.indexOf(">", sourceIndex[0])));
                    while (matcher.find()) {
                        com.github.underscore.lodash.Xml.addNodeValue(attrMapLocal, ('-' + (matcher.group(1))), matcher.group(2), nodeMapper, uniqueIds);
                    } 
                }
                value = com.github.underscore.lodash.Xml.createMap(currentNode, nodeMapper, attrMapLocal, uniqueIds, valueMapper, source, sourceIndex);
            }else {
                if (com.github.underscore.lodash.Xml.COMMENT.equals(name)) {
                    sourceIndex[0] = (source.indexOf("-->", sourceIndex[0])) + 3;
                }else
                    if (com.github.underscore.lodash.Xml.CDATA.equals(name)) {
                        sourceIndex[0] = (source.indexOf("]]>", sourceIndex[0])) + 3;
                    }

                value = currentNode.getTextContent();
            }
            if ((com.github.underscore.lodash.Xml.TEXT.equals(name)) && (valueMapper.apply(value).toString().isEmpty())) {
                continue;
            }
            com.github.underscore.lodash.Xml.addNodeValue(map, name, value, nodeMapper, uniqueIds);
        }
        return map;
    }

    @java.lang.SuppressWarnings("unchecked")
    private static void addNodeValue(final java.util.Map<java.lang.String, java.lang.Object> map, final java.lang.String name, final java.lang.Object value, final com.github.underscore.Function<java.lang.Object, java.lang.Object> nodeMapper, int[] uniqueIds) {
        if (map.containsKey(name)) {
            if (com.github.underscore.lodash.Xml.TEXT.equals(name)) {
                map.put((name + (uniqueIds[0])), nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
                uniqueIds[0] += 1;
            }else
                if (com.github.underscore.lodash.Xml.COMMENT.equals(name)) {
                    map.put((name + (uniqueIds[1])), nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
                    uniqueIds[1] += 1;
                }else
                    if (com.github.underscore.lodash.Xml.CDATA.equals(name)) {
                        map.put((name + (uniqueIds[2])), nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
                        uniqueIds[2] += 1;
                    }else {
                        final java.lang.Object object = map.get(name);
                        if (object instanceof java.util.List) {
                            com.github.underscore.lodash.Xml.addText(map, name, ((java.util.List<java.lang.Object>) (object)), value);
                        }else {
                            final java.util.List<java.lang.Object> objects = com.github.underscore.lodash.U.newArrayList();
                            objects.add(object);
                            com.github.underscore.lodash.Xml.addText(map, name, objects, value);
                            map.put(name, objects);
                        }
                    }


        }else {
            map.put(name, nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
        }
    }

    @java.lang.SuppressWarnings("unchecked")
    private static void addText(final java.util.Map<java.lang.String, java.lang.Object> map, final java.lang.String name, final java.util.List<java.lang.Object> objects, final java.lang.Object value) {
        int lastIndex = (map.size()) - 1;
        final int index = objects.size();
        while (true) {
            final java.util.Map.Entry lastElement = ((java.util.Map.Entry) (map.entrySet().toArray()[lastIndex]));
            if (name.equals(java.lang.String.valueOf(lastElement.getKey()))) {
                break;
            }
            final java.util.Map<java.lang.String, java.lang.Object> text = com.github.underscore.lodash.U.newLinkedHashMap();
            text.put(java.lang.String.valueOf(lastElement.getKey()), map.remove(lastElement.getKey()));
            objects.add(index, text);
            lastIndex -= 1;
        } 
        objects.add(com.github.underscore.lodash.Xml.getValue(value));
    }

    @java.lang.SuppressWarnings("unchecked")
    public static java.lang.Object fromXml(final java.lang.String xml, final com.github.underscore.Function<java.lang.Object, java.lang.Object> valueMapper) {
        if (xml == null) {
            return null;
        }
        try {
            org.w3c.dom.Document document = com.github.underscore.lodash.Xml.createDocument(xml);
            final java.lang.Object result = com.github.underscore.lodash.Xml.createMap(document, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
                public java.lang.Object apply(java.lang.Object object) {
                    return object;
                }
            }, java.util.Collections.<java.lang.String, java.lang.Object>emptyMap(), new int[]{ 1, 1, 1 }, valueMapper, xml, new int[]{ 0 });
            if (((document.getXmlEncoding()) != null) && (!("UTF-8".equalsIgnoreCase(document.getXmlEncoding())))) {
                ((java.util.Map) (result)).put(com.github.underscore.lodash.Xml.ENCODING, document.getXmlEncoding());
            }else
                if ((((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getKey().equals("root")) && (((((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getValue()) instanceof java.util.List) || ((((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getValue()) instanceof java.util.Map))) {
                    return ((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getValue();
                }

            return result;
        } catch (java.lang.Exception ex) {
            throw new java.lang.IllegalArgumentException(ex);
        }
    }

    public static java.lang.Object fromXml(final java.lang.String xml) {
        return com.github.underscore.lodash.Xml.fromXml(xml, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
            public java.lang.Object apply(java.lang.Object object) {
                return java.lang.String.valueOf(object).trim();
            }
        });
    }

    private static org.w3c.dom.Document createDocument(final java.lang.String xml) throws java.io.IOException, javax.xml.parsers.ParserConfigurationException, org.xml.sax.SAXException {
        final javax.xml.parsers.DocumentBuilderFactory factory = javax.xml.parsers.DocumentBuilderFactory.newInstance();
        factory.setNamespaceAware(true);
        factory.setFeature(javax.xml.XMLConstants.FEATURE_SECURE_PROCESSING, true);
        final javax.xml.parsers.DocumentBuilder builder = factory.newDocumentBuilder();
        builder.setErrorHandler(new org.xml.sax.helpers.DefaultHandler());
        return builder.parse(new org.xml.sax.InputSource(new java.io.StringReader(xml)));
    }

    public static java.lang.Object fromXmlMakeArrays(final java.lang.String xml) {
        try {
            org.w3c.dom.Document document = com.github.underscore.lodash.Xml.createDocument(xml);
            return com.github.underscore.lodash.Xml.createMap(document, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
                public java.lang.Object apply(java.lang.Object object) {
                    return object instanceof java.util.List ? object : com.github.underscore.lodash.U.newArrayList(java.util.Arrays.asList(object));
                }
            }, java.util.Collections.<java.lang.String, java.lang.Object>emptyMap(), new int[]{ 1, 1, 1 }, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
                public java.lang.Object apply(java.lang.Object object) {
                    return java.lang.String.valueOf(object).trim();
                }
            }, xml, new int[]{ 0 });
        } catch (java.lang.Exception ex) {
            throw new java.lang.IllegalArgumentException(ex);
        }
    }

    @java.lang.SuppressWarnings("unchecked")
    public static java.lang.String formatXml(java.lang.String xml, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep) {
        java.lang.Object result = com.github.underscore.lodash.Xml.fromXml(xml);
        if (result instanceof java.util.Map) {
            return com.github.underscore.lodash.Xml.toXml(((java.util.Map) (result)), identStep);
        }
        return com.github.underscore.lodash.Xml.toXml(((java.util.List) (result)), identStep);
    }

    public static java.lang.String formatXml(java.lang.String xml) {
        return com.github.underscore.lodash.Xml.formatXml(xml, com.github.underscore.lodash.Xml.XmlStringBuilder.Step.THREE_SPACES);
    }
}
16:26:57.568 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
16:26:57.568 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:26:57.625 [pool-236-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (50 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:26:57.916 [pool-235-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Xml.java:406: error: non-static variable ident cannot be referenced from a static context
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(68).collectInput("com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident",com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                              ^
Xml.java:620: warning: com.sun.org.apache.xerces.internal.util.XMLChar is internal proprietary API and may be removed in a future release
            if ((com.sun.org.apache.xerces.internal.util.XMLChar.isNameStart(ch)) && (ch != ':')) {
                                                        ^
Xml.java:630: warning: com.sun.org.apache.xerces.internal.util.XMLChar is internal proprietary API and may be removed in a future release
                    if ((com.sun.org.apache.xerces.internal.util.XMLChar.isName(ch)) && (ch != ':')) {
                                                                ^
16:26:58.059 [pool-235-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public final class Xml {
    private static final java.lang.String NULL = "null";

    private static final java.lang.String ELEMENT_TEXT = "element";

    private static final java.lang.String CDATA = "#cdata-section";

    private static final java.lang.String COMMENT = "#comment";

    private static final java.lang.String ENCODING = "#encoding";

    private static final java.lang.String TEXT = "#text";

    private static final java.lang.String ELEMENT = ("<" + (com.github.underscore.lodash.Xml.ELEMENT_TEXT)) + ">";

    private static final java.lang.String CLOSED_ELEMENT = ("</" + (com.github.underscore.lodash.Xml.ELEMENT_TEXT)) + ">";

    private static final java.lang.String EMPTY_ELEMENT = (com.github.underscore.lodash.Xml.ELEMENT) + (com.github.underscore.lodash.Xml.CLOSED_ELEMENT);

    private static final java.lang.String NULL_ELEMENT = ((com.github.underscore.lodash.Xml.ELEMENT) + (com.github.underscore.lodash.Xml.NULL)) + (com.github.underscore.lodash.Xml.CLOSED_ELEMENT);

    private static final java.nio.charset.Charset UTF_8 = java.nio.charset.Charset.forName("UTF-8");

    private static final java.util.regex.Pattern ATTRS = java.util.regex.Pattern.compile(("((?:(?!\\s|=).)*)\\s*?=\\s*?[\"\']?((?:(?<=\")(?:(?<=\\\\)\"|[^\"])*|(?<=\')" + "(?:(?<=\\\\)\'|[^\'])*)|(?:(?!\"|\')(?:(?!\\/>|>|\\s).)+))"));

    public static class XmlStringBuilder {
        public enum Step {

            TWO_SPACES(2),
            THREE_SPACES(3),
            FOUR_SPACES(4),
            COMPACT(0),
            TABS(1);
            private int ident;

            Step(int ident) {
                this.ident = ident;
            }

            public int getIdent() {
                return ident;
            }
        }

        protected final java.lang.StringBuilder builder;

        private final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep;

        private int ident;

        public XmlStringBuilder() {
            builder = new java.lang.StringBuilder("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<root>\n");
            identStep = com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TWO_SPACES;
            ident = 2;
        }

        public XmlStringBuilder(java.lang.StringBuilder builder, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident) {
            this.builder = builder;
            this.identStep = identStep;
            this.ident = ident;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder append(final java.lang.String string) {
            builder.append(string);
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder fillSpaces() {
            for (int index = 0; index < (ident); index += 1) {
                builder.append(((identStep) == (com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TABS) ? '\t' : ' '));
            }
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder incIdent() {
            ident += identStep.getIdent();
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder decIdent() {
            ident -= identStep.getIdent();
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder newLine() {
            if ((identStep) != (com.github.underscore.lodash.Xml.XmlStringBuilder.Step.COMPACT)) {
                builder.append("\n");
            }
            return this;
        }

        public int getIdent() {
            return ident;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder.Step getIdentStep() {
            return identStep;
        }

        public java.lang.String toString() {
            return (builder.toString()) + "\n</root>";
        }
    }

    public static class XmlStringBuilderWithoutRoot extends com.github.underscore.lodash.Xml.XmlStringBuilder {
        public XmlStringBuilderWithoutRoot(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, java.lang.String encoding) {
            super(new java.lang.StringBuilder(((("<?xml version=\"1.0\" encoding=\"" + (com.github.underscore.lodash.U.escape(encoding))) + "\"?>") + (identStep == (com.github.underscore.lodash.Xml.XmlStringBuilder.Step.COMPACT) ? "" : "\n"))), identStep, 0);
        }

        public java.lang.String toString() {
            return builder.toString();
        }
    }

    public static class XmlStringBuilderWithoutHeader extends com.github.underscore.lodash.Xml.XmlStringBuilder {
        public XmlStringBuilderWithoutHeader(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident) {
            super(new java.lang.StringBuilder(), identStep, ident);
        }

        public java.lang.String toString() {
            return builder.toString();
        }
    }

    public static class XmlStringBuilderText extends com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader {
        public XmlStringBuilderText(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident) {
            super(identStep, ident);
        }
    }

    public static class XmlArray {
        public static void writeXml(java.util.Collection collection, java.lang.String name, com.github.underscore.lodash.Xml.XmlStringBuilder builder, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (collection == null) {
                builder.append(com.github.underscore.lodash.Xml.NULL);
                return;
            }
            if (name != null) {
                builder.fillSpaces().append("<").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(">").incIdent();
                if (!(collection.isEmpty())) {
                    builder.newLine();
                }
            }
            com.github.underscore.lodash.Xml.XmlArray.writeXml(collection, builder, name, parentTextFound, namespaces);
            if (name != null) {
                builder.decIdent().newLine().fillSpaces().append("</").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(">");
            }
        }

        @java.lang.SuppressWarnings("unchecked")
        private static void writeXml(java.util.Collection collection, com.github.underscore.lodash.Xml.XmlStringBuilder builder, java.lang.String name, final boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            boolean localParentTextFound = parentTextFound;
            final java.util.List entries = com.github.underscore.lodash.U.newArrayList(collection);
            for (int index = 0; index < (entries.size()); index += 1) {
                final java.lang.Object value = entries.get(index);
                final boolean addNewLine = (index < ((entries.size()) - 1)) && (!(java.lang.String.valueOf(entries.get((index + 1))).startsWith(("{" + (com.github.underscore.lodash.Xml.TEXT)))));
                if (value == null) {
                    builder.fillSpaces().append((((((("<" + (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">") + (com.github.underscore.lodash.Xml.NULL)) + "</") + (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">"));
                }else {
                    if ((value instanceof java.util.Map) && ((((java.util.Map) (value)).size()) == 1)) {
                        com.github.underscore.lodash.Xml.XmlObject.writeXml(((java.util.Map) (value)), null, builder, localParentTextFound, namespaces);
                        if (java.lang.String.valueOf(((java.util.Map.Entry) (((java.util.Map) (value)).entrySet().iterator().next())).getKey()).startsWith(com.github.underscore.lodash.Xml.TEXT)) {
                            localParentTextFound = true;
                            continue;
                        }
                    }else {
                        com.github.underscore.lodash.Xml.XmlValue.writeXml(value, (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : name), builder, localParentTextFound, namespaces);
                    }
                    localParentTextFound = false;
                }
                if (addNewLine) {
                    builder.newLine();
                }
            }
        }

        public static void writeXml(byte[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(short[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(int[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(long[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(float[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(double[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(boolean[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(char[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(java.lang.Object[] array, java.lang.String name, com.github.underscore.lodash.Xml.XmlStringBuilder builder, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        com.github.underscore.lodash.Xml.XmlValue.writeXml(array[i], (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : name), builder, parentTextFound, namespaces);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }
    }

    public static class XmlObject {
        @java.lang.SuppressWarnings("unchecked")
        public static void writeXml(java.util.Map map, java.lang.String name, final com.github.underscore.lodash.Xml.XmlStringBuilder builder, final boolean parentTextFound, final java.util.Set<java.lang.String> namespaces) {
            if (map == null) {
                com.github.underscore.lodash.Xml.XmlValue.writeXml(com.github.underscore.lodash.Xml.NULL, name, builder, false, namespaces);
                return;
            }
            final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems = com.github.underscore.lodash.U.newArrayList();
            final java.util.List<java.lang.String> attrs = com.github.underscore.lodash.U.newArrayList();
            final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep = builder.getIdentStep();
            final int ident = (builder.getIdent()) + (name == null ? 0 : builder.getIdentStep().getIdent());
            final java.util.List<java.util.Map.Entry> entries = com.github.underscore.lodash.U.newArrayList(map.entrySet());
            for (int index = 0; index < (entries.size()); index += 1) {
                final java.util.Map.Entry entry = entries.get(index);
                final boolean addNewLine = (index < ((entries.size()) - 1)) && (!(java.lang.String.valueOf(entries.get((index + 1)).getKey()).startsWith(com.github.underscore.lodash.Xml.TEXT)));
                if (((java.lang.String.valueOf(entry.getKey()).startsWith("-")) && (!((entry.getValue()) instanceof java.util.Map))) && (!((entry.getValue()) instanceof java.util.List))) {
                    attrs.add(((((" " + (com.github.underscore.lodash.Xml.XmlValue.escapeName(java.lang.String.valueOf(entry.getKey()).substring(1), namespaces))) + "=\"") + (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getValue())))) + "\""));
                    if (java.lang.String.valueOf(entry.getKey()).startsWith("-xmlns:")) {
                        namespaces.add(java.lang.String.valueOf(entry.getKey()).substring(7));
                    }
                }else
                    if (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getKey())).startsWith(com.github.underscore.lodash.Xml.TEXT)) {
                        com.github.underscore.lodash.Xml.XmlObject.addText(entry, elems, identStep, ident);
                    }else {
                        com.github.underscore.lodash.Xml.XmlObject.processElements(entry, identStep, ident, addNewLine, elems, namespaces);
                    }

            }
            if (name != null) {
                if (!parentTextFound) {
                    builder.fillSpaces();
                }
                builder.append("<").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(com.github.underscore.lodash.U.join(attrs, "")).append(">").incIdent();
                if ((!(elems.isEmpty())) && (!((elems.get(0)) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText))) {
                    builder.newLine();
                }
            }
            for (com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder1 : elems) {
                builder.append(localBuilder1.toString());
            }
            if (name != null) {
                builder.decIdent();
                if ((!(elems.isEmpty())) && (!((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText))) {
                    builder.newLine().fillSpaces();
                }
                builder.append("</").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(">");
            }
        }

        private static void processElements(final java.util.Map.Entry entry, final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident, final boolean addNewLine, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final java.util.Set<java.lang.String> namespaces) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getKey())).startsWith(com.github.underscore.lodash.Xml.COMMENT);
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(68).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(68).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(68).collectInput("com.github.underscore.lodash.Xml.ENCODING",com.github.underscore.lodash.Xml.ENCODING);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(68).collectInput("com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident",com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(68).collectInput("elems",elems);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(68).collectInput("com.github.underscore.lodash.Xml.NULL_ELEMENT",com.github.underscore.lodash.Xml.NULL_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(68).collectInput("addNewLine",addNewLine);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(68).collectInput("ident",ident);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(68).collectInput("com.github.underscore.lodash.Xml.ATTRS",com.github.underscore.lodash.Xml.ATTRS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(68).collectInput("identStep",identStep);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(68).collectInput("com.github.underscore.lodash.Xml.TEXT",com.github.underscore.lodash.Xml.TEXT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(68).collectInput("com.github.underscore.lodash.Xml.NULL",com.github.underscore.lodash.Xml.NULL);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(68).collectInput("com.github.underscore.lodash.Xml.ELEMENT_TEXT",com.github.underscore.lodash.Xml.ELEMENT_TEXT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(68).collectInput("com.github.underscore.lodash.Xml.CLOSED_ELEMENT",com.github.underscore.lodash.Xml.CLOSED_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(68).collectInput("com.github.underscore.lodash.Xml.UTF_8",com.github.underscore.lodash.Xml.UTF_8);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(68).collectInput("com.github.underscore.lodash.Xml.CDATA",com.github.underscore.lodash.Xml.CDATA);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(68).collectInput("entry",entry);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(68).collectInput("com.github.underscore.lodash.Xml.COMMENT",com.github.underscore.lodash.Xml.COMMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(68).collectInput("com.github.underscore.lodash.Xml.EMPTY_ELEMENT",com.github.underscore.lodash.Xml.EMPTY_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(68).collectInput("com.github.underscore.lodash.Xml.ELEMENT",com.github.underscore.lodash.Xml.ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(68).collectInput("namespaces",namespaces);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(68).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(68).collectionEnds();
            }
            if (runtimeAngelicValue) {
                com.github.underscore.lodash.Xml.XmlObject.addComment(entry, identStep, ident, addNewLine, elems, "<!--", "-->");
            }else
                if (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getKey())).startsWith(com.github.underscore.lodash.Xml.CDATA)) {
                    com.github.underscore.lodash.Xml.XmlObject.addComment(entry, identStep, ident, addNewLine, elems, "<![CDATA[", "]]>");
                }else
                    if (((entry.getValue()) instanceof java.util.List) && (!(((java.util.List) (entry.getValue())).isEmpty()))) {
                        com.github.underscore.lodash.Xml.XmlObject.addElements(identStep, ident, entry, namespaces, elems, addNewLine);
                    }else {
                        com.github.underscore.lodash.Xml.XmlObject.addElement(identStep, ident, entry, namespaces, elems, addNewLine);
                    }


        }

        private static void addText(final java.util.Map.Entry entry, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident) {
            if ((entry.getValue()) instanceof java.util.List) {
                for (java.lang.Object value : ((java.util.List) (entry.getValue()))) {
                    elems.add(new com.github.underscore.lodash.Xml.XmlStringBuilderText(identStep, ident).append(com.github.underscore.lodash.U.escape(java.lang.String.valueOf(value))));
                }
            }else {
                elems.add(new com.github.underscore.lodash.Xml.XmlStringBuilderText(identStep, ident).append(com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getValue()))));
            }
        }

        private static void addElements(final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident, java.util.Map.Entry entry, java.util.Set<java.lang.String> namespaces, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final boolean addNewLine) {
            boolean parentTextFound = (!(elems.isEmpty())) && ((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText);
            final com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder;
            if ((java.lang.String.valueOf(((java.util.List) (entry.getValue())).get(0)).startsWith(("{" + (com.github.underscore.lodash.Xml.TEXT)))) || (java.lang.String.valueOf(((java.util.List) (entry.getValue())).get(((((java.util.List) (entry.getValue())).size()) - 1))).startsWith(("{" + (com.github.underscore.lodash.Xml.TEXT))))) {
                localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderText(identStep, ident);
            }else {
                localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader(identStep, ident);
            }
            com.github.underscore.lodash.Xml.XmlArray.writeXml(((java.util.List) (entry.getValue())), localBuilder, java.lang.String.valueOf(entry.getKey()), parentTextFound, namespaces);
            if (addNewLine) {
                localBuilder.newLine();
            }
            elems.add(localBuilder);
        }

        private static void addElement(final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident, java.util.Map.Entry entry, java.util.Set<java.lang.String> namespaces, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final boolean addNewLine) {
            boolean parentTextFound = (!(elems.isEmpty())) && ((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText);
            com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader(identStep, ident);
            com.github.underscore.lodash.Xml.XmlValue.writeXml(entry.getValue(), java.lang.String.valueOf(entry.getKey()), localBuilder, parentTextFound, namespaces);
            if (addNewLine) {
                localBuilder.newLine();
            }
            elems.add(localBuilder);
        }

        private static void addComment(java.util.Map.Entry entry, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident, boolean addNewLine, java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, java.lang.String openElement, java.lang.String closeElement) {
            if ((entry.getValue()) instanceof java.util.List) {
                for (java.util.Iterator iterator = ((java.util.List) (entry.getValue())).iterator(); iterator.hasNext();) {
                    com.github.underscore.lodash.Xml.XmlObject.addCommentValue(identStep, ident, java.lang.String.valueOf(iterator.next()), ((iterator.hasNext()) || addNewLine), elems, openElement, closeElement);
                }
            }else {
                com.github.underscore.lodash.Xml.XmlObject.addCommentValue(identStep, ident, java.lang.String.valueOf(entry.getValue()), addNewLine, elems, openElement, closeElement);
            }
        }

        private static void addCommentValue(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident, java.lang.String value, boolean addNewLine, java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, java.lang.String openElement, java.lang.String closeElement) {
            boolean parentTextFound = (!(elems.isEmpty())) && ((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText);
            com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader(identStep, ident);
            if (!parentTextFound) {
                localBuilder.fillSpaces();
            }
            localBuilder.append(openElement).append(value).append(closeElement);
            if (addNewLine) {
                localBuilder.newLine();
            }
            elems.add(localBuilder);
        }
    }

    public static class XmlValue {
        public static void writeXml(java.lang.Object value, java.lang.String name, com.github.underscore.lodash.Xml.XmlStringBuilder builder, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (value instanceof java.util.Map) {
                com.github.underscore.lodash.Xml.XmlObject.writeXml(((java.util.Map) (value)), name, builder, parentTextFound, namespaces);
                return;
            }
            if (value instanceof java.util.Collection) {
                com.github.underscore.lodash.Xml.XmlArray.writeXml(((java.util.Collection) (value)), name, builder, parentTextFound, namespaces);
                return;
            }
            if (!parentTextFound) {
                builder.fillSpaces();
            }
            builder.append((("<" + (com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">"));
            if (value == null) {
                builder.append(com.github.underscore.lodash.Xml.NULL);
            }else
                if (value instanceof java.lang.String) {
                    builder.append(com.github.underscore.lodash.Xml.XmlValue.escape(((java.lang.String) (value))));
                }else {
                    com.github.underscore.lodash.Xml.XmlValue.processArrays(value, builder, name, parentTextFound, namespaces);
                }

            builder.append((("</" + (com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">"));
        }

        private static void processArrays(java.lang.Object value, com.github.underscore.lodash.Xml.XmlStringBuilder builder, java.lang.String name, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (value instanceof java.lang.Double) {
                if ((((java.lang.Double) (value)).isInfinite()) || (((java.lang.Double) (value)).isNaN())) {
                    builder.append(com.github.underscore.lodash.Xml.NULL);
                }else {
                    builder.append(value.toString());
                }
            }else
                if (value instanceof java.lang.Float) {
                    if ((((java.lang.Float) (value)).isInfinite()) || (((java.lang.Float) (value)).isNaN())) {
                        builder.append(com.github.underscore.lodash.Xml.NULL);
                    }else {
                        builder.append(value.toString());
                    }
                }else
                    if (value instanceof java.lang.Number) {
                        builder.append(value.toString());
                    }else
                        if (value instanceof java.lang.Boolean) {
                            builder.append(value.toString());
                        }else
                            if (value instanceof byte[]) {
                                builder.newLine().incIdent();
                                com.github.underscore.lodash.Xml.XmlArray.writeXml(((byte[]) (value)), builder);
                                builder.decIdent().newLine().fillSpaces();
                            }else
                                if (value instanceof short[]) {
                                    builder.newLine().incIdent();
                                    com.github.underscore.lodash.Xml.XmlArray.writeXml(((short[]) (value)), builder);
                                    builder.decIdent().newLine().fillSpaces();
                                }else {
                                    com.github.underscore.lodash.Xml.XmlValue.processArrays2(value, builder, name, parentTextFound, namespaces);
                                }





        }

        private static void processArrays2(java.lang.Object value, com.github.underscore.lodash.Xml.XmlStringBuilder builder, java.lang.String name, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (value instanceof int[]) {
                builder.newLine().incIdent();
                com.github.underscore.lodash.Xml.XmlArray.writeXml(((int[]) (value)), builder);
                builder.decIdent().newLine().fillSpaces();
            }else
                if (value instanceof long[]) {
                    builder.newLine().incIdent();
                    com.github.underscore.lodash.Xml.XmlArray.writeXml(((long[]) (value)), builder);
                    builder.decIdent().newLine().fillSpaces();
                }else
                    if (value instanceof float[]) {
                        builder.newLine().incIdent();
                        com.github.underscore.lodash.Xml.XmlArray.writeXml(((float[]) (value)), builder);
                        builder.decIdent().newLine().fillSpaces();
                    }else
                        if (value instanceof double[]) {
                            builder.newLine().incIdent();
                            com.github.underscore.lodash.Xml.XmlArray.writeXml(((double[]) (value)), builder);
                            builder.decIdent().newLine().fillSpaces();
                        }else
                            if (value instanceof boolean[]) {
                                builder.newLine().incIdent();
                                com.github.underscore.lodash.Xml.XmlArray.writeXml(((boolean[]) (value)), builder);
                                builder.decIdent().newLine().fillSpaces();
                            }else
                                if (value instanceof char[]) {
                                    builder.newLine().incIdent();
                                    com.github.underscore.lodash.Xml.XmlArray.writeXml(((char[]) (value)), builder);
                                    builder.decIdent().newLine().fillSpaces();
                                }else
                                    if (value instanceof java.lang.Object[]) {
                                        builder.newLine().incIdent();
                                        com.github.underscore.lodash.Xml.XmlArray.writeXml(((java.lang.Object[]) (value)), name, builder, parentTextFound, namespaces);
                                        builder.decIdent().newLine().fillSpaces();
                                    }else {
                                        builder.append(value.toString());
                                    }






        }

        public static java.lang.String escapeName(java.lang.String name, java.util.Set<java.lang.String> namespaces) {
            final int length = name.length();
            if (length == 0) {
                return "__EE__EMPTY__EE__";
            }
            final java.lang.StringBuilder result = new java.lang.StringBuilder();
            char ch = name.charAt(0);
            if ((com.sun.org.apache.xerces.internal.util.XMLChar.isNameStart(ch)) && (ch != ':')) {
                result.append(ch);
            }else {
                result.append("__").append(com.github.underscore.lodash.Base32.encode(java.lang.Character.toString(ch))).append("__");
            }
            for (int i = 1; i < length; ++i) {
                ch = name.charAt(i);
                if ((ch == ':') && (("xmlns".equals(name.substring(0, i))) || (namespaces.contains(name.substring(0, i))))) {
                    result.append(ch);
                }else
                    if ((com.sun.org.apache.xerces.internal.util.XMLChar.isName(ch)) && (ch != ':')) {
                        result.append(ch);
                    }else {
                        result.append("__").append(com.github.underscore.lodash.Base32.encode(java.lang.Character.toString(ch))).append("__");
                    }

            }
            return result.toString();
        }

        public static java.lang.String escape(java.lang.String s) {
            if (s == null) {
                return null;
            }
            java.lang.StringBuilder sb = new java.lang.StringBuilder();
            com.github.underscore.lodash.Xml.XmlValue.escape(s, sb);
            return sb.toString();
        }

        private static void escape(java.lang.String s, java.lang.StringBuilder sb) {
            final int len = s.length();
            for (int i = 0; i < len; i++) {
                char ch = s.charAt(i);
                switch (ch) {
                    case '"' :
                        sb.append("&quot;");
                        break;
                    case '\'' :
                        sb.append("'");
                        break;
                    case '&' :
                        sb.append("&amp;");
                        break;
                    case '<' :
                        sb.append("&lt;");
                        break;
                    case '>' :
                        sb.append("&gt;");
                        break;
                    case '\b' :
                        sb.append("\\b");
                        break;
                    case '\f' :
                        sb.append("\\f");
                        break;
                    case '\n' :
                        sb.append("\n");
                        break;
                    case '\r' :
                        sb.append("\\r");
                        break;
                    case '\t' :
                        sb.append("\t");
                        break;
                    default :
                        if (((ch <= '\u001f') || ((ch >= '\u007f') && (ch <= '\u009f'))) || ((ch >= '\u2000') && (ch <= '\u20ff'))) {
                            java.lang.String ss = java.lang.Integer.toHexString(ch);
                            sb.append("&#x");
                            for (int k = 0; k < (4 - (ss.length())); k++) {
                                sb.append('0');
                            }
                            sb.append(ss.toUpperCase()).append(";");
                        }else {
                            sb.append(ch);
                        }
                        break;
                }
            }
        }
    }

    public static java.lang.String toXml(java.util.Collection collection, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep) {
        final com.github.underscore.lodash.Xml.XmlStringBuilder builder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutRoot(identStep, com.github.underscore.lodash.Xml.UTF_8.name());
        builder.append("<root>").incIdent();
        if ((collection == null) || (!(collection.isEmpty()))) {
            builder.newLine();
        }
        com.github.underscore.lodash.Xml.XmlArray.writeXml(collection, null, builder, false, com.github.underscore.lodash.U.<java.lang.String>newLinkedHashSet());
        return builder.newLine().append("</root>").toString();
    }

    public static java.lang.String toXml(java.util.Collection collection) {
        return com.github.underscore.lodash.Xml.toXml(collection, com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TWO_SPACES);
    }

    public static java.lang.String toXml(java.util.Map map, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep) {
        final com.github.underscore.lodash.Xml.XmlStringBuilder builder;
        final java.util.Map localMap;
        if ((map != null) && (map.containsKey(com.github.underscore.lodash.Xml.ENCODING))) {
            builder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutRoot(identStep, java.lang.String.valueOf(map.get(com.github.underscore.lodash.Xml.ENCODING)));
            localMap = ((java.util.Map) (com.github.underscore.lodash.U.clone(map)));
            localMap.remove(com.github.underscore.lodash.Xml.ENCODING);
        }else {
            builder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutRoot(identStep, com.github.underscore.lodash.Xml.UTF_8.name());
            localMap = map;
        }
        if ((((localMap == null) || ((localMap.size()) != 1)) || (java.lang.String.valueOf(((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getKey()).startsWith("-"))) || ((((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getValue()) instanceof java.util.List)) {
            final java.lang.String name;
            if ((((localMap != null) && ((localMap.size()) == 1)) && ((((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getValue()) instanceof java.util.List)) && (!(((java.util.List) (((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getValue())).isEmpty()))) {
                name = java.lang.String.valueOf(((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getKey());
            }else {
                name = "root";
            }
            com.github.underscore.lodash.Xml.XmlObject.writeXml(localMap, name, builder, false, com.github.underscore.lodash.U.<java.lang.String>newLinkedHashSet());
        }else {
            com.github.underscore.lodash.Xml.XmlObject.writeXml(localMap, null, builder, false, com.github.underscore.lodash.U.<java.lang.String>newLinkedHashSet());
        }
        return builder.toString();
    }

    public static java.lang.String toXml(java.util.Map map) {
        return com.github.underscore.lodash.Xml.toXml(map, com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TWO_SPACES);
    }

    @java.lang.SuppressWarnings("unchecked")
    private static java.lang.Object getValue(final java.lang.Object value) {
        if ((value instanceof java.util.Map) && ((((java.util.Map<java.lang.String, java.lang.Object>) (value)).entrySet().size()) == 1)) {
            final java.util.Map.Entry<java.lang.String, java.lang.Object> entry = ((java.util.Map<java.lang.String, java.lang.Object>) (value)).entrySet().iterator().next();
            if ((com.github.underscore.lodash.Xml.TEXT.equals(entry.getKey())) || (entry.getKey().equals(com.github.underscore.lodash.Xml.ELEMENT_TEXT))) {
                return entry.getValue();
            }
        }
        return value;
    }

    @java.lang.SuppressWarnings("unchecked")
    private static java.util.Map<java.lang.String, java.lang.Object> createMap(final org.w3c.dom.Node node, final com.github.underscore.Function<java.lang.Object, java.lang.Object> nodeMapper, java.util.Map<java.lang.String, java.lang.Object> attrMap, int[] uniqueIds, final com.github.underscore.Function<java.lang.Object, java.lang.Object> valueMapper, java.lang.String source, int[] sourceIndex) {
        final java.util.Map<java.lang.String, java.lang.Object> map = com.github.underscore.lodash.U.newLinkedHashMap();
        map.putAll(attrMap);
        final org.w3c.dom.NodeList nodeList = node.getChildNodes();
        for (int index = 0; index < (nodeList.getLength()); index++) {
            final org.w3c.dom.Node currentNode = nodeList.item(index);
            final java.lang.String name = currentNode.getNodeName();
            final java.lang.Object value;
            final int attributesLength = ((currentNode.getAttributes()) == null) ? 0 : currentNode.getAttributes().getLength();
            if ((currentNode.getNodeType()) == (org.w3c.dom.Node.ELEMENT_NODE)) {
                sourceIndex[0] = ((source.indexOf(("<" + name), sourceIndex[0])) + (name.length())) + 2;
                final java.util.Map<java.lang.String, java.lang.Object> attrMapLocal = com.github.underscore.lodash.U.newLinkedHashMap();
                if (attributesLength > 0) {
                    final java.util.regex.Matcher matcher = com.github.underscore.lodash.Xml.ATTRS.matcher(source.substring(sourceIndex[0], source.indexOf(">", sourceIndex[0])));
                    while (matcher.find()) {
                        com.github.underscore.lodash.Xml.addNodeValue(attrMapLocal, ('-' + (matcher.group(1))), matcher.group(2), nodeMapper, uniqueIds);
                    } 
                }
                value = com.github.underscore.lodash.Xml.createMap(currentNode, nodeMapper, attrMapLocal, uniqueIds, valueMapper, source, sourceIndex);
            }else {
                if (com.github.underscore.lodash.Xml.COMMENT.equals(name)) {
                    sourceIndex[0] = (source.indexOf("-->", sourceIndex[0])) + 3;
                }else
                    if (com.github.underscore.lodash.Xml.CDATA.equals(name)) {
                        sourceIndex[0] = (source.indexOf("]]>", sourceIndex[0])) + 3;
                    }

                value = currentNode.getTextContent();
            }
            if ((com.github.underscore.lodash.Xml.TEXT.equals(name)) && (valueMapper.apply(value).toString().isEmpty())) {
                continue;
            }
            com.github.underscore.lodash.Xml.addNodeValue(map, name, value, nodeMapper, uniqueIds);
        }
        return map;
    }

    @java.lang.SuppressWarnings("unchecked")
    private static void addNodeValue(final java.util.Map<java.lang.String, java.lang.Object> map, final java.lang.String name, final java.lang.Object value, final com.github.underscore.Function<java.lang.Object, java.lang.Object> nodeMapper, int[] uniqueIds) {
        if (map.containsKey(name)) {
            if (com.github.underscore.lodash.Xml.TEXT.equals(name)) {
                map.put((name + (uniqueIds[0])), nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
                uniqueIds[0] += 1;
            }else
                if (com.github.underscore.lodash.Xml.COMMENT.equals(name)) {
                    map.put((name + (uniqueIds[1])), nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
                    uniqueIds[1] += 1;
                }else
                    if (com.github.underscore.lodash.Xml.CDATA.equals(name)) {
                        map.put((name + (uniqueIds[2])), nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
                        uniqueIds[2] += 1;
                    }else {
                        final java.lang.Object object = map.get(name);
                        if (object instanceof java.util.List) {
                            com.github.underscore.lodash.Xml.addText(map, name, ((java.util.List<java.lang.Object>) (object)), value);
                        }else {
                            final java.util.List<java.lang.Object> objects = com.github.underscore.lodash.U.newArrayList();
                            objects.add(object);
                            com.github.underscore.lodash.Xml.addText(map, name, objects, value);
                            map.put(name, objects);
                        }
                    }


        }else {
            map.put(name, nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
        }
    }

    @java.lang.SuppressWarnings("unchecked")
    private static void addText(final java.util.Map<java.lang.String, java.lang.Object> map, final java.lang.String name, final java.util.List<java.lang.Object> objects, final java.lang.Object value) {
        int lastIndex = (map.size()) - 1;
        final int index = objects.size();
        while (true) {
            final java.util.Map.Entry lastElement = ((java.util.Map.Entry) (map.entrySet().toArray()[lastIndex]));
            if (name.equals(java.lang.String.valueOf(lastElement.getKey()))) {
                break;
            }
            final java.util.Map<java.lang.String, java.lang.Object> text = com.github.underscore.lodash.U.newLinkedHashMap();
            text.put(java.lang.String.valueOf(lastElement.getKey()), map.remove(lastElement.getKey()));
            objects.add(index, text);
            lastIndex -= 1;
        } 
        objects.add(com.github.underscore.lodash.Xml.getValue(value));
    }

    @java.lang.SuppressWarnings("unchecked")
    public static java.lang.Object fromXml(final java.lang.String xml, final com.github.underscore.Function<java.lang.Object, java.lang.Object> valueMapper) {
        if (xml == null) {
            return null;
        }
        try {
            org.w3c.dom.Document document = com.github.underscore.lodash.Xml.createDocument(xml);
            final java.lang.Object result = com.github.underscore.lodash.Xml.createMap(document, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
                public java.lang.Object apply(java.lang.Object object) {
                    return object;
                }
            }, java.util.Collections.<java.lang.String, java.lang.Object>emptyMap(), new int[]{ 1, 1, 1 }, valueMapper, xml, new int[]{ 0 });
            if (((document.getXmlEncoding()) != null) && (!("UTF-8".equalsIgnoreCase(document.getXmlEncoding())))) {
                ((java.util.Map) (result)).put(com.github.underscore.lodash.Xml.ENCODING, document.getXmlEncoding());
            }else
                if ((((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getKey().equals("root")) && (((((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getValue()) instanceof java.util.List) || ((((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getValue()) instanceof java.util.Map))) {
                    return ((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getValue();
                }

            return result;
        } catch (java.lang.Exception ex) {
            throw new java.lang.IllegalArgumentException(ex);
        }
    }

    public static java.lang.Object fromXml(final java.lang.String xml) {
        return com.github.underscore.lodash.Xml.fromXml(xml, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
            public java.lang.Object apply(java.lang.Object object) {
                return java.lang.String.valueOf(object).trim();
            }
        });
    }

    private static org.w3c.dom.Document createDocument(final java.lang.String xml) throws java.io.IOException, javax.xml.parsers.ParserConfigurationException, org.xml.sax.SAXException {
        final javax.xml.parsers.DocumentBuilderFactory factory = javax.xml.parsers.DocumentBuilderFactory.newInstance();
        factory.setNamespaceAware(true);
        factory.setFeature(javax.xml.XMLConstants.FEATURE_SECURE_PROCESSING, true);
        final javax.xml.parsers.DocumentBuilder builder = factory.newDocumentBuilder();
        builder.setErrorHandler(new org.xml.sax.helpers.DefaultHandler());
        return builder.parse(new org.xml.sax.InputSource(new java.io.StringReader(xml)));
    }

    public static java.lang.Object fromXmlMakeArrays(final java.lang.String xml) {
        try {
            org.w3c.dom.Document document = com.github.underscore.lodash.Xml.createDocument(xml);
            return com.github.underscore.lodash.Xml.createMap(document, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
                public java.lang.Object apply(java.lang.Object object) {
                    return object instanceof java.util.List ? object : com.github.underscore.lodash.U.newArrayList(java.util.Arrays.asList(object));
                }
            }, java.util.Collections.<java.lang.String, java.lang.Object>emptyMap(), new int[]{ 1, 1, 1 }, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
                public java.lang.Object apply(java.lang.Object object) {
                    return java.lang.String.valueOf(object).trim();
                }
            }, xml, new int[]{ 0 });
        } catch (java.lang.Exception ex) {
            throw new java.lang.IllegalArgumentException(ex);
        }
    }

    @java.lang.SuppressWarnings("unchecked")
    public static java.lang.String formatXml(java.lang.String xml, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep) {
        java.lang.Object result = com.github.underscore.lodash.Xml.fromXml(xml);
        if (result instanceof java.util.Map) {
            return com.github.underscore.lodash.Xml.toXml(((java.util.Map) (result)), identStep);
        }
        return com.github.underscore.lodash.Xml.toXml(((java.util.List) (result)), identStep);
    }

    public static java.lang.String formatXml(java.lang.String xml) {
        return com.github.underscore.lodash.Xml.formatXml(xml, com.github.underscore.lodash.Xml.XmlStringBuilder.Step.THREE_SPACES);
    }
}
16:26:58.059 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
16:26:58.059 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #75
16:26:58.059 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlObject:393 which is executed by 27 tests
88056
16:26:58.152 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #76
16:26:58.152 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlObject:392 which is executed by 27 tests
88056
16:26:58.241 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:26:58.300 [pool-238-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (53 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>

</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:58.634 [pool-239-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (13 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>

</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>

</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:58.635 [pool-240-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:26:58.636 [pool-237-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>

</a]>>]
16:26:58.636 [pool-237-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:26:58.636 [pool-237-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Xml$XmlObject:392.
16:26:58.636 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #77
16:26:58.636 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlObject:378 which is executed by 27 tests
88056
16:26:58.728 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:26:58.786 [pool-242-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (52 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a></a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:59.136 [pool-243-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (13 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a></a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a></a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:59.141 [pool-244-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:26:59.141 [pool-241-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a></a]>>]
16:26:59.141 [pool-241-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:26:59.141 [pool-241-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Xml$XmlObject:378.
16:26:59.141 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #78
16:26:59.141 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlObject:375 which is executed by 27 tests
88056
16:26:59.235 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:26:59.294 [pool-246-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (52 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a></a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:59.618 [pool-247-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (12 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a></a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a></a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:26:59.620 [pool-248-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:26:59.620 [pool-245-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a></a]>>]
16:26:59.620 [pool-245-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:26:59.620 [pool-245-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Xml$XmlObject:375.
16:26:59.620 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:26:59.676 [pool-250-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (50 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:27:00.005 [pool-251-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (13 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>0</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:27:00.006 [pool-252-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>0</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>0</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:27:00.006 [pool-249-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:27:00.006 [pool-249-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>0</a]>>]
16:27:00.006 [pool-249-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Xml$XmlObject:375.
16:27:00.006 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #79
16:27:00.006 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlStringBuilderWithoutHeader:132 which is executed by 27 tests
88056
16:27:00.093 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #80
16:27:00.093 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml:707 which is executed by 27 tests
88056
16:27:00.182 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #81
16:27:00.182 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml:692 which is executed by 27 tests
88056
16:27:00.281 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:27:00.342 [pool-254-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (51 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:27:00.661 [pool-253-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Xml.java:590: warning: com.sun.org.apache.xerces.internal.util.XMLChar is internal proprietary API and may be removed in a future release
            if ((com.sun.org.apache.xerces.internal.util.XMLChar.isNameStart(ch)) && (ch != ':')) {
                                                        ^
Xml.java:600: warning: com.sun.org.apache.xerces.internal.util.XMLChar is internal proprietary API and may be removed in a future release
                    if ((com.sun.org.apache.xerces.internal.util.XMLChar.isName(ch)) && (ch != ':')) {
                                                                ^
Xml.java:705: error: non-static variable ident cannot be referenced from a static context
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(73).collectInput("com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident",com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                          ^
16:27:00.792 [pool-253-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public final class Xml {
    private static final java.lang.String NULL = "null";

    private static final java.lang.String ELEMENT_TEXT = "element";

    private static final java.lang.String CDATA = "#cdata-section";

    private static final java.lang.String COMMENT = "#comment";

    private static final java.lang.String ENCODING = "#encoding";

    private static final java.lang.String TEXT = "#text";

    private static final java.lang.String ELEMENT = ("<" + (com.github.underscore.lodash.Xml.ELEMENT_TEXT)) + ">";

    private static final java.lang.String CLOSED_ELEMENT = ("</" + (com.github.underscore.lodash.Xml.ELEMENT_TEXT)) + ">";

    private static final java.lang.String EMPTY_ELEMENT = (com.github.underscore.lodash.Xml.ELEMENT) + (com.github.underscore.lodash.Xml.CLOSED_ELEMENT);

    private static final java.lang.String NULL_ELEMENT = ((com.github.underscore.lodash.Xml.ELEMENT) + (com.github.underscore.lodash.Xml.NULL)) + (com.github.underscore.lodash.Xml.CLOSED_ELEMENT);

    private static final java.nio.charset.Charset UTF_8 = java.nio.charset.Charset.forName("UTF-8");

    private static final java.util.regex.Pattern ATTRS = java.util.regex.Pattern.compile(("((?:(?!\\s|=).)*)\\s*?=\\s*?[\"\']?((?:(?<=\")(?:(?<=\\\\)\"|[^\"])*|(?<=\')" + "(?:(?<=\\\\)\'|[^\'])*)|(?:(?!\"|\')(?:(?!\\/>|>|\\s).)+))"));

    public static class XmlStringBuilder {
        public enum Step {

            TWO_SPACES(2),
            THREE_SPACES(3),
            FOUR_SPACES(4),
            COMPACT(0),
            TABS(1);
            private int ident;

            Step(int ident) {
                this.ident = ident;
            }

            public int getIdent() {
                return ident;
            }
        }

        protected final java.lang.StringBuilder builder;

        private final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep;

        private int ident;

        public XmlStringBuilder() {
            builder = new java.lang.StringBuilder("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<root>\n");
            identStep = com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TWO_SPACES;
            ident = 2;
        }

        public XmlStringBuilder(java.lang.StringBuilder builder, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident) {
            this.builder = builder;
            this.identStep = identStep;
            this.ident = ident;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder append(final java.lang.String string) {
            builder.append(string);
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder fillSpaces() {
            for (int index = 0; index < (ident); index += 1) {
                builder.append(((identStep) == (com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TABS) ? '\t' : ' '));
            }
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder incIdent() {
            ident += identStep.getIdent();
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder decIdent() {
            ident -= identStep.getIdent();
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder newLine() {
            if ((identStep) != (com.github.underscore.lodash.Xml.XmlStringBuilder.Step.COMPACT)) {
                builder.append("\n");
            }
            return this;
        }

        public int getIdent() {
            return ident;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder.Step getIdentStep() {
            return identStep;
        }

        public java.lang.String toString() {
            return (builder.toString()) + "\n</root>";
        }
    }

    public static class XmlStringBuilderWithoutRoot extends com.github.underscore.lodash.Xml.XmlStringBuilder {
        public XmlStringBuilderWithoutRoot(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, java.lang.String encoding) {
            super(new java.lang.StringBuilder(((("<?xml version=\"1.0\" encoding=\"" + (com.github.underscore.lodash.U.escape(encoding))) + "\"?>") + (identStep == (com.github.underscore.lodash.Xml.XmlStringBuilder.Step.COMPACT) ? "" : "\n"))), identStep, 0);
        }

        public java.lang.String toString() {
            return builder.toString();
        }
    }

    public static class XmlStringBuilderWithoutHeader extends com.github.underscore.lodash.Xml.XmlStringBuilder {
        public XmlStringBuilderWithoutHeader(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident) {
            super(new java.lang.StringBuilder(), identStep, ident);
        }

        public java.lang.String toString() {
            return builder.toString();
        }
    }

    public static class XmlStringBuilderText extends com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader {
        public XmlStringBuilderText(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident) {
            super(identStep, ident);
        }
    }

    public static class XmlArray {
        public static void writeXml(java.util.Collection collection, java.lang.String name, com.github.underscore.lodash.Xml.XmlStringBuilder builder, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (collection == null) {
                builder.append(com.github.underscore.lodash.Xml.NULL);
                return;
            }
            if (name != null) {
                builder.fillSpaces().append("<").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(">").incIdent();
                if (!(collection.isEmpty())) {
                    builder.newLine();
                }
            }
            com.github.underscore.lodash.Xml.XmlArray.writeXml(collection, builder, name, parentTextFound, namespaces);
            if (name != null) {
                builder.decIdent().newLine().fillSpaces().append("</").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(">");
            }
        }

        @java.lang.SuppressWarnings("unchecked")
        private static void writeXml(java.util.Collection collection, com.github.underscore.lodash.Xml.XmlStringBuilder builder, java.lang.String name, final boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            boolean localParentTextFound = parentTextFound;
            final java.util.List entries = com.github.underscore.lodash.U.newArrayList(collection);
            for (int index = 0; index < (entries.size()); index += 1) {
                final java.lang.Object value = entries.get(index);
                final boolean addNewLine = (index < ((entries.size()) - 1)) && (!(java.lang.String.valueOf(entries.get((index + 1))).startsWith(("{" + (com.github.underscore.lodash.Xml.TEXT)))));
                if (value == null) {
                    builder.fillSpaces().append((((((("<" + (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">") + (com.github.underscore.lodash.Xml.NULL)) + "</") + (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">"));
                }else {
                    if ((value instanceof java.util.Map) && ((((java.util.Map) (value)).size()) == 1)) {
                        com.github.underscore.lodash.Xml.XmlObject.writeXml(((java.util.Map) (value)), null, builder, localParentTextFound, namespaces);
                        if (java.lang.String.valueOf(((java.util.Map.Entry) (((java.util.Map) (value)).entrySet().iterator().next())).getKey()).startsWith(com.github.underscore.lodash.Xml.TEXT)) {
                            localParentTextFound = true;
                            continue;
                        }
                    }else {
                        com.github.underscore.lodash.Xml.XmlValue.writeXml(value, (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : name), builder, localParentTextFound, namespaces);
                    }
                    localParentTextFound = false;
                }
                if (addNewLine) {
                    builder.newLine();
                }
            }
        }

        public static void writeXml(byte[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(short[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(int[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(long[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(float[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(double[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(boolean[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(char[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(java.lang.Object[] array, java.lang.String name, com.github.underscore.lodash.Xml.XmlStringBuilder builder, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        com.github.underscore.lodash.Xml.XmlValue.writeXml(array[i], (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : name), builder, parentTextFound, namespaces);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }
    }

    public static class XmlObject {
        @java.lang.SuppressWarnings("unchecked")
        public static void writeXml(java.util.Map map, java.lang.String name, final com.github.underscore.lodash.Xml.XmlStringBuilder builder, final boolean parentTextFound, final java.util.Set<java.lang.String> namespaces) {
            if (map == null) {
                com.github.underscore.lodash.Xml.XmlValue.writeXml(com.github.underscore.lodash.Xml.NULL, name, builder, false, namespaces);
                return;
            }
            final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems = com.github.underscore.lodash.U.newArrayList();
            final java.util.List<java.lang.String> attrs = com.github.underscore.lodash.U.newArrayList();
            final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep = builder.getIdentStep();
            final int ident = (builder.getIdent()) + (name == null ? 0 : builder.getIdentStep().getIdent());
            final java.util.List<java.util.Map.Entry> entries = com.github.underscore.lodash.U.newArrayList(map.entrySet());
            for (int index = 0; index < (entries.size()); index += 1) {
                final java.util.Map.Entry entry = entries.get(index);
                final boolean addNewLine = (index < ((entries.size()) - 1)) && (!(java.lang.String.valueOf(entries.get((index + 1)).getKey()).startsWith(com.github.underscore.lodash.Xml.TEXT)));
                if (((java.lang.String.valueOf(entry.getKey()).startsWith("-")) && (!((entry.getValue()) instanceof java.util.Map))) && (!((entry.getValue()) instanceof java.util.List))) {
                    attrs.add(((((" " + (com.github.underscore.lodash.Xml.XmlValue.escapeName(java.lang.String.valueOf(entry.getKey()).substring(1), namespaces))) + "=\"") + (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getValue())))) + "\""));
                    if (java.lang.String.valueOf(entry.getKey()).startsWith("-xmlns:")) {
                        namespaces.add(java.lang.String.valueOf(entry.getKey()).substring(7));
                    }
                }else
                    if (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getKey())).startsWith(com.github.underscore.lodash.Xml.TEXT)) {
                        com.github.underscore.lodash.Xml.XmlObject.addText(entry, elems, identStep, ident);
                    }else {
                        com.github.underscore.lodash.Xml.XmlObject.processElements(entry, identStep, ident, addNewLine, elems, namespaces);
                    }

            }
            if (name != null) {
                if (!parentTextFound) {
                    builder.fillSpaces();
                }
                builder.append("<").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(com.github.underscore.lodash.U.join(attrs, "")).append(">").incIdent();
                if ((!(elems.isEmpty())) && (!((elems.get(0)) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText))) {
                    builder.newLine();
                }
            }
            for (com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder1 : elems) {
                builder.append(localBuilder1.toString());
            }
            if (name != null) {
                builder.decIdent();
                if ((!(elems.isEmpty())) && (!((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText))) {
                    builder.newLine().fillSpaces();
                }
                builder.append("</").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(">");
            }
        }

        private static void processElements(final java.util.Map.Entry entry, final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident, final boolean addNewLine, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final java.util.Set<java.lang.String> namespaces) {
            if (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getKey())).startsWith(com.github.underscore.lodash.Xml.COMMENT)) {
                com.github.underscore.lodash.Xml.XmlObject.addComment(entry, identStep, ident, addNewLine, elems, "<!--", "-->");
            }else
                if (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getKey())).startsWith(com.github.underscore.lodash.Xml.CDATA)) {
                    com.github.underscore.lodash.Xml.XmlObject.addComment(entry, identStep, ident, addNewLine, elems, "<![CDATA[", "]]>");
                }else
                    if (((entry.getValue()) instanceof java.util.List) && (!(((java.util.List) (entry.getValue())).isEmpty()))) {
                        com.github.underscore.lodash.Xml.XmlObject.addElements(identStep, ident, entry, namespaces, elems, addNewLine);
                    }else {
                        com.github.underscore.lodash.Xml.XmlObject.addElement(identStep, ident, entry, namespaces, elems, addNewLine);
                    }


        }

        private static void addText(final java.util.Map.Entry entry, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident) {
            if ((entry.getValue()) instanceof java.util.List) {
                for (java.lang.Object value : ((java.util.List) (entry.getValue()))) {
                    elems.add(new com.github.underscore.lodash.Xml.XmlStringBuilderText(identStep, ident).append(com.github.underscore.lodash.U.escape(java.lang.String.valueOf(value))));
                }
            }else {
                elems.add(new com.github.underscore.lodash.Xml.XmlStringBuilderText(identStep, ident).append(com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getValue()))));
            }
        }

        private static void addElements(final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident, java.util.Map.Entry entry, java.util.Set<java.lang.String> namespaces, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final boolean addNewLine) {
            boolean parentTextFound = (!(elems.isEmpty())) && ((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText);
            final com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder;
            if ((java.lang.String.valueOf(((java.util.List) (entry.getValue())).get(0)).startsWith(("{" + (com.github.underscore.lodash.Xml.TEXT)))) || (java.lang.String.valueOf(((java.util.List) (entry.getValue())).get(((((java.util.List) (entry.getValue())).size()) - 1))).startsWith(("{" + (com.github.underscore.lodash.Xml.TEXT))))) {
                localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderText(identStep, ident);
            }else {
                localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader(identStep, ident);
            }
            com.github.underscore.lodash.Xml.XmlArray.writeXml(((java.util.List) (entry.getValue())), localBuilder, java.lang.String.valueOf(entry.getKey()), parentTextFound, namespaces);
            if (addNewLine) {
                localBuilder.newLine();
            }
            elems.add(localBuilder);
        }

        private static void addElement(final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident, java.util.Map.Entry entry, java.util.Set<java.lang.String> namespaces, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final boolean addNewLine) {
            boolean parentTextFound = (!(elems.isEmpty())) && ((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText);
            com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader(identStep, ident);
            com.github.underscore.lodash.Xml.XmlValue.writeXml(entry.getValue(), java.lang.String.valueOf(entry.getKey()), localBuilder, parentTextFound, namespaces);
            if (addNewLine) {
                localBuilder.newLine();
            }
            elems.add(localBuilder);
        }

        private static void addComment(java.util.Map.Entry entry, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident, boolean addNewLine, java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, java.lang.String openElement, java.lang.String closeElement) {
            if ((entry.getValue()) instanceof java.util.List) {
                for (java.util.Iterator iterator = ((java.util.List) (entry.getValue())).iterator(); iterator.hasNext();) {
                    com.github.underscore.lodash.Xml.XmlObject.addCommentValue(identStep, ident, java.lang.String.valueOf(iterator.next()), ((iterator.hasNext()) || addNewLine), elems, openElement, closeElement);
                }
            }else {
                com.github.underscore.lodash.Xml.XmlObject.addCommentValue(identStep, ident, java.lang.String.valueOf(entry.getValue()), addNewLine, elems, openElement, closeElement);
            }
        }

        private static void addCommentValue(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident, java.lang.String value, boolean addNewLine, java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, java.lang.String openElement, java.lang.String closeElement) {
            boolean parentTextFound = (!(elems.isEmpty())) && ((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText);
            com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader(identStep, ident);
            if (!parentTextFound) {
                localBuilder.fillSpaces();
            }
            localBuilder.append(openElement).append(value).append(closeElement);
            if (addNewLine) {
                localBuilder.newLine();
            }
            elems.add(localBuilder);
        }
    }

    public static class XmlValue {
        public static void writeXml(java.lang.Object value, java.lang.String name, com.github.underscore.lodash.Xml.XmlStringBuilder builder, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (value instanceof java.util.Map) {
                com.github.underscore.lodash.Xml.XmlObject.writeXml(((java.util.Map) (value)), name, builder, parentTextFound, namespaces);
                return;
            }
            if (value instanceof java.util.Collection) {
                com.github.underscore.lodash.Xml.XmlArray.writeXml(((java.util.Collection) (value)), name, builder, parentTextFound, namespaces);
                return;
            }
            if (!parentTextFound) {
                builder.fillSpaces();
            }
            builder.append((("<" + (com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">"));
            if (value == null) {
                builder.append(com.github.underscore.lodash.Xml.NULL);
            }else
                if (value instanceof java.lang.String) {
                    builder.append(com.github.underscore.lodash.Xml.XmlValue.escape(((java.lang.String) (value))));
                }else {
                    com.github.underscore.lodash.Xml.XmlValue.processArrays(value, builder, name, parentTextFound, namespaces);
                }

            builder.append((("</" + (com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">"));
        }

        private static void processArrays(java.lang.Object value, com.github.underscore.lodash.Xml.XmlStringBuilder builder, java.lang.String name, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (value instanceof java.lang.Double) {
                if ((((java.lang.Double) (value)).isInfinite()) || (((java.lang.Double) (value)).isNaN())) {
                    builder.append(com.github.underscore.lodash.Xml.NULL);
                }else {
                    builder.append(value.toString());
                }
            }else
                if (value instanceof java.lang.Float) {
                    if ((((java.lang.Float) (value)).isInfinite()) || (((java.lang.Float) (value)).isNaN())) {
                        builder.append(com.github.underscore.lodash.Xml.NULL);
                    }else {
                        builder.append(value.toString());
                    }
                }else
                    if (value instanceof java.lang.Number) {
                        builder.append(value.toString());
                    }else
                        if (value instanceof java.lang.Boolean) {
                            builder.append(value.toString());
                        }else
                            if (value instanceof byte[]) {
                                builder.newLine().incIdent();
                                com.github.underscore.lodash.Xml.XmlArray.writeXml(((byte[]) (value)), builder);
                                builder.decIdent().newLine().fillSpaces();
                            }else
                                if (value instanceof short[]) {
                                    builder.newLine().incIdent();
                                    com.github.underscore.lodash.Xml.XmlArray.writeXml(((short[]) (value)), builder);
                                    builder.decIdent().newLine().fillSpaces();
                                }else {
                                    com.github.underscore.lodash.Xml.XmlValue.processArrays2(value, builder, name, parentTextFound, namespaces);
                                }





        }

        private static void processArrays2(java.lang.Object value, com.github.underscore.lodash.Xml.XmlStringBuilder builder, java.lang.String name, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (value instanceof int[]) {
                builder.newLine().incIdent();
                com.github.underscore.lodash.Xml.XmlArray.writeXml(((int[]) (value)), builder);
                builder.decIdent().newLine().fillSpaces();
            }else
                if (value instanceof long[]) {
                    builder.newLine().incIdent();
                    com.github.underscore.lodash.Xml.XmlArray.writeXml(((long[]) (value)), builder);
                    builder.decIdent().newLine().fillSpaces();
                }else
                    if (value instanceof float[]) {
                        builder.newLine().incIdent();
                        com.github.underscore.lodash.Xml.XmlArray.writeXml(((float[]) (value)), builder);
                        builder.decIdent().newLine().fillSpaces();
                    }else
                        if (value instanceof double[]) {
                            builder.newLine().incIdent();
                            com.github.underscore.lodash.Xml.XmlArray.writeXml(((double[]) (value)), builder);
                            builder.decIdent().newLine().fillSpaces();
                        }else
                            if (value instanceof boolean[]) {
                                builder.newLine().incIdent();
                                com.github.underscore.lodash.Xml.XmlArray.writeXml(((boolean[]) (value)), builder);
                                builder.decIdent().newLine().fillSpaces();
                            }else
                                if (value instanceof char[]) {
                                    builder.newLine().incIdent();
                                    com.github.underscore.lodash.Xml.XmlArray.writeXml(((char[]) (value)), builder);
                                    builder.decIdent().newLine().fillSpaces();
                                }else
                                    if (value instanceof java.lang.Object[]) {
                                        builder.newLine().incIdent();
                                        com.github.underscore.lodash.Xml.XmlArray.writeXml(((java.lang.Object[]) (value)), name, builder, parentTextFound, namespaces);
                                        builder.decIdent().newLine().fillSpaces();
                                    }else {
                                        builder.append(value.toString());
                                    }






        }

        public static java.lang.String escapeName(java.lang.String name, java.util.Set<java.lang.String> namespaces) {
            final int length = name.length();
            if (length == 0) {
                return "__EE__EMPTY__EE__";
            }
            final java.lang.StringBuilder result = new java.lang.StringBuilder();
            char ch = name.charAt(0);
            if ((com.sun.org.apache.xerces.internal.util.XMLChar.isNameStart(ch)) && (ch != ':')) {
                result.append(ch);
            }else {
                result.append("__").append(com.github.underscore.lodash.Base32.encode(java.lang.Character.toString(ch))).append("__");
            }
            for (int i = 1; i < length; ++i) {
                ch = name.charAt(i);
                if ((ch == ':') && (("xmlns".equals(name.substring(0, i))) || (namespaces.contains(name.substring(0, i))))) {
                    result.append(ch);
                }else
                    if ((com.sun.org.apache.xerces.internal.util.XMLChar.isName(ch)) && (ch != ':')) {
                        result.append(ch);
                    }else {
                        result.append("__").append(com.github.underscore.lodash.Base32.encode(java.lang.Character.toString(ch))).append("__");
                    }

            }
            return result.toString();
        }

        public static java.lang.String escape(java.lang.String s) {
            if (s == null) {
                return null;
            }
            java.lang.StringBuilder sb = new java.lang.StringBuilder();
            com.github.underscore.lodash.Xml.XmlValue.escape(s, sb);
            return sb.toString();
        }

        private static void escape(java.lang.String s, java.lang.StringBuilder sb) {
            final int len = s.length();
            for (int i = 0; i < len; i++) {
                char ch = s.charAt(i);
                switch (ch) {
                    case '"' :
                        sb.append("&quot;");
                        break;
                    case '\'' :
                        sb.append("'");
                        break;
                    case '&' :
                        sb.append("&amp;");
                        break;
                    case '<' :
                        sb.append("&lt;");
                        break;
                    case '>' :
                        sb.append("&gt;");
                        break;
                    case '\b' :
                        sb.append("\\b");
                        break;
                    case '\f' :
                        sb.append("\\f");
                        break;
                    case '\n' :
                        sb.append("\n");
                        break;
                    case '\r' :
                        sb.append("\\r");
                        break;
                    case '\t' :
                        sb.append("\t");
                        break;
                    default :
                        if (((ch <= '\u001f') || ((ch >= '\u007f') && (ch <= '\u009f'))) || ((ch >= '\u2000') && (ch <= '\u20ff'))) {
                            java.lang.String ss = java.lang.Integer.toHexString(ch);
                            sb.append("&#x");
                            for (int k = 0; k < (4 - (ss.length())); k++) {
                                sb.append('0');
                            }
                            sb.append(ss.toUpperCase()).append(";");
                        }else {
                            sb.append(ch);
                        }
                        break;
                }
            }
        }
    }

    public static java.lang.String toXml(java.util.Collection collection, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep) {
        final com.github.underscore.lodash.Xml.XmlStringBuilder builder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutRoot(identStep, com.github.underscore.lodash.Xml.UTF_8.name());
        builder.append("<root>").incIdent();
        if ((collection == null) || (!(collection.isEmpty()))) {
            builder.newLine();
        }
        com.github.underscore.lodash.Xml.XmlArray.writeXml(collection, null, builder, false, com.github.underscore.lodash.U.<java.lang.String>newLinkedHashSet());
        return builder.newLine().append("</root>").toString();
    }

    public static java.lang.String toXml(java.util.Collection collection) {
        return com.github.underscore.lodash.Xml.toXml(collection, com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TWO_SPACES);
    }

    public static java.lang.String toXml(java.util.Map map, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep) {
        final com.github.underscore.lodash.Xml.XmlStringBuilder builder;
        final java.util.Map localMap;
        if ((map != null) && (map.containsKey(com.github.underscore.lodash.Xml.ENCODING))) {
            builder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutRoot(identStep, java.lang.String.valueOf(map.get(com.github.underscore.lodash.Xml.ENCODING)));
            localMap = ((java.util.Map) (com.github.underscore.lodash.U.clone(map)));
            localMap.remove(com.github.underscore.lodash.Xml.ENCODING);
        }else {
            builder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutRoot(identStep, com.github.underscore.lodash.Xml.UTF_8.name());
            localMap = map;
        }
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(73).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(73).collectionStarts();
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(73).collectInput("com.github.underscore.lodash.Xml.ENCODING",com.github.underscore.lodash.Xml.ENCODING);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(73).collectInput("com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident",com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(73).collectInput("(localMap == null)",(localMap == null));} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(73).collectInput("com.github.underscore.lodash.Xml.NULL_ELEMENT",com.github.underscore.lodash.Xml.NULL_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(73).collectInput("com.github.underscore.lodash.Xml.ATTRS",com.github.underscore.lodash.Xml.ATTRS);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(73).collectInput("identStep",identStep);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(73).collectInput("com.github.underscore.lodash.Xml.TEXT",com.github.underscore.lodash.Xml.TEXT);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(73).collectInput("com.github.underscore.lodash.Xml.NULL",com.github.underscore.lodash.Xml.NULL);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(73).collectInput("com.github.underscore.lodash.Xml.ELEMENT_TEXT",com.github.underscore.lodash.Xml.ELEMENT_TEXT);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(73).collectInput("com.github.underscore.lodash.Xml.CLOSED_ELEMENT",com.github.underscore.lodash.Xml.CLOSED_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(73).collectInput("com.github.underscore.lodash.Xml.UTF_8",com.github.underscore.lodash.Xml.UTF_8);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(73).collectInput("com.github.underscore.lodash.Xml.CDATA",com.github.underscore.lodash.Xml.CDATA);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(73).collectInput("1",1);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(73).collectInput("com.github.underscore.lodash.Xml.COMMENT",com.github.underscore.lodash.Xml.COMMENT);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(73).collectInput("com.github.underscore.lodash.Xml.EMPTY_ELEMENT",com.github.underscore.lodash.Xml.EMPTY_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(73).collectInput("null",null);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(73).collectInput("com.github.underscore.lodash.Xml.ELEMENT",com.github.underscore.lodash.Xml.ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(73).collectInput("\"-\"","-");} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(73).collectInput("localMap",localMap);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(73).collectInput("map",map);} catch (Exception ex1) {ex1.printStackTrace();};
            fr.inria.lille.commons.trace.RuntimeValues.instance(73).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(73).collectionEnds();
        }
        if (runtimeAngelicValue) if ((((localMap == null) || ((localMap.size()) != 1)) || (java.lang.String.valueOf(((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getKey()).startsWith("-"))) || ((((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getValue()) instanceof java.util.List)) {
            final java.lang.String name;
            if ((((localMap != null) && ((localMap.size()) == 1)) && ((((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getValue()) instanceof java.util.List)) && (!(((java.util.List) (((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getValue())).isEmpty()))) {
                name = java.lang.String.valueOf(((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getKey());
            }else {
                name = "root";
            }
            com.github.underscore.lodash.Xml.XmlObject.writeXml(localMap, name, builder, false, com.github.underscore.lodash.U.<java.lang.String>newLinkedHashSet());
        }else {
            com.github.underscore.lodash.Xml.XmlObject.writeXml(localMap, null, builder, false, com.github.underscore.lodash.U.<java.lang.String>newLinkedHashSet());
        }
        return builder.toString();
    }

    public static java.lang.String toXml(java.util.Map map) {
        return com.github.underscore.lodash.Xml.toXml(map, com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TWO_SPACES);
    }

    @java.lang.SuppressWarnings("unchecked")
    private static java.lang.Object getValue(final java.lang.Object value) {
        if ((value instanceof java.util.Map) && ((((java.util.Map<java.lang.String, java.lang.Object>) (value)).entrySet().size()) == 1)) {
            final java.util.Map.Entry<java.lang.String, java.lang.Object> entry = ((java.util.Map<java.lang.String, java.lang.Object>) (value)).entrySet().iterator().next();
            if ((com.github.underscore.lodash.Xml.TEXT.equals(entry.getKey())) || (entry.getKey().equals(com.github.underscore.lodash.Xml.ELEMENT_TEXT))) {
                return entry.getValue();
            }
        }
        return value;
    }

    @java.lang.SuppressWarnings("unchecked")
    private static java.util.Map<java.lang.String, java.lang.Object> createMap(final org.w3c.dom.Node node, final com.github.underscore.Function<java.lang.Object, java.lang.Object> nodeMapper, java.util.Map<java.lang.String, java.lang.Object> attrMap, int[] uniqueIds, final com.github.underscore.Function<java.lang.Object, java.lang.Object> valueMapper, java.lang.String source, int[] sourceIndex) {
        final java.util.Map<java.lang.String, java.lang.Object> map = com.github.underscore.lodash.U.newLinkedHashMap();
        map.putAll(attrMap);
        final org.w3c.dom.NodeList nodeList = node.getChildNodes();
        for (int index = 0; index < (nodeList.getLength()); index++) {
            final org.w3c.dom.Node currentNode = nodeList.item(index);
            final java.lang.String name = currentNode.getNodeName();
            final java.lang.Object value;
            final int attributesLength = ((currentNode.getAttributes()) == null) ? 0 : currentNode.getAttributes().getLength();
            if ((currentNode.getNodeType()) == (org.w3c.dom.Node.ELEMENT_NODE)) {
                sourceIndex[0] = ((source.indexOf(("<" + name), sourceIndex[0])) + (name.length())) + 2;
                final java.util.Map<java.lang.String, java.lang.Object> attrMapLocal = com.github.underscore.lodash.U.newLinkedHashMap();
                if (attributesLength > 0) {
                    final java.util.regex.Matcher matcher = com.github.underscore.lodash.Xml.ATTRS.matcher(source.substring(sourceIndex[0], source.indexOf(">", sourceIndex[0])));
                    while (matcher.find()) {
                        com.github.underscore.lodash.Xml.addNodeValue(attrMapLocal, ('-' + (matcher.group(1))), matcher.group(2), nodeMapper, uniqueIds);
                    } 
                }
                value = com.github.underscore.lodash.Xml.createMap(currentNode, nodeMapper, attrMapLocal, uniqueIds, valueMapper, source, sourceIndex);
            }else {
                if (com.github.underscore.lodash.Xml.COMMENT.equals(name)) {
                    sourceIndex[0] = (source.indexOf("-->", sourceIndex[0])) + 3;
                }else
                    if (com.github.underscore.lodash.Xml.CDATA.equals(name)) {
                        sourceIndex[0] = (source.indexOf("]]>", sourceIndex[0])) + 3;
                    }

                value = currentNode.getTextContent();
            }
            if ((com.github.underscore.lodash.Xml.TEXT.equals(name)) && (valueMapper.apply(value).toString().isEmpty())) {
                continue;
            }
            com.github.underscore.lodash.Xml.addNodeValue(map, name, value, nodeMapper, uniqueIds);
        }
        return map;
    }

    @java.lang.SuppressWarnings("unchecked")
    private static void addNodeValue(final java.util.Map<java.lang.String, java.lang.Object> map, final java.lang.String name, final java.lang.Object value, final com.github.underscore.Function<java.lang.Object, java.lang.Object> nodeMapper, int[] uniqueIds) {
        if (map.containsKey(name)) {
            if (com.github.underscore.lodash.Xml.TEXT.equals(name)) {
                map.put((name + (uniqueIds[0])), nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
                uniqueIds[0] += 1;
            }else
                if (com.github.underscore.lodash.Xml.COMMENT.equals(name)) {
                    map.put((name + (uniqueIds[1])), nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
                    uniqueIds[1] += 1;
                }else
                    if (com.github.underscore.lodash.Xml.CDATA.equals(name)) {
                        map.put((name + (uniqueIds[2])), nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
                        uniqueIds[2] += 1;
                    }else {
                        final java.lang.Object object = map.get(name);
                        if (object instanceof java.util.List) {
                            com.github.underscore.lodash.Xml.addText(map, name, ((java.util.List<java.lang.Object>) (object)), value);
                        }else {
                            final java.util.List<java.lang.Object> objects = com.github.underscore.lodash.U.newArrayList();
                            objects.add(object);
                            com.github.underscore.lodash.Xml.addText(map, name, objects, value);
                            map.put(name, objects);
                        }
                    }


        }else {
            map.put(name, nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
        }
    }

    @java.lang.SuppressWarnings("unchecked")
    private static void addText(final java.util.Map<java.lang.String, java.lang.Object> map, final java.lang.String name, final java.util.List<java.lang.Object> objects, final java.lang.Object value) {
        int lastIndex = (map.size()) - 1;
        final int index = objects.size();
        while (true) {
            final java.util.Map.Entry lastElement = ((java.util.Map.Entry) (map.entrySet().toArray()[lastIndex]));
            if (name.equals(java.lang.String.valueOf(lastElement.getKey()))) {
                break;
            }
            final java.util.Map<java.lang.String, java.lang.Object> text = com.github.underscore.lodash.U.newLinkedHashMap();
            text.put(java.lang.String.valueOf(lastElement.getKey()), map.remove(lastElement.getKey()));
            objects.add(index, text);
            lastIndex -= 1;
        } 
        objects.add(com.github.underscore.lodash.Xml.getValue(value));
    }

    @java.lang.SuppressWarnings("unchecked")
    public static java.lang.Object fromXml(final java.lang.String xml, final com.github.underscore.Function<java.lang.Object, java.lang.Object> valueMapper) {
        if (xml == null) {
            return null;
        }
        try {
            org.w3c.dom.Document document = com.github.underscore.lodash.Xml.createDocument(xml);
            final java.lang.Object result = com.github.underscore.lodash.Xml.createMap(document, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
                public java.lang.Object apply(java.lang.Object object) {
                    return object;
                }
            }, java.util.Collections.<java.lang.String, java.lang.Object>emptyMap(), new int[]{ 1, 1, 1 }, valueMapper, xml, new int[]{ 0 });
            if (((document.getXmlEncoding()) != null) && (!("UTF-8".equalsIgnoreCase(document.getXmlEncoding())))) {
                ((java.util.Map) (result)).put(com.github.underscore.lodash.Xml.ENCODING, document.getXmlEncoding());
            }else
                if ((((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getKey().equals("root")) && (((((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getValue()) instanceof java.util.List) || ((((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getValue()) instanceof java.util.Map))) {
                    return ((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getValue();
                }

            return result;
        } catch (java.lang.Exception ex) {
            throw new java.lang.IllegalArgumentException(ex);
        }
    }

    public static java.lang.Object fromXml(final java.lang.String xml) {
        return com.github.underscore.lodash.Xml.fromXml(xml, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
            public java.lang.Object apply(java.lang.Object object) {
                return java.lang.String.valueOf(object).trim();
            }
        });
    }

    private static org.w3c.dom.Document createDocument(final java.lang.String xml) throws java.io.IOException, javax.xml.parsers.ParserConfigurationException, org.xml.sax.SAXException {
        final javax.xml.parsers.DocumentBuilderFactory factory = javax.xml.parsers.DocumentBuilderFactory.newInstance();
        factory.setNamespaceAware(true);
        factory.setFeature(javax.xml.XMLConstants.FEATURE_SECURE_PROCESSING, true);
        final javax.xml.parsers.DocumentBuilder builder = factory.newDocumentBuilder();
        builder.setErrorHandler(new org.xml.sax.helpers.DefaultHandler());
        return builder.parse(new org.xml.sax.InputSource(new java.io.StringReader(xml)));
    }

    public static java.lang.Object fromXmlMakeArrays(final java.lang.String xml) {
        try {
            org.w3c.dom.Document document = com.github.underscore.lodash.Xml.createDocument(xml);
            return com.github.underscore.lodash.Xml.createMap(document, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
                public java.lang.Object apply(java.lang.Object object) {
                    return object instanceof java.util.List ? object : com.github.underscore.lodash.U.newArrayList(java.util.Arrays.asList(object));
                }
            }, java.util.Collections.<java.lang.String, java.lang.Object>emptyMap(), new int[]{ 1, 1, 1 }, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
                public java.lang.Object apply(java.lang.Object object) {
                    return java.lang.String.valueOf(object).trim();
                }
            }, xml, new int[]{ 0 });
        } catch (java.lang.Exception ex) {
            throw new java.lang.IllegalArgumentException(ex);
        }
    }

    @java.lang.SuppressWarnings("unchecked")
    public static java.lang.String formatXml(java.lang.String xml, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep) {
        java.lang.Object result = com.github.underscore.lodash.Xml.fromXml(xml);
        if (result instanceof java.util.Map) {
            return com.github.underscore.lodash.Xml.toXml(((java.util.Map) (result)), identStep);
        }
        return com.github.underscore.lodash.Xml.toXml(((java.util.List) (result)), identStep);
    }

    public static java.lang.String formatXml(java.lang.String xml) {
        return com.github.underscore.lodash.Xml.formatXml(xml, com.github.underscore.lodash.Xml.XmlStringBuilder.Step.THREE_SPACES);
    }
}
16:27:00.793 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
16:27:00.793 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:27:00.850 [pool-256-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (51 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:27:01.179 [pool-255-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Xml.java:590: warning: com.sun.org.apache.xerces.internal.util.XMLChar is internal proprietary API and may be removed in a future release
            if ((com.sun.org.apache.xerces.internal.util.XMLChar.isNameStart(ch)) && (ch != ':')) {
                                                        ^
Xml.java:600: warning: com.sun.org.apache.xerces.internal.util.XMLChar is internal proprietary API and may be removed in a future release
                    if ((com.sun.org.apache.xerces.internal.util.XMLChar.isName(ch)) && (ch != ':')) {
                                                                ^
Xml.java:705: error: non-static variable ident cannot be referenced from a static context
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(74).collectInput("com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident",com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                          ^
16:27:01.306 [pool-255-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public final class Xml {
    private static final java.lang.String NULL = "null";

    private static final java.lang.String ELEMENT_TEXT = "element";

    private static final java.lang.String CDATA = "#cdata-section";

    private static final java.lang.String COMMENT = "#comment";

    private static final java.lang.String ENCODING = "#encoding";

    private static final java.lang.String TEXT = "#text";

    private static final java.lang.String ELEMENT = ("<" + (com.github.underscore.lodash.Xml.ELEMENT_TEXT)) + ">";

    private static final java.lang.String CLOSED_ELEMENT = ("</" + (com.github.underscore.lodash.Xml.ELEMENT_TEXT)) + ">";

    private static final java.lang.String EMPTY_ELEMENT = (com.github.underscore.lodash.Xml.ELEMENT) + (com.github.underscore.lodash.Xml.CLOSED_ELEMENT);

    private static final java.lang.String NULL_ELEMENT = ((com.github.underscore.lodash.Xml.ELEMENT) + (com.github.underscore.lodash.Xml.NULL)) + (com.github.underscore.lodash.Xml.CLOSED_ELEMENT);

    private static final java.nio.charset.Charset UTF_8 = java.nio.charset.Charset.forName("UTF-8");

    private static final java.util.regex.Pattern ATTRS = java.util.regex.Pattern.compile(("((?:(?!\\s|=).)*)\\s*?=\\s*?[\"\']?((?:(?<=\")(?:(?<=\\\\)\"|[^\"])*|(?<=\')" + "(?:(?<=\\\\)\'|[^\'])*)|(?:(?!\"|\')(?:(?!\\/>|>|\\s).)+))"));

    public static class XmlStringBuilder {
        public enum Step {

            TWO_SPACES(2),
            THREE_SPACES(3),
            FOUR_SPACES(4),
            COMPACT(0),
            TABS(1);
            private int ident;

            Step(int ident) {
                this.ident = ident;
            }

            public int getIdent() {
                return ident;
            }
        }

        protected final java.lang.StringBuilder builder;

        private final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep;

        private int ident;

        public XmlStringBuilder() {
            builder = new java.lang.StringBuilder("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<root>\n");
            identStep = com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TWO_SPACES;
            ident = 2;
        }

        public XmlStringBuilder(java.lang.StringBuilder builder, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident) {
            this.builder = builder;
            this.identStep = identStep;
            this.ident = ident;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder append(final java.lang.String string) {
            builder.append(string);
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder fillSpaces() {
            for (int index = 0; index < (ident); index += 1) {
                builder.append(((identStep) == (com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TABS) ? '\t' : ' '));
            }
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder incIdent() {
            ident += identStep.getIdent();
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder decIdent() {
            ident -= identStep.getIdent();
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder newLine() {
            if ((identStep) != (com.github.underscore.lodash.Xml.XmlStringBuilder.Step.COMPACT)) {
                builder.append("\n");
            }
            return this;
        }

        public int getIdent() {
            return ident;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder.Step getIdentStep() {
            return identStep;
        }

        public java.lang.String toString() {
            return (builder.toString()) + "\n</root>";
        }
    }

    public static class XmlStringBuilderWithoutRoot extends com.github.underscore.lodash.Xml.XmlStringBuilder {
        public XmlStringBuilderWithoutRoot(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, java.lang.String encoding) {
            super(new java.lang.StringBuilder(((("<?xml version=\"1.0\" encoding=\"" + (com.github.underscore.lodash.U.escape(encoding))) + "\"?>") + (identStep == (com.github.underscore.lodash.Xml.XmlStringBuilder.Step.COMPACT) ? "" : "\n"))), identStep, 0);
        }

        public java.lang.String toString() {
            return builder.toString();
        }
    }

    public static class XmlStringBuilderWithoutHeader extends com.github.underscore.lodash.Xml.XmlStringBuilder {
        public XmlStringBuilderWithoutHeader(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident) {
            super(new java.lang.StringBuilder(), identStep, ident);
        }

        public java.lang.String toString() {
            return builder.toString();
        }
    }

    public static class XmlStringBuilderText extends com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader {
        public XmlStringBuilderText(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident) {
            super(identStep, ident);
        }
    }

    public static class XmlArray {
        public static void writeXml(java.util.Collection collection, java.lang.String name, com.github.underscore.lodash.Xml.XmlStringBuilder builder, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (collection == null) {
                builder.append(com.github.underscore.lodash.Xml.NULL);
                return;
            }
            if (name != null) {
                builder.fillSpaces().append("<").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(">").incIdent();
                if (!(collection.isEmpty())) {
                    builder.newLine();
                }
            }
            com.github.underscore.lodash.Xml.XmlArray.writeXml(collection, builder, name, parentTextFound, namespaces);
            if (name != null) {
                builder.decIdent().newLine().fillSpaces().append("</").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(">");
            }
        }

        @java.lang.SuppressWarnings("unchecked")
        private static void writeXml(java.util.Collection collection, com.github.underscore.lodash.Xml.XmlStringBuilder builder, java.lang.String name, final boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            boolean localParentTextFound = parentTextFound;
            final java.util.List entries = com.github.underscore.lodash.U.newArrayList(collection);
            for (int index = 0; index < (entries.size()); index += 1) {
                final java.lang.Object value = entries.get(index);
                final boolean addNewLine = (index < ((entries.size()) - 1)) && (!(java.lang.String.valueOf(entries.get((index + 1))).startsWith(("{" + (com.github.underscore.lodash.Xml.TEXT)))));
                if (value == null) {
                    builder.fillSpaces().append((((((("<" + (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">") + (com.github.underscore.lodash.Xml.NULL)) + "</") + (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">"));
                }else {
                    if ((value instanceof java.util.Map) && ((((java.util.Map) (value)).size()) == 1)) {
                        com.github.underscore.lodash.Xml.XmlObject.writeXml(((java.util.Map) (value)), null, builder, localParentTextFound, namespaces);
                        if (java.lang.String.valueOf(((java.util.Map.Entry) (((java.util.Map) (value)).entrySet().iterator().next())).getKey()).startsWith(com.github.underscore.lodash.Xml.TEXT)) {
                            localParentTextFound = true;
                            continue;
                        }
                    }else {
                        com.github.underscore.lodash.Xml.XmlValue.writeXml(value, (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : name), builder, localParentTextFound, namespaces);
                    }
                    localParentTextFound = false;
                }
                if (addNewLine) {
                    builder.newLine();
                }
            }
        }

        public static void writeXml(byte[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(short[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(int[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(long[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(float[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(double[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(boolean[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(char[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(java.lang.Object[] array, java.lang.String name, com.github.underscore.lodash.Xml.XmlStringBuilder builder, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        com.github.underscore.lodash.Xml.XmlValue.writeXml(array[i], (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : name), builder, parentTextFound, namespaces);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }
    }

    public static class XmlObject {
        @java.lang.SuppressWarnings("unchecked")
        public static void writeXml(java.util.Map map, java.lang.String name, final com.github.underscore.lodash.Xml.XmlStringBuilder builder, final boolean parentTextFound, final java.util.Set<java.lang.String> namespaces) {
            if (map == null) {
                com.github.underscore.lodash.Xml.XmlValue.writeXml(com.github.underscore.lodash.Xml.NULL, name, builder, false, namespaces);
                return;
            }
            final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems = com.github.underscore.lodash.U.newArrayList();
            final java.util.List<java.lang.String> attrs = com.github.underscore.lodash.U.newArrayList();
            final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep = builder.getIdentStep();
            final int ident = (builder.getIdent()) + (name == null ? 0 : builder.getIdentStep().getIdent());
            final java.util.List<java.util.Map.Entry> entries = com.github.underscore.lodash.U.newArrayList(map.entrySet());
            for (int index = 0; index < (entries.size()); index += 1) {
                final java.util.Map.Entry entry = entries.get(index);
                final boolean addNewLine = (index < ((entries.size()) - 1)) && (!(java.lang.String.valueOf(entries.get((index + 1)).getKey()).startsWith(com.github.underscore.lodash.Xml.TEXT)));
                if (((java.lang.String.valueOf(entry.getKey()).startsWith("-")) && (!((entry.getValue()) instanceof java.util.Map))) && (!((entry.getValue()) instanceof java.util.List))) {
                    attrs.add(((((" " + (com.github.underscore.lodash.Xml.XmlValue.escapeName(java.lang.String.valueOf(entry.getKey()).substring(1), namespaces))) + "=\"") + (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getValue())))) + "\""));
                    if (java.lang.String.valueOf(entry.getKey()).startsWith("-xmlns:")) {
                        namespaces.add(java.lang.String.valueOf(entry.getKey()).substring(7));
                    }
                }else
                    if (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getKey())).startsWith(com.github.underscore.lodash.Xml.TEXT)) {
                        com.github.underscore.lodash.Xml.XmlObject.addText(entry, elems, identStep, ident);
                    }else {
                        com.github.underscore.lodash.Xml.XmlObject.processElements(entry, identStep, ident, addNewLine, elems, namespaces);
                    }

            }
            if (name != null) {
                if (!parentTextFound) {
                    builder.fillSpaces();
                }
                builder.append("<").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(com.github.underscore.lodash.U.join(attrs, "")).append(">").incIdent();
                if ((!(elems.isEmpty())) && (!((elems.get(0)) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText))) {
                    builder.newLine();
                }
            }
            for (com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder1 : elems) {
                builder.append(localBuilder1.toString());
            }
            if (name != null) {
                builder.decIdent();
                if ((!(elems.isEmpty())) && (!((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText))) {
                    builder.newLine().fillSpaces();
                }
                builder.append("</").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(">");
            }
        }

        private static void processElements(final java.util.Map.Entry entry, final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident, final boolean addNewLine, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final java.util.Set<java.lang.String> namespaces) {
            if (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getKey())).startsWith(com.github.underscore.lodash.Xml.COMMENT)) {
                com.github.underscore.lodash.Xml.XmlObject.addComment(entry, identStep, ident, addNewLine, elems, "<!--", "-->");
            }else
                if (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getKey())).startsWith(com.github.underscore.lodash.Xml.CDATA)) {
                    com.github.underscore.lodash.Xml.XmlObject.addComment(entry, identStep, ident, addNewLine, elems, "<![CDATA[", "]]>");
                }else
                    if (((entry.getValue()) instanceof java.util.List) && (!(((java.util.List) (entry.getValue())).isEmpty()))) {
                        com.github.underscore.lodash.Xml.XmlObject.addElements(identStep, ident, entry, namespaces, elems, addNewLine);
                    }else {
                        com.github.underscore.lodash.Xml.XmlObject.addElement(identStep, ident, entry, namespaces, elems, addNewLine);
                    }


        }

        private static void addText(final java.util.Map.Entry entry, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident) {
            if ((entry.getValue()) instanceof java.util.List) {
                for (java.lang.Object value : ((java.util.List) (entry.getValue()))) {
                    elems.add(new com.github.underscore.lodash.Xml.XmlStringBuilderText(identStep, ident).append(com.github.underscore.lodash.U.escape(java.lang.String.valueOf(value))));
                }
            }else {
                elems.add(new com.github.underscore.lodash.Xml.XmlStringBuilderText(identStep, ident).append(com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getValue()))));
            }
        }

        private static void addElements(final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident, java.util.Map.Entry entry, java.util.Set<java.lang.String> namespaces, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final boolean addNewLine) {
            boolean parentTextFound = (!(elems.isEmpty())) && ((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText);
            final com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder;
            if ((java.lang.String.valueOf(((java.util.List) (entry.getValue())).get(0)).startsWith(("{" + (com.github.underscore.lodash.Xml.TEXT)))) || (java.lang.String.valueOf(((java.util.List) (entry.getValue())).get(((((java.util.List) (entry.getValue())).size()) - 1))).startsWith(("{" + (com.github.underscore.lodash.Xml.TEXT))))) {
                localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderText(identStep, ident);
            }else {
                localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader(identStep, ident);
            }
            com.github.underscore.lodash.Xml.XmlArray.writeXml(((java.util.List) (entry.getValue())), localBuilder, java.lang.String.valueOf(entry.getKey()), parentTextFound, namespaces);
            if (addNewLine) {
                localBuilder.newLine();
            }
            elems.add(localBuilder);
        }

        private static void addElement(final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident, java.util.Map.Entry entry, java.util.Set<java.lang.String> namespaces, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final boolean addNewLine) {
            boolean parentTextFound = (!(elems.isEmpty())) && ((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText);
            com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader(identStep, ident);
            com.github.underscore.lodash.Xml.XmlValue.writeXml(entry.getValue(), java.lang.String.valueOf(entry.getKey()), localBuilder, parentTextFound, namespaces);
            if (addNewLine) {
                localBuilder.newLine();
            }
            elems.add(localBuilder);
        }

        private static void addComment(java.util.Map.Entry entry, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident, boolean addNewLine, java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, java.lang.String openElement, java.lang.String closeElement) {
            if ((entry.getValue()) instanceof java.util.List) {
                for (java.util.Iterator iterator = ((java.util.List) (entry.getValue())).iterator(); iterator.hasNext();) {
                    com.github.underscore.lodash.Xml.XmlObject.addCommentValue(identStep, ident, java.lang.String.valueOf(iterator.next()), ((iterator.hasNext()) || addNewLine), elems, openElement, closeElement);
                }
            }else {
                com.github.underscore.lodash.Xml.XmlObject.addCommentValue(identStep, ident, java.lang.String.valueOf(entry.getValue()), addNewLine, elems, openElement, closeElement);
            }
        }

        private static void addCommentValue(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident, java.lang.String value, boolean addNewLine, java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, java.lang.String openElement, java.lang.String closeElement) {
            boolean parentTextFound = (!(elems.isEmpty())) && ((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText);
            com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader(identStep, ident);
            if (!parentTextFound) {
                localBuilder.fillSpaces();
            }
            localBuilder.append(openElement).append(value).append(closeElement);
            if (addNewLine) {
                localBuilder.newLine();
            }
            elems.add(localBuilder);
        }
    }

    public static class XmlValue {
        public static void writeXml(java.lang.Object value, java.lang.String name, com.github.underscore.lodash.Xml.XmlStringBuilder builder, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (value instanceof java.util.Map) {
                com.github.underscore.lodash.Xml.XmlObject.writeXml(((java.util.Map) (value)), name, builder, parentTextFound, namespaces);
                return;
            }
            if (value instanceof java.util.Collection) {
                com.github.underscore.lodash.Xml.XmlArray.writeXml(((java.util.Collection) (value)), name, builder, parentTextFound, namespaces);
                return;
            }
            if (!parentTextFound) {
                builder.fillSpaces();
            }
            builder.append((("<" + (com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">"));
            if (value == null) {
                builder.append(com.github.underscore.lodash.Xml.NULL);
            }else
                if (value instanceof java.lang.String) {
                    builder.append(com.github.underscore.lodash.Xml.XmlValue.escape(((java.lang.String) (value))));
                }else {
                    com.github.underscore.lodash.Xml.XmlValue.processArrays(value, builder, name, parentTextFound, namespaces);
                }

            builder.append((("</" + (com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">"));
        }

        private static void processArrays(java.lang.Object value, com.github.underscore.lodash.Xml.XmlStringBuilder builder, java.lang.String name, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (value instanceof java.lang.Double) {
                if ((((java.lang.Double) (value)).isInfinite()) || (((java.lang.Double) (value)).isNaN())) {
                    builder.append(com.github.underscore.lodash.Xml.NULL);
                }else {
                    builder.append(value.toString());
                }
            }else
                if (value instanceof java.lang.Float) {
                    if ((((java.lang.Float) (value)).isInfinite()) || (((java.lang.Float) (value)).isNaN())) {
                        builder.append(com.github.underscore.lodash.Xml.NULL);
                    }else {
                        builder.append(value.toString());
                    }
                }else
                    if (value instanceof java.lang.Number) {
                        builder.append(value.toString());
                    }else
                        if (value instanceof java.lang.Boolean) {
                            builder.append(value.toString());
                        }else
                            if (value instanceof byte[]) {
                                builder.newLine().incIdent();
                                com.github.underscore.lodash.Xml.XmlArray.writeXml(((byte[]) (value)), builder);
                                builder.decIdent().newLine().fillSpaces();
                            }else
                                if (value instanceof short[]) {
                                    builder.newLine().incIdent();
                                    com.github.underscore.lodash.Xml.XmlArray.writeXml(((short[]) (value)), builder);
                                    builder.decIdent().newLine().fillSpaces();
                                }else {
                                    com.github.underscore.lodash.Xml.XmlValue.processArrays2(value, builder, name, parentTextFound, namespaces);
                                }





        }

        private static void processArrays2(java.lang.Object value, com.github.underscore.lodash.Xml.XmlStringBuilder builder, java.lang.String name, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (value instanceof int[]) {
                builder.newLine().incIdent();
                com.github.underscore.lodash.Xml.XmlArray.writeXml(((int[]) (value)), builder);
                builder.decIdent().newLine().fillSpaces();
            }else
                if (value instanceof long[]) {
                    builder.newLine().incIdent();
                    com.github.underscore.lodash.Xml.XmlArray.writeXml(((long[]) (value)), builder);
                    builder.decIdent().newLine().fillSpaces();
                }else
                    if (value instanceof float[]) {
                        builder.newLine().incIdent();
                        com.github.underscore.lodash.Xml.XmlArray.writeXml(((float[]) (value)), builder);
                        builder.decIdent().newLine().fillSpaces();
                    }else
                        if (value instanceof double[]) {
                            builder.newLine().incIdent();
                            com.github.underscore.lodash.Xml.XmlArray.writeXml(((double[]) (value)), builder);
                            builder.decIdent().newLine().fillSpaces();
                        }else
                            if (value instanceof boolean[]) {
                                builder.newLine().incIdent();
                                com.github.underscore.lodash.Xml.XmlArray.writeXml(((boolean[]) (value)), builder);
                                builder.decIdent().newLine().fillSpaces();
                            }else
                                if (value instanceof char[]) {
                                    builder.newLine().incIdent();
                                    com.github.underscore.lodash.Xml.XmlArray.writeXml(((char[]) (value)), builder);
                                    builder.decIdent().newLine().fillSpaces();
                                }else
                                    if (value instanceof java.lang.Object[]) {
                                        builder.newLine().incIdent();
                                        com.github.underscore.lodash.Xml.XmlArray.writeXml(((java.lang.Object[]) (value)), name, builder, parentTextFound, namespaces);
                                        builder.decIdent().newLine().fillSpaces();
                                    }else {
                                        builder.append(value.toString());
                                    }






        }

        public static java.lang.String escapeName(java.lang.String name, java.util.Set<java.lang.String> namespaces) {
            final int length = name.length();
            if (length == 0) {
                return "__EE__EMPTY__EE__";
            }
            final java.lang.StringBuilder result = new java.lang.StringBuilder();
            char ch = name.charAt(0);
            if ((com.sun.org.apache.xerces.internal.util.XMLChar.isNameStart(ch)) && (ch != ':')) {
                result.append(ch);
            }else {
                result.append("__").append(com.github.underscore.lodash.Base32.encode(java.lang.Character.toString(ch))).append("__");
            }
            for (int i = 1; i < length; ++i) {
                ch = name.charAt(i);
                if ((ch == ':') && (("xmlns".equals(name.substring(0, i))) || (namespaces.contains(name.substring(0, i))))) {
                    result.append(ch);
                }else
                    if ((com.sun.org.apache.xerces.internal.util.XMLChar.isName(ch)) && (ch != ':')) {
                        result.append(ch);
                    }else {
                        result.append("__").append(com.github.underscore.lodash.Base32.encode(java.lang.Character.toString(ch))).append("__");
                    }

            }
            return result.toString();
        }

        public static java.lang.String escape(java.lang.String s) {
            if (s == null) {
                return null;
            }
            java.lang.StringBuilder sb = new java.lang.StringBuilder();
            com.github.underscore.lodash.Xml.XmlValue.escape(s, sb);
            return sb.toString();
        }

        private static void escape(java.lang.String s, java.lang.StringBuilder sb) {
            final int len = s.length();
            for (int i = 0; i < len; i++) {
                char ch = s.charAt(i);
                switch (ch) {
                    case '"' :
                        sb.append("&quot;");
                        break;
                    case '\'' :
                        sb.append("'");
                        break;
                    case '&' :
                        sb.append("&amp;");
                        break;
                    case '<' :
                        sb.append("&lt;");
                        break;
                    case '>' :
                        sb.append("&gt;");
                        break;
                    case '\b' :
                        sb.append("\\b");
                        break;
                    case '\f' :
                        sb.append("\\f");
                        break;
                    case '\n' :
                        sb.append("\n");
                        break;
                    case '\r' :
                        sb.append("\\r");
                        break;
                    case '\t' :
                        sb.append("\t");
                        break;
                    default :
                        if (((ch <= '\u001f') || ((ch >= '\u007f') && (ch <= '\u009f'))) || ((ch >= '\u2000') && (ch <= '\u20ff'))) {
                            java.lang.String ss = java.lang.Integer.toHexString(ch);
                            sb.append("&#x");
                            for (int k = 0; k < (4 - (ss.length())); k++) {
                                sb.append('0');
                            }
                            sb.append(ss.toUpperCase()).append(";");
                        }else {
                            sb.append(ch);
                        }
                        break;
                }
            }
        }
    }

    public static java.lang.String toXml(java.util.Collection collection, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep) {
        final com.github.underscore.lodash.Xml.XmlStringBuilder builder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutRoot(identStep, com.github.underscore.lodash.Xml.UTF_8.name());
        builder.append("<root>").incIdent();
        if ((collection == null) || (!(collection.isEmpty()))) {
            builder.newLine();
        }
        com.github.underscore.lodash.Xml.XmlArray.writeXml(collection, null, builder, false, com.github.underscore.lodash.U.<java.lang.String>newLinkedHashSet());
        return builder.newLine().append("</root>").toString();
    }

    public static java.lang.String toXml(java.util.Collection collection) {
        return com.github.underscore.lodash.Xml.toXml(collection, com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TWO_SPACES);
    }

    public static java.lang.String toXml(java.util.Map map, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep) {
        final com.github.underscore.lodash.Xml.XmlStringBuilder builder;
        final java.util.Map localMap;
        if ((map != null) && (map.containsKey(com.github.underscore.lodash.Xml.ENCODING))) {
            builder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutRoot(identStep, java.lang.String.valueOf(map.get(com.github.underscore.lodash.Xml.ENCODING)));
            localMap = ((java.util.Map) (com.github.underscore.lodash.U.clone(map)));
            localMap.remove(com.github.underscore.lodash.Xml.ENCODING);
        }else {
            builder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutRoot(identStep, com.github.underscore.lodash.Xml.UTF_8.name());
            localMap = map;
        }
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = (((localMap == null) || ((localMap.size()) != 1)) || (java.lang.String.valueOf(((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getKey()).startsWith("-"))) || ((((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getValue()) instanceof java.util.List);
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(74).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(74).collectionStarts();
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(74).collectInput("com.github.underscore.lodash.Xml.ENCODING",com.github.underscore.lodash.Xml.ENCODING);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(74).collectInput("com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident",com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(74).collectInput("(localMap == null)",(localMap == null));} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(74).collectInput("com.github.underscore.lodash.Xml.NULL_ELEMENT",com.github.underscore.lodash.Xml.NULL_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(74).collectInput("com.github.underscore.lodash.Xml.ATTRS",com.github.underscore.lodash.Xml.ATTRS);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(74).collectInput("identStep",identStep);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(74).collectInput("com.github.underscore.lodash.Xml.TEXT",com.github.underscore.lodash.Xml.TEXT);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(74).collectInput("com.github.underscore.lodash.Xml.NULL",com.github.underscore.lodash.Xml.NULL);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(74).collectInput("com.github.underscore.lodash.Xml.ELEMENT_TEXT",com.github.underscore.lodash.Xml.ELEMENT_TEXT);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(74).collectInput("com.github.underscore.lodash.Xml.CLOSED_ELEMENT",com.github.underscore.lodash.Xml.CLOSED_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(74).collectInput("com.github.underscore.lodash.Xml.UTF_8",com.github.underscore.lodash.Xml.UTF_8);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(74).collectInput("com.github.underscore.lodash.Xml.CDATA",com.github.underscore.lodash.Xml.CDATA);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(74).collectInput("1",1);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(74).collectInput("com.github.underscore.lodash.Xml.COMMENT",com.github.underscore.lodash.Xml.COMMENT);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(74).collectInput("com.github.underscore.lodash.Xml.EMPTY_ELEMENT",com.github.underscore.lodash.Xml.EMPTY_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(74).collectInput("null",null);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(74).collectInput("com.github.underscore.lodash.Xml.ELEMENT",com.github.underscore.lodash.Xml.ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(74).collectInput("\"-\"","-");} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(74).collectInput("localMap",localMap);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(74).collectInput("map",map);} catch (Exception ex1) {ex1.printStackTrace();};
            fr.inria.lille.commons.trace.RuntimeValues.instance(74).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(74).collectionEnds();
        }
        if (runtimeAngelicValue) {
            final java.lang.String name;
            if ((((localMap != null) && ((localMap.size()) == 1)) && ((((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getValue()) instanceof java.util.List)) && (!(((java.util.List) (((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getValue())).isEmpty()))) {
                name = java.lang.String.valueOf(((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getKey());
            }else {
                name = "root";
            }
            com.github.underscore.lodash.Xml.XmlObject.writeXml(localMap, name, builder, false, com.github.underscore.lodash.U.<java.lang.String>newLinkedHashSet());
        }else {
            com.github.underscore.lodash.Xml.XmlObject.writeXml(localMap, null, builder, false, com.github.underscore.lodash.U.<java.lang.String>newLinkedHashSet());
        }
        return builder.toString();
    }

    public static java.lang.String toXml(java.util.Map map) {
        return com.github.underscore.lodash.Xml.toXml(map, com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TWO_SPACES);
    }

    @java.lang.SuppressWarnings("unchecked")
    private static java.lang.Object getValue(final java.lang.Object value) {
        if ((value instanceof java.util.Map) && ((((java.util.Map<java.lang.String, java.lang.Object>) (value)).entrySet().size()) == 1)) {
            final java.util.Map.Entry<java.lang.String, java.lang.Object> entry = ((java.util.Map<java.lang.String, java.lang.Object>) (value)).entrySet().iterator().next();
            if ((com.github.underscore.lodash.Xml.TEXT.equals(entry.getKey())) || (entry.getKey().equals(com.github.underscore.lodash.Xml.ELEMENT_TEXT))) {
                return entry.getValue();
            }
        }
        return value;
    }

    @java.lang.SuppressWarnings("unchecked")
    private static java.util.Map<java.lang.String, java.lang.Object> createMap(final org.w3c.dom.Node node, final com.github.underscore.Function<java.lang.Object, java.lang.Object> nodeMapper, java.util.Map<java.lang.String, java.lang.Object> attrMap, int[] uniqueIds, final com.github.underscore.Function<java.lang.Object, java.lang.Object> valueMapper, java.lang.String source, int[] sourceIndex) {
        final java.util.Map<java.lang.String, java.lang.Object> map = com.github.underscore.lodash.U.newLinkedHashMap();
        map.putAll(attrMap);
        final org.w3c.dom.NodeList nodeList = node.getChildNodes();
        for (int index = 0; index < (nodeList.getLength()); index++) {
            final org.w3c.dom.Node currentNode = nodeList.item(index);
            final java.lang.String name = currentNode.getNodeName();
            final java.lang.Object value;
            final int attributesLength = ((currentNode.getAttributes()) == null) ? 0 : currentNode.getAttributes().getLength();
            if ((currentNode.getNodeType()) == (org.w3c.dom.Node.ELEMENT_NODE)) {
                sourceIndex[0] = ((source.indexOf(("<" + name), sourceIndex[0])) + (name.length())) + 2;
                final java.util.Map<java.lang.String, java.lang.Object> attrMapLocal = com.github.underscore.lodash.U.newLinkedHashMap();
                if (attributesLength > 0) {
                    final java.util.regex.Matcher matcher = com.github.underscore.lodash.Xml.ATTRS.matcher(source.substring(sourceIndex[0], source.indexOf(">", sourceIndex[0])));
                    while (matcher.find()) {
                        com.github.underscore.lodash.Xml.addNodeValue(attrMapLocal, ('-' + (matcher.group(1))), matcher.group(2), nodeMapper, uniqueIds);
                    } 
                }
                value = com.github.underscore.lodash.Xml.createMap(currentNode, nodeMapper, attrMapLocal, uniqueIds, valueMapper, source, sourceIndex);
            }else {
                if (com.github.underscore.lodash.Xml.COMMENT.equals(name)) {
                    sourceIndex[0] = (source.indexOf("-->", sourceIndex[0])) + 3;
                }else
                    if (com.github.underscore.lodash.Xml.CDATA.equals(name)) {
                        sourceIndex[0] = (source.indexOf("]]>", sourceIndex[0])) + 3;
                    }

                value = currentNode.getTextContent();
            }
            if ((com.github.underscore.lodash.Xml.TEXT.equals(name)) && (valueMapper.apply(value).toString().isEmpty())) {
                continue;
            }
            com.github.underscore.lodash.Xml.addNodeValue(map, name, value, nodeMapper, uniqueIds);
        }
        return map;
    }

    @java.lang.SuppressWarnings("unchecked")
    private static void addNodeValue(final java.util.Map<java.lang.String, java.lang.Object> map, final java.lang.String name, final java.lang.Object value, final com.github.underscore.Function<java.lang.Object, java.lang.Object> nodeMapper, int[] uniqueIds) {
        if (map.containsKey(name)) {
            if (com.github.underscore.lodash.Xml.TEXT.equals(name)) {
                map.put((name + (uniqueIds[0])), nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
                uniqueIds[0] += 1;
            }else
                if (com.github.underscore.lodash.Xml.COMMENT.equals(name)) {
                    map.put((name + (uniqueIds[1])), nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
                    uniqueIds[1] += 1;
                }else
                    if (com.github.underscore.lodash.Xml.CDATA.equals(name)) {
                        map.put((name + (uniqueIds[2])), nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
                        uniqueIds[2] += 1;
                    }else {
                        final java.lang.Object object = map.get(name);
                        if (object instanceof java.util.List) {
                            com.github.underscore.lodash.Xml.addText(map, name, ((java.util.List<java.lang.Object>) (object)), value);
                        }else {
                            final java.util.List<java.lang.Object> objects = com.github.underscore.lodash.U.newArrayList();
                            objects.add(object);
                            com.github.underscore.lodash.Xml.addText(map, name, objects, value);
                            map.put(name, objects);
                        }
                    }


        }else {
            map.put(name, nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
        }
    }

    @java.lang.SuppressWarnings("unchecked")
    private static void addText(final java.util.Map<java.lang.String, java.lang.Object> map, final java.lang.String name, final java.util.List<java.lang.Object> objects, final java.lang.Object value) {
        int lastIndex = (map.size()) - 1;
        final int index = objects.size();
        while (true) {
            final java.util.Map.Entry lastElement = ((java.util.Map.Entry) (map.entrySet().toArray()[lastIndex]));
            if (name.equals(java.lang.String.valueOf(lastElement.getKey()))) {
                break;
            }
            final java.util.Map<java.lang.String, java.lang.Object> text = com.github.underscore.lodash.U.newLinkedHashMap();
            text.put(java.lang.String.valueOf(lastElement.getKey()), map.remove(lastElement.getKey()));
            objects.add(index, text);
            lastIndex -= 1;
        } 
        objects.add(com.github.underscore.lodash.Xml.getValue(value));
    }

    @java.lang.SuppressWarnings("unchecked")
    public static java.lang.Object fromXml(final java.lang.String xml, final com.github.underscore.Function<java.lang.Object, java.lang.Object> valueMapper) {
        if (xml == null) {
            return null;
        }
        try {
            org.w3c.dom.Document document = com.github.underscore.lodash.Xml.createDocument(xml);
            final java.lang.Object result = com.github.underscore.lodash.Xml.createMap(document, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
                public java.lang.Object apply(java.lang.Object object) {
                    return object;
                }
            }, java.util.Collections.<java.lang.String, java.lang.Object>emptyMap(), new int[]{ 1, 1, 1 }, valueMapper, xml, new int[]{ 0 });
            if (((document.getXmlEncoding()) != null) && (!("UTF-8".equalsIgnoreCase(document.getXmlEncoding())))) {
                ((java.util.Map) (result)).put(com.github.underscore.lodash.Xml.ENCODING, document.getXmlEncoding());
            }else
                if ((((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getKey().equals("root")) && (((((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getValue()) instanceof java.util.List) || ((((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getValue()) instanceof java.util.Map))) {
                    return ((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getValue();
                }

            return result;
        } catch (java.lang.Exception ex) {
            throw new java.lang.IllegalArgumentException(ex);
        }
    }

    public static java.lang.Object fromXml(final java.lang.String xml) {
        return com.github.underscore.lodash.Xml.fromXml(xml, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
            public java.lang.Object apply(java.lang.Object object) {
                return java.lang.String.valueOf(object).trim();
            }
        });
    }

    private static org.w3c.dom.Document createDocument(final java.lang.String xml) throws java.io.IOException, javax.xml.parsers.ParserConfigurationException, org.xml.sax.SAXException {
        final javax.xml.parsers.DocumentBuilderFactory factory = javax.xml.parsers.DocumentBuilderFactory.newInstance();
        factory.setNamespaceAware(true);
        factory.setFeature(javax.xml.XMLConstants.FEATURE_SECURE_PROCESSING, true);
        final javax.xml.parsers.DocumentBuilder builder = factory.newDocumentBuilder();
        builder.setErrorHandler(new org.xml.sax.helpers.DefaultHandler());
        return builder.parse(new org.xml.sax.InputSource(new java.io.StringReader(xml)));
    }

    public static java.lang.Object fromXmlMakeArrays(final java.lang.String xml) {
        try {
            org.w3c.dom.Document document = com.github.underscore.lodash.Xml.createDocument(xml);
            return com.github.underscore.lodash.Xml.createMap(document, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
                public java.lang.Object apply(java.lang.Object object) {
                    return object instanceof java.util.List ? object : com.github.underscore.lodash.U.newArrayList(java.util.Arrays.asList(object));
                }
            }, java.util.Collections.<java.lang.String, java.lang.Object>emptyMap(), new int[]{ 1, 1, 1 }, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
                public java.lang.Object apply(java.lang.Object object) {
                    return java.lang.String.valueOf(object).trim();
                }
            }, xml, new int[]{ 0 });
        } catch (java.lang.Exception ex) {
            throw new java.lang.IllegalArgumentException(ex);
        }
    }

    @java.lang.SuppressWarnings("unchecked")
    public static java.lang.String formatXml(java.lang.String xml, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep) {
        java.lang.Object result = com.github.underscore.lodash.Xml.fromXml(xml);
        if (result instanceof java.util.Map) {
            return com.github.underscore.lodash.Xml.toXml(((java.util.Map) (result)), identStep);
        }
        return com.github.underscore.lodash.Xml.toXml(((java.util.List) (result)), identStep);
    }

    public static java.lang.String formatXml(java.lang.String xml) {
        return com.github.underscore.lodash.Xml.formatXml(xml, com.github.underscore.lodash.Xml.XmlStringBuilder.Step.THREE_SPACES);
    }
}
16:27:01.307 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
16:27:01.307 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #82
16:27:01.307 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml:684 which is executed by 27 tests
88056
16:27:01.399 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:27:01.455 [pool-258-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (49 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:27:01.739 [pool-257-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Xml.java:590: warning: com.sun.org.apache.xerces.internal.util.XMLChar is internal proprietary API and may be removed in a future release
            if ((com.sun.org.apache.xerces.internal.util.XMLChar.isNameStart(ch)) && (ch != ':')) {
                                                        ^
Xml.java:600: warning: com.sun.org.apache.xerces.internal.util.XMLChar is internal proprietary API and may be removed in a future release
                    if ((com.sun.org.apache.xerces.internal.util.XMLChar.isName(ch)) && (ch != ':')) {
                                                                ^
Xml.java:697: error: non-static variable ident cannot be referenced from a static context
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(75).collectInput("com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident",com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                          ^
16:27:01.868 [pool-257-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public final class Xml {
    private static final java.lang.String NULL = "null";

    private static final java.lang.String ELEMENT_TEXT = "element";

    private static final java.lang.String CDATA = "#cdata-section";

    private static final java.lang.String COMMENT = "#comment";

    private static final java.lang.String ENCODING = "#encoding";

    private static final java.lang.String TEXT = "#text";

    private static final java.lang.String ELEMENT = ("<" + (com.github.underscore.lodash.Xml.ELEMENT_TEXT)) + ">";

    private static final java.lang.String CLOSED_ELEMENT = ("</" + (com.github.underscore.lodash.Xml.ELEMENT_TEXT)) + ">";

    private static final java.lang.String EMPTY_ELEMENT = (com.github.underscore.lodash.Xml.ELEMENT) + (com.github.underscore.lodash.Xml.CLOSED_ELEMENT);

    private static final java.lang.String NULL_ELEMENT = ((com.github.underscore.lodash.Xml.ELEMENT) + (com.github.underscore.lodash.Xml.NULL)) + (com.github.underscore.lodash.Xml.CLOSED_ELEMENT);

    private static final java.nio.charset.Charset UTF_8 = java.nio.charset.Charset.forName("UTF-8");

    private static final java.util.regex.Pattern ATTRS = java.util.regex.Pattern.compile(("((?:(?!\\s|=).)*)\\s*?=\\s*?[\"\']?((?:(?<=\")(?:(?<=\\\\)\"|[^\"])*|(?<=\')" + "(?:(?<=\\\\)\'|[^\'])*)|(?:(?!\"|\')(?:(?!\\/>|>|\\s).)+))"));

    public static class XmlStringBuilder {
        public enum Step {

            TWO_SPACES(2),
            THREE_SPACES(3),
            FOUR_SPACES(4),
            COMPACT(0),
            TABS(1);
            private int ident;

            Step(int ident) {
                this.ident = ident;
            }

            public int getIdent() {
                return ident;
            }
        }

        protected final java.lang.StringBuilder builder;

        private final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep;

        private int ident;

        public XmlStringBuilder() {
            builder = new java.lang.StringBuilder("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<root>\n");
            identStep = com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TWO_SPACES;
            ident = 2;
        }

        public XmlStringBuilder(java.lang.StringBuilder builder, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident) {
            this.builder = builder;
            this.identStep = identStep;
            this.ident = ident;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder append(final java.lang.String string) {
            builder.append(string);
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder fillSpaces() {
            for (int index = 0; index < (ident); index += 1) {
                builder.append(((identStep) == (com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TABS) ? '\t' : ' '));
            }
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder incIdent() {
            ident += identStep.getIdent();
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder decIdent() {
            ident -= identStep.getIdent();
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder newLine() {
            if ((identStep) != (com.github.underscore.lodash.Xml.XmlStringBuilder.Step.COMPACT)) {
                builder.append("\n");
            }
            return this;
        }

        public int getIdent() {
            return ident;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder.Step getIdentStep() {
            return identStep;
        }

        public java.lang.String toString() {
            return (builder.toString()) + "\n</root>";
        }
    }

    public static class XmlStringBuilderWithoutRoot extends com.github.underscore.lodash.Xml.XmlStringBuilder {
        public XmlStringBuilderWithoutRoot(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, java.lang.String encoding) {
            super(new java.lang.StringBuilder(((("<?xml version=\"1.0\" encoding=\"" + (com.github.underscore.lodash.U.escape(encoding))) + "\"?>") + (identStep == (com.github.underscore.lodash.Xml.XmlStringBuilder.Step.COMPACT) ? "" : "\n"))), identStep, 0);
        }

        public java.lang.String toString() {
            return builder.toString();
        }
    }

    public static class XmlStringBuilderWithoutHeader extends com.github.underscore.lodash.Xml.XmlStringBuilder {
        public XmlStringBuilderWithoutHeader(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident) {
            super(new java.lang.StringBuilder(), identStep, ident);
        }

        public java.lang.String toString() {
            return builder.toString();
        }
    }

    public static class XmlStringBuilderText extends com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader {
        public XmlStringBuilderText(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident) {
            super(identStep, ident);
        }
    }

    public static class XmlArray {
        public static void writeXml(java.util.Collection collection, java.lang.String name, com.github.underscore.lodash.Xml.XmlStringBuilder builder, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (collection == null) {
                builder.append(com.github.underscore.lodash.Xml.NULL);
                return;
            }
            if (name != null) {
                builder.fillSpaces().append("<").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(">").incIdent();
                if (!(collection.isEmpty())) {
                    builder.newLine();
                }
            }
            com.github.underscore.lodash.Xml.XmlArray.writeXml(collection, builder, name, parentTextFound, namespaces);
            if (name != null) {
                builder.decIdent().newLine().fillSpaces().append("</").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(">");
            }
        }

        @java.lang.SuppressWarnings("unchecked")
        private static void writeXml(java.util.Collection collection, com.github.underscore.lodash.Xml.XmlStringBuilder builder, java.lang.String name, final boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            boolean localParentTextFound = parentTextFound;
            final java.util.List entries = com.github.underscore.lodash.U.newArrayList(collection);
            for (int index = 0; index < (entries.size()); index += 1) {
                final java.lang.Object value = entries.get(index);
                final boolean addNewLine = (index < ((entries.size()) - 1)) && (!(java.lang.String.valueOf(entries.get((index + 1))).startsWith(("{" + (com.github.underscore.lodash.Xml.TEXT)))));
                if (value == null) {
                    builder.fillSpaces().append((((((("<" + (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">") + (com.github.underscore.lodash.Xml.NULL)) + "</") + (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">"));
                }else {
                    if ((value instanceof java.util.Map) && ((((java.util.Map) (value)).size()) == 1)) {
                        com.github.underscore.lodash.Xml.XmlObject.writeXml(((java.util.Map) (value)), null, builder, localParentTextFound, namespaces);
                        if (java.lang.String.valueOf(((java.util.Map.Entry) (((java.util.Map) (value)).entrySet().iterator().next())).getKey()).startsWith(com.github.underscore.lodash.Xml.TEXT)) {
                            localParentTextFound = true;
                            continue;
                        }
                    }else {
                        com.github.underscore.lodash.Xml.XmlValue.writeXml(value, (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : name), builder, localParentTextFound, namespaces);
                    }
                    localParentTextFound = false;
                }
                if (addNewLine) {
                    builder.newLine();
                }
            }
        }

        public static void writeXml(byte[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(short[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(int[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(long[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(float[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(double[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(boolean[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(char[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(java.lang.Object[] array, java.lang.String name, com.github.underscore.lodash.Xml.XmlStringBuilder builder, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        com.github.underscore.lodash.Xml.XmlValue.writeXml(array[i], (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : name), builder, parentTextFound, namespaces);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }
    }

    public static class XmlObject {
        @java.lang.SuppressWarnings("unchecked")
        public static void writeXml(java.util.Map map, java.lang.String name, final com.github.underscore.lodash.Xml.XmlStringBuilder builder, final boolean parentTextFound, final java.util.Set<java.lang.String> namespaces) {
            if (map == null) {
                com.github.underscore.lodash.Xml.XmlValue.writeXml(com.github.underscore.lodash.Xml.NULL, name, builder, false, namespaces);
                return;
            }
            final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems = com.github.underscore.lodash.U.newArrayList();
            final java.util.List<java.lang.String> attrs = com.github.underscore.lodash.U.newArrayList();
            final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep = builder.getIdentStep();
            final int ident = (builder.getIdent()) + (name == null ? 0 : builder.getIdentStep().getIdent());
            final java.util.List<java.util.Map.Entry> entries = com.github.underscore.lodash.U.newArrayList(map.entrySet());
            for (int index = 0; index < (entries.size()); index += 1) {
                final java.util.Map.Entry entry = entries.get(index);
                final boolean addNewLine = (index < ((entries.size()) - 1)) && (!(java.lang.String.valueOf(entries.get((index + 1)).getKey()).startsWith(com.github.underscore.lodash.Xml.TEXT)));
                if (((java.lang.String.valueOf(entry.getKey()).startsWith("-")) && (!((entry.getValue()) instanceof java.util.Map))) && (!((entry.getValue()) instanceof java.util.List))) {
                    attrs.add(((((" " + (com.github.underscore.lodash.Xml.XmlValue.escapeName(java.lang.String.valueOf(entry.getKey()).substring(1), namespaces))) + "=\"") + (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getValue())))) + "\""));
                    if (java.lang.String.valueOf(entry.getKey()).startsWith("-xmlns:")) {
                        namespaces.add(java.lang.String.valueOf(entry.getKey()).substring(7));
                    }
                }else
                    if (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getKey())).startsWith(com.github.underscore.lodash.Xml.TEXT)) {
                        com.github.underscore.lodash.Xml.XmlObject.addText(entry, elems, identStep, ident);
                    }else {
                        com.github.underscore.lodash.Xml.XmlObject.processElements(entry, identStep, ident, addNewLine, elems, namespaces);
                    }

            }
            if (name != null) {
                if (!parentTextFound) {
                    builder.fillSpaces();
                }
                builder.append("<").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(com.github.underscore.lodash.U.join(attrs, "")).append(">").incIdent();
                if ((!(elems.isEmpty())) && (!((elems.get(0)) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText))) {
                    builder.newLine();
                }
            }
            for (com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder1 : elems) {
                builder.append(localBuilder1.toString());
            }
            if (name != null) {
                builder.decIdent();
                if ((!(elems.isEmpty())) && (!((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText))) {
                    builder.newLine().fillSpaces();
                }
                builder.append("</").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(">");
            }
        }

        private static void processElements(final java.util.Map.Entry entry, final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident, final boolean addNewLine, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final java.util.Set<java.lang.String> namespaces) {
            if (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getKey())).startsWith(com.github.underscore.lodash.Xml.COMMENT)) {
                com.github.underscore.lodash.Xml.XmlObject.addComment(entry, identStep, ident, addNewLine, elems, "<!--", "-->");
            }else
                if (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getKey())).startsWith(com.github.underscore.lodash.Xml.CDATA)) {
                    com.github.underscore.lodash.Xml.XmlObject.addComment(entry, identStep, ident, addNewLine, elems, "<![CDATA[", "]]>");
                }else
                    if (((entry.getValue()) instanceof java.util.List) && (!(((java.util.List) (entry.getValue())).isEmpty()))) {
                        com.github.underscore.lodash.Xml.XmlObject.addElements(identStep, ident, entry, namespaces, elems, addNewLine);
                    }else {
                        com.github.underscore.lodash.Xml.XmlObject.addElement(identStep, ident, entry, namespaces, elems, addNewLine);
                    }


        }

        private static void addText(final java.util.Map.Entry entry, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident) {
            if ((entry.getValue()) instanceof java.util.List) {
                for (java.lang.Object value : ((java.util.List) (entry.getValue()))) {
                    elems.add(new com.github.underscore.lodash.Xml.XmlStringBuilderText(identStep, ident).append(com.github.underscore.lodash.U.escape(java.lang.String.valueOf(value))));
                }
            }else {
                elems.add(new com.github.underscore.lodash.Xml.XmlStringBuilderText(identStep, ident).append(com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getValue()))));
            }
        }

        private static void addElements(final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident, java.util.Map.Entry entry, java.util.Set<java.lang.String> namespaces, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final boolean addNewLine) {
            boolean parentTextFound = (!(elems.isEmpty())) && ((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText);
            final com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder;
            if ((java.lang.String.valueOf(((java.util.List) (entry.getValue())).get(0)).startsWith(("{" + (com.github.underscore.lodash.Xml.TEXT)))) || (java.lang.String.valueOf(((java.util.List) (entry.getValue())).get(((((java.util.List) (entry.getValue())).size()) - 1))).startsWith(("{" + (com.github.underscore.lodash.Xml.TEXT))))) {
                localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderText(identStep, ident);
            }else {
                localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader(identStep, ident);
            }
            com.github.underscore.lodash.Xml.XmlArray.writeXml(((java.util.List) (entry.getValue())), localBuilder, java.lang.String.valueOf(entry.getKey()), parentTextFound, namespaces);
            if (addNewLine) {
                localBuilder.newLine();
            }
            elems.add(localBuilder);
        }

        private static void addElement(final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident, java.util.Map.Entry entry, java.util.Set<java.lang.String> namespaces, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final boolean addNewLine) {
            boolean parentTextFound = (!(elems.isEmpty())) && ((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText);
            com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader(identStep, ident);
            com.github.underscore.lodash.Xml.XmlValue.writeXml(entry.getValue(), java.lang.String.valueOf(entry.getKey()), localBuilder, parentTextFound, namespaces);
            if (addNewLine) {
                localBuilder.newLine();
            }
            elems.add(localBuilder);
        }

        private static void addComment(java.util.Map.Entry entry, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident, boolean addNewLine, java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, java.lang.String openElement, java.lang.String closeElement) {
            if ((entry.getValue()) instanceof java.util.List) {
                for (java.util.Iterator iterator = ((java.util.List) (entry.getValue())).iterator(); iterator.hasNext();) {
                    com.github.underscore.lodash.Xml.XmlObject.addCommentValue(identStep, ident, java.lang.String.valueOf(iterator.next()), ((iterator.hasNext()) || addNewLine), elems, openElement, closeElement);
                }
            }else {
                com.github.underscore.lodash.Xml.XmlObject.addCommentValue(identStep, ident, java.lang.String.valueOf(entry.getValue()), addNewLine, elems, openElement, closeElement);
            }
        }

        private static void addCommentValue(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident, java.lang.String value, boolean addNewLine, java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, java.lang.String openElement, java.lang.String closeElement) {
            boolean parentTextFound = (!(elems.isEmpty())) && ((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText);
            com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader(identStep, ident);
            if (!parentTextFound) {
                localBuilder.fillSpaces();
            }
            localBuilder.append(openElement).append(value).append(closeElement);
            if (addNewLine) {
                localBuilder.newLine();
            }
            elems.add(localBuilder);
        }
    }

    public static class XmlValue {
        public static void writeXml(java.lang.Object value, java.lang.String name, com.github.underscore.lodash.Xml.XmlStringBuilder builder, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (value instanceof java.util.Map) {
                com.github.underscore.lodash.Xml.XmlObject.writeXml(((java.util.Map) (value)), name, builder, parentTextFound, namespaces);
                return;
            }
            if (value instanceof java.util.Collection) {
                com.github.underscore.lodash.Xml.XmlArray.writeXml(((java.util.Collection) (value)), name, builder, parentTextFound, namespaces);
                return;
            }
            if (!parentTextFound) {
                builder.fillSpaces();
            }
            builder.append((("<" + (com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">"));
            if (value == null) {
                builder.append(com.github.underscore.lodash.Xml.NULL);
            }else
                if (value instanceof java.lang.String) {
                    builder.append(com.github.underscore.lodash.Xml.XmlValue.escape(((java.lang.String) (value))));
                }else {
                    com.github.underscore.lodash.Xml.XmlValue.processArrays(value, builder, name, parentTextFound, namespaces);
                }

            builder.append((("</" + (com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">"));
        }

        private static void processArrays(java.lang.Object value, com.github.underscore.lodash.Xml.XmlStringBuilder builder, java.lang.String name, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (value instanceof java.lang.Double) {
                if ((((java.lang.Double) (value)).isInfinite()) || (((java.lang.Double) (value)).isNaN())) {
                    builder.append(com.github.underscore.lodash.Xml.NULL);
                }else {
                    builder.append(value.toString());
                }
            }else
                if (value instanceof java.lang.Float) {
                    if ((((java.lang.Float) (value)).isInfinite()) || (((java.lang.Float) (value)).isNaN())) {
                        builder.append(com.github.underscore.lodash.Xml.NULL);
                    }else {
                        builder.append(value.toString());
                    }
                }else
                    if (value instanceof java.lang.Number) {
                        builder.append(value.toString());
                    }else
                        if (value instanceof java.lang.Boolean) {
                            builder.append(value.toString());
                        }else
                            if (value instanceof byte[]) {
                                builder.newLine().incIdent();
                                com.github.underscore.lodash.Xml.XmlArray.writeXml(((byte[]) (value)), builder);
                                builder.decIdent().newLine().fillSpaces();
                            }else
                                if (value instanceof short[]) {
                                    builder.newLine().incIdent();
                                    com.github.underscore.lodash.Xml.XmlArray.writeXml(((short[]) (value)), builder);
                                    builder.decIdent().newLine().fillSpaces();
                                }else {
                                    com.github.underscore.lodash.Xml.XmlValue.processArrays2(value, builder, name, parentTextFound, namespaces);
                                }





        }

        private static void processArrays2(java.lang.Object value, com.github.underscore.lodash.Xml.XmlStringBuilder builder, java.lang.String name, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (value instanceof int[]) {
                builder.newLine().incIdent();
                com.github.underscore.lodash.Xml.XmlArray.writeXml(((int[]) (value)), builder);
                builder.decIdent().newLine().fillSpaces();
            }else
                if (value instanceof long[]) {
                    builder.newLine().incIdent();
                    com.github.underscore.lodash.Xml.XmlArray.writeXml(((long[]) (value)), builder);
                    builder.decIdent().newLine().fillSpaces();
                }else
                    if (value instanceof float[]) {
                        builder.newLine().incIdent();
                        com.github.underscore.lodash.Xml.XmlArray.writeXml(((float[]) (value)), builder);
                        builder.decIdent().newLine().fillSpaces();
                    }else
                        if (value instanceof double[]) {
                            builder.newLine().incIdent();
                            com.github.underscore.lodash.Xml.XmlArray.writeXml(((double[]) (value)), builder);
                            builder.decIdent().newLine().fillSpaces();
                        }else
                            if (value instanceof boolean[]) {
                                builder.newLine().incIdent();
                                com.github.underscore.lodash.Xml.XmlArray.writeXml(((boolean[]) (value)), builder);
                                builder.decIdent().newLine().fillSpaces();
                            }else
                                if (value instanceof char[]) {
                                    builder.newLine().incIdent();
                                    com.github.underscore.lodash.Xml.XmlArray.writeXml(((char[]) (value)), builder);
                                    builder.decIdent().newLine().fillSpaces();
                                }else
                                    if (value instanceof java.lang.Object[]) {
                                        builder.newLine().incIdent();
                                        com.github.underscore.lodash.Xml.XmlArray.writeXml(((java.lang.Object[]) (value)), name, builder, parentTextFound, namespaces);
                                        builder.decIdent().newLine().fillSpaces();
                                    }else {
                                        builder.append(value.toString());
                                    }






        }

        public static java.lang.String escapeName(java.lang.String name, java.util.Set<java.lang.String> namespaces) {
            final int length = name.length();
            if (length == 0) {
                return "__EE__EMPTY__EE__";
            }
            final java.lang.StringBuilder result = new java.lang.StringBuilder();
            char ch = name.charAt(0);
            if ((com.sun.org.apache.xerces.internal.util.XMLChar.isNameStart(ch)) && (ch != ':')) {
                result.append(ch);
            }else {
                result.append("__").append(com.github.underscore.lodash.Base32.encode(java.lang.Character.toString(ch))).append("__");
            }
            for (int i = 1; i < length; ++i) {
                ch = name.charAt(i);
                if ((ch == ':') && (("xmlns".equals(name.substring(0, i))) || (namespaces.contains(name.substring(0, i))))) {
                    result.append(ch);
                }else
                    if ((com.sun.org.apache.xerces.internal.util.XMLChar.isName(ch)) && (ch != ':')) {
                        result.append(ch);
                    }else {
                        result.append("__").append(com.github.underscore.lodash.Base32.encode(java.lang.Character.toString(ch))).append("__");
                    }

            }
            return result.toString();
        }

        public static java.lang.String escape(java.lang.String s) {
            if (s == null) {
                return null;
            }
            java.lang.StringBuilder sb = new java.lang.StringBuilder();
            com.github.underscore.lodash.Xml.XmlValue.escape(s, sb);
            return sb.toString();
        }

        private static void escape(java.lang.String s, java.lang.StringBuilder sb) {
            final int len = s.length();
            for (int i = 0; i < len; i++) {
                char ch = s.charAt(i);
                switch (ch) {
                    case '"' :
                        sb.append("&quot;");
                        break;
                    case '\'' :
                        sb.append("'");
                        break;
                    case '&' :
                        sb.append("&amp;");
                        break;
                    case '<' :
                        sb.append("&lt;");
                        break;
                    case '>' :
                        sb.append("&gt;");
                        break;
                    case '\b' :
                        sb.append("\\b");
                        break;
                    case '\f' :
                        sb.append("\\f");
                        break;
                    case '\n' :
                        sb.append("\n");
                        break;
                    case '\r' :
                        sb.append("\\r");
                        break;
                    case '\t' :
                        sb.append("\t");
                        break;
                    default :
                        if (((ch <= '\u001f') || ((ch >= '\u007f') && (ch <= '\u009f'))) || ((ch >= '\u2000') && (ch <= '\u20ff'))) {
                            java.lang.String ss = java.lang.Integer.toHexString(ch);
                            sb.append("&#x");
                            for (int k = 0; k < (4 - (ss.length())); k++) {
                                sb.append('0');
                            }
                            sb.append(ss.toUpperCase()).append(";");
                        }else {
                            sb.append(ch);
                        }
                        break;
                }
            }
        }
    }

    public static java.lang.String toXml(java.util.Collection collection, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep) {
        final com.github.underscore.lodash.Xml.XmlStringBuilder builder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutRoot(identStep, com.github.underscore.lodash.Xml.UTF_8.name());
        builder.append("<root>").incIdent();
        if ((collection == null) || (!(collection.isEmpty()))) {
            builder.newLine();
        }
        com.github.underscore.lodash.Xml.XmlArray.writeXml(collection, null, builder, false, com.github.underscore.lodash.U.<java.lang.String>newLinkedHashSet());
        return builder.newLine().append("</root>").toString();
    }

    public static java.lang.String toXml(java.util.Collection collection) {
        return com.github.underscore.lodash.Xml.toXml(collection, com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TWO_SPACES);
    }

    public static java.lang.String toXml(java.util.Map map, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep) {
        final com.github.underscore.lodash.Xml.XmlStringBuilder builder;
        final java.util.Map localMap;
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(75).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(75).collectionStarts();
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(75).collectInput("com.github.underscore.lodash.Xml.ENCODING",com.github.underscore.lodash.Xml.ENCODING);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(75).collectInput("com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident",com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(75).collectInput("com.github.underscore.lodash.Xml.NULL_ELEMENT",com.github.underscore.lodash.Xml.NULL_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(75).collectInput("com.github.underscore.lodash.Xml.ATTRS",com.github.underscore.lodash.Xml.ATTRS);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(75).collectInput("identStep",identStep);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(75).collectInput("com.github.underscore.lodash.Xml.TEXT",com.github.underscore.lodash.Xml.TEXT);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(75).collectInput("com.github.underscore.lodash.Xml.NULL",com.github.underscore.lodash.Xml.NULL);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(75).collectInput("com.github.underscore.lodash.Xml.ELEMENT_TEXT",com.github.underscore.lodash.Xml.ELEMENT_TEXT);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(75).collectInput("com.github.underscore.lodash.Xml.CLOSED_ELEMENT",com.github.underscore.lodash.Xml.CLOSED_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(75).collectInput("com.github.underscore.lodash.Xml.UTF_8",com.github.underscore.lodash.Xml.UTF_8);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(75).collectInput("com.github.underscore.lodash.Xml.CDATA",com.github.underscore.lodash.Xml.CDATA);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(75).collectInput("com.github.underscore.lodash.Xml.COMMENT",com.github.underscore.lodash.Xml.COMMENT);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(75).collectInput("com.github.underscore.lodash.Xml.EMPTY_ELEMENT",com.github.underscore.lodash.Xml.EMPTY_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(75).collectInput("null",null);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(75).collectInput("com.github.underscore.lodash.Xml.ELEMENT",com.github.underscore.lodash.Xml.ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(75).collectInput("(map != null)",(map != null));} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(75).collectInput("map",map);} catch (Exception ex1) {ex1.printStackTrace();};
            fr.inria.lille.commons.trace.RuntimeValues.instance(75).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(75).collectionEnds();
        }
        if (runtimeAngelicValue) if ((map != null) && (map.containsKey(com.github.underscore.lodash.Xml.ENCODING))) {
            builder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutRoot(identStep, java.lang.String.valueOf(map.get(com.github.underscore.lodash.Xml.ENCODING)));
            localMap = ((java.util.Map) (com.github.underscore.lodash.U.clone(map)));
            localMap.remove(com.github.underscore.lodash.Xml.ENCODING);
        }else {
            builder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutRoot(identStep, com.github.underscore.lodash.Xml.UTF_8.name());
            localMap = map;
        }
        if ((((localMap == null) || ((localMap.size()) != 1)) || (java.lang.String.valueOf(((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getKey()).startsWith("-"))) || ((((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getValue()) instanceof java.util.List)) {
            final java.lang.String name;
            if ((((localMap != null) && ((localMap.size()) == 1)) && ((((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getValue()) instanceof java.util.List)) && (!(((java.util.List) (((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getValue())).isEmpty()))) {
                name = java.lang.String.valueOf(((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getKey());
            }else {
                name = "root";
            }
            com.github.underscore.lodash.Xml.XmlObject.writeXml(localMap, name, builder, false, com.github.underscore.lodash.U.<java.lang.String>newLinkedHashSet());
        }else {
            com.github.underscore.lodash.Xml.XmlObject.writeXml(localMap, null, builder, false, com.github.underscore.lodash.U.<java.lang.String>newLinkedHashSet());
        }
        return builder.toString();
    }

    public static java.lang.String toXml(java.util.Map map) {
        return com.github.underscore.lodash.Xml.toXml(map, com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TWO_SPACES);
    }

    @java.lang.SuppressWarnings("unchecked")
    private static java.lang.Object getValue(final java.lang.Object value) {
        if ((value instanceof java.util.Map) && ((((java.util.Map<java.lang.String, java.lang.Object>) (value)).entrySet().size()) == 1)) {
            final java.util.Map.Entry<java.lang.String, java.lang.Object> entry = ((java.util.Map<java.lang.String, java.lang.Object>) (value)).entrySet().iterator().next();
            if ((com.github.underscore.lodash.Xml.TEXT.equals(entry.getKey())) || (entry.getKey().equals(com.github.underscore.lodash.Xml.ELEMENT_TEXT))) {
                return entry.getValue();
            }
        }
        return value;
    }

    @java.lang.SuppressWarnings("unchecked")
    private static java.util.Map<java.lang.String, java.lang.Object> createMap(final org.w3c.dom.Node node, final com.github.underscore.Function<java.lang.Object, java.lang.Object> nodeMapper, java.util.Map<java.lang.String, java.lang.Object> attrMap, int[] uniqueIds, final com.github.underscore.Function<java.lang.Object, java.lang.Object> valueMapper, java.lang.String source, int[] sourceIndex) {
        final java.util.Map<java.lang.String, java.lang.Object> map = com.github.underscore.lodash.U.newLinkedHashMap();
        map.putAll(attrMap);
        final org.w3c.dom.NodeList nodeList = node.getChildNodes();
        for (int index = 0; index < (nodeList.getLength()); index++) {
            final org.w3c.dom.Node currentNode = nodeList.item(index);
            final java.lang.String name = currentNode.getNodeName();
            final java.lang.Object value;
            final int attributesLength = ((currentNode.getAttributes()) == null) ? 0 : currentNode.getAttributes().getLength();
            if ((currentNode.getNodeType()) == (org.w3c.dom.Node.ELEMENT_NODE)) {
                sourceIndex[0] = ((source.indexOf(("<" + name), sourceIndex[0])) + (name.length())) + 2;
                final java.util.Map<java.lang.String, java.lang.Object> attrMapLocal = com.github.underscore.lodash.U.newLinkedHashMap();
                if (attributesLength > 0) {
                    final java.util.regex.Matcher matcher = com.github.underscore.lodash.Xml.ATTRS.matcher(source.substring(sourceIndex[0], source.indexOf(">", sourceIndex[0])));
                    while (matcher.find()) {
                        com.github.underscore.lodash.Xml.addNodeValue(attrMapLocal, ('-' + (matcher.group(1))), matcher.group(2), nodeMapper, uniqueIds);
                    } 
                }
                value = com.github.underscore.lodash.Xml.createMap(currentNode, nodeMapper, attrMapLocal, uniqueIds, valueMapper, source, sourceIndex);
            }else {
                if (com.github.underscore.lodash.Xml.COMMENT.equals(name)) {
                    sourceIndex[0] = (source.indexOf("-->", sourceIndex[0])) + 3;
                }else
                    if (com.github.underscore.lodash.Xml.CDATA.equals(name)) {
                        sourceIndex[0] = (source.indexOf("]]>", sourceIndex[0])) + 3;
                    }

                value = currentNode.getTextContent();
            }
            if ((com.github.underscore.lodash.Xml.TEXT.equals(name)) && (valueMapper.apply(value).toString().isEmpty())) {
                continue;
            }
            com.github.underscore.lodash.Xml.addNodeValue(map, name, value, nodeMapper, uniqueIds);
        }
        return map;
    }

    @java.lang.SuppressWarnings("unchecked")
    private static void addNodeValue(final java.util.Map<java.lang.String, java.lang.Object> map, final java.lang.String name, final java.lang.Object value, final com.github.underscore.Function<java.lang.Object, java.lang.Object> nodeMapper, int[] uniqueIds) {
        if (map.containsKey(name)) {
            if (com.github.underscore.lodash.Xml.TEXT.equals(name)) {
                map.put((name + (uniqueIds[0])), nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
                uniqueIds[0] += 1;
            }else
                if (com.github.underscore.lodash.Xml.COMMENT.equals(name)) {
                    map.put((name + (uniqueIds[1])), nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
                    uniqueIds[1] += 1;
                }else
                    if (com.github.underscore.lodash.Xml.CDATA.equals(name)) {
                        map.put((name + (uniqueIds[2])), nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
                        uniqueIds[2] += 1;
                    }else {
                        final java.lang.Object object = map.get(name);
                        if (object instanceof java.util.List) {
                            com.github.underscore.lodash.Xml.addText(map, name, ((java.util.List<java.lang.Object>) (object)), value);
                        }else {
                            final java.util.List<java.lang.Object> objects = com.github.underscore.lodash.U.newArrayList();
                            objects.add(object);
                            com.github.underscore.lodash.Xml.addText(map, name, objects, value);
                            map.put(name, objects);
                        }
                    }


        }else {
            map.put(name, nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
        }
    }

    @java.lang.SuppressWarnings("unchecked")
    private static void addText(final java.util.Map<java.lang.String, java.lang.Object> map, final java.lang.String name, final java.util.List<java.lang.Object> objects, final java.lang.Object value) {
        int lastIndex = (map.size()) - 1;
        final int index = objects.size();
        while (true) {
            final java.util.Map.Entry lastElement = ((java.util.Map.Entry) (map.entrySet().toArray()[lastIndex]));
            if (name.equals(java.lang.String.valueOf(lastElement.getKey()))) {
                break;
            }
            final java.util.Map<java.lang.String, java.lang.Object> text = com.github.underscore.lodash.U.newLinkedHashMap();
            text.put(java.lang.String.valueOf(lastElement.getKey()), map.remove(lastElement.getKey()));
            objects.add(index, text);
            lastIndex -= 1;
        } 
        objects.add(com.github.underscore.lodash.Xml.getValue(value));
    }

    @java.lang.SuppressWarnings("unchecked")
    public static java.lang.Object fromXml(final java.lang.String xml, final com.github.underscore.Function<java.lang.Object, java.lang.Object> valueMapper) {
        if (xml == null) {
            return null;
        }
        try {
            org.w3c.dom.Document document = com.github.underscore.lodash.Xml.createDocument(xml);
            final java.lang.Object result = com.github.underscore.lodash.Xml.createMap(document, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
                public java.lang.Object apply(java.lang.Object object) {
                    return object;
                }
            }, java.util.Collections.<java.lang.String, java.lang.Object>emptyMap(), new int[]{ 1, 1, 1 }, valueMapper, xml, new int[]{ 0 });
            if (((document.getXmlEncoding()) != null) && (!("UTF-8".equalsIgnoreCase(document.getXmlEncoding())))) {
                ((java.util.Map) (result)).put(com.github.underscore.lodash.Xml.ENCODING, document.getXmlEncoding());
            }else
                if ((((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getKey().equals("root")) && (((((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getValue()) instanceof java.util.List) || ((((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getValue()) instanceof java.util.Map))) {
                    return ((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getValue();
                }

            return result;
        } catch (java.lang.Exception ex) {
            throw new java.lang.IllegalArgumentException(ex);
        }
    }

    public static java.lang.Object fromXml(final java.lang.String xml) {
        return com.github.underscore.lodash.Xml.fromXml(xml, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
            public java.lang.Object apply(java.lang.Object object) {
                return java.lang.String.valueOf(object).trim();
            }
        });
    }

    private static org.w3c.dom.Document createDocument(final java.lang.String xml) throws java.io.IOException, javax.xml.parsers.ParserConfigurationException, org.xml.sax.SAXException {
        final javax.xml.parsers.DocumentBuilderFactory factory = javax.xml.parsers.DocumentBuilderFactory.newInstance();
        factory.setNamespaceAware(true);
        factory.setFeature(javax.xml.XMLConstants.FEATURE_SECURE_PROCESSING, true);
        final javax.xml.parsers.DocumentBuilder builder = factory.newDocumentBuilder();
        builder.setErrorHandler(new org.xml.sax.helpers.DefaultHandler());
        return builder.parse(new org.xml.sax.InputSource(new java.io.StringReader(xml)));
    }

    public static java.lang.Object fromXmlMakeArrays(final java.lang.String xml) {
        try {
            org.w3c.dom.Document document = com.github.underscore.lodash.Xml.createDocument(xml);
            return com.github.underscore.lodash.Xml.createMap(document, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
                public java.lang.Object apply(java.lang.Object object) {
                    return object instanceof java.util.List ? object : com.github.underscore.lodash.U.newArrayList(java.util.Arrays.asList(object));
                }
            }, java.util.Collections.<java.lang.String, java.lang.Object>emptyMap(), new int[]{ 1, 1, 1 }, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
                public java.lang.Object apply(java.lang.Object object) {
                    return java.lang.String.valueOf(object).trim();
                }
            }, xml, new int[]{ 0 });
        } catch (java.lang.Exception ex) {
            throw new java.lang.IllegalArgumentException(ex);
        }
    }

    @java.lang.SuppressWarnings("unchecked")
    public static java.lang.String formatXml(java.lang.String xml, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep) {
        java.lang.Object result = com.github.underscore.lodash.Xml.fromXml(xml);
        if (result instanceof java.util.Map) {
            return com.github.underscore.lodash.Xml.toXml(((java.util.Map) (result)), identStep);
        }
        return com.github.underscore.lodash.Xml.toXml(((java.util.List) (result)), identStep);
    }

    public static java.lang.String formatXml(java.lang.String xml) {
        return com.github.underscore.lodash.Xml.formatXml(xml, com.github.underscore.lodash.Xml.XmlStringBuilder.Step.THREE_SPACES);
    }
}
16:27:01.868 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
16:27:01.868 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:27:01.924 [pool-260-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (50 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:27:02.214 [pool-259-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Xml.java:590: warning: com.sun.org.apache.xerces.internal.util.XMLChar is internal proprietary API and may be removed in a future release
            if ((com.sun.org.apache.xerces.internal.util.XMLChar.isNameStart(ch)) && (ch != ':')) {
                                                        ^
Xml.java:600: warning: com.sun.org.apache.xerces.internal.util.XMLChar is internal proprietary API and may be removed in a future release
                    if ((com.sun.org.apache.xerces.internal.util.XMLChar.isName(ch)) && (ch != ':')) {
                                                                ^
Xml.java:697: error: non-static variable ident cannot be referenced from a static context
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(76).collectInput("com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident",com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                          ^
16:27:02.344 [pool-259-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public final class Xml {
    private static final java.lang.String NULL = "null";

    private static final java.lang.String ELEMENT_TEXT = "element";

    private static final java.lang.String CDATA = "#cdata-section";

    private static final java.lang.String COMMENT = "#comment";

    private static final java.lang.String ENCODING = "#encoding";

    private static final java.lang.String TEXT = "#text";

    private static final java.lang.String ELEMENT = ("<" + (com.github.underscore.lodash.Xml.ELEMENT_TEXT)) + ">";

    private static final java.lang.String CLOSED_ELEMENT = ("</" + (com.github.underscore.lodash.Xml.ELEMENT_TEXT)) + ">";

    private static final java.lang.String EMPTY_ELEMENT = (com.github.underscore.lodash.Xml.ELEMENT) + (com.github.underscore.lodash.Xml.CLOSED_ELEMENT);

    private static final java.lang.String NULL_ELEMENT = ((com.github.underscore.lodash.Xml.ELEMENT) + (com.github.underscore.lodash.Xml.NULL)) + (com.github.underscore.lodash.Xml.CLOSED_ELEMENT);

    private static final java.nio.charset.Charset UTF_8 = java.nio.charset.Charset.forName("UTF-8");

    private static final java.util.regex.Pattern ATTRS = java.util.regex.Pattern.compile(("((?:(?!\\s|=).)*)\\s*?=\\s*?[\"\']?((?:(?<=\")(?:(?<=\\\\)\"|[^\"])*|(?<=\')" + "(?:(?<=\\\\)\'|[^\'])*)|(?:(?!\"|\')(?:(?!\\/>|>|\\s).)+))"));

    public static class XmlStringBuilder {
        public enum Step {

            TWO_SPACES(2),
            THREE_SPACES(3),
            FOUR_SPACES(4),
            COMPACT(0),
            TABS(1);
            private int ident;

            Step(int ident) {
                this.ident = ident;
            }

            public int getIdent() {
                return ident;
            }
        }

        protected final java.lang.StringBuilder builder;

        private final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep;

        private int ident;

        public XmlStringBuilder() {
            builder = new java.lang.StringBuilder("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<root>\n");
            identStep = com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TWO_SPACES;
            ident = 2;
        }

        public XmlStringBuilder(java.lang.StringBuilder builder, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident) {
            this.builder = builder;
            this.identStep = identStep;
            this.ident = ident;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder append(final java.lang.String string) {
            builder.append(string);
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder fillSpaces() {
            for (int index = 0; index < (ident); index += 1) {
                builder.append(((identStep) == (com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TABS) ? '\t' : ' '));
            }
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder incIdent() {
            ident += identStep.getIdent();
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder decIdent() {
            ident -= identStep.getIdent();
            return this;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder newLine() {
            if ((identStep) != (com.github.underscore.lodash.Xml.XmlStringBuilder.Step.COMPACT)) {
                builder.append("\n");
            }
            return this;
        }

        public int getIdent() {
            return ident;
        }

        public com.github.underscore.lodash.Xml.XmlStringBuilder.Step getIdentStep() {
            return identStep;
        }

        public java.lang.String toString() {
            return (builder.toString()) + "\n</root>";
        }
    }

    public static class XmlStringBuilderWithoutRoot extends com.github.underscore.lodash.Xml.XmlStringBuilder {
        public XmlStringBuilderWithoutRoot(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, java.lang.String encoding) {
            super(new java.lang.StringBuilder(((("<?xml version=\"1.0\" encoding=\"" + (com.github.underscore.lodash.U.escape(encoding))) + "\"?>") + (identStep == (com.github.underscore.lodash.Xml.XmlStringBuilder.Step.COMPACT) ? "" : "\n"))), identStep, 0);
        }

        public java.lang.String toString() {
            return builder.toString();
        }
    }

    public static class XmlStringBuilderWithoutHeader extends com.github.underscore.lodash.Xml.XmlStringBuilder {
        public XmlStringBuilderWithoutHeader(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident) {
            super(new java.lang.StringBuilder(), identStep, ident);
        }

        public java.lang.String toString() {
            return builder.toString();
        }
    }

    public static class XmlStringBuilderText extends com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader {
        public XmlStringBuilderText(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident) {
            super(identStep, ident);
        }
    }

    public static class XmlArray {
        public static void writeXml(java.util.Collection collection, java.lang.String name, com.github.underscore.lodash.Xml.XmlStringBuilder builder, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (collection == null) {
                builder.append(com.github.underscore.lodash.Xml.NULL);
                return;
            }
            if (name != null) {
                builder.fillSpaces().append("<").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(">").incIdent();
                if (!(collection.isEmpty())) {
                    builder.newLine();
                }
            }
            com.github.underscore.lodash.Xml.XmlArray.writeXml(collection, builder, name, parentTextFound, namespaces);
            if (name != null) {
                builder.decIdent().newLine().fillSpaces().append("</").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(">");
            }
        }

        @java.lang.SuppressWarnings("unchecked")
        private static void writeXml(java.util.Collection collection, com.github.underscore.lodash.Xml.XmlStringBuilder builder, java.lang.String name, final boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            boolean localParentTextFound = parentTextFound;
            final java.util.List entries = com.github.underscore.lodash.U.newArrayList(collection);
            for (int index = 0; index < (entries.size()); index += 1) {
                final java.lang.Object value = entries.get(index);
                final boolean addNewLine = (index < ((entries.size()) - 1)) && (!(java.lang.String.valueOf(entries.get((index + 1))).startsWith(("{" + (com.github.underscore.lodash.Xml.TEXT)))));
                if (value == null) {
                    builder.fillSpaces().append((((((("<" + (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">") + (com.github.underscore.lodash.Xml.NULL)) + "</") + (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">"));
                }else {
                    if ((value instanceof java.util.Map) && ((((java.util.Map) (value)).size()) == 1)) {
                        com.github.underscore.lodash.Xml.XmlObject.writeXml(((java.util.Map) (value)), null, builder, localParentTextFound, namespaces);
                        if (java.lang.String.valueOf(((java.util.Map.Entry) (((java.util.Map) (value)).entrySet().iterator().next())).getKey()).startsWith(com.github.underscore.lodash.Xml.TEXT)) {
                            localParentTextFound = true;
                            continue;
                        }
                    }else {
                        com.github.underscore.lodash.Xml.XmlValue.writeXml(value, (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : name), builder, localParentTextFound, namespaces);
                    }
                    localParentTextFound = false;
                }
                if (addNewLine) {
                    builder.newLine();
                }
            }
        }

        public static void writeXml(byte[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(short[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(int[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(long[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(float[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(double[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(boolean[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(char[] array, com.github.underscore.lodash.Xml.XmlStringBuilder builder) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        builder.fillSpaces().append(com.github.underscore.lodash.Xml.ELEMENT);
                        builder.append(java.lang.String.valueOf(array[i]));
                        builder.append(com.github.underscore.lodash.Xml.CLOSED_ELEMENT);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }

        public static void writeXml(java.lang.Object[] array, java.lang.String name, com.github.underscore.lodash.Xml.XmlStringBuilder builder, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (array == null) {
                builder.fillSpaces().append(com.github.underscore.lodash.Xml.NULL_ELEMENT);
            }else
                if ((array.length) == 0) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Xml.EMPTY_ELEMENT);
                }else {
                    for (int i = 0; i < (array.length); i++) {
                        com.github.underscore.lodash.Xml.XmlValue.writeXml(array[i], (name == null ? com.github.underscore.lodash.Xml.ELEMENT_TEXT : name), builder, parentTextFound, namespaces);
                        if (i != ((array.length) - 1)) {
                            builder.newLine();
                        }
                    }
                }

        }
    }

    public static class XmlObject {
        @java.lang.SuppressWarnings("unchecked")
        public static void writeXml(java.util.Map map, java.lang.String name, final com.github.underscore.lodash.Xml.XmlStringBuilder builder, final boolean parentTextFound, final java.util.Set<java.lang.String> namespaces) {
            if (map == null) {
                com.github.underscore.lodash.Xml.XmlValue.writeXml(com.github.underscore.lodash.Xml.NULL, name, builder, false, namespaces);
                return;
            }
            final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems = com.github.underscore.lodash.U.newArrayList();
            final java.util.List<java.lang.String> attrs = com.github.underscore.lodash.U.newArrayList();
            final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep = builder.getIdentStep();
            final int ident = (builder.getIdent()) + (name == null ? 0 : builder.getIdentStep().getIdent());
            final java.util.List<java.util.Map.Entry> entries = com.github.underscore.lodash.U.newArrayList(map.entrySet());
            for (int index = 0; index < (entries.size()); index += 1) {
                final java.util.Map.Entry entry = entries.get(index);
                final boolean addNewLine = (index < ((entries.size()) - 1)) && (!(java.lang.String.valueOf(entries.get((index + 1)).getKey()).startsWith(com.github.underscore.lodash.Xml.TEXT)));
                if (((java.lang.String.valueOf(entry.getKey()).startsWith("-")) && (!((entry.getValue()) instanceof java.util.Map))) && (!((entry.getValue()) instanceof java.util.List))) {
                    attrs.add(((((" " + (com.github.underscore.lodash.Xml.XmlValue.escapeName(java.lang.String.valueOf(entry.getKey()).substring(1), namespaces))) + "=\"") + (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getValue())))) + "\""));
                    if (java.lang.String.valueOf(entry.getKey()).startsWith("-xmlns:")) {
                        namespaces.add(java.lang.String.valueOf(entry.getKey()).substring(7));
                    }
                }else
                    if (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getKey())).startsWith(com.github.underscore.lodash.Xml.TEXT)) {
                        com.github.underscore.lodash.Xml.XmlObject.addText(entry, elems, identStep, ident);
                    }else {
                        com.github.underscore.lodash.Xml.XmlObject.processElements(entry, identStep, ident, addNewLine, elems, namespaces);
                    }

            }
            if (name != null) {
                if (!parentTextFound) {
                    builder.fillSpaces();
                }
                builder.append("<").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(com.github.underscore.lodash.U.join(attrs, "")).append(">").incIdent();
                if ((!(elems.isEmpty())) && (!((elems.get(0)) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText))) {
                    builder.newLine();
                }
            }
            for (com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder1 : elems) {
                builder.append(localBuilder1.toString());
            }
            if (name != null) {
                builder.decIdent();
                if ((!(elems.isEmpty())) && (!((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText))) {
                    builder.newLine().fillSpaces();
                }
                builder.append("</").append(com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces)).append(">");
            }
        }

        private static void processElements(final java.util.Map.Entry entry, final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident, final boolean addNewLine, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final java.util.Set<java.lang.String> namespaces) {
            if (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getKey())).startsWith(com.github.underscore.lodash.Xml.COMMENT)) {
                com.github.underscore.lodash.Xml.XmlObject.addComment(entry, identStep, ident, addNewLine, elems, "<!--", "-->");
            }else
                if (com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getKey())).startsWith(com.github.underscore.lodash.Xml.CDATA)) {
                    com.github.underscore.lodash.Xml.XmlObject.addComment(entry, identStep, ident, addNewLine, elems, "<![CDATA[", "]]>");
                }else
                    if (((entry.getValue()) instanceof java.util.List) && (!(((java.util.List) (entry.getValue())).isEmpty()))) {
                        com.github.underscore.lodash.Xml.XmlObject.addElements(identStep, ident, entry, namespaces, elems, addNewLine);
                    }else {
                        com.github.underscore.lodash.Xml.XmlObject.addElement(identStep, ident, entry, namespaces, elems, addNewLine);
                    }


        }

        private static void addText(final java.util.Map.Entry entry, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident) {
            if ((entry.getValue()) instanceof java.util.List) {
                for (java.lang.Object value : ((java.util.List) (entry.getValue()))) {
                    elems.add(new com.github.underscore.lodash.Xml.XmlStringBuilderText(identStep, ident).append(com.github.underscore.lodash.U.escape(java.lang.String.valueOf(value))));
                }
            }else {
                elems.add(new com.github.underscore.lodash.Xml.XmlStringBuilderText(identStep, ident).append(com.github.underscore.lodash.U.escape(java.lang.String.valueOf(entry.getValue()))));
            }
        }

        private static void addElements(final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident, java.util.Map.Entry entry, java.util.Set<java.lang.String> namespaces, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final boolean addNewLine) {
            boolean parentTextFound = (!(elems.isEmpty())) && ((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText);
            final com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder;
            if ((java.lang.String.valueOf(((java.util.List) (entry.getValue())).get(0)).startsWith(("{" + (com.github.underscore.lodash.Xml.TEXT)))) || (java.lang.String.valueOf(((java.util.List) (entry.getValue())).get(((((java.util.List) (entry.getValue())).size()) - 1))).startsWith(("{" + (com.github.underscore.lodash.Xml.TEXT))))) {
                localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderText(identStep, ident);
            }else {
                localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader(identStep, ident);
            }
            com.github.underscore.lodash.Xml.XmlArray.writeXml(((java.util.List) (entry.getValue())), localBuilder, java.lang.String.valueOf(entry.getKey()), parentTextFound, namespaces);
            if (addNewLine) {
                localBuilder.newLine();
            }
            elems.add(localBuilder);
        }

        private static void addElement(final com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, final int ident, java.util.Map.Entry entry, java.util.Set<java.lang.String> namespaces, final java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, final boolean addNewLine) {
            boolean parentTextFound = (!(elems.isEmpty())) && ((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText);
            com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader(identStep, ident);
            com.github.underscore.lodash.Xml.XmlValue.writeXml(entry.getValue(), java.lang.String.valueOf(entry.getKey()), localBuilder, parentTextFound, namespaces);
            if (addNewLine) {
                localBuilder.newLine();
            }
            elems.add(localBuilder);
        }

        private static void addComment(java.util.Map.Entry entry, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident, boolean addNewLine, java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, java.lang.String openElement, java.lang.String closeElement) {
            if ((entry.getValue()) instanceof java.util.List) {
                for (java.util.Iterator iterator = ((java.util.List) (entry.getValue())).iterator(); iterator.hasNext();) {
                    com.github.underscore.lodash.Xml.XmlObject.addCommentValue(identStep, ident, java.lang.String.valueOf(iterator.next()), ((iterator.hasNext()) || addNewLine), elems, openElement, closeElement);
                }
            }else {
                com.github.underscore.lodash.Xml.XmlObject.addCommentValue(identStep, ident, java.lang.String.valueOf(entry.getValue()), addNewLine, elems, openElement, closeElement);
            }
        }

        private static void addCommentValue(com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep, int ident, java.lang.String value, boolean addNewLine, java.util.List<com.github.underscore.lodash.Xml.XmlStringBuilder> elems, java.lang.String openElement, java.lang.String closeElement) {
            boolean parentTextFound = (!(elems.isEmpty())) && ((elems.get(((elems.size()) - 1))) instanceof com.github.underscore.lodash.Xml.XmlStringBuilderText);
            com.github.underscore.lodash.Xml.XmlStringBuilder localBuilder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutHeader(identStep, ident);
            if (!parentTextFound) {
                localBuilder.fillSpaces();
            }
            localBuilder.append(openElement).append(value).append(closeElement);
            if (addNewLine) {
                localBuilder.newLine();
            }
            elems.add(localBuilder);
        }
    }

    public static class XmlValue {
        public static void writeXml(java.lang.Object value, java.lang.String name, com.github.underscore.lodash.Xml.XmlStringBuilder builder, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (value instanceof java.util.Map) {
                com.github.underscore.lodash.Xml.XmlObject.writeXml(((java.util.Map) (value)), name, builder, parentTextFound, namespaces);
                return;
            }
            if (value instanceof java.util.Collection) {
                com.github.underscore.lodash.Xml.XmlArray.writeXml(((java.util.Collection) (value)), name, builder, parentTextFound, namespaces);
                return;
            }
            if (!parentTextFound) {
                builder.fillSpaces();
            }
            builder.append((("<" + (com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">"));
            if (value == null) {
                builder.append(com.github.underscore.lodash.Xml.NULL);
            }else
                if (value instanceof java.lang.String) {
                    builder.append(com.github.underscore.lodash.Xml.XmlValue.escape(((java.lang.String) (value))));
                }else {
                    com.github.underscore.lodash.Xml.XmlValue.processArrays(value, builder, name, parentTextFound, namespaces);
                }

            builder.append((("</" + (com.github.underscore.lodash.Xml.XmlValue.escapeName(name, namespaces))) + ">"));
        }

        private static void processArrays(java.lang.Object value, com.github.underscore.lodash.Xml.XmlStringBuilder builder, java.lang.String name, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (value instanceof java.lang.Double) {
                if ((((java.lang.Double) (value)).isInfinite()) || (((java.lang.Double) (value)).isNaN())) {
                    builder.append(com.github.underscore.lodash.Xml.NULL);
                }else {
                    builder.append(value.toString());
                }
            }else
                if (value instanceof java.lang.Float) {
                    if ((((java.lang.Float) (value)).isInfinite()) || (((java.lang.Float) (value)).isNaN())) {
                        builder.append(com.github.underscore.lodash.Xml.NULL);
                    }else {
                        builder.append(value.toString());
                    }
                }else
                    if (value instanceof java.lang.Number) {
                        builder.append(value.toString());
                    }else
                        if (value instanceof java.lang.Boolean) {
                            builder.append(value.toString());
                        }else
                            if (value instanceof byte[]) {
                                builder.newLine().incIdent();
                                com.github.underscore.lodash.Xml.XmlArray.writeXml(((byte[]) (value)), builder);
                                builder.decIdent().newLine().fillSpaces();
                            }else
                                if (value instanceof short[]) {
                                    builder.newLine().incIdent();
                                    com.github.underscore.lodash.Xml.XmlArray.writeXml(((short[]) (value)), builder);
                                    builder.decIdent().newLine().fillSpaces();
                                }else {
                                    com.github.underscore.lodash.Xml.XmlValue.processArrays2(value, builder, name, parentTextFound, namespaces);
                                }





        }

        private static void processArrays2(java.lang.Object value, com.github.underscore.lodash.Xml.XmlStringBuilder builder, java.lang.String name, boolean parentTextFound, java.util.Set<java.lang.String> namespaces) {
            if (value instanceof int[]) {
                builder.newLine().incIdent();
                com.github.underscore.lodash.Xml.XmlArray.writeXml(((int[]) (value)), builder);
                builder.decIdent().newLine().fillSpaces();
            }else
                if (value instanceof long[]) {
                    builder.newLine().incIdent();
                    com.github.underscore.lodash.Xml.XmlArray.writeXml(((long[]) (value)), builder);
                    builder.decIdent().newLine().fillSpaces();
                }else
                    if (value instanceof float[]) {
                        builder.newLine().incIdent();
                        com.github.underscore.lodash.Xml.XmlArray.writeXml(((float[]) (value)), builder);
                        builder.decIdent().newLine().fillSpaces();
                    }else
                        if (value instanceof double[]) {
                            builder.newLine().incIdent();
                            com.github.underscore.lodash.Xml.XmlArray.writeXml(((double[]) (value)), builder);
                            builder.decIdent().newLine().fillSpaces();
                        }else
                            if (value instanceof boolean[]) {
                                builder.newLine().incIdent();
                                com.github.underscore.lodash.Xml.XmlArray.writeXml(((boolean[]) (value)), builder);
                                builder.decIdent().newLine().fillSpaces();
                            }else
                                if (value instanceof char[]) {
                                    builder.newLine().incIdent();
                                    com.github.underscore.lodash.Xml.XmlArray.writeXml(((char[]) (value)), builder);
                                    builder.decIdent().newLine().fillSpaces();
                                }else
                                    if (value instanceof java.lang.Object[]) {
                                        builder.newLine().incIdent();
                                        com.github.underscore.lodash.Xml.XmlArray.writeXml(((java.lang.Object[]) (value)), name, builder, parentTextFound, namespaces);
                                        builder.decIdent().newLine().fillSpaces();
                                    }else {
                                        builder.append(value.toString());
                                    }






        }

        public static java.lang.String escapeName(java.lang.String name, java.util.Set<java.lang.String> namespaces) {
            final int length = name.length();
            if (length == 0) {
                return "__EE__EMPTY__EE__";
            }
            final java.lang.StringBuilder result = new java.lang.StringBuilder();
            char ch = name.charAt(0);
            if ((com.sun.org.apache.xerces.internal.util.XMLChar.isNameStart(ch)) && (ch != ':')) {
                result.append(ch);
            }else {
                result.append("__").append(com.github.underscore.lodash.Base32.encode(java.lang.Character.toString(ch))).append("__");
            }
            for (int i = 1; i < length; ++i) {
                ch = name.charAt(i);
                if ((ch == ':') && (("xmlns".equals(name.substring(0, i))) || (namespaces.contains(name.substring(0, i))))) {
                    result.append(ch);
                }else
                    if ((com.sun.org.apache.xerces.internal.util.XMLChar.isName(ch)) && (ch != ':')) {
                        result.append(ch);
                    }else {
                        result.append("__").append(com.github.underscore.lodash.Base32.encode(java.lang.Character.toString(ch))).append("__");
                    }

            }
            return result.toString();
        }

        public static java.lang.String escape(java.lang.String s) {
            if (s == null) {
                return null;
            }
            java.lang.StringBuilder sb = new java.lang.StringBuilder();
            com.github.underscore.lodash.Xml.XmlValue.escape(s, sb);
            return sb.toString();
        }

        private static void escape(java.lang.String s, java.lang.StringBuilder sb) {
            final int len = s.length();
            for (int i = 0; i < len; i++) {
                char ch = s.charAt(i);
                switch (ch) {
                    case '"' :
                        sb.append("&quot;");
                        break;
                    case '\'' :
                        sb.append("'");
                        break;
                    case '&' :
                        sb.append("&amp;");
                        break;
                    case '<' :
                        sb.append("&lt;");
                        break;
                    case '>' :
                        sb.append("&gt;");
                        break;
                    case '\b' :
                        sb.append("\\b");
                        break;
                    case '\f' :
                        sb.append("\\f");
                        break;
                    case '\n' :
                        sb.append("\n");
                        break;
                    case '\r' :
                        sb.append("\\r");
                        break;
                    case '\t' :
                        sb.append("\t");
                        break;
                    default :
                        if (((ch <= '\u001f') || ((ch >= '\u007f') && (ch <= '\u009f'))) || ((ch >= '\u2000') && (ch <= '\u20ff'))) {
                            java.lang.String ss = java.lang.Integer.toHexString(ch);
                            sb.append("&#x");
                            for (int k = 0; k < (4 - (ss.length())); k++) {
                                sb.append('0');
                            }
                            sb.append(ss.toUpperCase()).append(";");
                        }else {
                            sb.append(ch);
                        }
                        break;
                }
            }
        }
    }

    public static java.lang.String toXml(java.util.Collection collection, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep) {
        final com.github.underscore.lodash.Xml.XmlStringBuilder builder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutRoot(identStep, com.github.underscore.lodash.Xml.UTF_8.name());
        builder.append("<root>").incIdent();
        if ((collection == null) || (!(collection.isEmpty()))) {
            builder.newLine();
        }
        com.github.underscore.lodash.Xml.XmlArray.writeXml(collection, null, builder, false, com.github.underscore.lodash.U.<java.lang.String>newLinkedHashSet());
        return builder.newLine().append("</root>").toString();
    }

    public static java.lang.String toXml(java.util.Collection collection) {
        return com.github.underscore.lodash.Xml.toXml(collection, com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TWO_SPACES);
    }

    public static java.lang.String toXml(java.util.Map map, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep) {
        final com.github.underscore.lodash.Xml.XmlStringBuilder builder;
        final java.util.Map localMap;
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = (map != null) && (map.containsKey(com.github.underscore.lodash.Xml.ENCODING));
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(76).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(76).collectionStarts();
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(76).collectInput("com.github.underscore.lodash.Xml.ENCODING",com.github.underscore.lodash.Xml.ENCODING);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(76).collectInput("com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident",com.github.underscore.lodash.Xml.XmlStringBuilder.Step.ident);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(76).collectInput("com.github.underscore.lodash.Xml.NULL_ELEMENT",com.github.underscore.lodash.Xml.NULL_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(76).collectInput("com.github.underscore.lodash.Xml.ATTRS",com.github.underscore.lodash.Xml.ATTRS);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(76).collectInput("identStep",identStep);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(76).collectInput("com.github.underscore.lodash.Xml.TEXT",com.github.underscore.lodash.Xml.TEXT);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(76).collectInput("com.github.underscore.lodash.Xml.NULL",com.github.underscore.lodash.Xml.NULL);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(76).collectInput("com.github.underscore.lodash.Xml.ELEMENT_TEXT",com.github.underscore.lodash.Xml.ELEMENT_TEXT);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(76).collectInput("com.github.underscore.lodash.Xml.CLOSED_ELEMENT",com.github.underscore.lodash.Xml.CLOSED_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(76).collectInput("com.github.underscore.lodash.Xml.UTF_8",com.github.underscore.lodash.Xml.UTF_8);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(76).collectInput("com.github.underscore.lodash.Xml.CDATA",com.github.underscore.lodash.Xml.CDATA);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(76).collectInput("com.github.underscore.lodash.Xml.COMMENT",com.github.underscore.lodash.Xml.COMMENT);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(76).collectInput("com.github.underscore.lodash.Xml.EMPTY_ELEMENT",com.github.underscore.lodash.Xml.EMPTY_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(76).collectInput("null",null);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(76).collectInput("com.github.underscore.lodash.Xml.ELEMENT",com.github.underscore.lodash.Xml.ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(76).collectInput("(map != null)",(map != null));} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(76).collectInput("map",map);} catch (Exception ex1) {ex1.printStackTrace();};
            fr.inria.lille.commons.trace.RuntimeValues.instance(76).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(76).collectionEnds();
        }
        if (runtimeAngelicValue) {
            builder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutRoot(identStep, java.lang.String.valueOf(map.get(com.github.underscore.lodash.Xml.ENCODING)));
            localMap = ((java.util.Map) (com.github.underscore.lodash.U.clone(map)));
            localMap.remove(com.github.underscore.lodash.Xml.ENCODING);
        }else {
            builder = new com.github.underscore.lodash.Xml.XmlStringBuilderWithoutRoot(identStep, com.github.underscore.lodash.Xml.UTF_8.name());
            localMap = map;
        }
        if ((((localMap == null) || ((localMap.size()) != 1)) || (java.lang.String.valueOf(((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getKey()).startsWith("-"))) || ((((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getValue()) instanceof java.util.List)) {
            final java.lang.String name;
            if ((((localMap != null) && ((localMap.size()) == 1)) && ((((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getValue()) instanceof java.util.List)) && (!(((java.util.List) (((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getValue())).isEmpty()))) {
                name = java.lang.String.valueOf(((java.util.Map.Entry) (localMap.entrySet().iterator().next())).getKey());
            }else {
                name = "root";
            }
            com.github.underscore.lodash.Xml.XmlObject.writeXml(localMap, name, builder, false, com.github.underscore.lodash.U.<java.lang.String>newLinkedHashSet());
        }else {
            com.github.underscore.lodash.Xml.XmlObject.writeXml(localMap, null, builder, false, com.github.underscore.lodash.U.<java.lang.String>newLinkedHashSet());
        }
        return builder.toString();
    }

    public static java.lang.String toXml(java.util.Map map) {
        return com.github.underscore.lodash.Xml.toXml(map, com.github.underscore.lodash.Xml.XmlStringBuilder.Step.TWO_SPACES);
    }

    @java.lang.SuppressWarnings("unchecked")
    private static java.lang.Object getValue(final java.lang.Object value) {
        if ((value instanceof java.util.Map) && ((((java.util.Map<java.lang.String, java.lang.Object>) (value)).entrySet().size()) == 1)) {
            final java.util.Map.Entry<java.lang.String, java.lang.Object> entry = ((java.util.Map<java.lang.String, java.lang.Object>) (value)).entrySet().iterator().next();
            if ((com.github.underscore.lodash.Xml.TEXT.equals(entry.getKey())) || (entry.getKey().equals(com.github.underscore.lodash.Xml.ELEMENT_TEXT))) {
                return entry.getValue();
            }
        }
        return value;
    }

    @java.lang.SuppressWarnings("unchecked")
    private static java.util.Map<java.lang.String, java.lang.Object> createMap(final org.w3c.dom.Node node, final com.github.underscore.Function<java.lang.Object, java.lang.Object> nodeMapper, java.util.Map<java.lang.String, java.lang.Object> attrMap, int[] uniqueIds, final com.github.underscore.Function<java.lang.Object, java.lang.Object> valueMapper, java.lang.String source, int[] sourceIndex) {
        final java.util.Map<java.lang.String, java.lang.Object> map = com.github.underscore.lodash.U.newLinkedHashMap();
        map.putAll(attrMap);
        final org.w3c.dom.NodeList nodeList = node.getChildNodes();
        for (int index = 0; index < (nodeList.getLength()); index++) {
            final org.w3c.dom.Node currentNode = nodeList.item(index);
            final java.lang.String name = currentNode.getNodeName();
            final java.lang.Object value;
            final int attributesLength = ((currentNode.getAttributes()) == null) ? 0 : currentNode.getAttributes().getLength();
            if ((currentNode.getNodeType()) == (org.w3c.dom.Node.ELEMENT_NODE)) {
                sourceIndex[0] = ((source.indexOf(("<" + name), sourceIndex[0])) + (name.length())) + 2;
                final java.util.Map<java.lang.String, java.lang.Object> attrMapLocal = com.github.underscore.lodash.U.newLinkedHashMap();
                if (attributesLength > 0) {
                    final java.util.regex.Matcher matcher = com.github.underscore.lodash.Xml.ATTRS.matcher(source.substring(sourceIndex[0], source.indexOf(">", sourceIndex[0])));
                    while (matcher.find()) {
                        com.github.underscore.lodash.Xml.addNodeValue(attrMapLocal, ('-' + (matcher.group(1))), matcher.group(2), nodeMapper, uniqueIds);
                    } 
                }
                value = com.github.underscore.lodash.Xml.createMap(currentNode, nodeMapper, attrMapLocal, uniqueIds, valueMapper, source, sourceIndex);
            }else {
                if (com.github.underscore.lodash.Xml.COMMENT.equals(name)) {
                    sourceIndex[0] = (source.indexOf("-->", sourceIndex[0])) + 3;
                }else
                    if (com.github.underscore.lodash.Xml.CDATA.equals(name)) {
                        sourceIndex[0] = (source.indexOf("]]>", sourceIndex[0])) + 3;
                    }

                value = currentNode.getTextContent();
            }
            if ((com.github.underscore.lodash.Xml.TEXT.equals(name)) && (valueMapper.apply(value).toString().isEmpty())) {
                continue;
            }
            com.github.underscore.lodash.Xml.addNodeValue(map, name, value, nodeMapper, uniqueIds);
        }
        return map;
    }

    @java.lang.SuppressWarnings("unchecked")
    private static void addNodeValue(final java.util.Map<java.lang.String, java.lang.Object> map, final java.lang.String name, final java.lang.Object value, final com.github.underscore.Function<java.lang.Object, java.lang.Object> nodeMapper, int[] uniqueIds) {
        if (map.containsKey(name)) {
            if (com.github.underscore.lodash.Xml.TEXT.equals(name)) {
                map.put((name + (uniqueIds[0])), nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
                uniqueIds[0] += 1;
            }else
                if (com.github.underscore.lodash.Xml.COMMENT.equals(name)) {
                    map.put((name + (uniqueIds[1])), nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
                    uniqueIds[1] += 1;
                }else
                    if (com.github.underscore.lodash.Xml.CDATA.equals(name)) {
                        map.put((name + (uniqueIds[2])), nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
                        uniqueIds[2] += 1;
                    }else {
                        final java.lang.Object object = map.get(name);
                        if (object instanceof java.util.List) {
                            com.github.underscore.lodash.Xml.addText(map, name, ((java.util.List<java.lang.Object>) (object)), value);
                        }else {
                            final java.util.List<java.lang.Object> objects = com.github.underscore.lodash.U.newArrayList();
                            objects.add(object);
                            com.github.underscore.lodash.Xml.addText(map, name, objects, value);
                            map.put(name, objects);
                        }
                    }


        }else {
            map.put(name, nodeMapper.apply(com.github.underscore.lodash.Xml.getValue(value)));
        }
    }

    @java.lang.SuppressWarnings("unchecked")
    private static void addText(final java.util.Map<java.lang.String, java.lang.Object> map, final java.lang.String name, final java.util.List<java.lang.Object> objects, final java.lang.Object value) {
        int lastIndex = (map.size()) - 1;
        final int index = objects.size();
        while (true) {
            final java.util.Map.Entry lastElement = ((java.util.Map.Entry) (map.entrySet().toArray()[lastIndex]));
            if (name.equals(java.lang.String.valueOf(lastElement.getKey()))) {
                break;
            }
            final java.util.Map<java.lang.String, java.lang.Object> text = com.github.underscore.lodash.U.newLinkedHashMap();
            text.put(java.lang.String.valueOf(lastElement.getKey()), map.remove(lastElement.getKey()));
            objects.add(index, text);
            lastIndex -= 1;
        } 
        objects.add(com.github.underscore.lodash.Xml.getValue(value));
    }

    @java.lang.SuppressWarnings("unchecked")
    public static java.lang.Object fromXml(final java.lang.String xml, final com.github.underscore.Function<java.lang.Object, java.lang.Object> valueMapper) {
        if (xml == null) {
            return null;
        }
        try {
            org.w3c.dom.Document document = com.github.underscore.lodash.Xml.createDocument(xml);
            final java.lang.Object result = com.github.underscore.lodash.Xml.createMap(document, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
                public java.lang.Object apply(java.lang.Object object) {
                    return object;
                }
            }, java.util.Collections.<java.lang.String, java.lang.Object>emptyMap(), new int[]{ 1, 1, 1 }, valueMapper, xml, new int[]{ 0 });
            if (((document.getXmlEncoding()) != null) && (!("UTF-8".equalsIgnoreCase(document.getXmlEncoding())))) {
                ((java.util.Map) (result)).put(com.github.underscore.lodash.Xml.ENCODING, document.getXmlEncoding());
            }else
                if ((((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getKey().equals("root")) && (((((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getValue()) instanceof java.util.List) || ((((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getValue()) instanceof java.util.Map))) {
                    return ((java.util.Map.Entry) (((java.util.Map) (result)).entrySet().iterator().next())).getValue();
                }

            return result;
        } catch (java.lang.Exception ex) {
            throw new java.lang.IllegalArgumentException(ex);
        }
    }

    public static java.lang.Object fromXml(final java.lang.String xml) {
        return com.github.underscore.lodash.Xml.fromXml(xml, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
            public java.lang.Object apply(java.lang.Object object) {
                return java.lang.String.valueOf(object).trim();
            }
        });
    }

    private static org.w3c.dom.Document createDocument(final java.lang.String xml) throws java.io.IOException, javax.xml.parsers.ParserConfigurationException, org.xml.sax.SAXException {
        final javax.xml.parsers.DocumentBuilderFactory factory = javax.xml.parsers.DocumentBuilderFactory.newInstance();
        factory.setNamespaceAware(true);
        factory.setFeature(javax.xml.XMLConstants.FEATURE_SECURE_PROCESSING, true);
        final javax.xml.parsers.DocumentBuilder builder = factory.newDocumentBuilder();
        builder.setErrorHandler(new org.xml.sax.helpers.DefaultHandler());
        return builder.parse(new org.xml.sax.InputSource(new java.io.StringReader(xml)));
    }

    public static java.lang.Object fromXmlMakeArrays(final java.lang.String xml) {
        try {
            org.w3c.dom.Document document = com.github.underscore.lodash.Xml.createDocument(xml);
            return com.github.underscore.lodash.Xml.createMap(document, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
                public java.lang.Object apply(java.lang.Object object) {
                    return object instanceof java.util.List ? object : com.github.underscore.lodash.U.newArrayList(java.util.Arrays.asList(object));
                }
            }, java.util.Collections.<java.lang.String, java.lang.Object>emptyMap(), new int[]{ 1, 1, 1 }, new com.github.underscore.Function<java.lang.Object, java.lang.Object>() {
                public java.lang.Object apply(java.lang.Object object) {
                    return java.lang.String.valueOf(object).trim();
                }
            }, xml, new int[]{ 0 });
        } catch (java.lang.Exception ex) {
            throw new java.lang.IllegalArgumentException(ex);
        }
    }

    @java.lang.SuppressWarnings("unchecked")
    public static java.lang.String formatXml(java.lang.String xml, com.github.underscore.lodash.Xml.XmlStringBuilder.Step identStep) {
        java.lang.Object result = com.github.underscore.lodash.Xml.fromXml(xml);
        if (result instanceof java.util.Map) {
            return com.github.underscore.lodash.Xml.toXml(((java.util.Map) (result)), identStep);
        }
        return com.github.underscore.lodash.Xml.toXml(((java.util.List) (result)), identStep);
    }

    public static java.lang.String formatXml(java.lang.String xml) {
        return com.github.underscore.lodash.Xml.formatXml(xml, com.github.underscore.lodash.Xml.XmlStringBuilder.Step.THREE_SPACES);
    }
}
16:27:02.344 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
16:27:02.344 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #83
16:27:02.345 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlObject:401 which is executed by 28 tests
88056
16:27:02.439 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #84
16:27:02.439 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlObject:399 which is executed by 28 tests
88056
16:27:02.534 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:27:02.594 [pool-262-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (53 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root>]> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
]>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:27:02.924 [pool-263-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (13 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root>]> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
]>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root>]> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
]>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:27:02.926 [pool-264-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:27:02.926 [pool-261-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root>]> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
]>]
16:27:02.926 [pool-261-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:27:02.926 [pool-261-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Xml$XmlObject:399.
16:27:02.926 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #85
16:27:02.926 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlObject:396 which is executed by 28 tests
88056
16:27:03.017 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:27:03.074 [pool-266-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (50 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a></a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:27:03.399 [pool-267-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (13 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a></a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a></a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:27:03.401 [pool-268-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:27:03.401 [pool-265-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a></a]>>]
16:27:03.401 [pool-265-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:27:03.401 [pool-265-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Xml$XmlObject:396.
16:27:03.401 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:27:03.459 [pool-270-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (52 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a></a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:27:03.804 [pool-271-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (13 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a></a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a></a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:27:03.805 [pool-272-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:27:03.806 [pool-269-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a></a]>>]
16:27:03.806 [pool-269-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:27:03.806 [pool-269-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Xml$XmlObject:396.
16:27:03.806 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #86
16:27:03.806 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlObject:395 which is executed by 28 tests
88056
16:27:03.893 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:27:03.948 [pool-274-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (49 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
  </a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:27:04.270 [pool-275-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (13 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
  </a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
  </a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:27:04.271 [pool-276-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:27:04.271 [pool-273-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
  </a]>>]
16:27:04.271 [pool-273-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:27:04.271 [pool-273-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Xml$XmlObject:395.
16:27:04.271 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #87
16:27:04.271 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlObject:394 which is executed by 28 tests
88056
16:27:04.365 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:27:04.425 [pool-278-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (53 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:27:04.748 [pool-279-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (13 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:27:04.749 [pool-280-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:27:04.749 [pool-277-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a]>>]
16:27:04.749 [pool-277-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:27:04.749 [pool-277-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Xml$XmlObject:394.
16:27:04.749 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:27:04.804 [pool-282-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (49 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:27:05.130 [pool-283-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (13 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:27:05.131 [pool-284-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:27:05.131 [pool-281-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a]>>]
16:27:05.131 [pool-281-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:27:05.132 [pool-281-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Xml$XmlObject:394.
16:27:05.132 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #88
16:27:05.132 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlObject:391 which is executed by 28 tests
88056
16:27:05.222 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:27:05.279 [pool-286-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (51 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>

</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:27:05.786 [pool-287-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (198 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>

</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>

</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:27:05.788 [pool-288-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:27:05.788 [pool-285-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>

</a]>>]
16:27:05.788 [pool-285-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:27:05.788 [pool-285-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Xml$XmlObject:391.
16:27:05.788 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #89
16:27:05.788 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlObject:387 which is executed by 28 tests
88056
16:27:05.892 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:27:05.949 [pool-290-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (50 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:27:06.287 [pool-291-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (12 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:27:06.288 [pool-292-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:27:06.289 [pool-289-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>  <a>0</a>
</a]>>]
16:27:06.289 [pool-289-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:27:06.289 [pool-289-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Xml$XmlObject:387.
16:27:06.289 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:27:06.344 [pool-294-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (50 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:27:06.668 [pool-295-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (12 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:27:06.670 [pool-296-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:27:06.670 [pool-293-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>  <a>0</a>
</a]>>]
16:27:06.670 [pool-293-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:27:06.670 [pool-293-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Xml$XmlObject:387.
16:27:06.670 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #90
16:27:06.670 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlObject:386 which is executed by 28 tests
88056
16:27:06.761 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #91
16:27:06.761 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlObject:385 which is executed by 28 tests
88056
16:27:06.853 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:27:06.909 [pool-298-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (50 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<... encoding="UTF-8"?>
[<root>
  <a>0</a>
</root]>> but was:<... encoding="UTF-8"?>
[
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:27:07.235 [pool-299-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (14 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<... encoding="UTF-8"?>
[<root>
  <a>0</a>
</root]>> but was:<... encoding="UTF-8"?>
[
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<... encoding="UTF-8"?>
[<root>
  <a>0</a>
</root]>> but was:<... encoding="UTF-8"?>
[
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:27:07.236 [pool-300-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:27:07.236 [pool-297-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<... encoding="UTF-8"?>
[<root>
  <a>0</a>
</root]>> but was:<... encoding="UTF-8"?>
[
  <a>0</a>
</a]>>]
16:27:07.236 [pool-297-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:27:07.236 [pool-297-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Xml$XmlObject:385.
16:27:07.236 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #92
16:27:07.236 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlObject:383 which is executed by 28 tests
88056
16:27:07.323 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:27:07.377 [pool-302-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (48 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:27:07.694 [pool-303-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (12 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:27:07.695 [pool-304-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:27:07.695 [pool-301-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:27:07.695 [pool-301-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:27:07.695 [pool-301-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Xml$XmlObject:383.
16:27:07.695 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #93
16:27:07.695 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlObject:382 which is executed by 28 tests
88056
16:27:07.782 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:27:07.839 [pool-306-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (51 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:27:08.160 [pool-307-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (13 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:27:08.161 [pool-308-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:27:08.162 [pool-305-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:27:08.162 [pool-305-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:27:08.162 [pool-305-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Xml$XmlObject:382.
16:27:08.162 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:27:08.216 [pool-310-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (48 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:27:08.535 [pool-311-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (13 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:27:08.536 [pool-312-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:27:08.536 [pool-309-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:27:08.536 [pool-309-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:27:08.536 [pool-309-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Xml$XmlObject:382.
16:27:08.536 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #94
16:27:08.536 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlObject:381 which is executed by 28 tests
88056
16:27:08.627 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:27:08.689 [pool-314-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (56 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<... encoding="UTF-8"?>
[<root>
  <a>0</a>
</root]>> but was:<... encoding="UTF-8"?>
[  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:27:09.008 [pool-315-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (12 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<... encoding="UTF-8"?>
[<root>
  <a>0</a>
</root]>> but was:<... encoding="UTF-8"?>
[  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<... encoding="UTF-8"?>
[<root>
  <a>0</a>
</root]>> but was:<... encoding="UTF-8"?>
[  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:27:09.009 [pool-316-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:27:09.010 [pool-313-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<... encoding="UTF-8"?>
[<root>
  <a>0</a>
</root]>> but was:<... encoding="UTF-8"?>
[  <a>0</a>
</a]>>]
16:27:09.010 [pool-313-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:27:09.010 [pool-313-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Xml$XmlObject:381.
16:27:09.010 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:27:09.065 [pool-318-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (50 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<... encoding="UTF-8"?>
[<root>
  <a>0</a>
</root]>> but was:<... encoding="UTF-8"?>
[  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:27:09.385 [pool-319-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (12 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<... encoding="UTF-8"?>
[<root>
  <a>0</a>
</root]>> but was:<... encoding="UTF-8"?>
[  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<... encoding="UTF-8"?>
[<root>
  <a>0</a>
</root]>> but was:<... encoding="UTF-8"?>
[  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:27:09.386 [pool-320-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:27:09.386 [pool-317-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<... encoding="UTF-8"?>
[<root>
  <a>0</a>
</root]>> but was:<... encoding="UTF-8"?>
[  <a>0</a>
</a]>>]
16:27:09.386 [pool-317-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:27:09.386 [pool-317-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Xml$XmlObject:381.
16:27:09.386 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #95
16:27:09.386 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlObject:368 which is executed by 28 tests
88056
16:27:09.480 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:27:09.534 [pool-322-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (48 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a></a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:27:09.852 [pool-323-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (12 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a></a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a></a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:27:09.854 [pool-324-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:27:09.854 [pool-321-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a></a]>>]
16:27:09.854 [pool-321-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:27:09.854 [pool-321-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Xml$XmlObject:368.
16:27:09.854 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:27:09.908 [pool-326-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (48 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:27:10.225 [pool-327-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (12 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a __EE__EMPTY__EE__="[0]"></a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:27:10.226 [pool-328-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a __EE__EMPTY__EE__="[0]"></a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a __EE__EMPTY__EE__="[0]"></a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:27:10.226 [pool-325-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:27:10.226 [pool-325-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a __EE__EMPTY__EE__="[0]"></a]>>]
16:27:10.226 [pool-325-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Xml$XmlObject:368.
16:27:10.226 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #96
16:27:10.227 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlObject:366 which is executed by 28 tests
88056
16:27:10.312 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #97
16:27:10.312 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlObject:365 which is executed by 28 tests
88056
16:27:10.400 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #98
16:27:10.401 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlObject:364 which is executed by 28 tests
88056
16:27:10.500 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:27:10.556 [pool-330-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (49 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a></a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:27:10.880 [pool-331-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (13 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a></a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a></a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:27:10.882 [pool-332-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:27:10.883 [pool-329-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a></a]>>]
16:27:10.883 [pool-329-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:27:10.883 [pool-329-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Xml$XmlObject:364.
16:27:10.883 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #99
16:27:10.883 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlObject:363 which is executed by 28 tests
88056
16:27:10.973 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #100
16:27:10.973 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlObject:362 which is executed by 28 tests
88056
16:27:11.062 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #101
16:27:11.062 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlObject:361 which is executed by 28 tests
88056
16:27:11.151 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #102
16:27:11.151 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlObject:360 which is executed by 28 tests
88056
16:27:11.238 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #103
16:27:11.239 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlObject:359 which is executed by 28 tests
88056
16:27:11.324 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #104
16:27:11.325 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlObject:354 which is executed by 28 tests
88056
16:27:11.413 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:27:11.467 [pool-334-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (48 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:27:11.787 [pool-335-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (13 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:27:11.788 [pool-336-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:27:11.788 [pool-333-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:27:11.788 [pool-333-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:27:11.788 [pool-333-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Xml$XmlObject:354.
16:27:11.788 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:27:11.844 [pool-338-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (50 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:27:12.165 [pool-339-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (12 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>null</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:27:12.167 [pool-340-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>null</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>null</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:27:12.167 [pool-337-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:27:12.167 [pool-337-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>null</a]>>]
16:27:12.167 [pool-337-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Xml$XmlObject:354.
16:27:12.167 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #105
16:27:12.167 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlStringBuilder:107 which is executed by 28 tests
88056
16:27:12.251 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #106
16:27:12.251 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlStringBuilder:103 which is executed by 28 tests
88056
16:27:12.335 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #107
16:27:12.335 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Json$JsonParser:598 which is executed by 28 tests
2318601
16:27:12.412 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #108
16:27:12.412 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlValue:491 which is executed by 30 tests
88056
16:27:12.500 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:27:12.555 [pool-342-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (49 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:27:12.870 [pool-343-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (12 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:27:12.872 [pool-344-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:27:12.872 [pool-341-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:27:12.872 [pool-341-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:27:12.872 [pool-341-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Xml$XmlValue:491.
16:27:12.872 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:27:12.929 [pool-346-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (51 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:27:13.247 [pool-347-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (12 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

java.lang.ClassCastException: java.lang.Long cannot be cast to java.util.Map
    at com.github.underscore.lodash.Xml$XmlValue.writeXml(Xml.java:504)
    at com.github.underscore.lodash.Xml$XmlArray.writeXml(Xml.java:167)
    at com.github.underscore.lodash.Xml$XmlArray.access$000(Xml.java:132)
    at com.github.underscore.lodash.Xml$XmlObject.addElements(Xml.java:430)
    at com.github.underscore.lodash.Xml$XmlObject.processElements(Xml.java:404)
    at com.github.underscore.lodash.Xml$XmlObject.writeXml(Xml.java:371)
16:27:13.249 [pool-348-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[java.lang.Long cannot be cast to java.util.Map]
java.lang.ClassCastException: java.lang.Long cannot be cast to java.util.Map    at com.github.underscore.lodash.Xml$XmlValue.writeXml(Xml.java:504)
    at com.github.underscore.lodash.Xml$XmlArray.writeXml(Xml.java:167)
    at com.github.underscore.lodash.Xml$XmlArray.access$000(Xml.java:132)
    at com.github.underscore.lodash.Xml$XmlObject.addElements(Xml.java:430)
    at com.github.underscore.lodash.Xml$XmlObject.processElements(Xml.java:404)
    at com.github.underscore.lodash.Xml$XmlObject.writeXml(Xml.java:371)

16:27:13.249 [pool-345-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:27:13.249 [pool-345-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): java.lang.Long cannot be cast to java.util.Map]
16:27:13.249 [pool-345-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Xml$XmlValue:491.
16:27:13.249 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #109
16:27:13.249 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlStringBuilderWithoutRoot:122 which is executed by 30 tests
88056
16:27:13.335 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #110
16:27:13.335 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlStringBuilder:92 which is executed by 30 tests
88056
16:27:13.419 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #111
16:27:13.419 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlStringBuilder:91 which is executed by 30 tests
88056
16:27:13.502 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:27:13.556 [pool-350-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (48 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
  </a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:27:13.866 [pool-351-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (13 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
  </a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
  </a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:27:13.867 [pool-352-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:27:13.867 [pool-349-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
  </a]>>]
16:27:13.867 [pool-349-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:27:13.867 [pool-349-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Xml$XmlStringBuilder:91.
16:27:13.867 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #112
16:27:13.867 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.U:1759 which is executed by 30 tests
86
16:27:14.075 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #113
16:27:14.076 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Json$JsonParser:595 which is executed by 30 tests
2318601
16:27:14.153 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:27:14.207 [pool-354-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (48 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

com.github.underscore.lodash.Json$ParseException: Expected ',' or '}' at 1:8
    at com.github.underscore.lodash.Json$JsonParser.error(Json.java:890)
    at com.github.underscore.lodash.Json$JsonParser.expected(Json.java:883)
    at com.github.underscore.lodash.Json$JsonParser.readObject(Json.java:662)
    at com.github.underscore.lodash.Json$JsonParser.readValue(Json.java:593)
    at com.github.underscore.lodash.Json$JsonParser.parse(Json.java:572)
    at com.github.underscore.lodash.Json.fromJson(Json.java:943)
16:27:14.578 [pool-355-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (9 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[Expected ',' or '}' at 1:8]
com.github.underscore.lodash.Json$ParseException: Expected ',' or '}' at 1:8    at com.github.underscore.lodash.Json$JsonParser.error(Json.java:890)
    at com.github.underscore.lodash.Json$JsonParser.expected(Json.java:883)
    at com.github.underscore.lodash.Json$JsonParser.readObject(Json.java:662)
    at com.github.underscore.lodash.Json$JsonParser.readValue(Json.java:593)
    at com.github.underscore.lodash.Json$JsonParser.parse(Json.java:572)
    at com.github.underscore.lodash.Json.fromJson(Json.java:943)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:27:14.583 [pool-356-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:27:14.583 [pool-353-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): Expected ',' or '}' at 1:8]
16:27:14.583 [pool-353-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:27:14.583 [pool-353-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Json$JsonParser:595.
16:27:14.583 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:27:14.637 [pool-358-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (48 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:27:15.009 [pool-359-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (12 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

com.github.underscore.lodash.Json$ParseException: Expected ',' or ']' at 1:9
    at com.github.underscore.lodash.Json$JsonParser.error(Json.java:890)
    at com.github.underscore.lodash.Json$JsonParser.expected(Json.java:883)
    at com.github.underscore.lodash.Json$JsonParser.readArray(Json.java:638)
    at com.github.underscore.lodash.Json$JsonParser.readValue(Json.java:591)
    at com.github.underscore.lodash.Json$JsonParser.readObject(Json.java:658)
    at com.github.underscore.lodash.Json$JsonParser.readValue(Json.java:593)
16:27:15.010 [pool-360-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[Expected ',' or ']' at 1:9]
com.github.underscore.lodash.Json$ParseException: Expected ',' or ']' at 1:9    at com.github.underscore.lodash.Json$JsonParser.error(Json.java:890)
    at com.github.underscore.lodash.Json$JsonParser.expected(Json.java:883)
    at com.github.underscore.lodash.Json$JsonParser.readArray(Json.java:638)
    at com.github.underscore.lodash.Json$JsonParser.readValue(Json.java:591)
    at com.github.underscore.lodash.Json$JsonParser.readObject(Json.java:658)
    at com.github.underscore.lodash.Json$JsonParser.readValue(Json.java:593)

16:27:15.010 [pool-357-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:27:15.010 [pool-357-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): Expected ',' or ']' at 1:9]
16:27:15.010 [pool-357-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Json$JsonParser:595.
16:27:15.010 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #114
16:27:15.010 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Json$JsonParser:594 which is executed by 30 tests
2318601
16:27:15.087 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #115
16:27:15.088 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Json$JsonParser:593 which is executed by 30 tests
2318601
16:27:15.164 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:27:15.218 [pool-362-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (48 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:27:15.585 [pool-363-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (12 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:27:15.586 [pool-364-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:27:15.586 [pool-361-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:27:15.586 [pool-361-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:27:15.586 [pool-361-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Json$JsonParser:593.
16:27:15.586 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #116
16:27:15.586 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlValue:602 which is executed by 31 tests
88056
16:27:15.673 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #117
16:27:15.673 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlValue:591 which is executed by 31 tests
88056
16:27:15.760 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:27:15.814 [pool-366-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (48 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:27:16.138 [pool-367-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (13 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:27:16.139 [pool-368-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:27:16.139 [pool-365-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:27:16.139 [pool-365-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:27:16.139 [pool-365-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Xml$XmlValue:591.
16:27:16.140 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #118
16:27:16.140 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlValue:587 which is executed by 31 tests
88056
16:27:16.227 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:27:16.281 [pool-370-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (48 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[>
  <>0</>
</]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:27:16.599 [pool-371-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (13 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[>
  <>0</>
</]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[>
  <>0</>
</]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:27:16.600 [pool-372-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:27:16.600 [pool-369-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[>
  <>0</>
</]>>]
16:27:16.600 [pool-369-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:27:16.600 [pool-369-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Xml$XmlValue:587.
16:27:16.600 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #119
16:27:16.600 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlValue:586 which is executed by 31 tests
88056
16:27:16.687 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:27:16.741 [pool-374-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (48 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[>
  <>0</>
</]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:27:17.070 [pool-375-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (12 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[>
  <>0</>
</]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[>
  <>0</>
</]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:27:17.072 [pool-376-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:27:17.072 [pool-373-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[>
  <>0</>
</]>>]
16:27:17.072 [pool-373-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:27:17.072 [pool-373-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Xml$XmlValue:586.
16:27:17.072 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:27:17.126 [pool-378-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (49 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[__ME__>
  <__ME__>0</__ME__>
</__ME__]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:27:17.440 [pool-379-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (13 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[__ME__>
  <__ME__>0</__ME__>
</__ME__]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[__ME__>
  <__ME__>0</__ME__>
</__ME__]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:27:17.441 [pool-380-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:27:17.442 [pool-377-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[__ME__>
  <__ME__>0</__ME__>
</__ME__]>>]
16:27:17.442 [pool-377-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:27:17.442 [pool-377-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Xml$XmlValue:586.
16:27:17.442 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #120
16:27:17.442 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlValue:585 which is executed by 31 tests
88056
16:27:17.529 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #121
16:27:17.530 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlValue:584 which is executed by 31 tests
88056
16:27:17.617 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #122
16:27:17.617 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlValue:581 which is executed by 32 tests
88056
16:27:17.703 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:27:17.760 [pool-382-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (50 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:27:18.074 [pool-383-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (13 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:27:18.075 [pool-384-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:27:18.075 [pool-381-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:27:18.075 [pool-381-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:27:18.075 [pool-381-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Xml$XmlValue:581.
16:27:18.076 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:27:18.131 [pool-386-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (49 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:27:18.445 [pool-387-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (12 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[__EE__EMPTY__EE__>
  <__EE__EMPTY__EE__>0</__EE__EMPTY__EE__>
</__EE__EMPTY__EE__]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:27:18.447 [pool-388-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[__EE__EMPTY__EE__>
  <__EE__EMPTY__EE__>0</__EE__EMPTY__EE__>
</__EE__EMPTY__EE__]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[__EE__EMPTY__EE__>
  <__EE__EMPTY__EE__>0</__EE__EMPTY__EE__>
</__EE__EMPTY__EE__]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:27:18.447 [pool-385-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:27:18.447 [pool-385-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[__EE__EMPTY__EE__>
  <__EE__EMPTY__EE__>0</__EE__EMPTY__EE__>
</__EE__EMPTY__EE__]>>]
16:27:18.447 [pool-385-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Xml$XmlValue:581.
16:27:18.447 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #123
16:27:18.447 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlValue:580 which is executed by 32 tests
88056
16:27:18.534 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #124
16:27:18.534 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlStringBuilder$Step:53 which is executed by 32 tests
88056
16:27:18.618 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #125
16:27:18.618 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlStringBuilder:87 which is executed by 32 tests
88056
16:27:18.701 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #126
16:27:18.701 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlStringBuilder:86 which is executed by 32 tests
88056
16:27:18.784 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:27:18.838 [pool-390-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (48 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:27:19.142 [pool-391-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (12 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:27:19.143 [pool-392-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:27:19.143 [pool-389-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:27:19.143 [pool-389-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:27:19.143 [pool-389-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Xml$XmlStringBuilder:86.
16:27:19.143 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #127
16:27:19.143 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Json$JsonParser:794 which is executed by 34 tests
2318601
16:27:19.222 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:27:19.278 [pool-394-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (49 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

java.lang.OutOfMemoryError: Java heap space
    at java.util.Arrays.copyOf(Arrays.java:3181)
    at java.util.ArrayList.grow(ArrayList.java:265)
    at java.util.ArrayList.ensureExplicitCapacity(ArrayList.java:239)
    at java.util.ArrayList.ensureCapacityInternal(ArrayList.java:231)
    at java.util.ArrayList.add(ArrayList.java:462)
    at fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(AngelicExecution.java:16)
16:30:18.005 [pool-395-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (178375 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[Java heap space]
java.lang.OutOfMemoryError: Java heap space    at java.util.Arrays.copyOf(Arrays.java:3181)
    at java.util.ArrayList.grow(ArrayList.java:265)
    at java.util.ArrayList.ensureExplicitCapacity(ArrayList.java:239)
    at java.util.ArrayList.ensureCapacityInternal(ArrayList.java:231)
    at java.util.ArrayList.add(ArrayList.java:462)
    at fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(AngelicExecution.java:16)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:30:19.039 [pool-396-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1031 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:30:19.039 [pool-393-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): Java heap space]
16:30:19.039 [pool-393-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:30:19.040 [pool-393-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Json$JsonParser:794.
16:30:19.040 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #128
16:30:19.040 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlStringBuilder:80 which is executed by 35 tests
88056
16:30:19.154 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:30:19.214 [pool-398-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (52 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
<a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:30:19.538 [pool-399-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (12 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
<a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
<a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:30:19.539 [pool-400-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:30:19.539 [pool-397-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
<a>0</a>
</a]>>]
16:30:19.539 [pool-397-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:30:19.539 [pool-397-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Xml$XmlStringBuilder:80.
16:30:19.539 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #129
16:30:19.539 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlStringBuilder:99 which is executed by 36 tests
88056
16:30:19.623 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #130
16:30:19.624 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlStringBuilder:97 which is executed by 36 tests
88056
16:30:19.709 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:30:19.766 [pool-402-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (51 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>  <a>0</a></a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:30:20.146 [pool-403-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (12 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>  <a>0</a></a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>  <a>0</a></a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:30:20.147 [pool-404-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:30:20.147 [pool-401-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>  <a>0</a></a]>>]
16:30:20.147 [pool-401-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:30:20.147 [pool-401-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Xml$XmlStringBuilder:97.
16:30:20.147 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #131
16:30:20.147 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlStringBuilder:96 which is executed by 36 tests
88056
16:30:20.232 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:30:20.288 [pool-406-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (50 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>  <a>0</a></a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:30:20.593 [pool-407-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (12 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>  <a>0</a></a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>  <a>0</a></a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:30:20.594 [pool-408-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:30:20.595 [pool-405-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>  <a>0</a></a]>>]
16:30:20.595 [pool-405-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:30:20.595 [pool-405-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Xml$XmlStringBuilder:96.
16:30:20.595 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:30:20.651 [pool-410-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (49 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>  <a>0</a></a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:30:20.956 [pool-411-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (12 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>  <a>0</a></a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>  <a>0</a></a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:30:20.958 [pool-412-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:30:20.958 [pool-409-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>  <a>0</a></a]>>]
16:30:20.958 [pool-409-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:30:20.958 [pool-409-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Xml$XmlStringBuilder:96.
16:30:20.958 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #132
16:30:20.958 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.U:2504 which is executed by 36 tests
86
16:30:21.464 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #133
16:30:21.464 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.U:2497 which is executed by 36 tests
86
16:30:21.876 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:30:21.935 [pool-414-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (53 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:30:27.552 [pool-415-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (12 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:30:27.553 [pool-416-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:30:27.553 [pool-413-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:30:27.554 [pool-413-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:30:27.554 [pool-413-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.U:2497.
16:30:27.554 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #134
16:30:27.554 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.U:2496 which is executed by 36 tests
86
16:30:27.937 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #135
16:30:27.937 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.U:2495 which is executed by 36 tests
86
16:30:28.328 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #136
16:30:28.328 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Json$JsonParser:592 which is executed by 36 tests
2318601
16:30:28.407 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:30:28.462 [pool-418-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (48 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

com.github.underscore.lodash.Json$ParseException: Expected ',' or ']' at 1:7
    at com.github.underscore.lodash.Json$JsonParser.error(Json.java:891)
    at com.github.underscore.lodash.Json$JsonParser.expected(Json.java:884)
    at com.github.underscore.lodash.Json$JsonParser.readArray(Json.java:639)
    at com.github.underscore.lodash.Json$JsonParser.readValue(Json.java:591)
    at com.github.underscore.lodash.Json$JsonParser.readObject(Json.java:659)
    at com.github.underscore.lodash.Json$JsonParser.readValue(Json.java:593)
16:30:28.853 [pool-419-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (9 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[Expected ',' or ']' at 1:7]
com.github.underscore.lodash.Json$ParseException: Expected ',' or ']' at 1:7    at com.github.underscore.lodash.Json$JsonParser.error(Json.java:891)
    at com.github.underscore.lodash.Json$JsonParser.expected(Json.java:884)
    at com.github.underscore.lodash.Json$JsonParser.readArray(Json.java:639)
    at com.github.underscore.lodash.Json$JsonParser.readValue(Json.java:591)
    at com.github.underscore.lodash.Json$JsonParser.readObject(Json.java:659)
    at com.github.underscore.lodash.Json$JsonParser.readValue(Json.java:593)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:30:28.858 [pool-420-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:30:28.858 [pool-417-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): Expected ',' or ']' at 1:7]
16:30:28.858 [pool-417-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:30:28.858 [pool-417-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Json$JsonParser:592.
16:30:28.858 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #137
16:30:28.858 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Json$JsonParser:591 which is executed by 36 tests
2318601
16:30:28.937 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:30:28.994 [pool-422-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (49 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:30:29.379 [pool-423-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (13 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:30:29.380 [pool-424-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:30:29.381 [pool-421-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:30:29.381 [pool-421-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:30:29.381 [pool-421-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Json$JsonParser:591.
16:30:29.381 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #138
16:30:29.381 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.U:2891 which is executed by 37 tests
86
16:30:29.756 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #139
16:30:29.756 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Json$JsonParser:622 which is executed by 38 tests
2318601
16:30:29.833 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #140
16:30:29.834 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Json$JsonParser:619 which is executed by 39 tests
2318601
16:30:29.912 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:30:29.971 [pool-426-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (52 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

com.github.underscore.lodash.Json$ParseException: Unexpected character at 1:9
    at com.github.underscore.lodash.Json$JsonParser.error(Json.java:890)
    at com.github.underscore.lodash.Json$JsonParser.parse(Json.java:575)
    at com.github.underscore.lodash.Json.fromJson(Json.java:943)
    at com.github.underscore.lodash.U.fromJson(U.java:1807)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1976)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
16:30:30.347 [pool-427-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (10 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[Unexpected character at 1:9]
com.github.underscore.lodash.Json$ParseException: Unexpected character at 1:9    at com.github.underscore.lodash.Json$JsonParser.error(Json.java:890)
    at com.github.underscore.lodash.Json$JsonParser.parse(Json.java:575)
    at com.github.underscore.lodash.Json.fromJson(Json.java:943)
    at com.github.underscore.lodash.U.fromJson(U.java:1807)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1976)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:30:30.352 [pool-428-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:30:30.352 [pool-425-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): Unexpected character at 1:9]
16:30:30.352 [pool-425-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:30:30.352 [pool-425-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Json$JsonParser:619.
16:30:30.352 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:30:30.412 [pool-430-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (53 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:30:30.800 [pool-431-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (13 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

com.github.underscore.lodash.Json$ParseException: Unexpected end of input at 1:9
    at com.github.underscore.lodash.Json$JsonParser.error(Json.java:890)
    at com.github.underscore.lodash.Json$JsonParser.expected(Json.java:881)
    at com.github.underscore.lodash.Json$JsonParser.readObject(Json.java:662)
    at com.github.underscore.lodash.Json$JsonParser.readValue(Json.java:593)
    at com.github.underscore.lodash.Json$JsonParser.parse(Json.java:572)
    at com.github.underscore.lodash.Json.fromJson(Json.java:943)
16:30:30.802 [pool-432-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[Unexpected end of input at 1:9]
com.github.underscore.lodash.Json$ParseException: Unexpected end of input at 1:9    at com.github.underscore.lodash.Json$JsonParser.error(Json.java:890)
    at com.github.underscore.lodash.Json$JsonParser.expected(Json.java:881)
    at com.github.underscore.lodash.Json$JsonParser.readObject(Json.java:662)
    at com.github.underscore.lodash.Json$JsonParser.readValue(Json.java:593)
    at com.github.underscore.lodash.Json$JsonParser.parse(Json.java:572)
    at com.github.underscore.lodash.Json.fromJson(Json.java:943)

16:30:30.802 [pool-429-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:30:30.802 [pool-429-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): Unexpected end of input at 1:9]
16:30:30.802 [pool-429-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Json$JsonParser:619.
16:30:30.802 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #141
16:30:30.802 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Json$JsonParser:618 which is executed by 39 tests
2318601
16:30:30.882 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #142
16:30:30.883 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Json$JsonParser:617 which is executed by 39 tests
2318601
16:30:30.968 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:30:31.028 [pool-434-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (53 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:30:31.410 [pool-435-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (13 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:30:31.411 [pool-436-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:30:31.412 [pool-433-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:30:31.412 [pool-433-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:30:31.412 [pool-433-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Json$JsonParser:617.
16:30:31.412 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #143
16:30:31.412 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Json$JsonParser:616 which is executed by 39 tests
2318601
16:30:31.491 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:30:31.550 [pool-438-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (53 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

com.github.underscore.lodash.Json$ParseException: Expected ',' or '}' at 1:6
    at com.github.underscore.lodash.Json$JsonParser.error(Json.java:892)
    at com.github.underscore.lodash.Json$JsonParser.expected(Json.java:885)
    at com.github.underscore.lodash.Json$JsonParser.readObject(Json.java:664)
    at com.github.underscore.lodash.Json$JsonParser.readValue(Json.java:593)
    at com.github.underscore.lodash.Json$JsonParser.parse(Json.java:572)
    at com.github.underscore.lodash.Json.fromJson(Json.java:945)
16:30:31.936 [pool-439-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (9 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[Expected ',' or '}' at 1:6]
com.github.underscore.lodash.Json$ParseException: Expected ',' or '}' at 1:6    at com.github.underscore.lodash.Json$JsonParser.error(Json.java:892)
    at com.github.underscore.lodash.Json$JsonParser.expected(Json.java:885)
    at com.github.underscore.lodash.Json$JsonParser.readObject(Json.java:664)
    at com.github.underscore.lodash.Json$JsonParser.readValue(Json.java:593)
    at com.github.underscore.lodash.Json$JsonParser.parse(Json.java:572)
    at com.github.underscore.lodash.Json.fromJson(Json.java:945)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:30:31.941 [pool-440-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:30:31.942 [pool-437-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): Expected ',' or '}' at 1:6]
16:30:31.942 [pool-437-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:30:31.942 [pool-437-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Json$JsonParser:616.
16:30:31.942 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #144
16:30:31.942 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Json$JsonParser:615 which is executed by 39 tests
2318601
16:30:32.020 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:30:32.077 [pool-442-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (51 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

com.github.underscore.lodash.Json$ParseException: Expected value at 1:5
    at com.github.underscore.lodash.Json$JsonParser.error(Json.java:892)
    at com.github.underscore.lodash.Json$JsonParser.expected(Json.java:885)
    at com.github.underscore.lodash.Json$JsonParser.readValue(Json.java:607)
    at com.github.underscore.lodash.Json$JsonParser.readObject(Json.java:660)
    at com.github.underscore.lodash.Json$JsonParser.readValue(Json.java:593)
    at com.github.underscore.lodash.Json$JsonParser.parse(Json.java:572)
16:30:32.460 [pool-443-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (10 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[Expected value at 1:5]
com.github.underscore.lodash.Json$ParseException: Expected value at 1:5    at com.github.underscore.lodash.Json$JsonParser.error(Json.java:892)
    at com.github.underscore.lodash.Json$JsonParser.expected(Json.java:885)
    at com.github.underscore.lodash.Json$JsonParser.readValue(Json.java:607)
    at com.github.underscore.lodash.Json$JsonParser.readObject(Json.java:660)
    at com.github.underscore.lodash.Json$JsonParser.readValue(Json.java:593)
    at com.github.underscore.lodash.Json$JsonParser.parse(Json.java:572)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:30:32.465 [pool-444-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:30:32.465 [pool-441-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): Expected value at 1:5]
16:30:32.465 [pool-441-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:30:32.465 [pool-441-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Json$JsonParser:615.
16:30:32.465 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #145
16:30:32.465 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlStringBuilder:82 which is executed by 40 tests
88056
16:30:32.553 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #146
16:30:32.553 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlStringBuilder:79 which is executed by 40 tests
88056
16:30:32.641 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:30:32.700 [pool-446-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (52 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
<a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:30:33.029 [pool-447-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (13 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
<a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
<a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:30:33.030 [pool-448-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:30:33.030 [pool-445-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
<a>0</a>
</a]>>]
16:30:33.030 [pool-445-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:30:33.030 [pool-445-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Xml$XmlStringBuilder:79.
16:30:33.030 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #147
16:30:33.031 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlStringBuilder:75 which is executed by 40 tests
88056
16:30:33.116 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #148
16:30:33.117 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Xml$XmlStringBuilder:74 which is executed by 40 tests
88056
16:30:33.203 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:30:33.262 [pool-450-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (52 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<... encoding="UTF-8"?>
[<root>
  <a>0</a>
</root>]> but was:<... encoding="UTF-8"?>
[

]>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:30:33.598 [pool-451-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (13 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<... encoding="UTF-8"?>
[<root>
  <a>0</a>
</root>]> but was:<... encoding="UTF-8"?>
[

]>]
org.junit.ComparisonFailure: expected:<... encoding="UTF-8"?>
[<root>
  <a>0</a>
</root>]> but was:<... encoding="UTF-8"?>
[

]>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:30:33.599 [pool-452-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:30:33.599 [pool-449-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<... encoding="UTF-8"?>
[<root>
  <a>0</a>
</root>]> but was:<... encoding="UTF-8"?>
[

]>]
16:30:33.599 [pool-449-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:30:33.600 [pool-449-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Xml$XmlStringBuilder:74.
16:30:33.600 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #149
16:30:33.600 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Json$JsonParser:629 which is executed by 40 tests
2318601
16:30:33.677 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #150
16:30:33.678 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Json$JsonParser:612 which is executed by 40 tests
2318601
16:30:33.754 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:30:33.810 [pool-454-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (49 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

com.github.underscore.lodash.Json$ParseException: Expected value at 1:4
    at com.github.underscore.lodash.Json$JsonParser.error(Json.java:891)
    at com.github.underscore.lodash.Json$JsonParser.expected(Json.java:884)
    at com.github.underscore.lodash.Json$JsonParser.readValue(Json.java:607)
    at com.github.underscore.lodash.Json$JsonParser.readObject(Json.java:659)
    at com.github.underscore.lodash.Json$JsonParser.readValue(Json.java:593)
    at com.github.underscore.lodash.Json$JsonParser.parse(Json.java:572)
16:30:34.178 [pool-455-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (10 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[Expected value at 1:4]
com.github.underscore.lodash.Json$ParseException: Expected value at 1:4    at com.github.underscore.lodash.Json$JsonParser.error(Json.java:891)
    at com.github.underscore.lodash.Json$JsonParser.expected(Json.java:884)
    at com.github.underscore.lodash.Json$JsonParser.readValue(Json.java:607)
    at com.github.underscore.lodash.Json$JsonParser.readObject(Json.java:659)
    at com.github.underscore.lodash.Json$JsonParser.readValue(Json.java:593)
    at com.github.underscore.lodash.Json$JsonParser.parse(Json.java:572)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:30:34.183 [pool-456-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:30:34.183 [pool-453-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): Expected value at 1:4]
16:30:34.183 [pool-453-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:30:34.183 [pool-453-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Json$JsonParser:612.
16:30:34.183 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:30:34.242 [pool-458-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (53 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:30:34.629 [pool-459-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (14 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

com.github.underscore.lodash.Json$ParseException: Expected ':' at 1:5
    at com.github.underscore.lodash.Json$JsonParser.error(Json.java:891)
    at com.github.underscore.lodash.Json$JsonParser.expected(Json.java:884)
    at com.github.underscore.lodash.Json$JsonParser.readObject(Json.java:656)
    at com.github.underscore.lodash.Json$JsonParser.readValue(Json.java:593)
    at com.github.underscore.lodash.Json$JsonParser.parse(Json.java:572)
    at com.github.underscore.lodash.Json.fromJson(Json.java:944)
16:30:34.630 [pool-460-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[Expected ':' at 1:5]
com.github.underscore.lodash.Json$ParseException: Expected ':' at 1:5    at com.github.underscore.lodash.Json$JsonParser.error(Json.java:891)
    at com.github.underscore.lodash.Json$JsonParser.expected(Json.java:884)
    at com.github.underscore.lodash.Json$JsonParser.readObject(Json.java:656)
    at com.github.underscore.lodash.Json$JsonParser.readValue(Json.java:593)
    at com.github.underscore.lodash.Json$JsonParser.parse(Json.java:572)
    at com.github.underscore.lodash.Json.fromJson(Json.java:944)

16:30:34.630 [pool-457-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:30:34.630 [pool-457-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): Expected ':' at 1:5]
16:30:34.630 [pool-457-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Json$JsonParser:612.
16:30:34.630 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #151
16:30:34.631 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Json$JsonParser:611 which is executed by 40 tests
2318601
16:30:34.707 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:30:34.762 [pool-462-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (49 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:30:35.127 [pool-463-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (12 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:30:35.128 [pool-464-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:30:35.129 [pool-461-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:30:35.129 [pool-461-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:30:35.129 [pool-461-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Json$JsonParser:611.
16:30:35.129 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #152
16:30:35.129 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Json$JsonParser:587 which is executed by 40 tests
2318601
16:30:35.205 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:30:35.260 [pool-466-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (48 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:30:35.632 [pool-467-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (12 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:30:35.634 [pool-468-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:30:35.634 [pool-465-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:30:35.634 [pool-465-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:30:35.634 [pool-465-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Json$JsonParser:587.
16:30:35.634 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:30:35.690 [pool-470-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (48 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:30:36.059 [pool-471-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (13 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

com.github.underscore.lodash.Json$ParseException: Expected ',' or '}' at 1:7
    at com.github.underscore.lodash.Json$JsonParser.error(Json.java:890)
    at com.github.underscore.lodash.Json$JsonParser.expected(Json.java:883)
    at com.github.underscore.lodash.Json$JsonParser.readObject(Json.java:662)
    at com.github.underscore.lodash.Json$JsonParser.readValue(Json.java:593)
    at com.github.underscore.lodash.Json$JsonParser.parse(Json.java:572)
    at com.github.underscore.lodash.Json.fromJson(Json.java:943)
16:30:36.060 [pool-472-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[Expected ',' or '}' at 1:7]
com.github.underscore.lodash.Json$ParseException: Expected ',' or '}' at 1:7    at com.github.underscore.lodash.Json$JsonParser.error(Json.java:890)
    at com.github.underscore.lodash.Json$JsonParser.expected(Json.java:883)
    at com.github.underscore.lodash.Json$JsonParser.readObject(Json.java:662)
    at com.github.underscore.lodash.Json$JsonParser.readValue(Json.java:593)
    at com.github.underscore.lodash.Json$JsonParser.parse(Json.java:572)
    at com.github.underscore.lodash.Json.fromJson(Json.java:943)

16:30:36.060 [pool-469-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:30:36.060 [pool-469-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): Expected ',' or '}' at 1:7]
16:30:36.060 [pool-469-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Json$JsonParser:587.
16:30:36.060 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #153
16:30:36.060 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Json$JsonParser:586 which is executed by 40 tests
2318601
16:30:36.136 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:30:36.190 [pool-474-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (48 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:30:36.561 [pool-475-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (12 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:30:36.562 [pool-476-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:30:36.562 [pool-473-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:30:36.562 [pool-473-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:30:36.562 [pool-473-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Json$JsonParser:586.
16:30:36.562 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #154
16:30:36.562 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Json$JsonParser:585 which is executed by 40 tests
2318601
16:30:36.649 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #155
16:30:36.649 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Json$JsonParser:584 which is executed by 40 tests
2318601
16:30:36.727 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:30:36.785 [pool-478-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (51 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

java.lang.StackOverflowError
    at com.github.underscore.lodash.Json$JsonParser.readArray(Json.java:617)
    at com.github.underscore.lodash.Json$JsonParser.readValue(Json.java:591)
    at com.github.underscore.lodash.Json$JsonParser.readArray(Json.java:634)
    at com.github.underscore.lodash.Json$JsonParser.readValue(Json.java:591)
    at com.github.underscore.lodash.Json$JsonParser.readArray(Json.java:634)
    at com.github.underscore.lodash.Json$JsonParser.readValue(Json.java:591)
16:30:37.163 [pool-479-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (20 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[null]
java.lang.StackOverflowError    at com.github.underscore.lodash.Json$JsonParser.readArray(Json.java:617)
    at com.github.underscore.lodash.Json$JsonParser.readValue(Json.java:591)
    at com.github.underscore.lodash.Json$JsonParser.readArray(Json.java:634)
    at com.github.underscore.lodash.Json$JsonParser.readValue(Json.java:591)
    at com.github.underscore.lodash.Json$JsonParser.readArray(Json.java:634)
    at com.github.underscore.lodash.Json$JsonParser.readValue(Json.java:591)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:30:37.168 [pool-480-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:30:37.169 [pool-477-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): null]
16:30:37.169 [pool-477-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:30:37.169 [pool-477-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Json$JsonParser:584.
16:30:37.169 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #156
16:30:37.169 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Json$JsonParser:563 which is executed by 40 tests
2318601
16:30:37.247 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #157
16:30:37.247 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.U:1999 which is executed by 41 tests
86
16:30:37.623 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #158
16:30:37.623 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.U:1998 which is executed by 41 tests
86
16:30:37.978 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #159
16:30:37.978 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Json$JsonParser:626 which is executed by 41 tests
2318601
16:30:38.059 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:30:38.113 [pool-482-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (47 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:30:38.493 [pool-483-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (13 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:30:38.494 [pool-484-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:30:38.495 [pool-481-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:30:38.495 [pool-481-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:30:38.495 [pool-481-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Json$JsonParser:626.
16:30:38.495 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:30:38.556 [pool-486-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (52 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:30:38.926 [pool-487-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (13 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

com.github.underscore.lodash.Json$ParseException: Expected name at 1:1
    at com.github.underscore.lodash.Json$JsonParser.error(Json.java:890)
    at com.github.underscore.lodash.Json$JsonParser.expected(Json.java:883)
    at com.github.underscore.lodash.Json$JsonParser.readName(Json.java:669)
    at com.github.underscore.lodash.Json$JsonParser.readObject(Json.java:638)
    at com.github.underscore.lodash.Json$JsonParser.readValue(Json.java:593)
    at com.github.underscore.lodash.Json$JsonParser.parse(Json.java:572)
16:30:38.927 [pool-488-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[Expected name at 1:1]
com.github.underscore.lodash.Json$ParseException: Expected name at 1:1    at com.github.underscore.lodash.Json$JsonParser.error(Json.java:890)
    at com.github.underscore.lodash.Json$JsonParser.expected(Json.java:883)
    at com.github.underscore.lodash.Json$JsonParser.readName(Json.java:669)
    at com.github.underscore.lodash.Json$JsonParser.readObject(Json.java:638)
    at com.github.underscore.lodash.Json$JsonParser.readValue(Json.java:593)
    at com.github.underscore.lodash.Json$JsonParser.parse(Json.java:572)

16:30:38.927 [pool-485-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:30:38.927 [pool-485-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): Expected name at 1:1]
16:30:38.928 [pool-485-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Json$JsonParser:626.
16:30:38.928 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #160
16:30:38.928 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Json$JsonParser:610 which is executed by 41 tests
2318601
16:30:39.006 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #161
16:30:39.006 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Json$JsonParser:609 which is executed by 41 tests
2318601
16:30:39.083 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:30:39.139 [pool-490-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (50 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:30:39.513 [pool-491-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (12 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:30:39.515 [pool-492-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:30:39.515 [pool-489-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:30:39.515 [pool-489-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:30:39.515 [pool-489-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Json$JsonParser:609.
16:30:39.515 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #162
16:30:39.515 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Json$JsonParser:605 which is executed by 42 tests
2318601
16:30:39.593 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:30:39.652 [pool-494-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (51 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:30:40.022 [pool-495-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (12 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:30:40.024 [pool-496-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:30:40.024 [pool-493-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:30:40.024 [pool-493-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:30:40.024 [pool-493-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Json$JsonParser:605.
16:30:40.024 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:30:40.078 [pool-498-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (49 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:30:40.450 [pool-499-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (13 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

com.github.underscore.lodash.Json$ParseException: Unexpected character at 1:1
    at com.github.underscore.lodash.Json$JsonParser.error(Json.java:890)
    at com.github.underscore.lodash.Json$JsonParser.parse(Json.java:575)
    at com.github.underscore.lodash.Json.fromJson(Json.java:943)
    at com.github.underscore.lodash.U.fromJson(U.java:1807)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1976)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
16:30:40.451 [pool-500-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[Unexpected character at 1:1]
com.github.underscore.lodash.Json$ParseException: Unexpected character at 1:1    at com.github.underscore.lodash.Json$JsonParser.error(Json.java:890)
    at com.github.underscore.lodash.Json$JsonParser.parse(Json.java:575)
    at com.github.underscore.lodash.Json.fromJson(Json.java:943)
    at com.github.underscore.lodash.U.fromJson(U.java:1807)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1976)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

16:30:40.451 [pool-497-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:30:40.451 [pool-497-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): Unexpected character at 1:1]
16:30:40.451 [pool-497-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Json$JsonParser:605.
16:30:40.451 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #163
16:30:40.451 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Json$JsonParser:604 which is executed by 42 tests
2318601
16:30:40.528 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:30:40.583 [pool-502-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (49 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:30:40.953 [pool-503-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (13 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:30:40.955 [pool-504-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:30:40.955 [pool-501-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:30:40.955 [pool-501-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:30:40.955 [pool-501-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Json$JsonParser:604.
16:30:40.955 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #164
16:30:40.955 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Json$JsonParser:603 which is executed by 42 tests
2318601
16:30:41.032 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #165
16:30:41.032 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Json$JsonParser:602 which is executed by 42 tests
2318601
16:30:41.110 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:30:41.165 [pool-506-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (49 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

com.github.underscore.lodash.Json$ParseException: Expected name at 1:0
    at com.github.underscore.lodash.Json$JsonParser.error(Json.java:890)
    at com.github.underscore.lodash.Json$JsonParser.expected(Json.java:883)
    at com.github.underscore.lodash.Json$JsonParser.readName(Json.java:669)
    at com.github.underscore.lodash.Json$JsonParser.readObject(Json.java:652)
    at com.github.underscore.lodash.Json$JsonParser.readValue(Json.java:593)
    at com.github.underscore.lodash.Json$JsonParser.parse(Json.java:572)
16:30:41.528 [pool-507-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (10 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[Expected name at 1:0]
com.github.underscore.lodash.Json$ParseException: Expected name at 1:0    at com.github.underscore.lodash.Json$JsonParser.error(Json.java:890)
    at com.github.underscore.lodash.Json$JsonParser.expected(Json.java:883)
    at com.github.underscore.lodash.Json$JsonParser.readName(Json.java:669)
    at com.github.underscore.lodash.Json$JsonParser.readObject(Json.java:652)
    at com.github.underscore.lodash.Json$JsonParser.readValue(Json.java:593)
    at com.github.underscore.lodash.Json$JsonParser.parse(Json.java:572)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:30:41.532 [pool-508-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:30:41.533 [pool-505-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): Expected name at 1:0]
16:30:41.533 [pool-505-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:30:41.533 [pool-505-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Json$JsonParser:602.
16:30:41.533 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #166
16:30:41.533 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Json$JsonParser:565 which is executed by 42 tests
2318601
16:30:41.610 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #167
16:30:41.610 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Json$JsonParser:830 which is executed by 46 tests
2318601
16:30:41.694 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:30:41.749 [pool-510-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (49 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:30:42.100 [pool-509-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Json.java:877: error: variable captured might not have been initialized
            return captured;
                   ^
16:30:42.311 [pool-509-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public final class Json {
    private static final java.lang.String NULL = "null";

    public static class JsonStringBuilder {
        public enum Step {

            TWO_SPACES(2),
            THREE_SPACES(3),
            FOUR_SPACES(4),
            COMPACT(0),
            TABS(1);
            private final int ident;

            Step(int ident) {
                this.ident = ident;
            }

            public int getIdent() {
                return ident;
            }
        }

        public enum Type {

            PURE("", "\n", "", "\""),
            JAVA("\"", "\\n\"\n + \"", "\";", "\\\"");
            private final java.lang.String initial;

            private final java.lang.String newLine;

            private final java.lang.String tailLine;

            private final java.lang.String wrapLine;

            Type(java.lang.String initial, java.lang.String newLine, java.lang.String tailLine, java.lang.String wrapLine) {
                this.initial = initial;
                this.newLine = newLine;
                this.tailLine = tailLine;
                this.wrapLine = wrapLine;
            }

            public java.lang.String getInitial() {
                return initial;
            }

            public java.lang.String getNewLine() {
                return newLine;
            }

            public java.lang.String getTailLine() {
                return tailLine;
            }

            public java.lang.String getWrapLine() {
                return wrapLine;
            }
        }

        private final java.lang.StringBuilder builder;

        private final com.github.underscore.lodash.Json.JsonStringBuilder.Step identStep;

        private final com.github.underscore.lodash.Json.JsonStringBuilder.Type type;

        private int ident;

        public JsonStringBuilder(com.github.underscore.lodash.Json.JsonStringBuilder.Step identStep) {
            builder = new java.lang.StringBuilder(com.github.underscore.lodash.Json.JsonStringBuilder.Type.PURE.getInitial());
            this.identStep = identStep;
            this.type = com.github.underscore.lodash.Json.JsonStringBuilder.Type.PURE;
        }

        public JsonStringBuilder(com.github.underscore.lodash.Json.JsonStringBuilder.Type type) {
            builder = new java.lang.StringBuilder(type.getInitial());
            this.identStep = com.github.underscore.lodash.Json.JsonStringBuilder.Step.TWO_SPACES;
            this.type = type;
        }

        public JsonStringBuilder() {
            builder = new java.lang.StringBuilder();
            this.identStep = com.github.underscore.lodash.Json.JsonStringBuilder.Step.TWO_SPACES;
            this.type = com.github.underscore.lodash.Json.JsonStringBuilder.Type.PURE;
        }

        public com.github.underscore.lodash.Json.JsonStringBuilder append(final char character) {
            builder.append(character);
            return this;
        }

        public com.github.underscore.lodash.Json.JsonStringBuilder append(final java.lang.String string) {
            builder.append(string);
            return this;
        }

        public com.github.underscore.lodash.Json.JsonStringBuilder fillSpaces() {
            for (int index = 0; index < (ident); index += 1) {
                builder.append(((identStep) == (com.github.underscore.lodash.Json.JsonStringBuilder.Step.TABS) ? '\t' : ' '));
            }
            return this;
        }

        public com.github.underscore.lodash.Json.JsonStringBuilder incIdent() {
            ident += identStep.getIdent();
            return this;
        }

        public com.github.underscore.lodash.Json.JsonStringBuilder decIdent() {
            ident -= identStep.getIdent();
            return this;
        }

        public com.github.underscore.lodash.Json.JsonStringBuilder newLine() {
            if ((identStep) != (com.github.underscore.lodash.Json.JsonStringBuilder.Step.COMPACT)) {
                builder.append(type.getNewLine());
            }
            return this;
        }

        public com.github.underscore.lodash.Json.JsonStringBuilder.Step getIdentStep() {
            return identStep;
        }

        public java.lang.String toString() {
            return (builder.toString()) + (type.getTailLine());
        }
    }

    public static class JsonArray {
        public static void writeJson(java.util.Collection collection, com.github.underscore.lodash.Json.JsonStringBuilder builder) {
            if (collection == null) {
                builder.append(com.github.underscore.lodash.Json.NULL);
                return;
            }
            java.util.Iterator iter = collection.iterator();
            builder.append('[').incIdent();
            if (!(collection.isEmpty())) {
                builder.newLine();
            }
            while (iter.hasNext()) {
                java.lang.Object value = iter.next();
                if (value == null) {
                    builder.fillSpaces().append(com.github.underscore.lodash.Json.NULL);
                    continue;
                }
                builder.fillSpaces();
                com.github.underscore.lodash.Json.JsonValue.writeJson(value, builder);
                if (iter.hasNext()) {
                    builder.append(',').newLine();
                }
            } 
            builder.newLine().decIdent().fillSpaces().append(']');
        }

        public static void writeJson(byte[] array, com.github.underscore.lodash.Json.JsonStringBuilder builder) {
            if (array == null) {
                builder.append(com.github.underscore.lodash.Json.NULL);
            }else
                if ((array.length) == 0) {
                    builder.append("[]");
                }else {
                    builder.append('[').incIdent().newLine();
                    builder.fillSpaces().append(java.lang.String.valueOf(array[0]));
                    for (int i = 1; i < (array.length); i++) {
                        builder.append(',').newLine().fillSpaces();
                        builder.append(java.lang.String.valueOf(array[i]));
                    }
                    builder.newLine().decIdent().fillSpaces().append(']');
                }

        }

        public static void writeJson(short[] array, com.github.underscore.lodash.Json.JsonStringBuilder builder) {
            if (array == null) {
                builder.append(com.github.underscore.lodash.Json.NULL);
            }else
                if ((array.length) == 0) {
                    builder.append("[]");
                }else {
                    builder.append('[').incIdent().newLine();
                    builder.fillSpaces().append(java.lang.String.valueOf(array[0]));
                    for (int i = 1; i < (array.length); i++) {
                        builder.append(',').newLine().fillSpaces();
                        builder.append(java.lang.String.valueOf(array[i]));
                    }
                    builder.newLine().decIdent().fillSpaces().append(']');
                }

        }

        public static void writeJson(int[] array, com.github.underscore.lodash.Json.JsonStringBuilder builder) {
            if (array == null) {
                builder.append(com.github.underscore.lodash.Json.NULL);
            }else
                if ((array.length) == 0) {
                    builder.append("[]");
                }else {
                    builder.append('[').incIdent().newLine();
                    builder.fillSpaces().append(java.lang.String.valueOf(array[0]));
                    for (int i = 1; i < (array.length); i++) {
                        builder.append(',').newLine().fillSpaces();
                        builder.append(java.lang.String.valueOf(array[i]));
                    }
                    builder.newLine().decIdent().fillSpaces().append(']');
                }

        }

        public static void writeJson(long[] array, com.github.underscore.lodash.Json.JsonStringBuilder builder) {
            if (array == null) {
                builder.append(com.github.underscore.lodash.Json.NULL);
            }else
                if ((array.length) == 0) {
                    builder.append("[]");
                }else {
                    builder.append('[').incIdent().newLine();
                    builder.fillSpaces().append(java.lang.String.valueOf(array[0]));
                    for (int i = 1; i < (array.length); i++) {
                        builder.append(',').newLine().fillSpaces();
                        builder.append(java.lang.String.valueOf(array[i]));
                    }
                    builder.newLine().decIdent().fillSpaces().append(']');
                }

        }

        public static void writeJson(float[] array, com.github.underscore.lodash.Json.JsonStringBuilder builder) {
            if (array == null) {
                builder.append(com.github.underscore.lodash.Json.NULL);
            }else
                if ((array.length) == 0) {
                    builder.append("[]");
                }else {
                    builder.append('[').incIdent().newLine();
                    builder.fillSpaces().append(java.lang.String.valueOf(array[0]));
                    for (int i = 1; i < (array.length); i++) {
                        builder.append(',').newLine().fillSpaces();
                        builder.append(java.lang.String.valueOf(array[i]));
                    }
                    builder.newLine().decIdent().fillSpaces().append(']');
                }

        }

        public static void writeJson(double[] array, com.github.underscore.lodash.Json.JsonStringBuilder builder) {
            if (array == null) {
                builder.append(com.github.underscore.lodash.Json.NULL);
            }else
                if ((array.length) == 0) {
                    builder.append("[]");
                }else {
                    builder.append('[').incIdent().newLine();
                    builder.fillSpaces().append(java.lang.String.valueOf(array[0]));
                    for (int i = 1; i < (array.length); i++) {
                        builder.append(',').newLine().fillSpaces();
                        builder.append(java.lang.String.valueOf(array[i]));
                    }
                    builder.newLine().decIdent().fillSpaces().append(']');
                }

        }

        public static void writeJson(boolean[] array, com.github.underscore.lodash.Json.JsonStringBuilder builder) {
            if (array == null) {
                builder.append(com.github.underscore.lodash.Json.NULL);
            }else
                if ((array.length) == 0) {
                    builder.append("[]");
                }else {
                    builder.append('[').incIdent().newLine();
                    builder.fillSpaces().append(java.lang.String.valueOf(array[0]));
                    for (int i = 1; i < (array.length); i++) {
                        builder.append(',').newLine().fillSpaces();
                        builder.append(java.lang.String.valueOf(array[i]));
                    }
                    builder.newLine().decIdent().fillSpaces().append(']');
                }

        }

        public static void writeJson(char[] array, com.github.underscore.lodash.Json.JsonStringBuilder builder) {
            if (array == null) {
                builder.append(com.github.underscore.lodash.Json.NULL);
            }else
                if ((array.length) == 0) {
                    builder.append("[]");
                }else {
                    builder.append('[').incIdent().newLine();
                    builder.fillSpaces().append('\"').append(java.lang.String.valueOf(array[0])).append('\"');
                    for (int i = 1; i < (array.length); i++) {
                        builder.append(',').newLine().fillSpaces();
                        builder.append('\"').append(java.lang.String.valueOf(array[i])).append('\"');
                    }
                    builder.newLine().decIdent().fillSpaces().append(']');
                }

        }

        public static void writeJson(java.lang.Object[] array, com.github.underscore.lodash.Json.JsonStringBuilder builder) {
            if (array == null) {
                builder.append(com.github.underscore.lodash.Json.NULL);
            }else
                if ((array.length) == 0) {
                    builder.append("[]");
                }else {
                    builder.append('[').newLine().incIdent().fillSpaces();
                    com.github.underscore.lodash.Json.JsonValue.writeJson(array[0], builder);
                    for (int i = 1; i < (array.length); i++) {
                        builder.append(',').newLine().fillSpaces();
                        com.github.underscore.lodash.Json.JsonValue.writeJson(array[i], builder);
                    }
                    builder.newLine().decIdent().fillSpaces().append(']');
                }

        }
    }

    public static class JsonObject {
        public static void writeJson(java.util.Map map, com.github.underscore.lodash.Json.JsonStringBuilder builder) {
            if (map == null) {
                builder.append(com.github.underscore.lodash.Json.NULL);
                return;
            }
            java.util.Iterator iter = map.entrySet().iterator();
            builder.append('{').incIdent();
            if (!(map.isEmpty())) {
                builder.newLine();
            }
            while (iter.hasNext()) {
                java.util.Map.Entry entry = ((java.util.Map.Entry) (iter.next()));
                builder.fillSpaces().append(builder.type.getWrapLine());
                builder.append(com.github.underscore.lodash.Json.JsonValue.unescapeName(java.lang.String.valueOf(entry.getKey())));
                builder.append(builder.type.getWrapLine());
                builder.append(':');
                if ((builder.getIdentStep()) != (com.github.underscore.lodash.Json.JsonStringBuilder.Step.COMPACT)) {
                    builder.append(' ');
                }
                com.github.underscore.lodash.Json.JsonValue.writeJson(entry.getValue(), builder);
                if (iter.hasNext()) {
                    builder.append(',').newLine();
                }
            } 
            builder.newLine().decIdent().fillSpaces().append('}');
        }
    }

    public static class JsonValue {
        public static void writeJson(java.lang.Object value, com.github.underscore.lodash.Json.JsonStringBuilder builder) {
            if (value == null) {
                builder.append(com.github.underscore.lodash.Json.NULL);
            }else
                if (value instanceof java.lang.String) {
                    builder.append(builder.type.getWrapLine()).append(com.github.underscore.lodash.Json.JsonValue.escape(((java.lang.String) (value)))).append(builder.type.getWrapLine());
                }else
                    if (value instanceof java.lang.Double) {
                        if ((((java.lang.Double) (value)).isInfinite()) || (((java.lang.Double) (value)).isNaN())) {
                            builder.append(com.github.underscore.lodash.Json.NULL);
                        }else {
                            builder.append(value.toString());
                        }
                    }else
                        if (value instanceof java.lang.Float) {
                            if ((((java.lang.Float) (value)).isInfinite()) || (((java.lang.Float) (value)).isNaN())) {
                                builder.append(com.github.underscore.lodash.Json.NULL);
                            }else {
                                builder.append(value.toString());
                            }
                        }else
                            if (value instanceof java.lang.Number) {
                                builder.append(value.toString());
                            }else
                                if (value instanceof java.lang.Boolean) {
                                    builder.append(value.toString());
                                }else
                                    if (value instanceof java.util.Map) {
                                        com.github.underscore.lodash.Json.JsonObject.writeJson(((java.util.Map) (value)), builder);
                                    }else
                                        if (value instanceof java.util.Collection) {
                                            com.github.underscore.lodash.Json.JsonArray.writeJson(((java.util.Collection) (value)), builder);
                                        }else
                                            if (value instanceof byte[]) {
                                                com.github.underscore.lodash.Json.JsonArray.writeJson(((byte[]) (value)), builder);
                                            }else
                                                if (value instanceof short[]) {
                                                    com.github.underscore.lodash.Json.JsonArray.writeJson(((short[]) (value)), builder);
                                                }else
                                                    if (value instanceof int[]) {
                                                        com.github.underscore.lodash.Json.JsonArray.writeJson(((int[]) (value)), builder);
                                                    }else
                                                        if (value instanceof long[]) {
                                                            com.github.underscore.lodash.Json.JsonArray.writeJson(((long[]) (value)), builder);
                                                        }else
                                                            if (value instanceof float[]) {
                                                                com.github.underscore.lodash.Json.JsonArray.writeJson(((float[]) (value)), builder);
                                                            }else
                                                                if (value instanceof double[]) {
                                                                    com.github.underscore.lodash.Json.JsonArray.writeJson(((double[]) (value)), builder);
                                                                }else
                                                                    if (value instanceof boolean[]) {
                                                                        com.github.underscore.lodash.Json.JsonArray.writeJson(((boolean[]) (value)), builder);
                                                                    }else
                                                                        if (value instanceof char[]) {
                                                                            com.github.underscore.lodash.Json.JsonArray.writeJson(((char[]) (value)), builder);
                                                                        }else
                                                                            if (value instanceof java.lang.Object[]) {
                                                                                com.github.underscore.lodash.Json.JsonArray.writeJson(((java.lang.Object[]) (value)), builder);
                                                                            }else {
                                                                                builder.append(value.toString());
                                                                            }
















        }

        public static java.lang.String unescapeName(final java.lang.String name) {
            final int length = name.length();
            if ((length == 0) || ("__EE__EMPTY__EE__".equals(name))) {
                return "";
            }
            if ("-__EE__EMPTY__EE__".equals(name)) {
                return "-";
            }
            java.lang.StringBuilder result = new java.lang.StringBuilder();
            int underlineCount = 0;
            java.lang.StringBuilder lastChars = new java.lang.StringBuilder();
            outer : for (int i = 0; i < length; ++i) {
                char ch = name.charAt(i);
                if (ch == '_') {
                    lastChars.append(ch);
                }else {
                    if ((lastChars.length()) == 2) {
                        java.lang.StringBuilder nameToDecode = new java.lang.StringBuilder();
                        for (int j = i; j < length; ++j) {
                            if ((name.charAt(j)) == '_') {
                                underlineCount += 1;
                                if (underlineCount == 2) {
                                    result.append(com.github.underscore.lodash.Json.JsonValue.escape(com.github.underscore.lodash.Base32.decode(nameToDecode.toString())));
                                    i = j;
                                    underlineCount = 0;
                                    lastChars.setLength(0);
                                    continue outer;
                                }
                            }else {
                                nameToDecode.append(name.charAt(j));
                                underlineCount = 0;
                            }
                        }
                    }
                    result.append(lastChars).append(ch);
                    lastChars.setLength(0);
                }
            }
            return result.append(lastChars).toString();
        }

        public static java.lang.String escape(java.lang.String s) {
            if (s == null) {
                return null;
            }
            java.lang.StringBuilder sb = new java.lang.StringBuilder();
            com.github.underscore.lodash.Json.JsonValue.escape(s, sb);
            return sb.toString();
        }

        private static void escape(java.lang.String s, java.lang.StringBuilder sb) {
            final int len = s.length();
            for (int i = 0; i < len; i++) {
                char ch = s.charAt(i);
                switch (ch) {
                    case '"' :
                        sb.append("\\\"");
                        break;
                    case '\\' :
                        sb.append("\\\\");
                        break;
                    case '\b' :
                        sb.append("\\b");
                        break;
                    case '\f' :
                        sb.append("\\f");
                        break;
                    case '\n' :
                        sb.append("\\n");
                        break;
                    case '\r' :
                        sb.append("\\r");
                        break;
                    case '\t' :
                        sb.append("\\t");
                        break;
                    default :
                        if (((ch <= '\u001f') || ((ch >= '\u007f') && (ch <= '\u009f'))) || ((ch >= '\u2000') && (ch <= '\u20ff'))) {
                            java.lang.String ss = java.lang.Integer.toHexString(ch);
                            sb.append("\\u");
                            for (int k = 0; k < (4 - (ss.length())); k++) {
                                sb.append('0');
                            }
                            sb.append(ss.toUpperCase());
                        }else {
                            sb.append(ch);
                        }
                        break;
                }
            }
        }
    }

    public static class ParseException extends java.lang.RuntimeException {
        private final int offset;

        private final int line;

        private final int column;

        public ParseException(java.lang.String message, int offset, int line, int column) {
            super(((((message + " at ") + line) + ":") + column));
            this.offset = offset;
            this.line = line;
            this.column = column;
        }

        public int getOffset() {
            return offset;
        }

        public int getLine() {
            return line;
        }

        public int getColumn() {
            return column;
        }
    }

    public static class JsonParser {
        private final java.lang.String json;

        private int index;

        private int line;

        private int lineOffset;

        private int current;

        private java.lang.StringBuilder captureBuffer;

        private int captureStart;

        public JsonParser(java.lang.String string) {
            this.json = string;
            line = 1;
            captureStart = -1;
        }

        public java.lang.Object parse() {
            read();
            skipWhiteSpace();
            final java.lang.Object result = readValue();
            skipWhiteSpace();
            if (!(isEndOfText())) {
                throw error("Unexpected character");
            }
            return result;
        }

        private java.lang.Object readValue() {
            switch (current) {
                case 'n' :
                    return readNull();
                case 't' :
                    return readTrue();
                case 'f' :
                    return readFalse();
                case '"' :
                    return readString();
                case '[' :
                    return readArray();
                case '{' :
                    return readObject();
                case '-' :
                case '0' :
                case '1' :
                case '2' :
                case '3' :
                case '4' :
                case '5' :
                case '6' :
                case '7' :
                case '8' :
                case '9' :
                    return readNumber();
                default :
                    throw expected("value");
            }
        }

        private java.util.List<java.lang.Object> readArray() {
            read();
            java.util.List<java.lang.Object> array = com.github.underscore.lodash.U.newArrayList();
            skipWhiteSpace();
            if (readChar(']')) {
                return array;
            }
            do {
                skipWhiteSpace();
                array.add(readValue());
                skipWhiteSpace();
            } while (readChar(',') );
            if (!(readChar(']'))) {
                throw expected("',' or ']'");
            }
            return array;
        }

        private java.util.Map<java.lang.String, java.lang.Object> readObject() {
            read();
            java.util.Map<java.lang.String, java.lang.Object> object = com.github.underscore.lodash.U.newLinkedHashMap();
            skipWhiteSpace();
            if (readChar('}')) {
                return object;
            }
            do {
                skipWhiteSpace();
                java.lang.String name = readName();
                skipWhiteSpace();
                if (!(readChar(':'))) {
                    throw expected("':'");
                }
                skipWhiteSpace();
                object.put(name, readValue());
                skipWhiteSpace();
            } while (readChar(',') );
            if (!(readChar('}'))) {
                throw expected("',' or '}'");
            }
            return object;
        }

        private java.lang.String readName() {
            if ((current) != '"') {
                throw expected("name");
            }
            return readString();
        }

        private java.lang.String readNull() {
            read();
            readRequiredChar('u');
            readRequiredChar('l');
            readRequiredChar('l');
            return null;
        }

        private java.lang.Boolean readTrue() {
            read();
            readRequiredChar('r');
            readRequiredChar('u');
            readRequiredChar('e');
            return java.lang.Boolean.TRUE;
        }

        private java.lang.Boolean readFalse() {
            read();
            readRequiredChar('a');
            readRequiredChar('l');
            readRequiredChar('s');
            readRequiredChar('e');
            return java.lang.Boolean.FALSE;
        }

        private void readRequiredChar(char ch) {
            if (!(readChar(ch))) {
                throw expected((("'" + ch) + "'"));
            }
        }

        private java.lang.String readString() {
            read();
            startCapture();
            while ((current) != '"') {
                if ((current) == '\\') {
                    pauseCapture();
                    readEscape();
                    startCapture();
                }else
                    if ((current) < 32) {
                        throw expected("valid string character");
                    }else {
                        read();
                    }

            } 
            java.lang.String string = endCapture();
            read();
            return string;
        }

        private void readEscape() {
            read();
            switch (current) {
                case '"' :
                case '/' :
                case '\\' :
                    captureBuffer.append(((char) (current)));
                    break;
                case 'b' :
                    captureBuffer.append('\b');
                    break;
                case 'f' :
                    captureBuffer.append('\f');
                    break;
                case 'n' :
                    captureBuffer.append('\n');
                    break;
                case 'r' :
                    captureBuffer.append('\r');
                    break;
                case 't' :
                    captureBuffer.append('\t');
                    break;
                case 'u' :
                    char[] hexChars = new char[4];
                    boolean isHexCharsDigits = true;
                    for (int i = 0; i < 4; i++) {
                        read();
                        if (!(isHexDigit())) {
                            isHexCharsDigits = false;
                        }
                        hexChars[i] = ((char) (current));
                    }
                    if (isHexCharsDigits) {
                        captureBuffer.append(((char) (java.lang.Integer.parseInt(new java.lang.String(hexChars), 16))));
                    }else {
                        captureBuffer.append("\\u").append(hexChars[0]).append(hexChars[1]).append(hexChars[2]).append(hexChars[3]);
                    }
                    break;
                default :
                    throw expected("valid escape sequence");
            }
            read();
        }

        private java.lang.Number readNumber() {
            startCapture();
            readChar('-');
            int firstDigit = current;
            if (!(readDigit())) {
                throw expected("digit");
            }
            if (firstDigit != '0') {
                while (readDigit()) {
                } 
            }
            readFraction();
            readExponent();
            final java.lang.String number = endCapture();
            if (((number.contains(".")) || (number.contains("e"))) || (number.contains("E"))) {
                return java.lang.Double.valueOf(number);
            }else {
                return java.lang.Long.valueOf(number);
            }
        }

        private boolean readFraction() {
            if (!(readChar('.'))) {
                return false;
            }
            if (!(readDigit())) {
                throw expected("digit");
            }
            while (readDigit()) {
            } 
            return true;
        }

        private boolean readExponent() {
            if ((!(readChar('e'))) && (!(readChar('E')))) {
                return false;
            }
            if (!(readChar('+'))) {
                readChar('-');
            }
            if (!(readDigit())) {
                throw expected("digit");
            }
            while (readDigit()) {
            } 
            return true;
        }

        private boolean readChar(char ch) {
            if ((current) != ch) {
                return false;
            }
            read();
            return true;
        }

        private boolean readDigit() {
            if (!(isDigit())) {
                return false;
            }
            read();
            return true;
        }

        private void skipWhiteSpace() {
            while (isWhiteSpace()) {
                read();
            } 
        }

        private void read() {
            if ((index) == (json.length())) {
                current = -1;
                return;
            }
            if ((current) == '\n') {
                (line)++;
                lineOffset = index;
            }
            current = json.charAt(((index)++));
        }

        private void startCapture() {
            if ((captureBuffer) == null) {
                captureBuffer = new java.lang.StringBuilder();
            }
            captureStart = (index) - 1;
        }

        private void pauseCapture() {
            captureBuffer.append(json.substring(captureStart, ((index) - 1)));
            captureStart = -1;
        }

        private java.lang.String endCapture() {
            int end = ((current) == (-1)) ? index : (index) - 1;
            java.lang.String captured;
            if ((captureBuffer.length()) > 0) {
                captureBuffer.append(json.substring(captureStart, end));
                captured = captureBuffer.toString();
                captureBuffer.setLength(0);
            }else {
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(139).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectInput("end",end);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectInput("com.github.underscore.lodash.Json.NULL",com.github.underscore.lodash.Json.NULL);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectionEnds();
                }
                if (runtimeAngelicValue)
                    captured = json.substring(captureStart, end);

            }
            captureStart = -1;
            return captured;
        }

        private com.github.underscore.lodash.Json.ParseException expected(java.lang.String expected) {
            if (isEndOfText()) {
                return error("Unexpected end of input");
            }
            return error(("Expected " + expected));
        }

        private com.github.underscore.lodash.Json.ParseException error(java.lang.String message) {
            int absIndex = index;
            int column = absIndex - (lineOffset);
            int offset = (isEndOfText()) ? absIndex : absIndex - 1;
            return new com.github.underscore.lodash.Json.ParseException(message, offset, line, (column - 1));
        }

        private boolean isWhiteSpace() {
            return ((((current) == ' ') || ((current) == '\t')) || ((current) == '\n')) || ((current) == '\r');
        }

        private boolean isDigit() {
            return ((current) >= '0') && ((current) <= '9');
        }

        private boolean isHexDigit() {
            return ((isDigit()) || (((current) >= 'a') && ((current) <= 'f'))) || (((current) >= 'A') && ((current) <= 'F'));
        }

        private boolean isEndOfText() {
            return (current) == (-1);
        }
    }

    public static java.lang.String toJson(java.util.Collection collection, com.github.underscore.lodash.Json.JsonStringBuilder.Step identStep) {
        final com.github.underscore.lodash.Json.JsonStringBuilder builder = new com.github.underscore.lodash.Json.JsonStringBuilder(identStep);
        com.github.underscore.lodash.Json.JsonArray.writeJson(collection, builder);
        return builder.toString();
    }

    public static java.lang.String toJson(java.util.Collection collection) {
        return com.github.underscore.lodash.Json.toJson(collection, com.github.underscore.lodash.Json.JsonStringBuilder.Step.TWO_SPACES);
    }

    public static java.lang.String toJson(java.util.Map map, com.github.underscore.lodash.Json.JsonStringBuilder.Step identStep) {
        final com.github.underscore.lodash.Json.JsonStringBuilder builder = new com.github.underscore.lodash.Json.JsonStringBuilder(identStep);
        com.github.underscore.lodash.Json.JsonObject.writeJson(map, builder);
        return builder.toString();
    }

    public static java.lang.String toJson(java.util.Map map) {
        return com.github.underscore.lodash.Json.toJson(map, com.github.underscore.lodash.Json.JsonStringBuilder.Step.TWO_SPACES);
    }

    public static java.lang.String toJsonJavaString(java.util.Collection collection) {
        final com.github.underscore.lodash.Json.JsonStringBuilder builder = new com.github.underscore.lodash.Json.JsonStringBuilder(com.github.underscore.lodash.Json.JsonStringBuilder.Type.JAVA);
        com.github.underscore.lodash.Json.JsonArray.writeJson(collection, builder);
        return builder.toString();
    }

    public static java.lang.String toJsonJavaString(java.util.Map map) {
        final com.github.underscore.lodash.Json.JsonStringBuilder builder = new com.github.underscore.lodash.Json.JsonStringBuilder(com.github.underscore.lodash.Json.JsonStringBuilder.Type.JAVA);
        com.github.underscore.lodash.Json.JsonObject.writeJson(map, builder);
        return builder.toString();
    }

    public static java.lang.Object fromJson(java.lang.String string) {
        return new com.github.underscore.lodash.Json.JsonParser(string).parse();
    }

    @java.lang.SuppressWarnings("unchecked")
    public static java.lang.String formatJson(java.lang.String json, com.github.underscore.lodash.Json.JsonStringBuilder.Step identStep) {
        java.lang.Object result = com.github.underscore.lodash.Json.fromJson(json);
        if (result instanceof java.util.Map) {
            return com.github.underscore.lodash.Json.toJson(((java.util.Map) (result)), identStep);
        }
        return com.github.underscore.lodash.Json.toJson(((java.util.List) (result)), identStep);
    }

    public static java.lang.String formatJson(java.lang.String json) {
        return com.github.underscore.lodash.Json.formatJson(json, com.github.underscore.lodash.Json.JsonStringBuilder.Step.THREE_SPACES);
    }
}
16:30:42.312 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
16:30:42.312 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #168
16:30:42.312 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.U:1754 which is executed by 47 tests
86
16:30:42.499 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #169
16:30:42.499 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Json$JsonParser:549 which is executed by 48 tests
2318601
16:30:42.575 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #170
16:30:42.575 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Json$JsonParser:546 which is executed by 49 tests
2318601
16:30:42.651 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:30:42.707 [pool-512-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (50 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:30:43.077 [pool-513-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (13 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:30:43.078 [pool-514-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:30:43.079 [pool-511-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:30:43.079 [pool-511-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:30:43.079 [pool-511-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Json$JsonParser:546.
16:30:43.079 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:30:43.134 [pool-516-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (49 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:30:43.500 [pool-517-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (13 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

com.github.underscore.lodash.Json$ParseException: Unexpected character at 1:9
    at com.github.underscore.lodash.Json$JsonParser.error(Json.java:889)
    at com.github.underscore.lodash.Json$JsonParser.parse(Json.java:588)
    at com.github.underscore.lodash.Json.fromJson(Json.java:942)
    at com.github.underscore.lodash.U.fromJson(U.java:1807)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1976)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
16:30:43.501 [pool-518-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[Unexpected character at 1:9]
com.github.underscore.lodash.Json$ParseException: Unexpected character at 1:9    at com.github.underscore.lodash.Json$JsonParser.error(Json.java:889)
    at com.github.underscore.lodash.Json$JsonParser.parse(Json.java:588)
    at com.github.underscore.lodash.Json.fromJson(Json.java:942)
    at com.github.underscore.lodash.U.fromJson(U.java:1807)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1976)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

16:30:43.501 [pool-515-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:30:43.501 [pool-515-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): Unexpected character at 1:9]
16:30:43.501 [pool-515-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Json$JsonParser:546.
16:30:43.501 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #171
16:30:43.501 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Json$JsonParser:545 which is executed by 49 tests
2318601
16:30:43.577 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:30:43.631 [pool-520-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (48 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:30:44.001 [pool-521-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (13 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:30:44.002 [pool-522-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:30:44.002 [pool-519-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:30:44.002 [pool-519-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:30:44.002 [pool-519-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Json$JsonParser:545.
16:30:44.002 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #172
16:30:44.002 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Json$JsonParser:801 which is executed by 50 tests
2318601
16:30:44.080 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:30:44.134 [pool-524-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (48 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

java.lang.StringIndexOutOfBoundsException: String index out of range: 10
    at java.lang.String.charAt(String.java:658)
    at com.github.underscore.lodash.Json$JsonParser.read(Json.java:850)
    at com.github.underscore.lodash.Json$JsonParser.readChar(Json.java:809)
    at com.github.underscore.lodash.Json$JsonParser.readObject(Json.java:647)
    at com.github.underscore.lodash.Json$JsonParser.readValue(Json.java:593)
    at com.github.underscore.lodash.Json$JsonParser.parse(Json.java:572)
16:30:44.497 [pool-525-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (9 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[String index out of range: 10]
java.lang.StringIndexOutOfBoundsException: String index out of range: 10    at java.lang.String.charAt(String.java:658)
    at com.github.underscore.lodash.Json$JsonParser.read(Json.java:850)
    at com.github.underscore.lodash.Json$JsonParser.readChar(Json.java:809)
    at com.github.underscore.lodash.Json$JsonParser.readObject(Json.java:647)
    at com.github.underscore.lodash.Json$JsonParser.readValue(Json.java:593)
    at com.github.underscore.lodash.Json$JsonParser.parse(Json.java:572)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:30:44.502 [pool-526-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:30:44.502 [pool-523-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): String index out of range: 10]
16:30:44.502 [pool-523-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:30:44.502 [pool-523-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Json$JsonParser:801.
16:30:44.502 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #173
16:30:44.502 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Json$JsonParser:800 which is executed by 50 tests
2318601
16:30:44.581 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:30:44.636 [pool-528-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (49 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

com.github.underscore.lodash.Json$ParseException: Unexpected character at 1:9
    at com.github.underscore.lodash.Json$JsonParser.error(Json.java:890)
    at com.github.underscore.lodash.Json$JsonParser.parse(Json.java:575)
    at com.github.underscore.lodash.Json.fromJson(Json.java:943)
    at com.github.underscore.lodash.U.fromJson(U.java:1807)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1976)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
16:30:44.997 [pool-529-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (9 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[Unexpected character at 1:9]
com.github.underscore.lodash.Json$ParseException: Unexpected character at 1:9    at com.github.underscore.lodash.Json$JsonParser.error(Json.java:890)
    at com.github.underscore.lodash.Json$JsonParser.parse(Json.java:575)
    at com.github.underscore.lodash.Json.fromJson(Json.java:943)
    at com.github.underscore.lodash.U.fromJson(U.java:1807)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1976)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:30:45.002 [pool-530-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:30:45.003 [pool-527-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): Unexpected character at 1:9]
16:30:45.003 [pool-527-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:30:45.003 [pool-527-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Json$JsonParser:800.
16:30:45.004 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #174
16:30:45.004 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Json$JsonParser:679 which is executed by 50 tests
2318601
16:30:45.081 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #175
16:30:45.082 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Json$JsonParser:678 which is executed by 50 tests
2318601
16:30:45.159 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:30:45.219 [pool-532-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (54 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

com.github.underscore.lodash.Json$ParseException: Expected ':' at 1:3
    at com.github.underscore.lodash.Json$JsonParser.error(Json.java:891)
    at com.github.underscore.lodash.Json$JsonParser.expected(Json.java:884)
    at com.github.underscore.lodash.Json$JsonParser.readObject(Json.java:641)
    at com.github.underscore.lodash.Json$JsonParser.readValue(Json.java:593)
    at com.github.underscore.lodash.Json$JsonParser.parse(Json.java:572)
    at com.github.underscore.lodash.Json.fromJson(Json.java:944)
16:30:45.603 [pool-533-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (9 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[Expected ':' at 1:3]
com.github.underscore.lodash.Json$ParseException: Expected ':' at 1:3    at com.github.underscore.lodash.Json$JsonParser.error(Json.java:891)
    at com.github.underscore.lodash.Json$JsonParser.expected(Json.java:884)
    at com.github.underscore.lodash.Json$JsonParser.readObject(Json.java:641)
    at com.github.underscore.lodash.Json$JsonParser.readValue(Json.java:593)
    at com.github.underscore.lodash.Json$JsonParser.parse(Json.java:572)
    at com.github.underscore.lodash.Json.fromJson(Json.java:944)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:30:45.608 [pool-534-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:30:45.608 [pool-531-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): Expected ':' at 1:3]
16:30:45.608 [pool-531-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:30:45.608 [pool-531-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Json$JsonParser:678.
16:30:45.608 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #176
16:30:45.608 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Json$JsonParser:677 which is executed by 50 tests
2318601
16:30:45.685 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #177
16:30:45.685 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Json$JsonParser:674 which is executed by 50 tests
2318601
16:30:45.762 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:30:45.816 [pool-536-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (48 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

java.lang.OutOfMemoryError: Java heap space
    at java.util.Arrays.copyOf(Arrays.java:3181)
    at java.util.ArrayList.grow(ArrayList.java:265)
    at java.util.ArrayList.ensureExplicitCapacity(ArrayList.java:239)
    at java.util.ArrayList.ensureCapacityInternal(ArrayList.java:231)
    at java.util.ArrayList.add(ArrayList.java:462)
    at fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(AngelicExecution.java:16)
16:31:41.537 [pool-537-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (55369 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[Java heap space]
java.lang.OutOfMemoryError: Java heap space    at java.util.Arrays.copyOf(Arrays.java:3181)
    at java.util.ArrayList.grow(ArrayList.java:265)
    at java.util.ArrayList.ensureExplicitCapacity(ArrayList.java:239)
    at java.util.ArrayList.ensureCapacityInternal(ArrayList.java:231)
    at java.util.ArrayList.add(ArrayList.java:462)
    at fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(AngelicExecution.java:16)

org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
16:31:42.336 [pool-538-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (797 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:31:42.336 [pool-535-thread-1] DEBUG tests.output - Failing tests with false: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): Java heap space]
16:31:42.336 [pool-535-thread-1] DEBUG tests.output - Failing tests with true: 
[toXmlFromJson21(com.github.underscore.lodash.StringTest): expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
16:31:42.336 [pool-535-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.github.underscore.lodash.Json$JsonParser:674.
16:31:42.336 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #178
16:31:42.336 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Json$JsonParser:671 which is executed by 50 tests
2318601
16:31:42.440 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Underscore-java is a java port of Underscore.js.

In addition to porting Underscore's functionality, Underscore-java includes matching unit tests.

For docs, license, tests, and downloads, see: http://javadev.github.io/underscore-java
16:31:42.498 [pool-540-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (52 ms)
<> Total tests run: 133
<> Ignored tests: 0
<> Failed tests: 1
~ toXmlFromJson21(com.github.underscore.lodash.StringTest)
[expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>]
org.junit.ComparisonFailure: expected:<...encoding="UTF-8"?>
<[root>
  <a>0</a>
</root]>> but was:<...encoding="UTF-8"?>
<[a>
  <a>0</a>
</a]>>    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at com.github.underscore.lodash.StringTest.toXmlFromJson21(StringTest.java:1972)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

16:36:04.351 [pool-539-thread-1] DEBUG xxl.java.junit.TestSuiteExecution - Timeout after 200 seconds. Infinite loop?
16:37:34.417 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.TimeoutException
16:37:56.979 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
16:41:05.559 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.OutOfMemoryError: Java heap space
16:41:32.839 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #179
16:41:32.839 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.github.underscore.lodash.Json$JsonParser:833 which is executed by 51 tests
17:33:48.879 [main] ERROR fr.inria.lille.repair.Main - Timeout: execution time > 60 MINUTES
java.util.concurrent.TimeoutException: null
	at java.util.concurrent.FutureTask.get(FutureTask.java:205) ~[na:1.8.0_181]
	at fr.inria.lille.repair.Main.main(Main.java:106) ~[nopol.jar:na]
TIMEOUT
Command exited with non-zero status 255
16038.05user 21.33system 1:09:19elapsed 386%CPU (0avgtext+0avgdata 4665264maxresident)k
49360inputs+17848outputs (5major+1684487minor)pagefaults 0swaps


Node: graphene-143.nancy.grid5000.fr



Date: Wed Dec 26 17:35:23 EST 2018

