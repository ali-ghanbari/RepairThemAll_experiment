cd /tmp/Nopol_Bears_raphw-byte-buddy_449069943-450332514;
export JAVA_TOOL_OPTIONS="-Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en";
TZ="America/New_York"; export TZ;
export PATH="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:$PATH";
export JAVA_HOME="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/";
time java -Xmx4g -Xms1g -cp /home/tdurieux/defects4j4repair/script/../repair_tools/nopol.jar:/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin//../lib/tools.jar fr.inria.lille.repair.Main \
	--mode repair \
	--type pre_then_cond \
	--oracle angelic \
	--synthesis smt \
	--flocal gzoltar \
	--json \
	--solver z3 \
	--solver-path /home/tdurieux/defects4j4repair/script/../libs/z3/build/z3 \
	--complianceLevel 8 \
	--source byte-buddy-dep/src/main/java \
	--classpath "byte-buddy-dep/target/classes:byte-buddy-dep/target/test-classes:/tmp/Nopol_Bears_raphw-byte-buddy_449069943-450332514/byte-buddy-agent/target/classes:/tmp/Nopol_Bears_raphw-byte-buddy_449069943-450332514/byte-buddy/target/classes:/tmp/Nopol_Bears_raphw-byte-buddy_449069943-450332514/byte-buddy-benchmark/target/classes:/tmp/Nopol_Bears_raphw-byte-buddy_449069943-450332514/byte-buddy-android/target/classes:/tmp/Nopol_Bears_raphw-byte-buddy_449069943-450332514/byte-buddy-maven-plugin/target/classes:/tmp/Nopol_Bears_raphw-byte-buddy_449069943-450332514/byte-buddy-gradle-plugin/target/classes:/home/tdurieux/.m2/repository/javax/inject/javax.inject/1/javax.inject-1.jar:/home/tdurieux/.m2/repository/xpp3/xpp3/1.1.4c/xpp3-1.1.4c.jar:/home/tdurieux/.m2/repository/org/apache/maven/maven-repository-metadata/3.2.5/maven-repository-metadata-3.2.5.jar:/home/tdurieux/.m2/repository/javax/annotation/jsr250-api/1.0/jsr250-api-1.0.jar:/home/tdurieux/.m2/repository/org/apache/httpcomponents/httpcore/4.0.1/httpcore-4.0.1.jar:/home/tdurieux/.m2/repository/org/khronos/opengl-api/gl1.1-android-2.1_r1/opengl-api-gl1.1-android-2.1_r1.jar:/home/tdurieux/.m2/repository/org/apache/maven/maven-core/3.2.5/maven-core-3.2.5.jar:/home/tdurieux/.m2/repository/org/codehaus/plexus/plexus-archiver/2.2/plexus-archiver-2.2.jar:/home/tdurieux/.m2/repository/com/jakewharton/android/repackaged/libcore-dex/2/libcore-dex-2.jar:/home/tdurieux/.m2/repository/com/google/guava/guava/16.0.1/guava-16.0.1.jar:/home/tdurieux/.m2/repository/org/codehaus/plexus/plexus-interpolation/1.21/plexus-interpolation-1.21.jar:/home/tdurieux/.m2/repository/org/apache/commons/commons-math3/3.2/commons-math3-3.2.jar:/home/tdurieux/.m2/repository/com/google/code/findbugs/findbugs-annotations/3.0.1/findbugs-annotations-3.0.1.jar:/home/tdurieux/.m2/repository/net/bytebuddy/byte-buddy-dep/1.9.4-SNAPSHOT/byte-buddy-dep-1.9.4-SNAPSHOT.jar:/home/tdurieux/.m2/repository/org/mockito/mockito-core/2.23.0/mockito-core-2.23.0.jar:/home/tdurieux/.m2/repository/org/codehaus/plexus/plexus-classworlds/2.5.2/plexus-classworlds-2.5.2.jar:/home/tdurieux/.m2/repository/org/apache/maven/maven-artifact/3.2.5/maven-artifact-3.2.5.jar:/home/tdurieux/.m2/repository/org/eclipse/aether/aether-util/1.1.0/aether-util-1.1.0.jar:/home/tdurieux/.m2/repository/org/openjdk/jmh/jmh-core/1.16/jmh-core-1.16.jar:/home/tdurieux/.m2/repository/org/eclipse/aether/aether-spi/1.0.0.v20140518/aether-spi-1.0.0.v20140518.jar:/home/tdurieux/.m2/repository/org/apache/httpcomponents/httpclient/4.0.1/httpclient-4.0.1.jar:/home/tdurieux/.m2/repository/com/google/android/android/4.1.1.4/android-4.1.1.4.jar:/home/tdurieux/.m2/repository/org/objenesis/objenesis/2.6/objenesis-2.6.jar:/home/tdurieux/.m2/repository/org/apache/maven/maven-model-builder/3.2.5/maven-model-builder-3.2.5.jar:/home/tdurieux/.m2/repository/org/apache/maven/maven-model/3.2.5/maven-model-3.2.5.jar:/home/tdurieux/.m2/repository/commons-io/commons-io/2.2/commons-io-2.2.jar:/home/tdurieux/.m2/repository/org/codehaus/plexus/plexus-utils/3.0.20/plexus-utils-3.0.20.jar:/home/tdurieux/.m2/repository/org/sonatype/plexus/plexus-cipher/1.4/plexus-cipher-1.4.jar:/home/tdurieux/.m2/repository/net/sf/jopt-simple/jopt-simple/4.6/jopt-simple-4.6.jar:/home/tdurieux/.m2/repository/commons-logging/commons-logging/1.1.1/commons-logging-1.1.1.jar:/home/tdurieux/.m2/repository/org/apache/maven/wagon/wagon-provider-api/2.8/wagon-provider-api-2.8.jar:/home/tdurieux/.m2/repository/xerces/xmlParserAPIs/2.6.2/xmlParserAPIs-2.6.2.jar:/home/tdurieux/.m2/repository/classworlds/classworlds/1.1-alpha-2/classworlds-1.1-alpha-2.jar:/home/tdurieux/.m2/repository/org/apache/maven/plugin-testing/maven-plugin-testing-harness/3.3.0/maven-plugin-testing-harness-3.3.0.jar:/home/tdurieux/.m2/repository/com/jakewharton/android/repackaged/dalvik-dx/1/dalvik-dx-1.jar:/home/tdurieux/.m2/repository/org/apache/maven/maven-plugin-api/3.2.5/maven-plugin-api-3.2.5.jar:/home/tdurieux/.m2/repository/org/codehaus/plexus/plexus-container-default/1.0-alpha-9-stable-1/plexus-container-default-1.0-alpha-9-stable-1.jar:/home/tdurieux/.m2/repository/com/kohlschutter/junixsocket/junixsocket-native-common/2.0.4/junixsocket-native-common-2.0.4.jar:/home/tdurieux/.m2/repository/org/eclipse/aether/aether-impl/1.0.0.v20140518/aether-impl-1.0.0.v20140518.jar:/home/tdurieux/.m2/repository/org/eclipse/sisu/org.eclipse.sisu.inject/0.3.0.M1/org.eclipse.sisu.inject-0.3.0.M1.jar:/home/tdurieux/.m2/repository/org/apache/maven/maven-compat/3.2.5/maven-compat-3.2.5.jar:/home/tdurieux/.m2/repository/net/bytebuddy/byte-buddy-agent/1.9.4-SNAPSHOT/byte-buddy-agent-1.9.4-SNAPSHOT.jar:/home/tdurieux/.m2/repository/net/bytebuddy/byte-buddy/1.9.4-SNAPSHOT/byte-buddy-1.9.4-SNAPSHOT.jar:/home/tdurieux/.m2/repository/org/sonatype/sisu/sisu-guice/3.2.3/sisu-guice-3.2.3-no_aop.jar:/home/tdurieux/.m2/repository/aopalliance/aopalliance/1.0/aopalliance-1.0.jar:/home/tdurieux/.m2/repository/org/eclipse/aether/aether-api/1.1.0/aether-api-1.1.0.jar:/home/tdurieux/.m2/repository/com/kohlschutter/junixsocket/junixsocket-common/2.0.4/junixsocket-common-2.0.4.jar:/home/tdurieux/.m2/repository/org/ow2/asm/asm-analysis/7.0/asm-analysis-7.0.jar:/home/tdurieux/.m2/repository/org/json/json/20080701/json-20080701.jar:/home/tdurieux/.m2/repository/org/codehaus/plexus/plexus-io/2.0.4/plexus-io-2.0.4.jar:/home/tdurieux/.m2/repository/org/ow2/asm/asm-util/7.0/asm-util-7.0.jar:/home/tdurieux/.m2/repository/org/apache/maven/maven-settings-builder/3.2.5/maven-settings-builder-3.2.5.jar:/home/tdurieux/.m2/repository/org/apache/maven/plugin-tools/maven-plugin-annotations/3.4/maven-plugin-annotations-3.4.jar:/home/tdurieux/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:/home/tdurieux/.m2/repository/org/ow2/asm/asm/7.0/asm-7.0.jar:/home/tdurieux/.m2/repository/org/ow2/asm/asm-commons/7.0/asm-commons-7.0.jar:/home/tdurieux/.m2/repository/org/apache/maven/maven-settings/3.2.5/maven-settings-3.2.5.jar:/home/tdurieux/.m2/repository/org/sonatype/plexus/plexus-sec-dispatcher/1.3/plexus-sec-dispatcher-1.3.jar:/home/tdurieux/.m2/repository/org/codehaus/plexus/plexus-component-annotations/1.5.5/plexus-component-annotations-1.5.5.jar:/home/tdurieux/.m2/repository/org/apache/maven/maven-aether-provider/3.2.5/maven-aether-provider-3.2.5.jar:/home/tdurieux/.m2/repository/junit/junit/4.12/junit-4.12.jar:/home/tdurieux/.m2/repository/net/bytebuddy/byte-buddy/1.9.2/byte-buddy-1.9.2.jar:/home/tdurieux/.m2/repository/cglib/cglib-nodep/3.2.7/cglib-nodep-3.2.7.jar:/home/tdurieux/.m2/repository/org/scijava/native-lib-loader/2.0.2/native-lib-loader-2.0.2.jar:/home/tdurieux/.m2/repository/log4j/log4j/1.2.17/log4j-1.2.17.jar:/home/tdurieux/.m2/repository/org/openjdk/jmh/jmh-generator-annprocess/1.16/jmh-generator-annprocess-1.16.jar:/home/tdurieux/.m2/repository/org/eclipse/sisu/org.eclipse.sisu.plexus/0.3.0.M1/org.eclipse.sisu.plexus-0.3.0.M1.jar:/home/tdurieux/.m2/repository/org/javassist/javassist/3.22.0-GA/javassist-3.22.0-GA.jar:/home/tdurieux/.m2/repository/javax/enterprise/cdi-api/1.0/cdi-api-1.0.jar:/home/tdurieux/.m2/repository/org/ow2/asm/asm-tree/7.0/asm-tree-7.0.jar:/home/tdurieux/.m2/repository/commons-codec/commons-codec/1.3/commons-codec-1.3.jar:/home/tdurieux/defects4j4repair/script/../repair_tools/nopol.jar";
	echo "\n\nNode: `hostname`\n";
	echo "\n\nDate: `date`\n";
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en
18:18:22.572 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Source files: [byte-buddy-dep/src/main/java]
18:18:22.575 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Classpath: [file:/tmp/Nopol_Bears_raphw-byte-buddy_449069943-450332514/byte-buddy-dep/target/classes/, file:/tmp/Nopol_Bears_raphw-byte-buddy_449069943-450332514/byte-buddy-dep/target/test-classes/, file:/tmp/Nopol_Bears_raphw-byte-buddy_449069943-450332514/byte-buddy-agent/target/classes/, file:/tmp/Nopol_Bears_raphw-byte-buddy_449069943-450332514/byte-buddy/target/classes/, file:/tmp/Nopol_Bears_raphw-byte-buddy_449069943-450332514/byte-buddy-benchmark/target/classes/, file:/tmp/Nopol_Bears_raphw-byte-buddy_449069943-450332514/byte-buddy-android/target/classes/, file:/tmp/Nopol_Bears_raphw-byte-buddy_449069943-450332514/byte-buddy-maven-plugin/target/classes/, file:/tmp/Nopol_Bears_raphw-byte-buddy_449069943-450332514/byte-buddy-gradle-plugin/target/classes/, file:/home/tdurieux/.m2/repository/javax/inject/javax.inject/1/javax.inject-1.jar, file:/home/tdurieux/.m2/repository/xpp3/xpp3/1.1.4c/xpp3-1.1.4c.jar, file:/home/tdurieux/.m2/repository/org/apache/maven/maven-repository-metadata/3.2.5/maven-repository-metadata-3.2.5.jar, file:/home/tdurieux/.m2/repository/javax/annotation/jsr250-api/1.0/jsr250-api-1.0.jar, file:/home/tdurieux/.m2/repository/org/apache/httpcomponents/httpcore/4.0.1/httpcore-4.0.1.jar, file:/home/tdurieux/.m2/repository/org/khronos/opengl-api/gl1.1-android-2.1_r1/opengl-api-gl1.1-android-2.1_r1.jar, file:/home/tdurieux/.m2/repository/org/apache/maven/maven-core/3.2.5/maven-core-3.2.5.jar, file:/home/tdurieux/.m2/repository/org/codehaus/plexus/plexus-archiver/2.2/plexus-archiver-2.2.jar, file:/home/tdurieux/.m2/repository/com/jakewharton/android/repackaged/libcore-dex/2/libcore-dex-2.jar, file:/home/tdurieux/.m2/repository/com/google/guava/guava/16.0.1/guava-16.0.1.jar, file:/home/tdurieux/.m2/repository/org/codehaus/plexus/plexus-interpolation/1.21/plexus-interpolation-1.21.jar, file:/home/tdurieux/.m2/repository/org/apache/commons/commons-math3/3.2/commons-math3-3.2.jar, file:/home/tdurieux/.m2/repository/com/google/code/findbugs/findbugs-annotations/3.0.1/findbugs-annotations-3.0.1.jar, file:/home/tdurieux/.m2/repository/net/bytebuddy/byte-buddy-dep/1.9.4-SNAPSHOT/byte-buddy-dep-1.9.4-SNAPSHOT.jar, file:/home/tdurieux/.m2/repository/org/mockito/mockito-core/2.23.0/mockito-core-2.23.0.jar, file:/home/tdurieux/.m2/repository/org/codehaus/plexus/plexus-classworlds/2.5.2/plexus-classworlds-2.5.2.jar, file:/home/tdurieux/.m2/repository/org/apache/maven/maven-artifact/3.2.5/maven-artifact-3.2.5.jar, file:/home/tdurieux/.m2/repository/org/eclipse/aether/aether-util/1.1.0/aether-util-1.1.0.jar, file:/home/tdurieux/.m2/repository/org/openjdk/jmh/jmh-core/1.16/jmh-core-1.16.jar, file:/home/tdurieux/.m2/repository/org/eclipse/aether/aether-spi/1.0.0.v20140518/aether-spi-1.0.0.v20140518.jar, file:/home/tdurieux/.m2/repository/org/apache/httpcomponents/httpclient/4.0.1/httpclient-4.0.1.jar, file:/home/tdurieux/.m2/repository/com/google/android/android/4.1.1.4/android-4.1.1.4.jar, file:/home/tdurieux/.m2/repository/org/objenesis/objenesis/2.6/objenesis-2.6.jar, file:/home/tdurieux/.m2/repository/org/apache/maven/maven-model-builder/3.2.5/maven-model-builder-3.2.5.jar, file:/home/tdurieux/.m2/repository/org/apache/maven/maven-model/3.2.5/maven-model-3.2.5.jar, file:/home/tdurieux/.m2/repository/commons-io/commons-io/2.2/commons-io-2.2.jar, file:/home/tdurieux/.m2/repository/org/codehaus/plexus/plexus-utils/3.0.20/plexus-utils-3.0.20.jar, file:/home/tdurieux/.m2/repository/org/sonatype/plexus/plexus-cipher/1.4/plexus-cipher-1.4.jar, file:/home/tdurieux/.m2/repository/net/sf/jopt-simple/jopt-simple/4.6/jopt-simple-4.6.jar, file:/home/tdurieux/.m2/repository/commons-logging/commons-logging/1.1.1/commons-logging-1.1.1.jar, file:/home/tdurieux/.m2/repository/org/apache/maven/wagon/wagon-provider-api/2.8/wagon-provider-api-2.8.jar, file:/home/tdurieux/.m2/repository/xerces/xmlParserAPIs/2.6.2/xmlParserAPIs-2.6.2.jar, file:/home/tdurieux/.m2/repository/classworlds/classworlds/1.1-alpha-2/classworlds-1.1-alpha-2.jar, file:/home/tdurieux/.m2/repository/org/apache/maven/plugin-testing/maven-plugin-testing-harness/3.3.0/maven-plugin-testing-harness-3.3.0.jar, file:/home/tdurieux/.m2/repository/com/jakewharton/android/repackaged/dalvik-dx/1/dalvik-dx-1.jar, file:/home/tdurieux/.m2/repository/org/apache/maven/maven-plugin-api/3.2.5/maven-plugin-api-3.2.5.jar, file:/home/tdurieux/.m2/repository/org/codehaus/plexus/plexus-container-default/1.0-alpha-9-stable-1/plexus-container-default-1.0-alpha-9-stable-1.jar, file:/home/tdurieux/.m2/repository/com/kohlschutter/junixsocket/junixsocket-native-common/2.0.4/junixsocket-native-common-2.0.4.jar, file:/home/tdurieux/.m2/repository/org/eclipse/aether/aether-impl/1.0.0.v20140518/aether-impl-1.0.0.v20140518.jar, file:/home/tdurieux/.m2/repository/org/eclipse/sisu/org.eclipse.sisu.inject/0.3.0.M1/org.eclipse.sisu.inject-0.3.0.M1.jar, file:/home/tdurieux/.m2/repository/org/apache/maven/maven-compat/3.2.5/maven-compat-3.2.5.jar, file:/home/tdurieux/.m2/repository/net/bytebuddy/byte-buddy-agent/1.9.4-SNAPSHOT/byte-buddy-agent-1.9.4-SNAPSHOT.jar, file:/home/tdurieux/.m2/repository/net/bytebuddy/byte-buddy/1.9.4-SNAPSHOT/byte-buddy-1.9.4-SNAPSHOT.jar, file:/home/tdurieux/.m2/repository/org/sonatype/sisu/sisu-guice/3.2.3/sisu-guice-3.2.3-no_aop.jar, file:/home/tdurieux/.m2/repository/aopalliance/aopalliance/1.0/aopalliance-1.0.jar, file:/home/tdurieux/.m2/repository/org/eclipse/aether/aether-api/1.1.0/aether-api-1.1.0.jar, file:/home/tdurieux/.m2/repository/com/kohlschutter/junixsocket/junixsocket-common/2.0.4/junixsocket-common-2.0.4.jar, file:/home/tdurieux/.m2/repository/org/ow2/asm/asm-analysis/7.0/asm-analysis-7.0.jar, file:/home/tdurieux/.m2/repository/org/json/json/20080701/json-20080701.jar, file:/home/tdurieux/.m2/repository/org/codehaus/plexus/plexus-io/2.0.4/plexus-io-2.0.4.jar, file:/home/tdurieux/.m2/repository/org/ow2/asm/asm-util/7.0/asm-util-7.0.jar, file:/home/tdurieux/.m2/repository/org/apache/maven/maven-settings-builder/3.2.5/maven-settings-builder-3.2.5.jar, file:/home/tdurieux/.m2/repository/org/apache/maven/plugin-tools/maven-plugin-annotations/3.4/maven-plugin-annotations-3.4.jar, file:/home/tdurieux/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar, file:/home/tdurieux/.m2/repository/org/ow2/asm/asm/7.0/asm-7.0.jar, file:/home/tdurieux/.m2/repository/org/ow2/asm/asm-commons/7.0/asm-commons-7.0.jar, file:/home/tdurieux/.m2/repository/org/apache/maven/maven-settings/3.2.5/maven-settings-3.2.5.jar, file:/home/tdurieux/.m2/repository/org/sonatype/plexus/plexus-sec-dispatcher/1.3/plexus-sec-dispatcher-1.3.jar, file:/home/tdurieux/.m2/repository/org/codehaus/plexus/plexus-component-annotations/1.5.5/plexus-component-annotations-1.5.5.jar, file:/home/tdurieux/.m2/repository/org/apache/maven/maven-aether-provider/3.2.5/maven-aether-provider-3.2.5.jar, file:/home/tdurieux/.m2/repository/junit/junit/4.12/junit-4.12.jar, file:/home/tdurieux/.m2/repository/net/bytebuddy/byte-buddy/1.9.2/byte-buddy-1.9.2.jar, file:/home/tdurieux/.m2/repository/cglib/cglib-nodep/3.2.7/cglib-nodep-3.2.7.jar, file:/home/tdurieux/.m2/repository/org/scijava/native-lib-loader/2.0.2/native-lib-loader-2.0.2.jar, file:/home/tdurieux/.m2/repository/log4j/log4j/1.2.17/log4j-1.2.17.jar, file:/home/tdurieux/.m2/repository/org/openjdk/jmh/jmh-generator-annprocess/1.16/jmh-generator-annprocess-1.16.jar, file:/home/tdurieux/.m2/repository/org/eclipse/sisu/org.eclipse.sisu.plexus/0.3.0.M1/org.eclipse.sisu.plexus-0.3.0.M1.jar, file:/home/tdurieux/.m2/repository/org/javassist/javassist/3.22.0-GA/javassist-3.22.0-GA.jar, file:/home/tdurieux/.m2/repository/javax/enterprise/cdi-api/1.0/cdi-api-1.0.jar, file:/home/tdurieux/.m2/repository/org/ow2/asm/asm-tree/7.0/asm-tree-7.0.jar, file:/home/tdurieux/.m2/repository/commons-codec/commons-codec/1.3/commons-codec-1.3.jar, file:/home/tdurieux/defects4j4repair/script/../repair_tools/nopol.jar]
18:18:22.575 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Statement type: PRE_THEN_COND
18:18:22.576 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Args: [net.bytebuddy.ByteBuddyTest, net.bytebuddy.ByteBuddyTutorialExamplesTest, net.bytebuddy.ClassFileVersionKnownVersionsTest, net.bytebuddy.ClassFileVersionTest, net.bytebuddy.NamingStrategyTest, net.bytebuddy.TypeCacheTest, net.bytebuddy.agent.builder.AgentBuilderCircularityLockTest, net.bytebuddy.agent.builder.AgentBuilderClassFileBufferStrategyTest, net.bytebuddy.agent.builder.AgentBuilderDefaultApplicationRedefineTest, net.bytebuddy.agent.builder.AgentBuilderDefaultApplicationRedefinitionReiterationTest, net.bytebuddy.agent.builder.AgentBuilderDefaultApplicationResubmissionTest, net.bytebuddy.agent.builder.AgentBuilderDefaultApplicationSuperTypeLoadingTest, net.bytebuddy.agent.builder.AgentBuilderDefaultApplicationTest, net.bytebuddy.agent.builder.AgentBuilderDefaultNativeMethodStrategyTest, net.bytebuddy.agent.builder.AgentBuilderDefaultTest, net.bytebuddy.agent.builder.AgentBuilderDescriptionStrategyTest, net.bytebuddy.agent.builder.AgentBuilderFallbackStrategyByThrowableTypeTest, net.bytebuddy.agent.builder.AgentBuilderFallbackStrategySimpleTest, net.bytebuddy.agent.builder.AgentBuilderInitializationStrategySelfInjectionDispatcherTest, net.bytebuddy.agent.builder.AgentBuilderInitializationStrategyTest, net.bytebuddy.agent.builder.AgentBuilderInstallationListenerTest, net.bytebuddy.agent.builder.AgentBuilderLambdaInstrumentationStrategyTest, net.bytebuddy.agent.builder.AgentBuilderListenerTest, net.bytebuddy.agent.builder.AgentBuilderLocationStrategyCompoundTest, net.bytebuddy.agent.builder.AgentBuilderLocationStrategyForClassLoaderTest, net.bytebuddy.agent.builder.AgentBuilderLocationStrategyNoOpTest, net.bytebuddy.agent.builder.AgentBuilderLocationStrategySimpleTest, net.bytebuddy.agent.builder.AgentBuilderPoolStrategyTest, net.bytebuddy.agent.builder.AgentBuilderRawMatcherConjunctionTest, net.bytebuddy.agent.builder.AgentBuilderRawMatcherDisjunctionTest, net.bytebuddy.agent.builder.AgentBuilderRawMatcherForElementMatchersTest, net.bytebuddy.agent.builder.AgentBuilderRawMatcherForLoadStateTest, net.bytebuddy.agent.builder.AgentBuilderRawMatcherInversionTest, net.bytebuddy.agent.builder.AgentBuilderRawMatcherTrivialTest, net.bytebuddy.agent.builder.AgentBuilderRedefinitionStrategyBatchAllocatorTest, net.bytebuddy.agent.builder.AgentBuilderRedefinitionStrategyDiscoveryStrategyTest, net.bytebuddy.agent.builder.AgentBuilderRedefinitionStrategyListenerTest, net.bytebuddy.agent.builder.AgentBuilderRedefinitionStrategyResubmissionStrategyTest, net.bytebuddy.agent.builder.AgentBuilderRedefinitionStrategyTest, net.bytebuddy.agent.builder.AgentBuilderTransformerForBuildPluginTest, net.bytebuddy.agent.builder.AgentBuilderTransformerTest, net.bytebuddy.agent.builder.AgentBuilderTypeLocatorWithTypePoolCacheSimpleTest, net.bytebuddy.agent.builder.AgentBuilderTypeStrategyForBuildEntryPointTest, net.bytebuddy.agent.builder.AgentBuilderTypeStrategyTest, net.bytebuddy.agent.builder.LambdaFactoryTest, net.bytebuddy.agent.builder.RawMatcherForResolvableTypesTest, net.bytebuddy.asm.AdviceAnnotationTest, net.bytebuddy.asm.AdviceArgumentHandlerCopyingTest, net.bytebuddy.asm.AdviceBoxedParameterAssignmentTest, net.bytebuddy.asm.AdviceBoxedReturnAssignmentTest, net.bytebuddy.asm.AdviceCustomAnnotationOnFieldTest, net.bytebuddy.asm.AdviceCustomAnnotationOnParameterTest, net.bytebuddy.asm.AdviceDeadCodeTest, net.bytebuddy.asm.AdviceDiscardedEnterTypeTest, net.bytebuddy.asm.AdviceEnterValueTest, net.bytebuddy.asm.AdviceExchangedDuplicationTest, net.bytebuddy.asm.AdviceExitValueTest, net.bytebuddy.asm.AdviceFrameTest, net.bytebuddy.asm.AdviceIllegalTypeTest, net.bytebuddy.asm.AdviceImplementationTest, net.bytebuddy.asm.AdviceInconsistentFrameTest, net.bytebuddy.asm.AdviceInconsistentStackSizeTest, net.bytebuddy.asm.AdviceJsrRetTest, net.bytebuddy.asm.AdviceLocalValueTest, net.bytebuddy.asm.AdviceNoRegularReturnTest, net.bytebuddy.asm.AdviceNoRegularReturnWithinAdviceTest, net.bytebuddy.asm.AdviceRepeatOnDefaultValueTest, net.bytebuddy.asm.AdviceRepeatOnNonDefaultValueTest, net.bytebuddy.asm.AdviceRepeatOnTest, net.bytebuddy.asm.AdviceSizeConversionTest, net.bytebuddy.asm.AdviceSkipOnDefaultValueTest, net.bytebuddy.asm.AdviceSkipOnNonDefaultValueTest, net.bytebuddy.asm.AdviceSkipOnTest, net.bytebuddy.asm.AdviceSuppressionTest, net.bytebuddy.asm.AdviceTest, net.bytebuddy.asm.AdviceTypeTest, net.bytebuddy.asm.AdviceVariableAccessTest, net.bytebuddy.asm.AsmVisitorWrapperCompoundTest, net.bytebuddy.asm.AsmVisitorWrapperForDeclaredFieldsTest, net.bytebuddy.asm.AsmVisitorWrapperForDeclaredMethodsTest, net.bytebuddy.asm.AsmVisitorWrapperNoOpTest, net.bytebuddy.asm.MemberRemovalTest, net.bytebuddy.asm.MemberSubstitutionTest, net.bytebuddy.asm.ModifierAdjustmentTest, net.bytebuddy.asm.TypeConstantAdjustmentTest, net.bytebuddy.asm.TypeReferenceAdjustmentTest, net.bytebuddy.build.BuildLoggerTest, net.bytebuddy.build.CachedReturnPluginErrorTest, net.bytebuddy.build.CachedReturnPluginTest, net.bytebuddy.build.EntryPointDefaultTest, net.bytebuddy.build.HashCodeAndEqualsPluginTest, net.bytebuddy.build.PluginCompoundTest, net.bytebuddy.build.PluginEngineDefaultTest, net.bytebuddy.build.PluginEngineErrorHandlerTest, net.bytebuddy.build.PluginEngineListenerTest, net.bytebuddy.build.PluginEnginePoolStrategyTest, net.bytebuddy.build.PluginEngineSourceEmptyTest, net.bytebuddy.build.PluginEngineSourceForFolderTest, net.bytebuddy.build.PluginEngineSourceForJarFileTest, net.bytebuddy.build.PluginEngineSourceInMemoryTest, net.bytebuddy.build.PluginEngineSummaryTest, net.bytebuddy.build.PluginEngineTargetDiscardingTest, net.bytebuddy.build.PluginEngineTargetForFolderTest, net.bytebuddy.build.PluginEngineTargetForJarFileTest, net.bytebuddy.build.PluginEngineTargetInMemoryTest, net.bytebuddy.build.PluginEngineTypeStrategyTest, net.bytebuddy.build.PluginFactorySimpleTest, net.bytebuddy.build.PluginFactoryUsingReflectionArgumentResolverTypeTest, net.bytebuddy.build.PluginFactoryUsingReflectionTest, net.bytebuddy.build.PluginNoOpTest, net.bytebuddy.build.ToStringPluginTest, net.bytebuddy.description.ByteCodeElementTokenListTest, net.bytebuddy.description.TypeVariableSourceVisitorNoOpTest, net.bytebuddy.description.annotation.AnnotationDescriptionAbstractPreparedExceptionTest, net.bytebuddy.description.annotation.AnnotationDescriptionAnnotationInvocationHandlerTest, net.bytebuddy.description.annotation.AnnotationDescriptionAnnotationValueLoadedStateTest, net.bytebuddy.description.annotation.AnnotationDescriptionBuilderTest, net.bytebuddy.description.annotation.AnnotationDescriptionForLoadedAnnotationDifferentClassLoaderTest, net.bytebuddy.description.annotation.AnnotationDescriptionForLoadedAnnotationTest, net.bytebuddy.description.annotation.AnnotationDescriptionLatentTest, net.bytebuddy.description.annotation.AnnotationListEmptyTest, net.bytebuddy.description.annotation.AnnotationListExplicitTest, net.bytebuddy.description.annotation.AnnotationListForLoadedAnnotationsTest, net.bytebuddy.description.annotation.AnnotationSourceTest, net.bytebuddy.description.annotation.AnnotationValueForConstantTest, net.bytebuddy.description.annotation.AnnotationValueRenderingDispatcherTest, net.bytebuddy.description.enumeration.EnumerationDescriptionForLoadedEnumerationTest, net.bytebuddy.description.enumeration.EnumerationDescriptionLatentTest, net.bytebuddy.description.field.FieldDescriptionForLoadedFieldsTest, net.bytebuddy.description.field.FieldDescriptionLatentTest, net.bytebuddy.description.field.FieldDescriptionSignatureTokenTest, net.bytebuddy.description.field.FieldDescriptionTokenTest, net.bytebuddy.description.field.FieldListEmptyTest, net.bytebuddy.description.field.FieldListExplicitTest, net.bytebuddy.description.field.FieldListForLoadedFieldsTest, net.bytebuddy.description.method.MethodDescriptionForLoadedTest, net.bytebuddy.description.method.MethodDescriptionLatentTest, net.bytebuddy.description.method.MethodDescriptionLatentTypeInitializerTest, net.bytebuddy.description.method.MethodDescriptionSignatureTokenTest, net.bytebuddy.description.method.MethodDescriptionTokenTest, net.bytebuddy.description.method.MethodDescriptionTypeTokenTest, net.bytebuddy.description.method.MethodListEmptyTest, net.bytebuddy.description.method.MethodListExplicitTest, net.bytebuddy.description.method.MethodListForLoadedTypesTest, net.bytebuddy.description.method.ParameterDescriptionForLoadedParameterDispatcherTest, net.bytebuddy.description.method.ParameterDescriptionTokenTest, net.bytebuddy.description.method.ParameterListEmptyTest, net.bytebuddy.description.method.ParameterListExplicitTest, net.bytebuddy.description.method.ParameterListForLoadedExectutableDispatcherTest, net.bytebuddy.description.method.ParameterListForLoadedParameterTest, net.bytebuddy.description.modifier.EnumerationStateTest, net.bytebuddy.description.modifier.FieldManifestationTest, net.bytebuddy.description.modifier.FieldPersistenceTest, net.bytebuddy.description.modifier.MethodArgumentsTest, net.bytebuddy.description.modifier.MethodManifestationTest, net.bytebuddy.description.modifier.MethodStrictnessTest, net.bytebuddy.description.modifier.ModifierContributorResolverTest, net.bytebuddy.description.modifier.ModifierContributorTest, net.bytebuddy.description.modifier.OwnershipTest, net.bytebuddy.description.modifier.ParameterManifestationTest, net.bytebuddy.description.modifier.ProvisioningStateTest, net.bytebuddy.description.modifier.SynchronizationStateTest, net.bytebuddy.description.modifier.SyntheticStateTest, net.bytebuddy.description.modifier.TypeManifestationTest, net.bytebuddy.description.modifier.VisibilityExpansionTest, net.bytebuddy.description.modifier.VisibilityTest, net.bytebuddy.description.type.GenericSignatureResolutionTest, net.bytebuddy.description.type.PackageDescriptionForLoadedPackageTest, net.bytebuddy.description.type.PackageDescriptionSimpleTest, net.bytebuddy.description.type.TypeDefinitionSortOtherTest, net.bytebuddy.description.type.TypeDefinitionSortTest, net.bytebuddy.description.type.TypeDefinitionSuperClassIteratorTest, net.bytebuddy.description.type.TypeDescriptionArrayProjectionTest, net.bytebuddy.description.type.TypeDescriptionForLoadedTypeTest, net.bytebuddy.description.type.TypeDescriptionForPackageDescriptionTest, net.bytebuddy.description.type.TypeDescriptionGenericAnnotationReaderTest, net.bytebuddy.description.type.TypeDescriptionGenericBuilderTest, net.bytebuddy.description.type.TypeDescriptionGenericLazyProjectionWithLazyNavigationTest, net.bytebuddy.description.type.TypeDescriptionGenericOfNonGenericTypeForReifiedErasureTest, net.bytebuddy.description.type.TypeDescriptionGenericOfParameterizedTypeForGenerifiedErasureTest, net.bytebuddy.description.type.TypeDescriptionGenericOfParameterizedTypeForReifiedTypeTest, net.bytebuddy.description.type.TypeDescriptionGenericOfParameterizedTypeRenderingDelegateTest, net.bytebuddy.description.type.TypeDescriptionGenericOfTypeVariableSymbolicTest, net.bytebuddy.description.type.TypeDescriptionGenericOfTypeVariableWithAnnotationOverlayTest, net.bytebuddy.description.type.TypeDescriptionGenericVisitorAnnotationStripperTest, net.bytebuddy.description.type.TypeDescriptionGenericVisitorAssignerTest, net.bytebuddy.description.type.TypeDescriptionGenericVisitorForSignatureVisitorTest, net.bytebuddy.description.type.TypeDescriptionGenericVisitorNoOpTest, net.bytebuddy.description.type.TypeDescriptionGenericVisitorReducingTest, net.bytebuddy.description.type.TypeDescriptionGenericVisitorReifyingTest, net.bytebuddy.description.type.TypeDescriptionGenericVisitorSubstitutorForAttachmentTest, net.bytebuddy.description.type.TypeDescriptionGenericVisitorSubstitutorForDetachmentTest, net.bytebuddy.description.type.TypeDescriptionGenericVisitorSubstitutorForTokenNormalizationTest, net.bytebuddy.description.type.TypeDescriptionGenericVisitorSubstitutorForTypeVariableBindingTest, net.bytebuddy.description.type.TypeDescriptionGenericVisitorTypeErasingTest, net.bytebuddy.description.type.TypeDescriptionGenericVisitorValidatorForTypeAnnotations, net.bytebuddy.description.type.TypeDescriptionGenericVisitorValidatorTest, net.bytebuddy.description.type.TypeDescriptionLatentTest, net.bytebuddy.description.type.TypeInitializerTest, net.bytebuddy.description.type.TypeListEmptyTest, net.bytebuddy.description.type.TypeListExplicitTest, net.bytebuddy.description.type.TypeListForLoadedTest, net.bytebuddy.description.type.TypeListGenericEmptyTest, net.bytebuddy.description.type.TypeListGenericExplicitTest, net.bytebuddy.description.type.TypeListGenericForLoadedTypesTest, net.bytebuddy.description.type.TypeVariableTokenTest, net.bytebuddy.dynamic.ClassFileLocatorAgentBasedTest, net.bytebuddy.dynamic.ClassFileLocatorCompoundTest, net.bytebuddy.dynamic.ClassFileLocatorForClassLoaderTest, net.bytebuddy.dynamic.ClassFileLocatorForClassLoaderWeaklyReferencedTest, net.bytebuddy.dynamic.ClassFileLocatorForFolderTest, net.bytebuddy.dynamic.ClassFileLocatorForJarFileTest, net.bytebuddy.dynamic.ClassFileLocatorForModuleFileTest, net.bytebuddy.dynamic.ClassFileLocatorForModuleTest, net.bytebuddy.dynamic.ClassFileLocatorForModuleWeaklyReferencedTest, net.bytebuddy.dynamic.ClassFileLocatorForUrlTest, net.bytebuddy.dynamic.ClassFileLocatorNoOpTest, net.bytebuddy.dynamic.ClassFileLocatorPackageDiscriminatingTest, net.bytebuddy.dynamic.ClassFileLocatorResolutionTest, net.bytebuddy.dynamic.ClassFileLocatorSimpleTest, net.bytebuddy.dynamic.ClassWriterStrategyDefaultTest, net.bytebuddy.dynamic.DynamicTypeDefaultLoadedTest, net.bytebuddy.dynamic.DynamicTypeDefaultTest, net.bytebuddy.dynamic.DynamicTypeDefaultUnloadedTest, net.bytebuddy.dynamic.NexusTest, net.bytebuddy.dynamic.TargetTypeTest, net.bytebuddy.dynamic.TransformerCompoundTest, net.bytebuddy.dynamic.TransformerForFieldTest, net.bytebuddy.dynamic.TransformerForMethodTest, net.bytebuddy.dynamic.TransformerNoOpTest, net.bytebuddy.dynamic.TypeResolutionStrategyTest, net.bytebuddy.dynamic.loading.ByteArrayClassLoaderChildFirstPrependingEnumerationTest, net.bytebuddy.dynamic.loading.ByteArrayClassLoaderChildFirstTest, net.bytebuddy.dynamic.loading.ByteArrayClassLoaderEmptyEnumerationTest, net.bytebuddy.dynamic.loading.ByteArrayClassLoaderPackageLookupStrategy, net.bytebuddy.dynamic.loading.ByteArrayClassLoaderSingletonEnumerationTest, net.bytebuddy.dynamic.loading.ByteArrayClassLoaderSynchronizationStrategyTest, net.bytebuddy.dynamic.loading.ByteArrayClassLoaderTest, net.bytebuddy.dynamic.loading.ClassInjectorUsingInstrumentationTest, net.bytebuddy.dynamic.loading.ClassInjectorUsingLookupTest, net.bytebuddy.dynamic.loading.ClassInjectorUsingReflectionTest, net.bytebuddy.dynamic.loading.ClassInjectorUsingUnsafeTest, net.bytebuddy.dynamic.loading.ClassLoadingStrategyDefaultTest, net.bytebuddy.dynamic.loading.ClassLoadingStrategyForBootstrapInjectionTest, net.bytebuddy.dynamic.loading.ClassLoadingStrategyForUnsafeInjectionTest, net.bytebuddy.dynamic.loading.ClassLoadingStrategyUsingLookupTest, net.bytebuddy.dynamic.loading.ClassReloadingStrategyTest, net.bytebuddy.dynamic.loading.InjectionClassLoaderTest, net.bytebuddy.dynamic.loading.MultipleParentClassLoaderTest, net.bytebuddy.dynamic.loading.NoOpClassFileTransformerTest, net.bytebuddy.dynamic.loading.PackageDefinitionStrategyTypeSimpleTest, net.bytebuddy.dynamic.loading.PackageDefinitionStrategyTypeTrivialTest, net.bytebuddy.dynamic.loading.PackageDefinitionStrategyTypeUndefinedTest, net.bytebuddy.dynamic.loading.PackageDefinitionTrivialTest, net.bytebuddy.dynamic.loading.PackageTypeStrategyManifestReadingTest, net.bytebuddy.dynamic.loading.PackageTypeStrategyNoOpTest, net.bytebuddy.dynamic.scaffold.ClassWriterStrategyFrameComputingClassWriterTest, net.bytebuddy.dynamic.scaffold.FieldLocatorForClassHierarchyTest, net.bytebuddy.dynamic.scaffold.FieldLocatorForExactTypeTest, net.bytebuddy.dynamic.scaffold.FieldLocatorForTopLevelTypeTest, net.bytebuddy.dynamic.scaffold.FieldLocatorNoOpTest, net.bytebuddy.dynamic.scaffold.FieldLocatorResolutionTest, net.bytebuddy.dynamic.scaffold.FieldRegistryCompiledNoOpTest, net.bytebuddy.dynamic.scaffold.FieldRegistryDefaultTest, net.bytebuddy.dynamic.scaffold.InstrumentedTypeDefaultTest, net.bytebuddy.dynamic.scaffold.InstrumentedTypeFactoryDefaultTest, net.bytebuddy.dynamic.scaffold.InstrumentedTypeFrozenTest, net.bytebuddy.dynamic.scaffold.MethodGraphCompilerDefaultHarmonizerForJVMMethodTest, net.bytebuddy.dynamic.scaffold.MethodGraphCompilerDefaultHarmonizerForJavaMethodTest, net.bytebuddy.dynamic.scaffold.MethodGraphCompilerDefaultKeyTest, net.bytebuddy.dynamic.scaffold.MethodGraphCompilerDefaultMergerDirectionalTest, net.bytebuddy.dynamic.scaffold.MethodGraphCompilerDefaultTest, net.bytebuddy.dynamic.scaffold.MethodGraphCompilerForDeclaredMethodsTest, net.bytebuddy.dynamic.scaffold.MethodGraphEmptyTest, net.bytebuddy.dynamic.scaffold.MethodGraphLinkedDelegationTest, net.bytebuddy.dynamic.scaffold.MethodGraphNodeListTest, net.bytebuddy.dynamic.scaffold.MethodGraphNodeSimpleTest, net.bytebuddy.dynamic.scaffold.MethodGraphNodeSortTest, net.bytebuddy.dynamic.scaffold.MethodGraphNodeUnresolvedTest, net.bytebuddy.dynamic.scaffold.MethodGraphSimpleTest, net.bytebuddy.dynamic.scaffold.MethodRegistryDefaultTest, net.bytebuddy.dynamic.scaffold.MethodRegistryHandlerTest, net.bytebuddy.dynamic.scaffold.TypeInitializerDrainDefaultTest, net.bytebuddy.dynamic.scaffold.TypeValidationTest, net.bytebuddy.dynamic.scaffold.TypeWriterDeclarationPreservationTest, net.bytebuddy.dynamic.scaffold.TypeWriterDefaultForInliningWithFullProcessingInitializationHandlerAppendingFrameWriterActiveTest, net.bytebuddy.dynamic.scaffold.TypeWriterDefaultForInliningWithFullProcessingInitializationHandlerAppendingFrameWriterExpandingTest, net.bytebuddy.dynamic.scaffold.TypeWriterDefaultForInliningWithFullProcessingInitializationHandlerAppendingFrameWriterNoOpTest, net.bytebuddy.dynamic.scaffold.TypeWriterDefaultTest, net.bytebuddy.dynamic.scaffold.TypeWriterFieldPoolDisabledTest, net.bytebuddy.dynamic.scaffold.TypeWriterFieldPoolRecordTest, net.bytebuddy.dynamic.scaffold.TypeWriterInitializerRemapperTest, net.bytebuddy.dynamic.scaffold.TypeWriterMethodPoolRecordTest, net.bytebuddy.dynamic.scaffold.inline.DecoratingDynamicTypeBuilderTest, net.bytebuddy.dynamic.scaffold.inline.InlineImplementationMatcherTest, net.bytebuddy.dynamic.scaffold.inline.MethodNameTransformerPrefixingTest, net.bytebuddy.dynamic.scaffold.inline.MethodNameTransformerSuffixingTest, net.bytebuddy.dynamic.scaffold.inline.MethodRebaseResolverDefaultTest, net.bytebuddy.dynamic.scaffold.inline.MethodRebaseResolverDisabledTest, net.bytebuddy.dynamic.scaffold.inline.MethodRebaseResolverResolutionForRebasedConstructorTest, net.bytebuddy.dynamic.scaffold.inline.MethodRebaseResolverResolutionForRebasedMethodTest, net.bytebuddy.dynamic.scaffold.inline.MethodRebaseResolverResolutionPreservedTest, net.bytebuddy.dynamic.scaffold.inline.RebaseDynamicTypeBuilderRebaseableMatcherTest, net.bytebuddy.dynamic.scaffold.inline.RebaseDynamicTypeBuilderTest, net.bytebuddy.dynamic.scaffold.inline.RebaseImplementationTargetFactoryTest, net.bytebuddy.dynamic.scaffold.inline.RebaseImplementationTargetSpecialMethodInvocationTest, net.bytebuddy.dynamic.scaffold.inline.RebaseImplementationTargetTest, net.bytebuddy.dynamic.scaffold.inline.RedefinitionDynamicTypeBuilderTest, net.bytebuddy.dynamic.scaffold.subclass.ConstructorStrategyDefaultTest, net.bytebuddy.dynamic.scaffold.subclass.ConstructorStrategyForDefaultConstructorTest, net.bytebuddy.dynamic.scaffold.subclass.SubclassDynamicTypeBuilderInstrumentableMatcherTest, net.bytebuddy.dynamic.scaffold.subclass.SubclassDynamicTypeBuilderTest, net.bytebuddy.dynamic.scaffold.subclass.SubclassImplementationTargetFactoryTest, net.bytebuddy.dynamic.scaffold.subclass.SubclassImplementationTargetTest, net.bytebuddy.implementation.DefaultMethodCallTest, net.bytebuddy.implementation.EqualsMethodOtherTest, net.bytebuddy.implementation.EqualsMethodTest, net.bytebuddy.implementation.ExceptionMethodTest, net.bytebuddy.implementation.FieldAccessorFieldNameExtractorForBeanPropertyTest, net.bytebuddy.implementation.FieldAccessorFieldNameExtractorForFixedValueTest, net.bytebuddy.implementation.FieldAccessorOtherTest, net.bytebuddy.implementation.FieldAccessorTest, net.bytebuddy.implementation.FixedValueConstantPoolTypesTest, net.bytebuddy.implementation.FixedValueTest, net.bytebuddy.implementation.HashCodeMethodOtherTest, net.bytebuddy.implementation.HashCodeMethodTest, net.bytebuddy.implementation.ImplementationCompoundComposableTest, net.bytebuddy.implementation.ImplementationCompoundTest, net.bytebuddy.implementation.ImplementationContextDefaultOtherTest, net.bytebuddy.implementation.ImplementationContextDefaultTest, net.bytebuddy.implementation.ImplementationContextDisabledTest, net.bytebuddy.implementation.ImplementationSpecialMethodInvocationIllegalTest, net.bytebuddy.implementation.ImplementationSpecialMethodInvocationSimpleTest, net.bytebuddy.implementation.ImplementationTargetAbstractBaseDefaultMethodInvocationTest, net.bytebuddy.implementation.InvocationHandlerAdapterTest, net.bytebuddy.implementation.InvokeDynamicTest, net.bytebuddy.implementation.LoadedTypeInitializerCompoundTest, net.bytebuddy.implementation.LoadedTypeInitializerForStaticFieldTest, net.bytebuddy.implementation.LoadedTypeInitializerNoOpTest, net.bytebuddy.implementation.MethodAccessorFactoryAccessTypeTest, net.bytebuddy.implementation.MethodAccessorFactoryIllegalTest, net.bytebuddy.implementation.MethodCallTest, net.bytebuddy.implementation.MethodCallTypeTest, net.bytebuddy.implementation.MethodDelegationAllArgumentsTest, net.bytebuddy.implementation.MethodDelegationArgumentTest, net.bytebuddy.implementation.MethodDelegationBindingPriorityTest, net.bytebuddy.implementation.MethodDelegationChainedTest, net.bytebuddy.implementation.MethodDelegationCheckedExceptionTest, net.bytebuddy.implementation.MethodDelegationConstructionTest, net.bytebuddy.implementation.MethodDelegationDefaultCallTest, net.bytebuddy.implementation.MethodDelegationDefaultMethodTest, net.bytebuddy.implementation.MethodDelegationDefaultTest, net.bytebuddy.implementation.MethodDelegationExceptionTest, net.bytebuddy.implementation.MethodDelegationFieldProxyTest, net.bytebuddy.implementation.MethodDelegationFieldValueTest, net.bytebuddy.implementation.MethodDelegationIgnoreForBindingTest, net.bytebuddy.implementation.MethodDelegationMethodReturnTest, net.bytebuddy.implementation.MethodDelegationMorphTest, net.bytebuddy.implementation.MethodDelegationOriginTest, net.bytebuddy.implementation.MethodDelegationOtherTest, net.bytebuddy.implementation.MethodDelegationPipeTest, net.bytebuddy.implementation.MethodDelegationRuntimeTypeTest, net.bytebuddy.implementation.MethodDelegationStubValueTest, net.bytebuddy.implementation.MethodDelegationSuperCallTest, net.bytebuddy.implementation.MethodDelegationSuperMethodTest, net.bytebuddy.implementation.MethodDelegationSuperTest, net.bytebuddy.implementation.MethodDelegationTest, net.bytebuddy.implementation.MethodDelegationThisTest, net.bytebuddy.implementation.ModifierReviewableTest, net.bytebuddy.implementation.StubMethodOtherTest, net.bytebuddy.implementation.StubMethodTest, net.bytebuddy.implementation.SuperMethodCallOtherTest, net.bytebuddy.implementation.SuperMethodCallTest, net.bytebuddy.implementation.ToStringMethodOtherTest, net.bytebuddy.implementation.ToStringMethodTest, net.bytebuddy.implementation.attribute.AnnotationAppenderDefaultTest, net.bytebuddy.implementation.attribute.AnnotationAppenderForTypeAnnotationsTest, net.bytebuddy.implementation.attribute.AnnotationAppenderTargetTest, net.bytebuddy.implementation.attribute.AnnotationRetentionTest, net.bytebuddy.implementation.attribute.AnnotationValueFilterDefaultTest, net.bytebuddy.implementation.attribute.FieldAttributeAppenderCompoundTest, net.bytebuddy.implementation.attribute.FieldAttributeAppenderFactoryCompoundTest, net.bytebuddy.implementation.attribute.FieldAttributeAppenderForAnnotationsTest, net.bytebuddy.implementation.attribute.FieldAttributeAppenderForInstrumentedFieldTest, net.bytebuddy.implementation.attribute.FieldAttributeAppenderNoOpTest, net.bytebuddy.implementation.attribute.MethodAttributeAppenderCompoundTest, net.bytebuddy.implementation.attribute.MethodAttributeAppenderExplicitTest, net.bytebuddy.implementation.attribute.MethodAttributeAppenderFactoryCompoundTest, net.bytebuddy.implementation.attribute.MethodAttributeAppenderForInstrumentedMethodOtherTest, net.bytebuddy.implementation.attribute.MethodAttributeAppenderForInstrumentedMethodTest, net.bytebuddy.implementation.attribute.MethodAttributeAppenderForReceiverTypeTest, net.bytebuddy.implementation.attribute.MethodAttributeAppenderNoOpTest, net.bytebuddy.implementation.attribute.TypeAttributeAppenderCompoundTest, net.bytebuddy.implementation.attribute.TypeAttributeAppenderExplicitTest, net.bytebuddy.implementation.attribute.TypeAttributeAppenderForInstrumentedTypeDifferentiatingTest, net.bytebuddy.implementation.attribute.TypeAttributeAppenderForInstrumentedTypeTest, net.bytebuddy.implementation.attribute.TypeAttributeAppenderNoOpTest, net.bytebuddy.implementation.auxiliary.AuxiliaryTypeSignatureRelevantTest, net.bytebuddy.implementation.auxiliary.MethodCallProxySingleArgumentTest, net.bytebuddy.implementation.auxiliary.MethodCallProxyTest, net.bytebuddy.implementation.auxiliary.PrivilegedMemberLookupActionTest, net.bytebuddy.implementation.auxiliary.TrivialTypeTest, net.bytebuddy.implementation.auxiliary.TypeProxyCreationTest, net.bytebuddy.implementation.auxiliary.TypeProxyInvocationFactoryDefaultTest, net.bytebuddy.implementation.bind.ArgumentTypeResolverPrimitiveTest, net.bytebuddy.implementation.bind.ArgumentTypeResolverReferenceTest, net.bytebuddy.implementation.bind.DeclaringTypeResolverTest, net.bytebuddy.implementation.bind.MethodBindingAmbiguityResolutionTest, net.bytebuddy.implementation.bind.MethodBindingBuilderTest, net.bytebuddy.implementation.bind.MethodDelegationBinderAmbiguityResolverChainTest, net.bytebuddy.implementation.bind.MethodDelegationBinderAmbiguityResolverDirectionalTest, net.bytebuddy.implementation.bind.MethodDelegationBinderAmbiguityResolverNoOpTest, net.bytebuddy.implementation.bind.MethodDelegationBinderBindingResolverDefaultTest, net.bytebuddy.implementation.bind.MethodDelegationBinderBindingResolverStreamWritingTest, net.bytebuddy.implementation.bind.MethodDelegationBinderBindingResolverUniqueTest, net.bytebuddy.implementation.bind.MethodDelegationBinderProcessorTest, net.bytebuddy.implementation.bind.MethodDelegationBinderTerminationHandlerTest, net.bytebuddy.implementation.bind.MethodDelegationBinderTest, net.bytebuddy.implementation.bind.MethodDelegationBindingParameterBindingTest, net.bytebuddy.implementation.bind.MethodNameEqualityResolverTest, net.bytebuddy.implementation.bind.ParameterLengthResolverTest, net.bytebuddy.implementation.bind.ParameterMethodBindingTest, net.bytebuddy.implementation.bind.annotation.AllArgumentsBinderTest, net.bytebuddy.implementation.bind.annotation.ArgumentBinderTest, net.bytebuddy.implementation.bind.annotation.BindingPriorityResolverTest, net.bytebuddy.implementation.bind.annotation.DefaultBinderTest, net.bytebuddy.implementation.bind.annotation.DefaultCallBinderTest, net.bytebuddy.implementation.bind.annotation.DefaultMethodBinderTest, net.bytebuddy.implementation.bind.annotation.EmptyBinderTest, net.bytebuddy.implementation.bind.annotation.FieldProxyBinderTest, net.bytebuddy.implementation.bind.annotation.FieldValueBinderTest, net.bytebuddy.implementation.bind.annotation.IgnoreForBindingVerifierTest, net.bytebuddy.implementation.bind.annotation.MorphBinderTest, net.bytebuddy.implementation.bind.annotation.OriginBinderTest, net.bytebuddy.implementation.bind.annotation.PipeBinderTest, net.bytebuddy.implementation.bind.annotation.RuntimeTypeVerifierTest, net.bytebuddy.implementation.bind.annotation.StubValueBinderTest, net.bytebuddy.implementation.bind.annotation.SuperBinderTest, net.bytebuddy.implementation.bind.annotation.SuperCallBinderTest, net.bytebuddy.implementation.bind.annotation.SuperMethodBinderTest, net.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinderTest, net.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDriverBinderParameterBinderForFixedValueOfConstantOtherTest, net.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDriverBinderParameterBinderForFixedValueOfConstantTest, net.bytebuddy.implementation.bind.annotation.ThisBinderTest, net.bytebuddy.implementation.bytecode.AdditionTest, net.bytebuddy.implementation.bytecode.ByteCodeAppenderCompoundTest, net.bytebuddy.implementation.bytecode.ByteCodeAppenderSimpleTest, net.bytebuddy.implementation.bytecode.ByteCodeAppenderSizeTest, net.bytebuddy.implementation.bytecode.DuplicationOtherTest, net.bytebuddy.implementation.bytecode.DuplicationTest, net.bytebuddy.implementation.bytecode.DuplicationWithFlipTest, net.bytebuddy.implementation.bytecode.MultiplicationTest, net.bytebuddy.implementation.bytecode.RemovalTest, net.bytebuddy.implementation.bytecode.StackManipulationCompoundTest, net.bytebuddy.implementation.bytecode.StackManipulationSizeTest, net.bytebuddy.implementation.bytecode.StackManipulationTest, net.bytebuddy.implementation.bytecode.StackSizeMaximumTest, net.bytebuddy.implementation.bytecode.StackSizeTest, net.bytebuddy.implementation.bytecode.ThrowTest, net.bytebuddy.implementation.bytecode.TypeCreationTest, net.bytebuddy.implementation.bytecode.assign.AssignerEqualTypesOnlyTest, net.bytebuddy.implementation.bytecode.assign.AssignerRefusingTest, net.bytebuddy.implementation.bytecode.assign.AssignerTypingTest, net.bytebuddy.implementation.bytecode.assign.InstanceCheckTest, net.bytebuddy.implementation.bytecode.assign.TypeCastingTest, net.bytebuddy.implementation.bytecode.assign.primitive.PrimitiveBoxingDelegateTest, net.bytebuddy.implementation.bytecode.assign.primitive.PrimitiveBoxingDelegateTestWithReferenceTest, net.bytebuddy.implementation.bytecode.assign.primitive.PrimitiveTypeAwareAssignerBoxingTest, net.bytebuddy.implementation.bytecode.assign.primitive.PrimitiveTypeAwareAssignerImplicitUnboxingTest, net.bytebuddy.implementation.bytecode.assign.primitive.PrimitiveTypeAwareAssignerPrimitiveTest, net.bytebuddy.implementation.bytecode.assign.primitive.PrimitiveTypeAwareAssignerUnboxingTest, net.bytebuddy.implementation.bytecode.assign.primitive.PrimitiveUnboxingDelegateDirectTest, net.bytebuddy.implementation.bytecode.assign.primitive.PrimitiveUnboxingDelegateOtherTest, net.bytebuddy.implementation.bytecode.assign.primitive.PrimitiveUnboxingDelegateWideningTest, net.bytebuddy.implementation.bytecode.assign.primitive.PrimitiveWideningDelegateIllegalTest, net.bytebuddy.implementation.bytecode.assign.primitive.PrimitiveWideningDelegateNontrivialTest, net.bytebuddy.implementation.bytecode.assign.primitive.PrimitiveWideningDelegateOtherTest, net.bytebuddy.implementation.bytecode.assign.primitive.PrimitiveWideningDelegateTrivialTest, net.bytebuddy.implementation.bytecode.assign.primitive.VoidAwareAssignerNonVoidToVoidTest, net.bytebuddy.implementation.bytecode.assign.primitive.VoidAwareAssignerTest, net.bytebuddy.implementation.bytecode.assign.primitive.VoidAwareAssignerVoidToNonVoidTest, net.bytebuddy.implementation.bytecode.assign.reference.ReferenceTypeAwareAssignerTest, net.bytebuddy.implementation.bytecode.collection.ArrayAccessOtherTest, net.bytebuddy.implementation.bytecode.collection.ArrayAccessTest, net.bytebuddy.implementation.bytecode.collection.ArrayFactoryPrimitiveTest, net.bytebuddy.implementation.bytecode.collection.ArrayFactoryReferenceTest, net.bytebuddy.implementation.bytecode.constant.ClassConstantPrimitiveTest, net.bytebuddy.implementation.bytecode.constant.ClassConstantReferenceTest, net.bytebuddy.implementation.bytecode.constant.DefaultValueTest, net.bytebuddy.implementation.bytecode.constant.DoubleConstantOpcodeTest, net.bytebuddy.implementation.bytecode.constant.DoubleConstantTest, net.bytebuddy.implementation.bytecode.constant.FieldConstantTest, net.bytebuddy.implementation.bytecode.constant.FloatConstantOpcodeTest, net.bytebuddy.implementation.bytecode.constant.FloatConstantTest, net.bytebuddy.implementation.bytecode.constant.IntegerConstantOpcodeTest, net.bytebuddy.implementation.bytecode.constant.IntegerConstantTest, net.bytebuddy.implementation.bytecode.constant.JavaConstantValueTest, net.bytebuddy.implementation.bytecode.constant.LongConstantOpcodeTest, net.bytebuddy.implementation.bytecode.constant.LongConstantTest, net.bytebuddy.implementation.bytecode.constant.MethodConstantTest, net.bytebuddy.implementation.bytecode.constant.NullConstantTest, net.bytebuddy.implementation.bytecode.constant.SerializedConstantTest, net.bytebuddy.implementation.bytecode.constant.TextConstantTest, net.bytebuddy.implementation.bytecode.member.FieldAccessOtherTest, net.bytebuddy.implementation.bytecode.member.FieldAccessTest, net.bytebuddy.implementation.bytecode.member.HandleInvocationTest, net.bytebuddy.implementation.bytecode.member.MethodInvocationDynamicTest, net.bytebuddy.implementation.bytecode.member.MethodInvocationGenericTest, net.bytebuddy.implementation.bytecode.member.MethodInvocationHandleTest, net.bytebuddy.implementation.bytecode.member.MethodInvocationOtherTest, net.bytebuddy.implementation.bytecode.member.MethodInvocationTest, net.bytebuddy.implementation.bytecode.member.MethodReturnTest, net.bytebuddy.implementation.bytecode.member.MethodVariableAccessOfMethodArgumentsTest, net.bytebuddy.implementation.bytecode.member.MethodVariableAccessOtherTest, net.bytebuddy.implementation.bytecode.member.MethodVariableAccessTest, net.bytebuddy.matcher.AccessibilityMatcherTest, net.bytebuddy.matcher.AnnotationTypeMatcherTest, net.bytebuddy.matcher.ArrayTypeMatcherTest, net.bytebuddy.matcher.BooleanMatcherTest, net.bytebuddy.matcher.CachingMatcherTest, net.bytebuddy.matcher.ClassLoaderHierarchyMatcherTest, net.bytebuddy.matcher.ClassLoaderParentMatcherTest, net.bytebuddy.matcher.CollectionElementMatcherTest, net.bytebuddy.matcher.CollectionErasureMatcherTest, net.bytebuddy.matcher.CollectionItemMatcherTest, net.bytebuddy.matcher.CollectionOneToOneMatcherTest, net.bytebuddy.matcher.CollectionSizeMatcherTest, net.bytebuddy.matcher.DeclaringAnnotationMatcherTest, net.bytebuddy.matcher.DeclaringFieldMatcherTest, net.bytebuddy.matcher.DeclaringMethodMatcherTest, net.bytebuddy.matcher.DeclaringTypeMatcherTest, net.bytebuddy.matcher.DefinedShapeMatcherTest, net.bytebuddy.matcher.DescriptorMatcherTest, net.bytebuddy.matcher.ElementMatcherJunctionConjunctionTest, net.bytebuddy.matcher.ElementMatcherJunctionDisjunctionTest, net.bytebuddy.matcher.ElementMatchersTest, net.bytebuddy.matcher.EqualityMatcherTest, net.bytebuddy.matcher.ErasureMatcherTest, net.bytebuddy.matcher.FailSafeMatcherTest, net.bytebuddy.matcher.FieldTypeMatcherTest, net.bytebuddy.matcher.FilterableListEmptyTest, net.bytebuddy.matcher.HasSuperTypeMatcherTest, net.bytebuddy.matcher.InheritedAnnotationMatcherTest, net.bytebuddy.matcher.InstanceTypeMatcherTest, net.bytebuddy.matcher.IsNamedMatcherTest, net.bytebuddy.matcher.LatentMatcherAccessorTest, net.bytebuddy.matcher.LatentMatcherConjunctionTest, net.bytebuddy.matcher.LatentMatcherDisjunctionTest, net.bytebuddy.matcher.LatentMatcherForFieldTokenTest, net.bytebuddy.matcher.LatentMatcherForMethodTokenTest, net.bytebuddy.matcher.LatentMatcherForSelfDeclaredMethodTest, net.bytebuddy.matcher.MethodExceptionTypeMatcherTest, net.bytebuddy.matcher.MethodOverrideMatcherTest, net.bytebuddy.matcher.MethodParameterMatcherTest, net.bytebuddy.matcher.MethodParameterTypeMatcherTest, net.bytebuddy.matcher.MethodParameterTypesMatcherTest, net.bytebuddy.matcher.MethodReturnTypeMatcherTest, net.bytebuddy.matcher.MethodSortMatcherTest, net.bytebuddy.matcher.ModifierMatcherTest, net.bytebuddy.matcher.NameMatcherTest, net.bytebuddy.matcher.NegatingMatcherTest, net.bytebuddy.matcher.NullMatcherTest, net.bytebuddy.matcher.PrimitiveTypeMatcherTest, net.bytebuddy.matcher.SignatureTokenMatcherTest, net.bytebuddy.matcher.StringMatcherTest, net.bytebuddy.matcher.SubTypeMatcherTest, net.bytebuddy.matcher.SuperTypeMatcherTest, net.bytebuddy.matcher.TypeSortMatcherTest, net.bytebuddy.matcher.VisibilityMatcherTest, net.bytebuddy.pool.TypePoolCacheProviderTest, net.bytebuddy.pool.TypePoolClassLoadingTest, net.bytebuddy.pool.TypePoolDefaultAnnotationDescriptionTest, net.bytebuddy.pool.TypePoolDefaultCacheTest, net.bytebuddy.pool.TypePoolDefaultComponentPoolStrategyTest, net.bytebuddy.pool.TypePoolDefaultEnumerationDescriptionTest, net.bytebuddy.pool.TypePoolDefaultFieldDescriptionTest, net.bytebuddy.pool.TypePoolDefaultGenericTypeListTest, net.bytebuddy.pool.TypePoolDefaultHierarchyTest, net.bytebuddy.pool.TypePoolDefaultLazyAnnotationListTest, net.bytebuddy.pool.TypePoolDefaultLazyFieldListTest, net.bytebuddy.pool.TypePoolDefaultLazyMethodListTest, net.bytebuddy.pool.TypePoolDefaultLazyParameterListTest, net.bytebuddy.pool.TypePoolDefaultLazyTypeContainmentTest, net.bytebuddy.pool.TypePoolDefaultLazyTypeDescriptionTest, net.bytebuddy.pool.TypePoolDefaultLazyTypeListTest, net.bytebuddy.pool.TypePoolDefaultMethodDescriptionTest, net.bytebuddy.pool.TypePoolDefaultPackageDescriptionTest, net.bytebuddy.pool.TypePoolDefaultParameterBagTest, net.bytebuddy.pool.TypePoolDefaultPrimitiveTypeTest, net.bytebuddy.pool.TypePoolDefaultReaderModeTest, net.bytebuddy.pool.TypePoolDefaultTest, net.bytebuddy.pool.TypePoolDefaultTypeDescriptionSuperClassLoadingTest, net.bytebuddy.pool.TypePoolDefaultTypeDescriptionTest, net.bytebuddy.pool.TypePoolDefaultWithLazyResolutionTypeDescriptionTest, net.bytebuddy.pool.TypePoolEmptyTest, net.bytebuddy.pool.TypePoolExplicitTest, net.bytebuddy.pool.TypePoolLazyFacadeTest, net.bytebuddy.pool.TypePoolLazyFacadeTypeDescriptionTest, net.bytebuddy.pool.TypePoolResolutionTest, net.bytebuddy.test.utility.CustomHamcrestMatchers, net.bytebuddy.utility.CompoundListTest, net.bytebuddy.utility.JavaConstantDynamicTest, net.bytebuddy.utility.JavaConstantMethodHandleDispatcherTest, net.bytebuddy.utility.JavaConstantMethodHandleTest, net.bytebuddy.utility.JavaConstantMethodTypeDispatcherTest, net.bytebuddy.utility.JavaConstantMethodTypeTest, net.bytebuddy.utility.JavaModuleTest, net.bytebuddy.utility.JavaTypeTest, net.bytebuddy.utility.RandomStringTest, net.bytebuddy.utility.StreamDrainerTest, net.bytebuddy.utility.privilege.GetSystemPropertyActionTest, net.bytebuddy.utility.privilege.SetAccessibleActionTest, net.bytebuddy.utility.visitor.ExceptionTableSensitiveMethodVisitorTest, net.bytebuddy.utility.visitor.LineNumberPrependingMethodVisitorTest, net.bytebuddy.utility.visitor.MetadataAwareClassVisitorTest, net.bytebuddy.utility.visitor.StackAwareMethodVisitorTest]
18:18:22.579 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Config: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=true, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=PRE_THEN_COND, synthesis=SMT, oracle=ANGELIC, solver=Z3, solverPath='/home/tdurieux/defects4j4repair/script/../libs/z3/build/z3', projectSources=[byte-buddy-dep/src/main/java], projectClasspath='[Ljava.net.URL;@66d33a', projectTests=[net.bytebuddy.ByteBuddyTest, net.bytebuddy.ByteBuddyTutorialExamplesTest, net.bytebuddy.ClassFileVersionKnownVersionsTest, net.bytebuddy.ClassFileVersionTest, net.bytebuddy.NamingStrategyTest, net.bytebuddy.TypeCacheTest, net.bytebuddy.agent.builder.AgentBuilderCircularityLockTest, net.bytebuddy.agent.builder.AgentBuilderClassFileBufferStrategyTest, net.bytebuddy.agent.builder.AgentBuilderDefaultApplicationRedefineTest, net.bytebuddy.agent.builder.AgentBuilderDefaultApplicationRedefinitionReiterationTest, net.bytebuddy.agent.builder.AgentBuilderDefaultApplicationResubmissionTest, net.bytebuddy.agent.builder.AgentBuilderDefaultApplicationSuperTypeLoadingTest, net.bytebuddy.agent.builder.AgentBuilderDefaultApplicationTest, net.bytebuddy.agent.builder.AgentBuilderDefaultNativeMethodStrategyTest, net.bytebuddy.agent.builder.AgentBuilderDefaultTest, net.bytebuddy.agent.builder.AgentBuilderDescriptionStrategyTest, net.bytebuddy.agent.builder.AgentBuilderFallbackStrategyByThrowableTypeTest, net.bytebuddy.agent.builder.AgentBuilderFallbackStrategySimpleTest, net.bytebuddy.agent.builder.AgentBuilderInitializationStrategySelfInjectionDispatcherTest, net.bytebuddy.agent.builder.AgentBuilderInitializationStrategyTest, net.bytebuddy.agent.builder.AgentBuilderInstallationListenerTest, net.bytebuddy.agent.builder.AgentBuilderLambdaInstrumentationStrategyTest, net.bytebuddy.agent.builder.AgentBuilderListenerTest, net.bytebuddy.agent.builder.AgentBuilderLocationStrategyCompoundTest, net.bytebuddy.agent.builder.AgentBuilderLocationStrategyForClassLoaderTest, net.bytebuddy.agent.builder.AgentBuilderLocationStrategyNoOpTest, net.bytebuddy.agent.builder.AgentBuilderLocationStrategySimpleTest, net.bytebuddy.agent.builder.AgentBuilderPoolStrategyTest, net.bytebuddy.agent.builder.AgentBuilderRawMatcherConjunctionTest, net.bytebuddy.agent.builder.AgentBuilderRawMatcherDisjunctionTest, net.bytebuddy.agent.builder.AgentBuilderRawMatcherForElementMatchersTest, net.bytebuddy.agent.builder.AgentBuilderRawMatcherForLoadStateTest, net.bytebuddy.agent.builder.AgentBuilderRawMatcherInversionTest, net.bytebuddy.agent.builder.AgentBuilderRawMatcherTrivialTest, net.bytebuddy.agent.builder.AgentBuilderRedefinitionStrategyBatchAllocatorTest, net.bytebuddy.agent.builder.AgentBuilderRedefinitionStrategyDiscoveryStrategyTest, net.bytebuddy.agent.builder.AgentBuilderRedefinitionStrategyListenerTest, net.bytebuddy.agent.builder.AgentBuilderRedefinitionStrategyResubmissionStrategyTest, net.bytebuddy.agent.builder.AgentBuilderRedefinitionStrategyTest, net.bytebuddy.agent.builder.AgentBuilderTransformerForBuildPluginTest, net.bytebuddy.agent.builder.AgentBuilderTransformerTest, net.bytebuddy.agent.builder.AgentBuilderTypeLocatorWithTypePoolCacheSimpleTest, net.bytebuddy.agent.builder.AgentBuilderTypeStrategyForBuildEntryPointTest, net.bytebuddy.agent.builder.AgentBuilderTypeStrategyTest, net.bytebuddy.agent.builder.LambdaFactoryTest, net.bytebuddy.agent.builder.RawMatcherForResolvableTypesTest, net.bytebuddy.asm.AdviceAnnotationTest, net.bytebuddy.asm.AdviceArgumentHandlerCopyingTest, net.bytebuddy.asm.AdviceBoxedParameterAssignmentTest, net.bytebuddy.asm.AdviceBoxedReturnAssignmentTest, net.bytebuddy.asm.AdviceCustomAnnotationOnFieldTest, net.bytebuddy.asm.AdviceCustomAnnotationOnParameterTest, net.bytebuddy.asm.AdviceDeadCodeTest, net.bytebuddy.asm.AdviceDiscardedEnterTypeTest, net.bytebuddy.asm.AdviceEnterValueTest, net.bytebuddy.asm.AdviceExchangedDuplicationTest, net.bytebuddy.asm.AdviceExitValueTest, net.bytebuddy.asm.AdviceFrameTest, net.bytebuddy.asm.AdviceIllegalTypeTest, net.bytebuddy.asm.AdviceImplementationTest, net.bytebuddy.asm.AdviceInconsistentFrameTest, net.bytebuddy.asm.AdviceInconsistentStackSizeTest, net.bytebuddy.asm.AdviceJsrRetTest, net.bytebuddy.asm.AdviceLocalValueTest, net.bytebuddy.asm.AdviceNoRegularReturnTest, net.bytebuddy.asm.AdviceNoRegularReturnWithinAdviceTest, net.bytebuddy.asm.AdviceRepeatOnDefaultValueTest, net.bytebuddy.asm.AdviceRepeatOnNonDefaultValueTest, net.bytebuddy.asm.AdviceRepeatOnTest, net.bytebuddy.asm.AdviceSizeConversionTest, net.bytebuddy.asm.AdviceSkipOnDefaultValueTest, net.bytebuddy.asm.AdviceSkipOnNonDefaultValueTest, net.bytebuddy.asm.AdviceSkipOnTest, net.bytebuddy.asm.AdviceSuppressionTest, net.bytebuddy.asm.AdviceTest, net.bytebuddy.asm.AdviceTypeTest, net.bytebuddy.asm.AdviceVariableAccessTest, net.bytebuddy.asm.AsmVisitorWrapperCompoundTest, net.bytebuddy.asm.AsmVisitorWrapperForDeclaredFieldsTest, net.bytebuddy.asm.AsmVisitorWrapperForDeclaredMethodsTest, net.bytebuddy.asm.AsmVisitorWrapperNoOpTest, net.bytebuddy.asm.MemberRemovalTest, net.bytebuddy.asm.MemberSubstitutionTest, net.bytebuddy.asm.ModifierAdjustmentTest, net.bytebuddy.asm.TypeConstantAdjustmentTest, net.bytebuddy.asm.TypeReferenceAdjustmentTest, net.bytebuddy.build.BuildLoggerTest, net.bytebuddy.build.CachedReturnPluginErrorTest, net.bytebuddy.build.CachedReturnPluginTest, net.bytebuddy.build.EntryPointDefaultTest, net.bytebuddy.build.HashCodeAndEqualsPluginTest, net.bytebuddy.build.PluginCompoundTest, net.bytebuddy.build.PluginEngineDefaultTest, net.bytebuddy.build.PluginEngineErrorHandlerTest, net.bytebuddy.build.PluginEngineListenerTest, net.bytebuddy.build.PluginEnginePoolStrategyTest, net.bytebuddy.build.PluginEngineSourceEmptyTest, net.bytebuddy.build.PluginEngineSourceForFolderTest, net.bytebuddy.build.PluginEngineSourceForJarFileTest, net.bytebuddy.build.PluginEngineSourceInMemoryTest, net.bytebuddy.build.PluginEngineSummaryTest, net.bytebuddy.build.PluginEngineTargetDiscardingTest, net.bytebuddy.build.PluginEngineTargetForFolderTest, net.bytebuddy.build.PluginEngineTargetForJarFileTest, net.bytebuddy.build.PluginEngineTargetInMemoryTest, net.bytebuddy.build.PluginEngineTypeStrategyTest, net.bytebuddy.build.PluginFactorySimpleTest, net.bytebuddy.build.PluginFactoryUsingReflectionArgumentResolverTypeTest, net.bytebuddy.build.PluginFactoryUsingReflectionTest, net.bytebuddy.build.PluginNoOpTest, net.bytebuddy.build.ToStringPluginTest, net.bytebuddy.description.ByteCodeElementTokenListTest, net.bytebuddy.description.TypeVariableSourceVisitorNoOpTest, net.bytebuddy.description.annotation.AnnotationDescriptionAbstractPreparedExceptionTest, net.bytebuddy.description.annotation.AnnotationDescriptionAnnotationInvocationHandlerTest, net.bytebuddy.description.annotation.AnnotationDescriptionAnnotationValueLoadedStateTest, net.bytebuddy.description.annotation.AnnotationDescriptionBuilderTest, net.bytebuddy.description.annotation.AnnotationDescriptionForLoadedAnnotationDifferentClassLoaderTest, net.bytebuddy.description.annotation.AnnotationDescriptionForLoadedAnnotationTest, net.bytebuddy.description.annotation.AnnotationDescriptionLatentTest, net.bytebuddy.description.annotation.AnnotationListEmptyTest, net.bytebuddy.description.annotation.AnnotationListExplicitTest, net.bytebuddy.description.annotation.AnnotationListForLoadedAnnotationsTest, net.bytebuddy.description.annotation.AnnotationSourceTest, net.bytebuddy.description.annotation.AnnotationValueForConstantTest, net.bytebuddy.description.annotation.AnnotationValueRenderingDispatcherTest, net.bytebuddy.description.enumeration.EnumerationDescriptionForLoadedEnumerationTest, net.bytebuddy.description.enumeration.EnumerationDescriptionLatentTest, net.bytebuddy.description.field.FieldDescriptionForLoadedFieldsTest, net.bytebuddy.description.field.FieldDescriptionLatentTest, net.bytebuddy.description.field.FieldDescriptionSignatureTokenTest, net.bytebuddy.description.field.FieldDescriptionTokenTest, net.bytebuddy.description.field.FieldListEmptyTest, net.bytebuddy.description.field.FieldListExplicitTest, net.bytebuddy.description.field.FieldListForLoadedFieldsTest, net.bytebuddy.description.method.MethodDescriptionForLoadedTest, net.bytebuddy.description.method.MethodDescriptionLatentTest, net.bytebuddy.description.method.MethodDescriptionLatentTypeInitializerTest, net.bytebuddy.description.method.MethodDescriptionSignatureTokenTest, net.bytebuddy.description.method.MethodDescriptionTokenTest, net.bytebuddy.description.method.MethodDescriptionTypeTokenTest, net.bytebuddy.description.method.MethodListEmptyTest, net.bytebuddy.description.method.MethodListExplicitTest, net.bytebuddy.description.method.MethodListForLoadedTypesTest, net.bytebuddy.description.method.ParameterDescriptionForLoadedParameterDispatcherTest, net.bytebuddy.description.method.ParameterDescriptionTokenTest, net.bytebuddy.description.method.ParameterListEmptyTest, net.bytebuddy.description.method.ParameterListExplicitTest, net.bytebuddy.description.method.ParameterListForLoadedExectutableDispatcherTest, net.bytebuddy.description.method.ParameterListForLoadedParameterTest, net.bytebuddy.description.modifier.EnumerationStateTest, net.bytebuddy.description.modifier.FieldManifestationTest, net.bytebuddy.description.modifier.FieldPersistenceTest, net.bytebuddy.description.modifier.MethodArgumentsTest, net.bytebuddy.description.modifier.MethodManifestationTest, net.bytebuddy.description.modifier.MethodStrictnessTest, net.bytebuddy.description.modifier.ModifierContributorResolverTest, net.bytebuddy.description.modifier.ModifierContributorTest, net.bytebuddy.description.modifier.OwnershipTest, net.bytebuddy.description.modifier.ParameterManifestationTest, net.bytebuddy.description.modifier.ProvisioningStateTest, net.bytebuddy.description.modifier.SynchronizationStateTest, net.bytebuddy.description.modifier.SyntheticStateTest, net.bytebuddy.description.modifier.TypeManifestationTest, net.bytebuddy.description.modifier.VisibilityExpansionTest, net.bytebuddy.description.modifier.VisibilityTest, net.bytebuddy.description.type.GenericSignatureResolutionTest, net.bytebuddy.description.type.PackageDescriptionForLoadedPackageTest, net.bytebuddy.description.type.PackageDescriptionSimpleTest, net.bytebuddy.description.type.TypeDefinitionSortOtherTest, net.bytebuddy.description.type.TypeDefinitionSortTest, net.bytebuddy.description.type.TypeDefinitionSuperClassIteratorTest, net.bytebuddy.description.type.TypeDescriptionArrayProjectionTest, net.bytebuddy.description.type.TypeDescriptionForLoadedTypeTest, net.bytebuddy.description.type.TypeDescriptionForPackageDescriptionTest, net.bytebuddy.description.type.TypeDescriptionGenericAnnotationReaderTest, net.bytebuddy.description.type.TypeDescriptionGenericBuilderTest, net.bytebuddy.description.type.TypeDescriptionGenericLazyProjectionWithLazyNavigationTest, net.bytebuddy.description.type.TypeDescriptionGenericOfNonGenericTypeForReifiedErasureTest, net.bytebuddy.description.type.TypeDescriptionGenericOfParameterizedTypeForGenerifiedErasureTest, net.bytebuddy.description.type.TypeDescriptionGenericOfParameterizedTypeForReifiedTypeTest, net.bytebuddy.description.type.TypeDescriptionGenericOfParameterizedTypeRenderingDelegateTest, net.bytebuddy.description.type.TypeDescriptionGenericOfTypeVariableSymbolicTest, net.bytebuddy.description.type.TypeDescriptionGenericOfTypeVariableWithAnnotationOverlayTest, net.bytebuddy.description.type.TypeDescriptionGenericVisitorAnnotationStripperTest, net.bytebuddy.description.type.TypeDescriptionGenericVisitorAssignerTest, net.bytebuddy.description.type.TypeDescriptionGenericVisitorForSignatureVisitorTest, net.bytebuddy.description.type.TypeDescriptionGenericVisitorNoOpTest, net.bytebuddy.description.type.TypeDescriptionGenericVisitorReducingTest, net.bytebuddy.description.type.TypeDescriptionGenericVisitorReifyingTest, net.bytebuddy.description.type.TypeDescriptionGenericVisitorSubstitutorForAttachmentTest, net.bytebuddy.description.type.TypeDescriptionGenericVisitorSubstitutorForDetachmentTest, net.bytebuddy.description.type.TypeDescriptionGenericVisitorSubstitutorForTokenNormalizationTest, net.bytebuddy.description.type.TypeDescriptionGenericVisitorSubstitutorForTypeVariableBindingTest, net.bytebuddy.description.type.TypeDescriptionGenericVisitorTypeErasingTest, net.bytebuddy.description.type.TypeDescriptionGenericVisitorValidatorForTypeAnnotations, net.bytebuddy.description.type.TypeDescriptionGenericVisitorValidatorTest, net.bytebuddy.description.type.TypeDescriptionLatentTest, net.bytebuddy.description.type.TypeInitializerTest, net.bytebuddy.description.type.TypeListEmptyTest, net.bytebuddy.description.type.TypeListExplicitTest, net.bytebuddy.description.type.TypeListForLoadedTest, net.bytebuddy.description.type.TypeListGenericEmptyTest, net.bytebuddy.description.type.TypeListGenericExplicitTest, net.bytebuddy.description.type.TypeListGenericForLoadedTypesTest, net.bytebuddy.description.type.TypeVariableTokenTest, net.bytebuddy.dynamic.ClassFileLocatorAgentBasedTest, net.bytebuddy.dynamic.ClassFileLocatorCompoundTest, net.bytebuddy.dynamic.ClassFileLocatorForClassLoaderTest, net.bytebuddy.dynamic.ClassFileLocatorForClassLoaderWeaklyReferencedTest, net.bytebuddy.dynamic.ClassFileLocatorForFolderTest, net.bytebuddy.dynamic.ClassFileLocatorForJarFileTest, net.bytebuddy.dynamic.ClassFileLocatorForModuleFileTest, net.bytebuddy.dynamic.ClassFileLocatorForModuleTest, net.bytebuddy.dynamic.ClassFileLocatorForModuleWeaklyReferencedTest, net.bytebuddy.dynamic.ClassFileLocatorForUrlTest, net.bytebuddy.dynamic.ClassFileLocatorNoOpTest, net.bytebuddy.dynamic.ClassFileLocatorPackageDiscriminatingTest, net.bytebuddy.dynamic.ClassFileLocatorResolutionTest, net.bytebuddy.dynamic.ClassFileLocatorSimpleTest, net.bytebuddy.dynamic.ClassWriterStrategyDefaultTest, net.bytebuddy.dynamic.DynamicTypeDefaultLoadedTest, net.bytebuddy.dynamic.DynamicTypeDefaultTest, net.bytebuddy.dynamic.DynamicTypeDefaultUnloadedTest, net.bytebuddy.dynamic.NexusTest, net.bytebuddy.dynamic.TargetTypeTest, net.bytebuddy.dynamic.TransformerCompoundTest, net.bytebuddy.dynamic.TransformerForFieldTest, net.bytebuddy.dynamic.TransformerForMethodTest, net.bytebuddy.dynamic.TransformerNoOpTest, net.bytebuddy.dynamic.TypeResolutionStrategyTest, net.bytebuddy.dynamic.loading.ByteArrayClassLoaderChildFirstPrependingEnumerationTest, net.bytebuddy.dynamic.loading.ByteArrayClassLoaderChildFirstTest, net.bytebuddy.dynamic.loading.ByteArrayClassLoaderEmptyEnumerationTest, net.bytebuddy.dynamic.loading.ByteArrayClassLoaderPackageLookupStrategy, net.bytebuddy.dynamic.loading.ByteArrayClassLoaderSingletonEnumerationTest, net.bytebuddy.dynamic.loading.ByteArrayClassLoaderSynchronizationStrategyTest, net.bytebuddy.dynamic.loading.ByteArrayClassLoaderTest, net.bytebuddy.dynamic.loading.ClassInjectorUsingInstrumentationTest, net.bytebuddy.dynamic.loading.ClassInjectorUsingLookupTest, net.bytebuddy.dynamic.loading.ClassInjectorUsingReflectionTest, net.bytebuddy.dynamic.loading.ClassInjectorUsingUnsafeTest, net.bytebuddy.dynamic.loading.ClassLoadingStrategyDefaultTest, net.bytebuddy.dynamic.loading.ClassLoadingStrategyForBootstrapInjectionTest, net.bytebuddy.dynamic.loading.ClassLoadingStrategyForUnsafeInjectionTest, net.bytebuddy.dynamic.loading.ClassLoadingStrategyUsingLookupTest, net.bytebuddy.dynamic.loading.ClassReloadingStrategyTest, net.bytebuddy.dynamic.loading.InjectionClassLoaderTest, net.bytebuddy.dynamic.loading.MultipleParentClassLoaderTest, net.bytebuddy.dynamic.loading.NoOpClassFileTransformerTest, net.bytebuddy.dynamic.loading.PackageDefinitionStrategyTypeSimpleTest, net.bytebuddy.dynamic.loading.PackageDefinitionStrategyTypeTrivialTest, net.bytebuddy.dynamic.loading.PackageDefinitionStrategyTypeUndefinedTest, net.bytebuddy.dynamic.loading.PackageDefinitionTrivialTest, net.bytebuddy.dynamic.loading.PackageTypeStrategyManifestReadingTest, net.bytebuddy.dynamic.loading.PackageTypeStrategyNoOpTest, net.bytebuddy.dynamic.scaffold.ClassWriterStrategyFrameComputingClassWriterTest, net.bytebuddy.dynamic.scaffold.FieldLocatorForClassHierarchyTest, net.bytebuddy.dynamic.scaffold.FieldLocatorForExactTypeTest, net.bytebuddy.dynamic.scaffold.FieldLocatorForTopLevelTypeTest, net.bytebuddy.dynamic.scaffold.FieldLocatorNoOpTest, net.bytebuddy.dynamic.scaffold.FieldLocatorResolutionTest, net.bytebuddy.dynamic.scaffold.FieldRegistryCompiledNoOpTest, net.bytebuddy.dynamic.scaffold.FieldRegistryDefaultTest, net.bytebuddy.dynamic.scaffold.InstrumentedTypeDefaultTest, net.bytebuddy.dynamic.scaffold.InstrumentedTypeFactoryDefaultTest, net.bytebuddy.dynamic.scaffold.InstrumentedTypeFrozenTest, net.bytebuddy.dynamic.scaffold.MethodGraphCompilerDefaultHarmonizerForJVMMethodTest, net.bytebuddy.dynamic.scaffold.MethodGraphCompilerDefaultHarmonizerForJavaMethodTest, net.bytebuddy.dynamic.scaffold.MethodGraphCompilerDefaultKeyTest, net.bytebuddy.dynamic.scaffold.MethodGraphCompilerDefaultMergerDirectionalTest, net.bytebuddy.dynamic.scaffold.MethodGraphCompilerDefaultTest, net.bytebuddy.dynamic.scaffold.MethodGraphCompilerForDeclaredMethodsTest, net.bytebuddy.dynamic.scaffold.MethodGraphEmptyTest, net.bytebuddy.dynamic.scaffold.MethodGraphLinkedDelegationTest, net.bytebuddy.dynamic.scaffold.MethodGraphNodeListTest, net.bytebuddy.dynamic.scaffold.MethodGraphNodeSimpleTest, net.bytebuddy.dynamic.scaffold.MethodGraphNodeSortTest, net.bytebuddy.dynamic.scaffold.MethodGraphNodeUnresolvedTest, net.bytebuddy.dynamic.scaffold.MethodGraphSimpleTest, net.bytebuddy.dynamic.scaffold.MethodRegistryDefaultTest, net.bytebuddy.dynamic.scaffold.MethodRegistryHandlerTest, net.bytebuddy.dynamic.scaffold.TypeInitializerDrainDefaultTest, net.bytebuddy.dynamic.scaffold.TypeValidationTest, net.bytebuddy.dynamic.scaffold.TypeWriterDeclarationPreservationTest, net.bytebuddy.dynamic.scaffold.TypeWriterDefaultForInliningWithFullProcessingInitializationHandlerAppendingFrameWriterActiveTest, net.bytebuddy.dynamic.scaffold.TypeWriterDefaultForInliningWithFullProcessingInitializationHandlerAppendingFrameWriterExpandingTest, net.bytebuddy.dynamic.scaffold.TypeWriterDefaultForInliningWithFullProcessingInitializationHandlerAppendingFrameWriterNoOpTest, net.bytebuddy.dynamic.scaffold.TypeWriterDefaultTest, net.bytebuddy.dynamic.scaffold.TypeWriterFieldPoolDisabledTest, net.bytebuddy.dynamic.scaffold.TypeWriterFieldPoolRecordTest, net.bytebuddy.dynamic.scaffold.TypeWriterInitializerRemapperTest, net.bytebuddy.dynamic.scaffold.TypeWriterMethodPoolRecordTest, net.bytebuddy.dynamic.scaffold.inline.DecoratingDynamicTypeBuilderTest, net.bytebuddy.dynamic.scaffold.inline.InlineImplementationMatcherTest, net.bytebuddy.dynamic.scaffold.inline.MethodNameTransformerPrefixingTest, net.bytebuddy.dynamic.scaffold.inline.MethodNameTransformerSuffixingTest, net.bytebuddy.dynamic.scaffold.inline.MethodRebaseResolverDefaultTest, net.bytebuddy.dynamic.scaffold.inline.MethodRebaseResolverDisabledTest, net.bytebuddy.dynamic.scaffold.inline.MethodRebaseResolverResolutionForRebasedConstructorTest, net.bytebuddy.dynamic.scaffold.inline.MethodRebaseResolverResolutionForRebasedMethodTest, net.bytebuddy.dynamic.scaffold.inline.MethodRebaseResolverResolutionPreservedTest, net.bytebuddy.dynamic.scaffold.inline.RebaseDynamicTypeBuilderRebaseableMatcherTest, net.bytebuddy.dynamic.scaffold.inline.RebaseDynamicTypeBuilderTest, net.bytebuddy.dynamic.scaffold.inline.RebaseImplementationTargetFactoryTest, net.bytebuddy.dynamic.scaffold.inline.RebaseImplementationTargetSpecialMethodInvocationTest, net.bytebuddy.dynamic.scaffold.inline.RebaseImplementationTargetTest, net.bytebuddy.dynamic.scaffold.inline.RedefinitionDynamicTypeBuilderTest, net.bytebuddy.dynamic.scaffold.subclass.ConstructorStrategyDefaultTest, net.bytebuddy.dynamic.scaffold.subclass.ConstructorStrategyForDefaultConstructorTest, net.bytebuddy.dynamic.scaffold.subclass.SubclassDynamicTypeBuilderInstrumentableMatcherTest, net.bytebuddy.dynamic.scaffold.subclass.SubclassDynamicTypeBuilderTest, net.bytebuddy.dynamic.scaffold.subclass.SubclassImplementationTargetFactoryTest, net.bytebuddy.dynamic.scaffold.subclass.SubclassImplementationTargetTest, net.bytebuddy.implementation.DefaultMethodCallTest, net.bytebuddy.implementation.EqualsMethodOtherTest, net.bytebuddy.implementation.EqualsMethodTest, net.bytebuddy.implementation.ExceptionMethodTest, net.bytebuddy.implementation.FieldAccessorFieldNameExtractorForBeanPropertyTest, net.bytebuddy.implementation.FieldAccessorFieldNameExtractorForFixedValueTest, net.bytebuddy.implementation.FieldAccessorOtherTest, net.bytebuddy.implementation.FieldAccessorTest, net.bytebuddy.implementation.FixedValueConstantPoolTypesTest, net.bytebuddy.implementation.FixedValueTest, net.bytebuddy.implementation.HashCodeMethodOtherTest, net.bytebuddy.implementation.HashCodeMethodTest, net.bytebuddy.implementation.ImplementationCompoundComposableTest, net.bytebuddy.implementation.ImplementationCompoundTest, net.bytebuddy.implementation.ImplementationContextDefaultOtherTest, net.bytebuddy.implementation.ImplementationContextDefaultTest, net.bytebuddy.implementation.ImplementationContextDisabledTest, net.bytebuddy.implementation.ImplementationSpecialMethodInvocationIllegalTest, net.bytebuddy.implementation.ImplementationSpecialMethodInvocationSimpleTest, net.bytebuddy.implementation.ImplementationTargetAbstractBaseDefaultMethodInvocationTest, net.bytebuddy.implementation.InvocationHandlerAdapterTest, net.bytebuddy.implementation.InvokeDynamicTest, net.bytebuddy.implementation.LoadedTypeInitializerCompoundTest, net.bytebuddy.implementation.LoadedTypeInitializerForStaticFieldTest, net.bytebuddy.implementation.LoadedTypeInitializerNoOpTest, net.bytebuddy.implementation.MethodAccessorFactoryAccessTypeTest, net.bytebuddy.implementation.MethodAccessorFactoryIllegalTest, net.bytebuddy.implementation.MethodCallTest, net.bytebuddy.implementation.MethodCallTypeTest, net.bytebuddy.implementation.MethodDelegationAllArgumentsTest, net.bytebuddy.implementation.MethodDelegationArgumentTest, net.bytebuddy.implementation.MethodDelegationBindingPriorityTest, net.bytebuddy.implementation.MethodDelegationChainedTest, net.bytebuddy.implementation.MethodDelegationCheckedExceptionTest, net.bytebuddy.implementation.MethodDelegationConstructionTest, net.bytebuddy.implementation.MethodDelegationDefaultCallTest, net.bytebuddy.implementation.MethodDelegationDefaultMethodTest, net.bytebuddy.implementation.MethodDelegationDefaultTest, net.bytebuddy.implementation.MethodDelegationExceptionTest, net.bytebuddy.implementation.MethodDelegationFieldProxyTest, net.bytebuddy.implementation.MethodDelegationFieldValueTest, net.bytebuddy.implementation.MethodDelegationIgnoreForBindingTest, net.bytebuddy.implementation.MethodDelegationMethodReturnTest, net.bytebuddy.implementation.MethodDelegationMorphTest, net.bytebuddy.implementation.MethodDelegationOriginTest, net.bytebuddy.implementation.MethodDelegationOtherTest, net.bytebuddy.implementation.MethodDelegationPipeTest, net.bytebuddy.implementation.MethodDelegationRuntimeTypeTest, net.bytebuddy.implementation.MethodDelegationStubValueTest, net.bytebuddy.implementation.MethodDelegationSuperCallTest, net.bytebuddy.implementation.MethodDelegationSuperMethodTest, net.bytebuddy.implementation.MethodDelegationSuperTest, net.bytebuddy.implementation.MethodDelegationTest, net.bytebuddy.implementation.MethodDelegationThisTest, net.bytebuddy.implementation.ModifierReviewableTest, net.bytebuddy.implementation.StubMethodOtherTest, net.bytebuddy.implementation.StubMethodTest, net.bytebuddy.implementation.SuperMethodCallOtherTest, net.bytebuddy.implementation.SuperMethodCallTest, net.bytebuddy.implementation.ToStringMethodOtherTest, net.bytebuddy.implementation.ToStringMethodTest, net.bytebuddy.implementation.attribute.AnnotationAppenderDefaultTest, net.bytebuddy.implementation.attribute.AnnotationAppenderForTypeAnnotationsTest, net.bytebuddy.implementation.attribute.AnnotationAppenderTargetTest, net.bytebuddy.implementation.attribute.AnnotationRetentionTest, net.bytebuddy.implementation.attribute.AnnotationValueFilterDefaultTest, net.bytebuddy.implementation.attribute.FieldAttributeAppenderCompoundTest, net.bytebuddy.implementation.attribute.FieldAttributeAppenderFactoryCompoundTest, net.bytebuddy.implementation.attribute.FieldAttributeAppenderForAnnotationsTest, net.bytebuddy.implementation.attribute.FieldAttributeAppenderForInstrumentedFieldTest, net.bytebuddy.implementation.attribute.FieldAttributeAppenderNoOpTest, net.bytebuddy.implementation.attribute.MethodAttributeAppenderCompoundTest, net.bytebuddy.implementation.attribute.MethodAttributeAppenderExplicitTest, net.bytebuddy.implementation.attribute.MethodAttributeAppenderFactoryCompoundTest, net.bytebuddy.implementation.attribute.MethodAttributeAppenderForInstrumentedMethodOtherTest, net.bytebuddy.implementation.attribute.MethodAttributeAppenderForInstrumentedMethodTest, net.bytebuddy.implementation.attribute.MethodAttributeAppenderForReceiverTypeTest, net.bytebuddy.implementation.attribute.MethodAttributeAppenderNoOpTest, net.bytebuddy.implementation.attribute.TypeAttributeAppenderCompoundTest, net.bytebuddy.implementation.attribute.TypeAttributeAppenderExplicitTest, net.bytebuddy.implementation.attribute.TypeAttributeAppenderForInstrumentedTypeDifferentiatingTest, net.bytebuddy.implementation.attribute.TypeAttributeAppenderForInstrumentedTypeTest, net.bytebuddy.implementation.attribute.TypeAttributeAppenderNoOpTest, net.bytebuddy.implementation.auxiliary.AuxiliaryTypeSignatureRelevantTest, net.bytebuddy.implementation.auxiliary.MethodCallProxySingleArgumentTest, net.bytebuddy.implementation.auxiliary.MethodCallProxyTest, net.bytebuddy.implementation.auxiliary.PrivilegedMemberLookupActionTest, net.bytebuddy.implementation.auxiliary.TrivialTypeTest, net.bytebuddy.implementation.auxiliary.TypeProxyCreationTest, net.bytebuddy.implementation.auxiliary.TypeProxyInvocationFactoryDefaultTest, net.bytebuddy.implementation.bind.ArgumentTypeResolverPrimitiveTest, net.bytebuddy.implementation.bind.ArgumentTypeResolverReferenceTest, net.bytebuddy.implementation.bind.DeclaringTypeResolverTest, net.bytebuddy.implementation.bind.MethodBindingAmbiguityResolutionTest, net.bytebuddy.implementation.bind.MethodBindingBuilderTest, net.bytebuddy.implementation.bind.MethodDelegationBinderAmbiguityResolverChainTest, net.bytebuddy.implementation.bind.MethodDelegationBinderAmbiguityResolverDirectionalTest, net.bytebuddy.implementation.bind.MethodDelegationBinderAmbiguityResolverNoOpTest, net.bytebuddy.implementation.bind.MethodDelegationBinderBindingResolverDefaultTest, net.bytebuddy.implementation.bind.MethodDelegationBinderBindingResolverStreamWritingTest, net.bytebuddy.implementation.bind.MethodDelegationBinderBindingResolverUniqueTest, net.bytebuddy.implementation.bind.MethodDelegationBinderProcessorTest, net.bytebuddy.implementation.bind.MethodDelegationBinderTerminationHandlerTest, net.bytebuddy.implementation.bind.MethodDelegationBinderTest, net.bytebuddy.implementation.bind.MethodDelegationBindingParameterBindingTest, net.bytebuddy.implementation.bind.MethodNameEqualityResolverTest, net.bytebuddy.implementation.bind.ParameterLengthResolverTest, net.bytebuddy.implementation.bind.ParameterMethodBindingTest, net.bytebuddy.implementation.bind.annotation.AllArgumentsBinderTest, net.bytebuddy.implementation.bind.annotation.ArgumentBinderTest, net.bytebuddy.implementation.bind.annotation.BindingPriorityResolverTest, net.bytebuddy.implementation.bind.annotation.DefaultBinderTest, net.bytebuddy.implementation.bind.annotation.DefaultCallBinderTest, net.bytebuddy.implementation.bind.annotation.DefaultMethodBinderTest, net.bytebuddy.implementation.bind.annotation.EmptyBinderTest, net.bytebuddy.implementation.bind.annotation.FieldProxyBinderTest, net.bytebuddy.implementation.bind.annotation.FieldValueBinderTest, net.bytebuddy.implementation.bind.annotation.IgnoreForBindingVerifierTest, net.bytebuddy.implementation.bind.annotation.MorphBinderTest, net.bytebuddy.implementation.bind.annotation.OriginBinderTest, net.bytebuddy.implementation.bind.annotation.PipeBinderTest, net.bytebuddy.implementation.bind.annotation.RuntimeTypeVerifierTest, net.bytebuddy.implementation.bind.annotation.StubValueBinderTest, net.bytebuddy.implementation.bind.annotation.SuperBinderTest, net.bytebuddy.implementation.bind.annotation.SuperCallBinderTest, net.bytebuddy.implementation.bind.annotation.SuperMethodBinderTest, net.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinderTest, net.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDriverBinderParameterBinderForFixedValueOfConstantOtherTest, net.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDriverBinderParameterBinderForFixedValueOfConstantTest, net.bytebuddy.implementation.bind.annotation.ThisBinderTest, net.bytebuddy.implementation.bytecode.AdditionTest, net.bytebuddy.implementation.bytecode.ByteCodeAppenderCompoundTest, net.bytebuddy.implementation.bytecode.ByteCodeAppenderSimpleTest, net.bytebuddy.implementation.bytecode.ByteCodeAppenderSizeTest, net.bytebuddy.implementation.bytecode.DuplicationOtherTest, net.bytebuddy.implementation.bytecode.DuplicationTest, net.bytebuddy.implementation.bytecode.DuplicationWithFlipTest, net.bytebuddy.implementation.bytecode.MultiplicationTest, net.bytebuddy.implementation.bytecode.RemovalTest, net.bytebuddy.implementation.bytecode.StackManipulationCompoundTest, net.bytebuddy.implementation.bytecode.StackManipulationSizeTest, net.bytebuddy.implementation.bytecode.StackManipulationTest, net.bytebuddy.implementation.bytecode.StackSizeMaximumTest, net.bytebuddy.implementation.bytecode.StackSizeTest, net.bytebuddy.implementation.bytecode.ThrowTest, net.bytebuddy.implementation.bytecode.TypeCreationTest, net.bytebuddy.implementation.bytecode.assign.AssignerEqualTypesOnlyTest, net.bytebuddy.implementation.bytecode.assign.AssignerRefusingTest, net.bytebuddy.implementation.bytecode.assign.AssignerTypingTest, net.bytebuddy.implementation.bytecode.assign.InstanceCheckTest, net.bytebuddy.implementation.bytecode.assign.TypeCastingTest, net.bytebuddy.implementation.bytecode.assign.primitive.PrimitiveBoxingDelegateTest, net.bytebuddy.implementation.bytecode.assign.primitive.PrimitiveBoxingDelegateTestWithReferenceTest, net.bytebuddy.implementation.bytecode.assign.primitive.PrimitiveTypeAwareAssignerBoxingTest, net.bytebuddy.implementation.bytecode.assign.primitive.PrimitiveTypeAwareAssignerImplicitUnboxingTest, net.bytebuddy.implementation.bytecode.assign.primitive.PrimitiveTypeAwareAssignerPrimitiveTest, net.bytebuddy.implementation.bytecode.assign.primitive.PrimitiveTypeAwareAssignerUnboxingTest, net.bytebuddy.implementation.bytecode.assign.primitive.PrimitiveUnboxingDelegateDirectTest, net.bytebuddy.implementation.bytecode.assign.primitive.PrimitiveUnboxingDelegateOtherTest, net.bytebuddy.implementation.bytecode.assign.primitive.PrimitiveUnboxingDelegateWideningTest, net.bytebuddy.implementation.bytecode.assign.primitive.PrimitiveWideningDelegateIllegalTest, net.bytebuddy.implementation.bytecode.assign.primitive.PrimitiveWideningDelegateNontrivialTest, net.bytebuddy.implementation.bytecode.assign.primitive.PrimitiveWideningDelegateOtherTest, net.bytebuddy.implementation.bytecode.assign.primitive.PrimitiveWideningDelegateTrivialTest, net.bytebuddy.implementation.bytecode.assign.primitive.VoidAwareAssignerNonVoidToVoidTest, net.bytebuddy.implementation.bytecode.assign.primitive.VoidAwareAssignerTest, net.bytebuddy.implementation.bytecode.assign.primitive.VoidAwareAssignerVoidToNonVoidTest, net.bytebuddy.implementation.bytecode.assign.reference.ReferenceTypeAwareAssignerTest, net.bytebuddy.implementation.bytecode.collection.ArrayAccessOtherTest, net.bytebuddy.implementation.bytecode.collection.ArrayAccessTest, net.bytebuddy.implementation.bytecode.collection.ArrayFactoryPrimitiveTest, net.bytebuddy.implementation.bytecode.collection.ArrayFactoryReferenceTest, net.bytebuddy.implementation.bytecode.constant.ClassConstantPrimitiveTest, net.bytebuddy.implementation.bytecode.constant.ClassConstantReferenceTest, net.bytebuddy.implementation.bytecode.constant.DefaultValueTest, net.bytebuddy.implementation.bytecode.constant.DoubleConstantOpcodeTest, net.bytebuddy.implementation.bytecode.constant.DoubleConstantTest, net.bytebuddy.implementation.bytecode.constant.FieldConstantTest, net.bytebuddy.implementation.bytecode.constant.FloatConstantOpcodeTest, net.bytebuddy.implementation.bytecode.constant.FloatConstantTest, net.bytebuddy.implementation.bytecode.constant.IntegerConstantOpcodeTest, net.bytebuddy.implementation.bytecode.constant.IntegerConstantTest, net.bytebuddy.implementation.bytecode.constant.JavaConstantValueTest, net.bytebuddy.implementation.bytecode.constant.LongConstantOpcodeTest, net.bytebuddy.implementation.bytecode.constant.LongConstantTest, net.bytebuddy.implementation.bytecode.constant.MethodConstantTest, net.bytebuddy.implementation.bytecode.constant.NullConstantTest, net.bytebuddy.implementation.bytecode.constant.SerializedConstantTest, net.bytebuddy.implementation.bytecode.constant.TextConstantTest, net.bytebuddy.implementation.bytecode.member.FieldAccessOtherTest, net.bytebuddy.implementation.bytecode.member.FieldAccessTest, net.bytebuddy.implementation.bytecode.member.HandleInvocationTest, net.bytebuddy.implementation.bytecode.member.MethodInvocationDynamicTest, net.bytebuddy.implementation.bytecode.member.MethodInvocationGenericTest, net.bytebuddy.implementation.bytecode.member.MethodInvocationHandleTest, net.bytebuddy.implementation.bytecode.member.MethodInvocationOtherTest, net.bytebuddy.implementation.bytecode.member.MethodInvocationTest, net.bytebuddy.implementation.bytecode.member.MethodReturnTest, net.bytebuddy.implementation.bytecode.member.MethodVariableAccessOfMethodArgumentsTest, net.bytebuddy.implementation.bytecode.member.MethodVariableAccessOtherTest, net.bytebuddy.implementation.bytecode.member.MethodVariableAccessTest, net.bytebuddy.matcher.AccessibilityMatcherTest, net.bytebuddy.matcher.AnnotationTypeMatcherTest, net.bytebuddy.matcher.ArrayTypeMatcherTest, net.bytebuddy.matcher.BooleanMatcherTest, net.bytebuddy.matcher.CachingMatcherTest, net.bytebuddy.matcher.ClassLoaderHierarchyMatcherTest, net.bytebuddy.matcher.ClassLoaderParentMatcherTest, net.bytebuddy.matcher.CollectionElementMatcherTest, net.bytebuddy.matcher.CollectionErasureMatcherTest, net.bytebuddy.matcher.CollectionItemMatcherTest, net.bytebuddy.matcher.CollectionOneToOneMatcherTest, net.bytebuddy.matcher.CollectionSizeMatcherTest, net.bytebuddy.matcher.DeclaringAnnotationMatcherTest, net.bytebuddy.matcher.DeclaringFieldMatcherTest, net.bytebuddy.matcher.DeclaringMethodMatcherTest, net.bytebuddy.matcher.DeclaringTypeMatcherTest, net.bytebuddy.matcher.DefinedShapeMatcherTest, net.bytebuddy.matcher.DescriptorMatcherTest, net.bytebuddy.matcher.ElementMatcherJunctionConjunctionTest, net.bytebuddy.matcher.ElementMatcherJunctionDisjunctionTest, net.bytebuddy.matcher.ElementMatchersTest, net.bytebuddy.matcher.EqualityMatcherTest, net.bytebuddy.matcher.ErasureMatcherTest, net.bytebuddy.matcher.FailSafeMatcherTest, net.bytebuddy.matcher.FieldTypeMatcherTest, net.bytebuddy.matcher.FilterableListEmptyTest, net.bytebuddy.matcher.HasSuperTypeMatcherTest, net.bytebuddy.matcher.InheritedAnnotationMatcherTest, net.bytebuddy.matcher.InstanceTypeMatcherTest, net.bytebuddy.matcher.IsNamedMatcherTest, net.bytebuddy.matcher.LatentMatcherAccessorTest, net.bytebuddy.matcher.LatentMatcherConjunctionTest, net.bytebuddy.matcher.LatentMatcherDisjunctionTest, net.bytebuddy.matcher.LatentMatcherForFieldTokenTest, net.bytebuddy.matcher.LatentMatcherForMethodTokenTest, net.bytebuddy.matcher.LatentMatcherForSelfDeclaredMethodTest, net.bytebuddy.matcher.MethodExceptionTypeMatcherTest, net.bytebuddy.matcher.MethodOverrideMatcherTest, net.bytebuddy.matcher.MethodParameterMatcherTest, net.bytebuddy.matcher.MethodParameterTypeMatcherTest, net.bytebuddy.matcher.MethodParameterTypesMatcherTest, net.bytebuddy.matcher.MethodReturnTypeMatcherTest, net.bytebuddy.matcher.MethodSortMatcherTest, net.bytebuddy.matcher.ModifierMatcherTest, net.bytebuddy.matcher.NameMatcherTest, net.bytebuddy.matcher.NegatingMatcherTest, net.bytebuddy.matcher.NullMatcherTest, net.bytebuddy.matcher.PrimitiveTypeMatcherTest, net.bytebuddy.matcher.SignatureTokenMatcherTest, net.bytebuddy.matcher.StringMatcherTest, net.bytebuddy.matcher.SubTypeMatcherTest, net.bytebuddy.matcher.SuperTypeMatcherTest, net.bytebuddy.matcher.TypeSortMatcherTest, net.bytebuddy.matcher.VisibilityMatcherTest, net.bytebuddy.pool.TypePoolCacheProviderTest, net.bytebuddy.pool.TypePoolClassLoadingTest, net.bytebuddy.pool.TypePoolDefaultAnnotationDescriptionTest, net.bytebuddy.pool.TypePoolDefaultCacheTest, net.bytebuddy.pool.TypePoolDefaultComponentPoolStrategyTest, net.bytebuddy.pool.TypePoolDefaultEnumerationDescriptionTest, net.bytebuddy.pool.TypePoolDefaultFieldDescriptionTest, net.bytebuddy.pool.TypePoolDefaultGenericTypeListTest, net.bytebuddy.pool.TypePoolDefaultHierarchyTest, net.bytebuddy.pool.TypePoolDefaultLazyAnnotationListTest, net.bytebuddy.pool.TypePoolDefaultLazyFieldListTest, net.bytebuddy.pool.TypePoolDefaultLazyMethodListTest, net.bytebuddy.pool.TypePoolDefaultLazyParameterListTest, net.bytebuddy.pool.TypePoolDefaultLazyTypeContainmentTest, net.bytebuddy.pool.TypePoolDefaultLazyTypeDescriptionTest, net.bytebuddy.pool.TypePoolDefaultLazyTypeListTest, net.bytebuddy.pool.TypePoolDefaultMethodDescriptionTest, net.bytebuddy.pool.TypePoolDefaultPackageDescriptionTest, net.bytebuddy.pool.TypePoolDefaultParameterBagTest, net.bytebuddy.pool.TypePoolDefaultPrimitiveTypeTest, net.bytebuddy.pool.TypePoolDefaultReaderModeTest, net.bytebuddy.pool.TypePoolDefaultTest, net.bytebuddy.pool.TypePoolDefaultTypeDescriptionSuperClassLoadingTest, net.bytebuddy.pool.TypePoolDefaultTypeDescriptionTest, net.bytebuddy.pool.TypePoolDefaultWithLazyResolutionTypeDescriptionTest, net.bytebuddy.pool.TypePoolEmptyTest, net.bytebuddy.pool.TypePoolExplicitTest, net.bytebuddy.pool.TypePoolLazyFacadeTest, net.bytebuddy.pool.TypePoolLazyFacadeTypeDescriptionTest, net.bytebuddy.pool.TypePoolResolutionTest, net.bytebuddy.test.utility.CustomHamcrestMatchers, net.bytebuddy.utility.CompoundListTest, net.bytebuddy.utility.JavaConstantDynamicTest, net.bytebuddy.utility.JavaConstantMethodHandleDispatcherTest, net.bytebuddy.utility.JavaConstantMethodHandleTest, net.bytebuddy.utility.JavaConstantMethodTypeDispatcherTest, net.bytebuddy.utility.JavaConstantMethodTypeTest, net.bytebuddy.utility.JavaModuleTest, net.bytebuddy.utility.JavaTypeTest, net.bytebuddy.utility.RandomStringTest, net.bytebuddy.utility.StreamDrainerTest, net.bytebuddy.utility.privilege.GetSystemPropertyActionTest, net.bytebuddy.utility.privilege.SetAccessibleActionTest, net.bytebuddy.utility.visitor.ExceptionTableSensitiveMethodVisitorTest, net.bytebuddy.utility.visitor.LineNumberPrependingMethodVisitorTest, net.bytebuddy.utility.visitor.MetadataAwareClassVisitorTest, net.bytebuddy.utility.visitor.StackAwareMethodVisitorTest], complianceLevel=8, outputFolder=., json=true}
18:18:22.580 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Available processors (cores): 4
18:18:22.586 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Free memory: 878 MB
18:18:22.586 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Maximum memory: 3 GB
18:18:22.586 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Total memory available to JVM: 981 MB
18:18:22.586 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Java version: 1.8.0_181
18:18:22.587 [main] INFO  fr.inria.lille.repair.nopol.NoPol - JAVA_HOME: /usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/
18:18:22.587 [main] INFO  fr.inria.lille.repair.nopol.NoPol - PATH: /usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:/usr/lib/oar/oardodo:/usr/lib/oar/oardodo:/usr/local/bin:/usr/bin:/bin:/usr/games
18:19:40.459 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #1
18:19:40.459 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation net.bytebuddy.matcher.ElementMatchers:1002 which is executed by 330 tests
-597549954
18:19:41.574 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #2
18:19:41.574 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation net.bytebuddy.description.type.TypeDescription$Generic$Visitor$Reducing:2238 which is executed by 684 tests
-1663341501
18:19:42.194 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #3
18:19:42.194 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation net.bytebuddy.description.type.TypeDescription$Generic$Visitor$Reducing:2309 which is executed by 652 tests
-1663341501
18:19:42.773 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #4
18:19:42.774 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation net.bytebuddy.dynamic.DynamicType$Builder$AbstractBase:3135 which is executed by 392 tests
1409209338
18:19:43.322 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #5
18:19:43.323 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation net.bytebuddy.dynamic.DynamicType$Builder$AbstractBase:3128 which is executed by 392 tests
1409209338
18:19:48.959 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #6
18:19:48.959 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation net.bytebuddy.dynamic.DynamicType$Builder$AbstractBase:3121 which is executed by 392 tests
1409209338
18:19:49.467 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #7
18:19:49.467 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation net.bytebuddy.dynamic.TargetType:46 which is executed by 686 tests
-1814880116
18:19:49.911 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #8
18:19:49.912 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation net.bytebuddy.dynamic.TargetType:42 which is executed by 686 tests
-1814880116
18:19:50.167 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
Feb 13, 2019 6:19:51 PM net.bytebuddy.test.utility.JavaVersionRule$NoOpStatement evaluate
WARNING: Ignoring test case: Requires a Java version of at least 11
Feb 13, 2019 6:19:51 PM net.bytebuddy.test.utility.JavaVersionRule$NoOpStatement evaluate
WARNING: Ignoring test case: Requires a Java version of at least 11




java.lang.IllegalStateException: public static final java.lang.String net.bytebuddy.implementation.FieldAccessorOtherTest$StaticFieldHolder.FOO is not declared by class net.bytebuddy.renamed.java.util.concurrent.Callable$ByteBuddy$Ohq9lgaX
    at net.bytebuddy.implementation.FieldAccessor$FieldLocation$Absolute.prepare(FieldAccessor.java:209)
    at net.bytebuddy.implementation.FieldAccessor$ForImplicitProperty.appender(FieldAccessor.java:656)
    at net.bytebuddy.dynamic.scaffold.MethodRegistry$Handler$ForImplementation.compile(MethodRegistry.java:230)
    at net.bytebuddy.dynamic.scaffold.MethodRegistry$Handler$ForImplementation.compile(MethodRegistry.java:202)
    at net.bytebuddy.dynamic.scaffold.MethodRegistry$Default$Prepared.compile(MethodRegistry.java:731)
    at net.bytebuddy.dynamic.scaffold.subclass.SubclassDynamicTypeBuilder.make(SubclassDynamicTypeBuilder.java:199)
Feb 13, 2019 6:19:59 PM net.bytebuddy.test.utility.JavaVersionRule$NoOpStatement evaluate
WARNING: Ignoring test case: Requires a Java version of at least 11
Feb 13, 2019 6:19:59 PM net.bytebuddy.test.utility.JavaVersionRule$NoOpStatement evaluate
WARNING: Ignoring test case: Requires a Java version of at least 11
Feb 13, 2019 6:19:59 PM net.bytebuddy.test.utility.JavaVersionRule$NoOpStatement evaluate
WARNING: Ignoring test case: Requires a Java version of at least 11
Feb 13, 2019 6:19:59 PM net.bytebuddy.test.utility.JavaVersionRule$NoOpStatement evaluate
WARNING: Ignoring test case: Requires a Java version of at least 11
Feb 13, 2019 6:19:59 PM net.bytebuddy.test.utility.JavaVersionRule$NoOpStatement evaluate
WARNING: Ignoring test case: Requires a Java version of at least 11
Feb 13, 2019 6:20:00 PM net.bytebuddy.test.utility.JavaVersionRule$NoOpStatement evaluate
WARNING: Ignoring test case: Requires a Java version of at least 11
Feb 13, 2019 6:20:00 PM net.bytebuddy.test.utility.JavaVersionRule$NoOpStatement evaluate
WARNING: Ignoring test case: Requires a Java version of at least 11
Feb 13, 2019 6:20:00 PM net.bytebuddy.test.utility.JavaVersionRule$NoOpStatement evaluate
WARNING: Ignoring test case: Requires a Java version of at least 11
Feb 13, 2019 6:20:00 PM net.bytebuddy.test.utility.JavaVersionRule$NoOpStatement evaluate
WARNING: Ignoring test case: Requires a Java version of at least 11
Feb 13, 2019 6:20:00 PM net.bytebuddy.test.utility.JavaVersionRule$NoOpStatement evaluate
WARNING: Ignoring test case: Requires a Java version of at least 11
Feb 13, 2019 6:20:00 PM net.bytebuddy.test.utility.JavaVersionRule$NoOpStatement evaluate
WARNING: Ignoring test case: Requires a Java version of at least 11
Feb 13, 2019 6:20:00 PM net.bytebuddy.test.utility.JavaVersionRule$NoOpStatement evaluate
WARNING: Ignoring test case: Requires a Java version of at least 11
Feb 13, 2019 6:20:00 PM net.bytebuddy.test.utility.JavaVersionRule$NoOpStatement evaluate
WARNING: Ignoring test case: Requires a Java version of at least 11
Feb 13, 2019 6:20:00 PM net.bytebuddy.test.utility.JavaVersionRule$NoOpStatement evaluate
WARNING: Ignoring test case: Requires a Java version of at least 11
18:20:00.753 [pool-4-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (10125 ms)
<> Total tests run: 9178
<> Ignored tests: 16
<> Failed tests: 1
~ testStaticFieldOfOtherClass(net.bytebuddy.implementation.FieldAccessorOtherTest)
[public static final java.lang.String net.bytebuddy.implementation.FieldAccessorOtherTest$StaticFieldHolder.FOO is not declared by class net.bytebuddy.renamed.java.util.concurrent.Callable$ByteBuddy$Ohq9lgaX]
java.lang.IllegalStateException: public static final java.lang.String net.bytebuddy.implementation.FieldAccessorOtherTest$StaticFieldHolder.FOO is not declared by class net.bytebuddy.renamed.java.util.concurrent.Callable$ByteBuddy$Ohq9lgaX    at net.bytebuddy.implementation.FieldAccessor$FieldLocation$Absolute.prepare(FieldAccessor.java:209)
    at net.bytebuddy.implementation.FieldAccessor$ForImplicitProperty.appender(FieldAccessor.java:656)
    at net.bytebuddy.dynamic.scaffold.MethodRegistry$Handler$ForImplementation.compile(MethodRegistry.java:230)
    at net.bytebuddy.dynamic.scaffold.MethodRegistry$Handler$ForImplementation.compile(MethodRegistry.java:202)
    at net.bytebuddy.dynamic.scaffold.MethodRegistry$Default$Prepared.compile(MethodRegistry.java:731)
    at net.bytebuddy.dynamic.scaffold.subclass.SubclassDynamicTypeBuilder.make(SubclassDynamicTypeBuilder.java:199)

java.lang.IllegalStateException: public static final java.lang.String net.bytebuddy.implementation.FieldAccessorOtherTest$StaticFieldHolder.FOO is not declared by class net.bytebuddy.renamed.java.util.concurrent.Callable$ByteBuddy$5SXmyIYI
    at net.bytebuddy.implementation.FieldAccessor$FieldLocation$Absolute.prepare(FieldAccessor.java:209)
    at net.bytebuddy.implementation.FieldAccessor$ForImplicitProperty.appender(FieldAccessor.java:656)
    at net.bytebuddy.dynamic.scaffold.MethodRegistry$Handler$ForImplementation.compile(MethodRegistry.java:230)
    at net.bytebuddy.dynamic.scaffold.MethodRegistry$Handler$ForImplementation.compile(MethodRegistry.java:202)
    at net.bytebuddy.dynamic.scaffold.MethodRegistry$Default$Prepared.compile(MethodRegistry.java:731)
    at net.bytebuddy.dynamic.scaffold.subclass.SubclassDynamicTypeBuilder.make(SubclassDynamicTypeBuilder.java:199)
18:20:03.097 [pool-5-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (125 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testStaticFieldOfOtherClass(net.bytebuddy.implementation.FieldAccessorOtherTest)
[public static final java.lang.String net.bytebuddy.implementation.FieldAccessorOtherTest$StaticFieldHolder.FOO is not declared by class net.bytebuddy.renamed.java.util.concurrent.Callable$ByteBuddy$5SXmyIYI]
java.lang.IllegalStateException: public static final java.lang.String net.bytebuddy.implementation.FieldAccessorOtherTest$StaticFieldHolder.FOO is not declared by class net.bytebuddy.renamed.java.util.concurrent.Callable$ByteBuddy$5SXmyIYI    at net.bytebuddy.implementation.FieldAccessor$FieldLocation$Absolute.prepare(FieldAccessor.java:209)
    at net.bytebuddy.implementation.FieldAccessor$ForImplicitProperty.appender(FieldAccessor.java:656)
    at net.bytebuddy.dynamic.scaffold.MethodRegistry$Handler$ForImplementation.compile(MethodRegistry.java:230)
    at net.bytebuddy.dynamic.scaffold.MethodRegistry$Handler$ForImplementation.compile(MethodRegistry.java:202)
    at net.bytebuddy.dynamic.scaffold.MethodRegistry$Default$Prepared.compile(MethodRegistry.java:731)
    at net.bytebuddy.dynamic.scaffold.subclass.SubclassDynamicTypeBuilder.make(SubclassDynamicTypeBuilder.java:199)

java.lang.IllegalStateException: public static final java.lang.String net.bytebuddy.implementation.FieldAccessorOtherTest$StaticFieldHolder.FOO is not declared by class net.bytebuddy.renamed.java.util.concurrent.Callable$ByteBuddy$jOPBfA1O
    at net.bytebuddy.implementation.FieldAccessor$FieldLocation$Absolute.prepare(FieldAccessor.java:209)
    at net.bytebuddy.implementation.FieldAccessor$ForImplicitProperty.appender(FieldAccessor.java:656)
    at net.bytebuddy.dynamic.scaffold.MethodRegistry$Handler$ForImplementation.compile(MethodRegistry.java:230)
    at net.bytebuddy.dynamic.scaffold.MethodRegistry$Handler$ForImplementation.compile(MethodRegistry.java:202)
    at net.bytebuddy.dynamic.scaffold.MethodRegistry$Default$Prepared.compile(MethodRegistry.java:731)
    at net.bytebuddy.dynamic.scaffold.subclass.SubclassDynamicTypeBuilder.make(SubclassDynamicTypeBuilder.java:199)
18:20:03.102 [pool-6-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testStaticFieldOfOtherClass(net.bytebuddy.implementation.FieldAccessorOtherTest)
[public static final java.lang.String net.bytebuddy.implementation.FieldAccessorOtherTest$StaticFieldHolder.FOO is not declared by class net.bytebuddy.renamed.java.util.concurrent.Callable$ByteBuddy$jOPBfA1O]
java.lang.IllegalStateException: public static final java.lang.String net.bytebuddy.implementation.FieldAccessorOtherTest$StaticFieldHolder.FOO is not declared by class net.bytebuddy.renamed.java.util.concurrent.Callable$ByteBuddy$jOPBfA1O    at net.bytebuddy.implementation.FieldAccessor$FieldLocation$Absolute.prepare(FieldAccessor.java:209)
    at net.bytebuddy.implementation.FieldAccessor$ForImplicitProperty.appender(FieldAccessor.java:656)
    at net.bytebuddy.dynamic.scaffold.MethodRegistry$Handler$ForImplementation.compile(MethodRegistry.java:230)
    at net.bytebuddy.dynamic.scaffold.MethodRegistry$Handler$ForImplementation.compile(MethodRegistry.java:202)
    at net.bytebuddy.dynamic.scaffold.MethodRegistry$Default$Prepared.compile(MethodRegistry.java:731)
    at net.bytebuddy.dynamic.scaffold.subclass.SubclassDynamicTypeBuilder.make(SubclassDynamicTypeBuilder.java:199)

18:20:03.103 [pool-3-thread-1] DEBUG tests.output - Failing tests with false: 
[testStaticFieldOfOtherClass(net.bytebuddy.implementation.FieldAccessorOtherTest): public static final java.lang.String net.bytebuddy.implementation.FieldAccessorOtherTest$StaticFieldHolder.FOO is not declared by class net.bytebuddy.renamed.java.util.concurrent.Callable$ByteBuddy$5SXmyIYI]
18:20:03.103 [pool-3-thread-1] DEBUG tests.output - Failing tests with true: 
[testStaticFieldOfOtherClass(net.bytebuddy.implementation.FieldAccessorOtherTest): public static final java.lang.String net.bytebuddy.implementation.FieldAccessorOtherTest$StaticFieldHolder.FOO is not declared by class net.bytebuddy.renamed.java.util.concurrent.Callable$ByteBuddy$jOPBfA1O]
18:20:03.103 [pool-3-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation net.bytebuddy.dynamic.TargetType:42.
18:20:03.103 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #9
18:20:03.104 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation net.bytebuddy.dynamic.TargetType:41 which is executed by 686 tests
-1814880116
18:20:03.349 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #10
18:20:03.349 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation net.bytebuddy.dynamic.TargetType:40 which is executed by 686 tests
-1814880116
18:20:03.576 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #11
18:20:03.577 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation net.bytebuddy.description.modifier.ModifierContributor$Resolver:192 which is executed by 701 tests
156397925
18:20:03.813 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #12
18:20:03.813 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation net.bytebuddy.dynamic.TargetType:44 which is executed by 105 tests
-1814880116
18:20:04.047 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
Feb 13, 2019 6:20:07 PM net.bytebuddy.test.utility.JavaVersionRule$NoOpStatement evaluate
WARNING: Ignoring test case: Requires a Java version of at least 11
18:20:07.405 [pool-8-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (3246 ms)
<> Total tests run: 3560
<> Ignored tests: 1
<> Failed tests: 0

18:20:07.431 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
18:20:07.431 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #13
18:20:07.431 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation net.bytebuddy.dynamic.TargetType:43 which is executed by 105 tests
-1814880116
18:20:07.672 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
Feb 13, 2019 6:20:10 PM net.bytebuddy.test.utility.JavaVersionRule$NoOpStatement evaluate
WARNING: Ignoring test case: Requires a Java version of at least 11
18:20:10.967 [pool-10-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (3212 ms)
<> Total tests run: 3560
<> Ignored tests: 1
<> Failed tests: 0

18:20:10.968 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
18:20:10.968 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #14
18:20:10.968 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation net.bytebuddy.dynamic.scaffold.TypeWriter$FieldPool$Record$ForExplicitField:312 which is executed by 463 tests
683157614
18:20:11.414 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #15
18:20:11.415 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation net.bytebuddy.dynamic.scaffold.TypeWriter$FieldPool$Record$ForExplicitField:310 which is executed by 463 tests
683157614
18:20:11.811 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
Feb 13, 2019 6:20:12 PM net.bytebuddy.test.utility.JavaVersionRule$NoOpStatement evaluate
WARNING: Ignoring test case: Requires a Java version of at least 11
java.lang.IllegalStateException: public static final java.lang.String net.bytebuddy.implementation.FieldAccessorOtherTest$StaticFieldHolder.FOO is not declared by class net.bytebuddy.renamed.java.util.concurrent.Callable$ByteBuddy$cfNB0KZF
    at net.bytebuddy.implementation.FieldAccessor$FieldLocation$Absolute.prepare(FieldAccessor.java:209)
    at net.bytebuddy.implementation.FieldAccessor$ForImplicitProperty.appender(FieldAccessor.java:656)
    at net.bytebuddy.dynamic.scaffold.MethodRegistry$Handler$ForImplementation.compile(MethodRegistry.java:230)
    at net.bytebuddy.dynamic.scaffold.MethodRegistry$Handler$ForImplementation.compile(MethodRegistry.java:202)
    at net.bytebuddy.dynamic.scaffold.MethodRegistry$Default$Prepared.compile(MethodRegistry.java:731)
    at net.bytebuddy.dynamic.scaffold.subclass.SubclassDynamicTypeBuilder.make(SubclassDynamicTypeBuilder.java:199)
Feb 13, 2019 6:20:18 PM net.bytebuddy.test.utility.JavaVersionRule$NoOpStatement evaluate
WARNING: Ignoring test case: Requires a Java version of at least 11
Feb 13, 2019 6:20:18 PM net.bytebuddy.test.utility.JavaVersionRule$NoOpStatement evaluate
WARNING: Ignoring test case: Requires a Java version of at least 11
Feb 13, 2019 6:20:18 PM net.bytebuddy.test.utility.JavaVersionRule$NoOpStatement evaluate
WARNING: Ignoring test case: Requires a Java version of at least 11
Feb 13, 2019 6:20:18 PM net.bytebuddy.test.utility.JavaVersionRule$NoOpStatement evaluate
WARNING: Ignoring test case: Requires a Java version of at least 11
Feb 13, 2019 6:20:18 PM net.bytebuddy.test.utility.JavaVersionRule$NoOpStatement evaluate
WARNING: Ignoring test case: Requires a Java version of at least 11
Feb 13, 2019 6:20:18 PM net.bytebuddy.test.utility.JavaVersionRule$NoOpStatement evaluate
WARNING: Ignoring test case: Requires a Java version of at least 11
Feb 13, 2019 6:20:18 PM net.bytebuddy.test.utility.JavaVersionRule$NoOpStatement evaluate
WARNING: Ignoring test case: Requires a Java version of at least 11
18:20:18.873 [pool-12-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (6930 ms)
<> Total tests run: 7089
<> Ignored tests: 8
<> Failed tests: 1
~ testStaticFieldOfOtherClass(net.bytebuddy.implementation.FieldAccessorOtherTest)
[public static final java.lang.String net.bytebuddy.implementation.FieldAccessorOtherTest$StaticFieldHolder.FOO is not declared by class net.bytebuddy.renamed.java.util.concurrent.Callable$ByteBuddy$cfNB0KZF]
java.lang.IllegalStateException: public static final java.lang.String net.bytebuddy.implementation.FieldAccessorOtherTest$StaticFieldHolder.FOO is not declared by class net.bytebuddy.renamed.java.util.concurrent.Callable$ByteBuddy$cfNB0KZF    at net.bytebuddy.implementation.FieldAccessor$FieldLocation$Absolute.prepare(FieldAccessor.java:209)
    at net.bytebuddy.implementation.FieldAccessor$ForImplicitProperty.appender(FieldAccessor.java:656)
    at net.bytebuddy.dynamic.scaffold.MethodRegistry$Handler$ForImplementation.compile(MethodRegistry.java:230)
    at net.bytebuddy.dynamic.scaffold.MethodRegistry$Handler$ForImplementation.compile(MethodRegistry.java:202)
    at net.bytebuddy.dynamic.scaffold.MethodRegistry$Default$Prepared.compile(MethodRegistry.java:731)
    at net.bytebuddy.dynamic.scaffold.subclass.SubclassDynamicTypeBuilder.make(SubclassDynamicTypeBuilder.java:199)

18:33:34.645 [pool-11-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
TypeWriter.java:798: error: net.bytebuddy.dynamic.DynamicType.Unloaded is abstract; cannot be instantiated
                return new net.bytebuddy.dynamic.DynamicType.Unloaded<S>(instrumentedType, binaryRepresentation, loadedTypeInitializer, net.bytebuddy.utility.CompoundList.of(net.bytebuddy.dynamic.scaffold.TypeWriter.Default.this.auxiliaryTypes, auxiliaryTypes), typeResolutionStrategy);
                       ^
18:46:45.779 [pool-11-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public interface TypeWriter<T> {
    java.lang.String DUMP_PROPERTY = "net.bytebuddy.dump";

    net.bytebuddy.dynamic.DynamicType.Unloaded<T> make(net.bytebuddy.dynamic.TypeResolutionStrategy.Resolved typeResolver);

    interface FieldPool {
        net.bytebuddy.dynamic.scaffold.TypeWriter.FieldPool.Record target(net.bytebuddy.description.field.FieldDescription fieldDescription);

        interface Record {
            boolean isImplicit();

            net.bytebuddy.description.field.FieldDescription getField();

            net.bytebuddy.implementation.attribute.FieldAttributeAppender getFieldAppender();

            java.lang.Object resolveDefault(java.lang.Object defaultValue);

            void apply(org.objectweb.asm.ClassVisitor classVisitor, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory);

            void apply(org.objectweb.asm.FieldVisitor fieldVisitor, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory);

            @net.bytebuddy.build.HashCodeAndEqualsPlugin.Enhance
            class ForImplicitField implements net.bytebuddy.dynamic.scaffold.TypeWriter.FieldPool.Record {
                private final net.bytebuddy.description.field.FieldDescription fieldDescription;

                public ForImplicitField(net.bytebuddy.description.field.FieldDescription fieldDescription) {
                    this.fieldDescription = fieldDescription;
                }

                public boolean isImplicit() {
                    return true;
                }

                public net.bytebuddy.description.field.FieldDescription getField() {
                    return fieldDescription;
                }

                public net.bytebuddy.implementation.attribute.FieldAttributeAppender getFieldAppender() {
                    throw new java.lang.IllegalStateException(("An implicit field record does not expose a field appender: " + (this)));
                }

                public java.lang.Object resolveDefault(java.lang.Object defaultValue) {
                    throw new java.lang.IllegalStateException(("An implicit field record does not expose a default value: " + (this)));
                }

                public void apply(org.objectweb.asm.ClassVisitor classVisitor, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory) {
                    org.objectweb.asm.FieldVisitor fieldVisitor = classVisitor.visitField(fieldDescription.getActualModifiers(), fieldDescription.getInternalName(), fieldDescription.getDescriptor(), fieldDescription.getGenericSignature(), net.bytebuddy.description.field.FieldDescription.NO_DEFAULT_VALUE);
                    if (fieldVisitor != null) {
                        net.bytebuddy.implementation.attribute.FieldAttributeAppender.ForInstrumentedField.INSTANCE.apply(fieldVisitor, fieldDescription, annotationValueFilterFactory.on(fieldDescription));
                        fieldVisitor.visitEnd();
                    }
                }

                public void apply(org.objectweb.asm.FieldVisitor fieldVisitor, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory) {
                    throw new java.lang.IllegalStateException(("An implicit field record is not intended for partial application: " + (this)));
                }
            }

            @net.bytebuddy.build.HashCodeAndEqualsPlugin.Enhance
            class ForExplicitField implements net.bytebuddy.dynamic.scaffold.TypeWriter.FieldPool.Record {
                private final net.bytebuddy.implementation.attribute.FieldAttributeAppender attributeAppender;

                private final java.lang.Object defaultValue;

                private final net.bytebuddy.description.field.FieldDescription fieldDescription;

                public ForExplicitField(net.bytebuddy.implementation.attribute.FieldAttributeAppender attributeAppender, java.lang.Object defaultValue, net.bytebuddy.description.field.FieldDescription fieldDescription) {
                    this.attributeAppender = attributeAppender;
                    this.defaultValue = defaultValue;
                    this.fieldDescription = fieldDescription;
                }

                public boolean isImplicit() {
                    return false;
                }

                public net.bytebuddy.description.field.FieldDescription getField() {
                    return fieldDescription;
                }

                public net.bytebuddy.implementation.attribute.FieldAttributeAppender getFieldAppender() {
                    return attributeAppender;
                }

                public java.lang.Object resolveDefault(java.lang.Object defaultValue) {
                    return (this.defaultValue) == null ? defaultValue : this.defaultValue;
                }

                public void apply(org.objectweb.asm.ClassVisitor classVisitor, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory) {
                    org.objectweb.asm.FieldVisitor fieldVisitor = classVisitor.visitField(fieldDescription.getActualModifiers(), fieldDescription.getInternalName(), fieldDescription.getDescriptor(), fieldDescription.getGenericSignature(), resolveDefault(net.bytebuddy.description.field.FieldDescription.NO_DEFAULT_VALUE));
                    if (fieldVisitor != null) {
                        attributeAppender.apply(fieldVisitor, fieldDescription, annotationValueFilterFactory.on(fieldDescription));
                        boolean spoonDefaultValue = false;
                        try {
                            spoonDefaultValue = true;
                        } catch (java.lang.Exception __NopolProcessorException) {
                        }
                        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                        if (fr.inria.lille.commons.trace.RuntimeValues.instance(1).isEnabled()) {
                            fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectionStarts();
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("annotationValueFilterFactory",annotationValueFilterFactory);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("fieldVisitor",fieldVisitor);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("net.bytebuddy.dynamic.scaffold.TypeWriter.FieldPool.Record.ForExplicitField.this.fieldDescription",net.bytebuddy.dynamic.scaffold.TypeWriter.FieldPool.Record.ForExplicitField.this.fieldDescription);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("classVisitor",classVisitor);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("net.bytebuddy.dynamic.scaffold.TypeWriter.FieldPool.Record.ForExplicitField.this.defaultValue",net.bytebuddy.dynamic.scaffold.TypeWriter.FieldPool.Record.ForExplicitField.this.defaultValue);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("net.bytebuddy.dynamic.scaffold.TypeWriter.FieldPool.Record.ForExplicitField.this.attributeAppender",net.bytebuddy.dynamic.scaffold.TypeWriter.FieldPool.Record.ForExplicitField.this.attributeAppender);} catch (Exception ex1) {ex1.printStackTrace();};
                            fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectOutput(runtimeAngelicValue);
                            fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectionEnds();
                        }
                        if (runtimeAngelicValue)
                            fieldVisitor.visitEnd();

                    }
                }

                public void apply(org.objectweb.asm.FieldVisitor fieldVisitor, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory) {
                    attributeAppender.apply(fieldVisitor, fieldDescription, annotationValueFilterFactory.on(fieldDescription));
                }
            }
        }

        enum Disabled implements net.bytebuddy.dynamic.scaffold.TypeWriter.FieldPool {

            INSTANCE;
            public net.bytebuddy.dynamic.scaffold.TypeWriter.FieldPool.Record target(net.bytebuddy.description.field.FieldDescription fieldDescription) {
                throw new java.lang.IllegalStateException("Cannot look up field from disabld pool");
            }
        }
    }

    interface MethodPool {
        net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record target(net.bytebuddy.description.method.MethodDescription methodDescription);

        interface Record {
            net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record.Sort getSort();

            net.bytebuddy.description.method.MethodDescription getMethod();

            net.bytebuddy.description.modifier.Visibility getVisibility();

            net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record prepend(net.bytebuddy.implementation.bytecode.ByteCodeAppender byteCodeAppender);

            void apply(org.objectweb.asm.ClassVisitor classVisitor, net.bytebuddy.implementation.Implementation.Context implementationContext, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory);

            void applyHead(org.objectweb.asm.MethodVisitor methodVisitor);

            void applyBody(org.objectweb.asm.MethodVisitor methodVisitor, net.bytebuddy.implementation.Implementation.Context implementationContext, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory);

            void applyAttributes(org.objectweb.asm.MethodVisitor methodVisitor, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory);

            net.bytebuddy.implementation.bytecode.ByteCodeAppender.Size applyCode(org.objectweb.asm.MethodVisitor methodVisitor, net.bytebuddy.implementation.Implementation.Context implementationContext);

            enum Sort {

                SKIPPED(false, false),
                DEFINED(true, false),
                IMPLEMENTED(true, true);
                private final boolean define;

                private final boolean implement;

                Sort(boolean define, boolean implement) {
                    this.define = define;
                    this.implement = implement;
                }

                public boolean isDefined() {
                    return define;
                }

                public boolean isImplemented() {
                    return implement;
                }
            }

            @net.bytebuddy.build.HashCodeAndEqualsPlugin.Enhance
            class ForNonImplementedMethod implements net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record {
                private final net.bytebuddy.description.method.MethodDescription methodDescription;

                public ForNonImplementedMethod(net.bytebuddy.description.method.MethodDescription methodDescription) {
                    this.methodDescription = methodDescription;
                }

                public void apply(org.objectweb.asm.ClassVisitor classVisitor, net.bytebuddy.implementation.Implementation.Context implementationContext, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory) {
                }

                public void applyBody(org.objectweb.asm.MethodVisitor methodVisitor, net.bytebuddy.implementation.Implementation.Context implementationContext, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory) {
                    throw new java.lang.IllegalStateException(("Cannot apply body for non-implemented method on " + (methodDescription)));
                }

                public void applyAttributes(org.objectweb.asm.MethodVisitor methodVisitor, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory) {
                }

                public net.bytebuddy.implementation.bytecode.ByteCodeAppender.Size applyCode(org.objectweb.asm.MethodVisitor methodVisitor, net.bytebuddy.implementation.Implementation.Context implementationContext) {
                    throw new java.lang.IllegalStateException(("Cannot apply code for non-implemented method on " + (methodDescription)));
                }

                public void applyHead(org.objectweb.asm.MethodVisitor methodVisitor) {
                    throw new java.lang.IllegalStateException(("Cannot apply head for non-implemented method on " + (methodDescription)));
                }

                public net.bytebuddy.description.method.MethodDescription getMethod() {
                    return methodDescription;
                }

                public net.bytebuddy.description.modifier.Visibility getVisibility() {
                    return methodDescription.getVisibility();
                }

                public net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record.Sort getSort() {
                    return net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record.Sort.SKIPPED;
                }

                public net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record prepend(net.bytebuddy.implementation.bytecode.ByteCodeAppender byteCodeAppender) {
                    return new net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record.ForDefinedMethod.WithBody(methodDescription, new net.bytebuddy.implementation.bytecode.ByteCodeAppender.Compound(byteCodeAppender, new net.bytebuddy.implementation.bytecode.ByteCodeAppender.Simple(net.bytebuddy.implementation.bytecode.constant.DefaultValue.of(methodDescription.getReturnType()), net.bytebuddy.implementation.bytecode.member.MethodReturn.of(methodDescription.getReturnType()))));
                }
            }

            abstract class ForDefinedMethod implements net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record {
                public void apply(org.objectweb.asm.ClassVisitor classVisitor, net.bytebuddy.implementation.Implementation.Context implementationContext, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory) {
                    org.objectweb.asm.MethodVisitor methodVisitor = classVisitor.visitMethod(getMethod().getActualModifiers(getSort().isImplemented(), getVisibility()), getMethod().getInternalName(), getMethod().getDescriptor(), getMethod().getGenericSignature(), getMethod().getExceptionTypes().asErasures().toInternalNames());
                    if (methodVisitor != null) {
                        net.bytebuddy.description.method.ParameterList<?> parameterList = getMethod().getParameters();
                        if (parameterList.hasExplicitMetaData()) {
                            for (net.bytebuddy.description.method.ParameterDescription parameterDescription : parameterList) {
                                methodVisitor.visitParameter(parameterDescription.getName(), parameterDescription.getModifiers());
                            }
                        }
                        applyHead(methodVisitor);
                        applyBody(methodVisitor, implementationContext, annotationValueFilterFactory);
                        methodVisitor.visitEnd();
                    }
                }

                @net.bytebuddy.build.HashCodeAndEqualsPlugin.Enhance
                public static class WithBody extends net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record.ForDefinedMethod {
                    private final net.bytebuddy.description.method.MethodDescription methodDescription;

                    private final net.bytebuddy.implementation.bytecode.ByteCodeAppender byteCodeAppender;

                    private final net.bytebuddy.implementation.attribute.MethodAttributeAppender methodAttributeAppender;

                    private final net.bytebuddy.description.modifier.Visibility visibility;

                    public WithBody(net.bytebuddy.description.method.MethodDescription methodDescription, net.bytebuddy.implementation.bytecode.ByteCodeAppender byteCodeAppender) {
                        this(methodDescription, byteCodeAppender, net.bytebuddy.implementation.attribute.MethodAttributeAppender.NoOp.INSTANCE, methodDescription.getVisibility());
                    }

                    public WithBody(net.bytebuddy.description.method.MethodDescription methodDescription, net.bytebuddy.implementation.bytecode.ByteCodeAppender byteCodeAppender, net.bytebuddy.implementation.attribute.MethodAttributeAppender methodAttributeAppender, net.bytebuddy.description.modifier.Visibility visibility) {
                        this.methodDescription = methodDescription;
                        this.byteCodeAppender = byteCodeAppender;
                        this.methodAttributeAppender = methodAttributeAppender;
                        this.visibility = visibility;
                    }

                    public net.bytebuddy.description.method.MethodDescription getMethod() {
                        return methodDescription;
                    }

                    public net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record.Sort getSort() {
                        return net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record.Sort.IMPLEMENTED;
                    }

                    public net.bytebuddy.description.modifier.Visibility getVisibility() {
                        return visibility;
                    }

                    public void applyHead(org.objectweb.asm.MethodVisitor methodVisitor) {
                    }

                    public void applyBody(org.objectweb.asm.MethodVisitor methodVisitor, net.bytebuddy.implementation.Implementation.Context implementationContext, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory) {
                        applyAttributes(methodVisitor, annotationValueFilterFactory);
                        methodVisitor.visitCode();
                        net.bytebuddy.implementation.bytecode.ByteCodeAppender.Size size = applyCode(methodVisitor, implementationContext);
                        methodVisitor.visitMaxs(size.getOperandStackSize(), size.getLocalVariableSize());
                    }

                    public void applyAttributes(org.objectweb.asm.MethodVisitor methodVisitor, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory) {
                        methodAttributeAppender.apply(methodVisitor, methodDescription, annotationValueFilterFactory.on(methodDescription));
                    }

                    public net.bytebuddy.implementation.bytecode.ByteCodeAppender.Size applyCode(org.objectweb.asm.MethodVisitor methodVisitor, net.bytebuddy.implementation.Implementation.Context implementationContext) {
                        return byteCodeAppender.apply(methodVisitor, implementationContext, methodDescription);
                    }

                    public net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record prepend(net.bytebuddy.implementation.bytecode.ByteCodeAppender byteCodeAppender) {
                        return new net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record.ForDefinedMethod.WithBody(methodDescription, new net.bytebuddy.implementation.bytecode.ByteCodeAppender.Compound(byteCodeAppender, this.byteCodeAppender), methodAttributeAppender, visibility);
                    }
                }

                @net.bytebuddy.build.HashCodeAndEqualsPlugin.Enhance
                public static class WithoutBody extends net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record.ForDefinedMethod {
                    private final net.bytebuddy.description.method.MethodDescription methodDescription;

                    private final net.bytebuddy.implementation.attribute.MethodAttributeAppender methodAttributeAppender;

                    private final net.bytebuddy.description.modifier.Visibility visibility;

                    public WithoutBody(net.bytebuddy.description.method.MethodDescription methodDescription, net.bytebuddy.implementation.attribute.MethodAttributeAppender methodAttributeAppender, net.bytebuddy.description.modifier.Visibility visibility) {
                        this.methodDescription = methodDescription;
                        this.methodAttributeAppender = methodAttributeAppender;
                        this.visibility = visibility;
                    }

                    public net.bytebuddy.description.method.MethodDescription getMethod() {
                        return methodDescription;
                    }

                    public net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record.Sort getSort() {
                        return net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record.Sort.DEFINED;
                    }

                    public net.bytebuddy.description.modifier.Visibility getVisibility() {
                        return visibility;
                    }

                    public void applyHead(org.objectweb.asm.MethodVisitor methodVisitor) {
                    }

                    public void applyBody(org.objectweb.asm.MethodVisitor methodVisitor, net.bytebuddy.implementation.Implementation.Context implementationContext, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory) {
                        applyAttributes(methodVisitor, annotationValueFilterFactory);
                    }

                    public void applyAttributes(org.objectweb.asm.MethodVisitor methodVisitor, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory) {
                        methodAttributeAppender.apply(methodVisitor, methodDescription, annotationValueFilterFactory.on(methodDescription));
                    }

                    public net.bytebuddy.implementation.bytecode.ByteCodeAppender.Size applyCode(org.objectweb.asm.MethodVisitor methodVisitor, net.bytebuddy.implementation.Implementation.Context implementationContext) {
                        throw new java.lang.IllegalStateException(("Cannot apply code for abstract method on " + (methodDescription)));
                    }

                    public net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record prepend(net.bytebuddy.implementation.bytecode.ByteCodeAppender byteCodeAppender) {
                        throw new java.lang.IllegalStateException(("Cannot prepend code for abstract method on " + (methodDescription)));
                    }
                }

                @net.bytebuddy.build.HashCodeAndEqualsPlugin.Enhance
                public static class WithAnnotationDefaultValue extends net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record.ForDefinedMethod {
                    private final net.bytebuddy.description.method.MethodDescription methodDescription;

                    private final net.bytebuddy.description.annotation.AnnotationValue<?, ?> annotationValue;

                    private final net.bytebuddy.implementation.attribute.MethodAttributeAppender methodAttributeAppender;

                    public WithAnnotationDefaultValue(net.bytebuddy.description.method.MethodDescription methodDescription, net.bytebuddy.description.annotation.AnnotationValue<?, ?> annotationValue, net.bytebuddy.implementation.attribute.MethodAttributeAppender methodAttributeAppender) {
                        this.methodDescription = methodDescription;
                        this.annotationValue = annotationValue;
                        this.methodAttributeAppender = methodAttributeAppender;
                    }

                    public net.bytebuddy.description.method.MethodDescription getMethod() {
                        return methodDescription;
                    }

                    public net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record.Sort getSort() {
                        return net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record.Sort.DEFINED;
                    }

                    public net.bytebuddy.description.modifier.Visibility getVisibility() {
                        return methodDescription.getVisibility();
                    }

                    public void applyHead(org.objectweb.asm.MethodVisitor methodVisitor) {
                        if (!(methodDescription.isDefaultValue(annotationValue))) {
                            throw new java.lang.IllegalStateException(((("Cannot set " + (annotationValue)) + " as default for ") + (methodDescription)));
                        }
                        org.objectweb.asm.AnnotationVisitor annotationVisitor = methodVisitor.visitAnnotationDefault();
                        net.bytebuddy.implementation.attribute.AnnotationAppender.Default.apply(annotationVisitor, methodDescription.getReturnType().asErasure(), net.bytebuddy.implementation.attribute.AnnotationAppender.NO_NAME, annotationValue.resolve());
                        annotationVisitor.visitEnd();
                    }

                    public void applyBody(org.objectweb.asm.MethodVisitor methodVisitor, net.bytebuddy.implementation.Implementation.Context implementationContext, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory) {
                        methodAttributeAppender.apply(methodVisitor, methodDescription, annotationValueFilterFactory.on(methodDescription));
                    }

                    public void applyAttributes(org.objectweb.asm.MethodVisitor methodVisitor, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory) {
                        throw new java.lang.IllegalStateException(("Cannot apply attributes for default value on " + (methodDescription)));
                    }

                    public net.bytebuddy.implementation.bytecode.ByteCodeAppender.Size applyCode(org.objectweb.asm.MethodVisitor methodVisitor, net.bytebuddy.implementation.Implementation.Context implementationContext) {
                        throw new java.lang.IllegalStateException(("Cannot apply code for default value on " + (methodDescription)));
                    }

                    public net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record prepend(net.bytebuddy.implementation.bytecode.ByteCodeAppender byteCodeAppender) {
                        throw new java.lang.IllegalStateException(("Cannot prepend code for default value on " + (methodDescription)));
                    }
                }

                @net.bytebuddy.build.HashCodeAndEqualsPlugin.Enhance
                public static class OfVisibilityBridge extends net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record.ForDefinedMethod implements net.bytebuddy.implementation.bytecode.ByteCodeAppender {
                    private final net.bytebuddy.description.method.MethodDescription visibilityBridge;

                    private final net.bytebuddy.description.method.MethodDescription bridgeTarget;

                    private final net.bytebuddy.description.type.TypeDescription bridgeType;

                    private final net.bytebuddy.implementation.attribute.MethodAttributeAppender attributeAppender;

                    protected OfVisibilityBridge(net.bytebuddy.description.method.MethodDescription visibilityBridge, net.bytebuddy.description.method.MethodDescription bridgeTarget, net.bytebuddy.description.type.TypeDescription bridgeType, net.bytebuddy.implementation.attribute.MethodAttributeAppender attributeAppender) {
                        this.visibilityBridge = visibilityBridge;
                        this.bridgeTarget = bridgeTarget;
                        this.bridgeType = bridgeType;
                        this.attributeAppender = attributeAppender;
                    }

                    public static net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record of(net.bytebuddy.description.type.TypeDescription instrumentedType, net.bytebuddy.description.method.MethodDescription bridgeTarget, net.bytebuddy.implementation.attribute.MethodAttributeAppender attributeAppender) {
                        net.bytebuddy.description.type.TypeDefinition bridgeType = null;
                        if (bridgeTarget.isDefaultMethod()) {
                            net.bytebuddy.description.type.TypeDescription declaringType = bridgeTarget.getDeclaringType().asErasure();
                            for (net.bytebuddy.description.type.TypeDescription interfaceType : instrumentedType.getInterfaces().asErasures().filter(net.bytebuddy.matcher.ElementMatchers.isSubTypeOf(declaringType))) {
                                if ((bridgeType == null) || (declaringType.isAssignableTo(bridgeType.asErasure()))) {
                                    bridgeType = interfaceType;
                                }
                            }
                        }
                        if (bridgeType == null) {
                            bridgeType = instrumentedType.getSuperClass();
                        }
                        return new net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record.ForDefinedMethod.OfVisibilityBridge(new net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record.ForDefinedMethod.OfVisibilityBridge.VisibilityBridge(instrumentedType, bridgeTarget), bridgeTarget, bridgeType.asErasure(), attributeAppender);
                    }

                    public net.bytebuddy.description.method.MethodDescription getMethod() {
                        return visibilityBridge;
                    }

                    public net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record.Sort getSort() {
                        return net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record.Sort.IMPLEMENTED;
                    }

                    public net.bytebuddy.description.modifier.Visibility getVisibility() {
                        return bridgeTarget.getVisibility();
                    }

                    public net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record prepend(net.bytebuddy.implementation.bytecode.ByteCodeAppender byteCodeAppender) {
                        return new net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record.ForDefinedMethod.WithBody(visibilityBridge, new net.bytebuddy.implementation.bytecode.ByteCodeAppender.Compound(this, byteCodeAppender), attributeAppender, bridgeTarget.getVisibility());
                    }

                    public void applyHead(org.objectweb.asm.MethodVisitor methodVisitor) {
                    }

                    public void applyBody(org.objectweb.asm.MethodVisitor methodVisitor, net.bytebuddy.implementation.Implementation.Context implementationContext, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory) {
                        applyAttributes(methodVisitor, annotationValueFilterFactory);
                        methodVisitor.visitCode();
                        net.bytebuddy.implementation.bytecode.ByteCodeAppender.Size size = applyCode(methodVisitor, implementationContext);
                        methodVisitor.visitMaxs(size.getOperandStackSize(), size.getLocalVariableSize());
                    }

                    public void applyAttributes(org.objectweb.asm.MethodVisitor methodVisitor, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory) {
                        attributeAppender.apply(methodVisitor, visibilityBridge, annotationValueFilterFactory.on(visibilityBridge));
                    }

                    public net.bytebuddy.implementation.bytecode.ByteCodeAppender.Size applyCode(org.objectweb.asm.MethodVisitor methodVisitor, net.bytebuddy.implementation.Implementation.Context implementationContext) {
                        return apply(methodVisitor, implementationContext, visibilityBridge);
                    }

                    public net.bytebuddy.implementation.bytecode.ByteCodeAppender.Size apply(org.objectweb.asm.MethodVisitor methodVisitor, net.bytebuddy.implementation.Implementation.Context implementationContext, net.bytebuddy.description.method.MethodDescription instrumentedMethod) {
                        return new net.bytebuddy.implementation.bytecode.ByteCodeAppender.Simple(net.bytebuddy.implementation.bytecode.member.MethodVariableAccess.allArgumentsOf(instrumentedMethod).prependThisReference(), net.bytebuddy.implementation.bytecode.member.MethodInvocation.invoke(bridgeTarget).special(bridgeType), net.bytebuddy.implementation.bytecode.member.MethodReturn.of(instrumentedMethod.getReturnType())).apply(methodVisitor, implementationContext, instrumentedMethod);
                    }

                    protected static class VisibilityBridge extends net.bytebuddy.description.method.MethodDescription.InDefinedShape.AbstractBase {
                        private final net.bytebuddy.description.type.TypeDescription instrumentedType;

                        private final net.bytebuddy.description.method.MethodDescription bridgeTarget;

                        protected VisibilityBridge(net.bytebuddy.description.type.TypeDescription instrumentedType, net.bytebuddy.description.method.MethodDescription bridgeTarget) {
                            this.instrumentedType = instrumentedType;
                            this.bridgeTarget = bridgeTarget;
                        }

                        public net.bytebuddy.description.type.TypeDescription getDeclaringType() {
                            return instrumentedType;
                        }

                        public net.bytebuddy.description.method.ParameterList<net.bytebuddy.description.method.ParameterDescription.InDefinedShape> getParameters() {
                            return new net.bytebuddy.description.method.ParameterList.Explicit.ForTypes(this, bridgeTarget.getParameters().asTypeList().asRawTypes());
                        }

                        public net.bytebuddy.description.type.TypeDescription.Generic getReturnType() {
                            return bridgeTarget.getReturnType().asRawType();
                        }

                        public net.bytebuddy.description.type.TypeList.Generic getExceptionTypes() {
                            return bridgeTarget.getExceptionTypes().asRawTypes();
                        }

                        public net.bytebuddy.description.annotation.AnnotationValue<?, ?> getDefaultValue() {
                            return net.bytebuddy.description.annotation.AnnotationValue.UNDEFINED;
                        }

                        public net.bytebuddy.description.type.TypeList.Generic getTypeVariables() {
                            return new net.bytebuddy.description.type.TypeList.Generic.Empty();
                        }

                        public net.bytebuddy.description.annotation.AnnotationList getDeclaredAnnotations() {
                            return bridgeTarget.getDeclaredAnnotations();
                        }

                        public int getModifiers() {
                            return (((bridgeTarget.getModifiers()) | (org.objectweb.asm.Opcodes.ACC_SYNTHETIC)) | (org.objectweb.asm.Opcodes.ACC_BRIDGE)) & (~(org.objectweb.asm.Opcodes.ACC_NATIVE));
                        }

                        public java.lang.String getInternalName() {
                            return bridgeTarget.getName();
                        }
                    }
                }
            }

            @net.bytebuddy.build.HashCodeAndEqualsPlugin.Enhance
            class AccessBridgeWrapper implements net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record {
                private final net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record delegate;

                private final net.bytebuddy.description.type.TypeDescription instrumentedType;

                private final net.bytebuddy.description.method.MethodDescription bridgeTarget;

                private final java.util.Set<net.bytebuddy.description.method.MethodDescription.TypeToken> bridgeTypes;

                private final net.bytebuddy.implementation.attribute.MethodAttributeAppender attributeAppender;

                protected AccessBridgeWrapper(net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record delegate, net.bytebuddy.description.type.TypeDescription instrumentedType, net.bytebuddy.description.method.MethodDescription bridgeTarget, java.util.Set<net.bytebuddy.description.method.MethodDescription.TypeToken> bridgeTypes, net.bytebuddy.implementation.attribute.MethodAttributeAppender attributeAppender) {
                    this.delegate = delegate;
                    this.instrumentedType = instrumentedType;
                    this.bridgeTarget = bridgeTarget;
                    this.bridgeTypes = bridgeTypes;
                    this.attributeAppender = attributeAppender;
                }

                public static net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record of(net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record delegate, net.bytebuddy.description.type.TypeDescription instrumentedType, net.bytebuddy.description.method.MethodDescription bridgeTarget, java.util.Set<net.bytebuddy.description.method.MethodDescription.TypeToken> bridgeTypes, net.bytebuddy.implementation.attribute.MethodAttributeAppender attributeAppender) {
                    java.util.Set<net.bytebuddy.description.method.MethodDescription.TypeToken> compatibleBridgeTypes = new java.util.HashSet<net.bytebuddy.description.method.MethodDescription.TypeToken>();
                    for (net.bytebuddy.description.method.MethodDescription.TypeToken bridgeType : bridgeTypes) {
                        if (bridgeTarget.isBridgeCompatible(bridgeType)) {
                            compatibleBridgeTypes.add(bridgeType);
                        }
                    }
                    return (compatibleBridgeTypes.isEmpty()) || ((instrumentedType.isInterface()) && (!(delegate.getSort().isImplemented()))) ? delegate : new net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record.AccessBridgeWrapper(delegate, instrumentedType, bridgeTarget, compatibleBridgeTypes, attributeAppender);
                }

                public net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record.Sort getSort() {
                    return delegate.getSort();
                }

                public net.bytebuddy.description.method.MethodDescription getMethod() {
                    return bridgeTarget;
                }

                public net.bytebuddy.description.modifier.Visibility getVisibility() {
                    return delegate.getVisibility();
                }

                public net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record prepend(net.bytebuddy.implementation.bytecode.ByteCodeAppender byteCodeAppender) {
                    return new net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record.AccessBridgeWrapper(delegate.prepend(byteCodeAppender), instrumentedType, bridgeTarget, bridgeTypes, attributeAppender);
                }

                public void apply(org.objectweb.asm.ClassVisitor classVisitor, net.bytebuddy.implementation.Implementation.Context implementationContext, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory) {
                    delegate.apply(classVisitor, implementationContext, annotationValueFilterFactory);
                    for (net.bytebuddy.description.method.MethodDescription.TypeToken bridgeType : bridgeTypes) {
                        net.bytebuddy.description.method.MethodDescription.InDefinedShape bridgeMethod = new net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record.AccessBridgeWrapper.AccessorBridge(bridgeTarget, bridgeType, instrumentedType);
                        net.bytebuddy.description.method.MethodDescription.InDefinedShape bridgeTarget = new net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record.AccessBridgeWrapper.BridgeTarget(this.bridgeTarget, instrumentedType);
                        org.objectweb.asm.MethodVisitor methodVisitor = classVisitor.visitMethod(bridgeMethod.getActualModifiers(true, getVisibility()), bridgeMethod.getInternalName(), bridgeMethod.getDescriptor(), net.bytebuddy.description.method.MethodDescription.NON_GENERIC_SIGNATURE, bridgeMethod.getExceptionTypes().asErasures().toInternalNames());
                        if (methodVisitor != null) {
                            attributeAppender.apply(methodVisitor, bridgeMethod, annotationValueFilterFactory.on(instrumentedType));
                            methodVisitor.visitCode();
                            net.bytebuddy.implementation.bytecode.ByteCodeAppender.Size size = new net.bytebuddy.implementation.bytecode.ByteCodeAppender.Simple(net.bytebuddy.implementation.bytecode.member.MethodVariableAccess.allArgumentsOf(bridgeMethod).asBridgeOf(bridgeTarget).prependThisReference(), net.bytebuddy.implementation.bytecode.member.MethodInvocation.invoke(bridgeTarget).virtual(instrumentedType), (bridgeTarget.getReturnType().asErasure().isAssignableTo(bridgeMethod.getReturnType().asErasure()) ? net.bytebuddy.implementation.bytecode.StackManipulation.Trivial.INSTANCE : net.bytebuddy.implementation.bytecode.assign.TypeCasting.to(bridgeMethod.getReturnType().asErasure())), net.bytebuddy.implementation.bytecode.member.MethodReturn.of(bridgeMethod.getReturnType())).apply(methodVisitor, implementationContext, bridgeMethod);
                            methodVisitor.visitMaxs(size.getOperandStackSize(), size.getLocalVariableSize());
                            methodVisitor.visitEnd();
                        }
                    }
                }

                public void applyHead(org.objectweb.asm.MethodVisitor methodVisitor) {
                    delegate.applyHead(methodVisitor);
                }

                public void applyBody(org.objectweb.asm.MethodVisitor methodVisitor, net.bytebuddy.implementation.Implementation.Context implementationContext, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory) {
                    delegate.applyBody(methodVisitor, implementationContext, annotationValueFilterFactory);
                }

                public void applyAttributes(org.objectweb.asm.MethodVisitor methodVisitor, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory) {
                    delegate.applyAttributes(methodVisitor, annotationValueFilterFactory);
                }

                public net.bytebuddy.implementation.bytecode.ByteCodeAppender.Size applyCode(org.objectweb.asm.MethodVisitor methodVisitor, net.bytebuddy.implementation.Implementation.Context implementationContext) {
                    return delegate.applyCode(methodVisitor, implementationContext);
                }

                protected static class AccessorBridge extends net.bytebuddy.description.method.MethodDescription.InDefinedShape.AbstractBase {
                    private final net.bytebuddy.description.method.MethodDescription bridgeTarget;

                    private final net.bytebuddy.description.method.MethodDescription.TypeToken bridgeType;

                    private final net.bytebuddy.description.type.TypeDescription instrumentedType;

                    protected AccessorBridge(net.bytebuddy.description.method.MethodDescription bridgeTarget, net.bytebuddy.description.method.MethodDescription.TypeToken bridgeType, net.bytebuddy.description.type.TypeDescription instrumentedType) {
                        this.bridgeTarget = bridgeTarget;
                        this.bridgeType = bridgeType;
                        this.instrumentedType = instrumentedType;
                    }

                    public net.bytebuddy.description.type.TypeDescription getDeclaringType() {
                        return instrumentedType;
                    }

                    public net.bytebuddy.description.method.ParameterList<net.bytebuddy.description.method.ParameterDescription.InDefinedShape> getParameters() {
                        return new net.bytebuddy.description.method.ParameterList.Explicit.ForTypes(this, bridgeType.getParameterTypes());
                    }

                    public net.bytebuddy.description.type.TypeDescription.Generic getReturnType() {
                        return bridgeType.getReturnType().asGenericType();
                    }

                    public net.bytebuddy.description.type.TypeList.Generic getExceptionTypes() {
                        return bridgeTarget.getExceptionTypes().accept(net.bytebuddy.description.type.TypeDescription.Generic.Visitor.TypeErasing.INSTANCE);
                    }

                    public net.bytebuddy.description.annotation.AnnotationValue<?, ?> getDefaultValue() {
                        return net.bytebuddy.description.annotation.AnnotationValue.UNDEFINED;
                    }

                    public net.bytebuddy.description.type.TypeList.Generic getTypeVariables() {
                        return new net.bytebuddy.description.type.TypeList.Generic.Empty();
                    }

                    public net.bytebuddy.description.annotation.AnnotationList getDeclaredAnnotations() {
                        return new net.bytebuddy.description.annotation.AnnotationList.Empty();
                    }

                    public int getModifiers() {
                        return (((bridgeTarget.getModifiers()) | (org.objectweb.asm.Opcodes.ACC_BRIDGE)) | (org.objectweb.asm.Opcodes.ACC_SYNTHETIC)) & (~((org.objectweb.asm.Opcodes.ACC_ABSTRACT) | (org.objectweb.asm.Opcodes.ACC_NATIVE)));
                    }

                    public java.lang.String getInternalName() {
                        return bridgeTarget.getInternalName();
                    }
                }

                protected static class BridgeTarget extends net.bytebuddy.description.method.MethodDescription.InDefinedShape.AbstractBase {
                    private final net.bytebuddy.description.method.MethodDescription bridgeTarget;

                    private final net.bytebuddy.description.type.TypeDescription instrumentedType;

                    protected BridgeTarget(net.bytebuddy.description.method.MethodDescription bridgeTarget, net.bytebuddy.description.type.TypeDescription instrumentedType) {
                        this.bridgeTarget = bridgeTarget;
                        this.instrumentedType = instrumentedType;
                    }

                    public net.bytebuddy.description.type.TypeDescription getDeclaringType() {
                        return instrumentedType;
                    }

                    public net.bytebuddy.description.method.ParameterList<net.bytebuddy.description.method.ParameterDescription.InDefinedShape> getParameters() {
                        return new net.bytebuddy.description.method.ParameterList.ForTokens(this, bridgeTarget.getParameters().asTokenList(net.bytebuddy.matcher.ElementMatchers.is(instrumentedType)));
                    }

                    public net.bytebuddy.description.type.TypeDescription.Generic getReturnType() {
                        return bridgeTarget.getReturnType();
                    }

                    public net.bytebuddy.description.type.TypeList.Generic getExceptionTypes() {
                        return bridgeTarget.getExceptionTypes();
                    }

                    public net.bytebuddy.description.annotation.AnnotationValue<?, ?> getDefaultValue() {
                        return bridgeTarget.getDefaultValue();
                    }

                    public net.bytebuddy.description.type.TypeList.Generic getTypeVariables() {
                        return bridgeTarget.getTypeVariables();
                    }

                    public net.bytebuddy.description.annotation.AnnotationList getDeclaredAnnotations() {
                        return bridgeTarget.getDeclaredAnnotations();
                    }

                    public int getModifiers() {
                        return bridgeTarget.getModifiers();
                    }

                    public java.lang.String getInternalName() {
                        return bridgeTarget.getInternalName();
                    }
                }
            }
        }
    }

    @net.bytebuddy.build.HashCodeAndEqualsPlugin.Enhance
    abstract class Default<S> implements net.bytebuddy.dynamic.scaffold.TypeWriter<S> {
        private static final java.lang.String NO_REFERENCE = null;

        protected static final java.lang.String DUMP_FOLDER;

        static {
            java.lang.String dumpFolder;
            try {
                dumpFolder = java.security.AccessController.doPrivileged(new net.bytebuddy.utility.privilege.GetSystemPropertyAction(net.bytebuddy.dynamic.scaffold.TypeWriter.DUMP_PROPERTY));
            } catch (java.lang.RuntimeException exception) {
                dumpFolder = null;
            }
            DUMP_FOLDER = dumpFolder;
        }

        protected final net.bytebuddy.description.type.TypeDescription instrumentedType;

        protected final net.bytebuddy.ClassFileVersion classFileVersion;

        protected final net.bytebuddy.dynamic.scaffold.TypeWriter.FieldPool fieldPool;

        protected final java.util.List<? extends net.bytebuddy.dynamic.DynamicType> auxiliaryTypes;

        protected final net.bytebuddy.description.field.FieldList<net.bytebuddy.description.field.FieldDescription.InDefinedShape> fields;

        protected final net.bytebuddy.description.method.MethodList<?> methods;

        protected final net.bytebuddy.description.method.MethodList<?> instrumentedMethods;

        protected final net.bytebuddy.implementation.LoadedTypeInitializer loadedTypeInitializer;

        protected final net.bytebuddy.dynamic.scaffold.TypeInitializer typeInitializer;

        protected final net.bytebuddy.implementation.attribute.TypeAttributeAppender typeAttributeAppender;

        protected final net.bytebuddy.asm.AsmVisitorWrapper asmVisitorWrapper;

        protected final net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory;

        protected final net.bytebuddy.implementation.attribute.AnnotationRetention annotationRetention;

        protected final net.bytebuddy.implementation.auxiliary.AuxiliaryType.NamingStrategy auxiliaryTypeNamingStrategy;

        protected final net.bytebuddy.implementation.Implementation.Context.Factory implementationContextFactory;

        protected final net.bytebuddy.dynamic.scaffold.TypeValidation typeValidation;

        protected final net.bytebuddy.dynamic.scaffold.ClassWriterStrategy classWriterStrategy;

        protected final net.bytebuddy.pool.TypePool typePool;

        protected Default(net.bytebuddy.description.type.TypeDescription instrumentedType, net.bytebuddy.ClassFileVersion classFileVersion, net.bytebuddy.dynamic.scaffold.TypeWriter.FieldPool fieldPool, java.util.List<? extends net.bytebuddy.dynamic.DynamicType> auxiliaryTypes, net.bytebuddy.description.field.FieldList<net.bytebuddy.description.field.FieldDescription.InDefinedShape> fields, net.bytebuddy.description.method.MethodList<?> methods, net.bytebuddy.description.method.MethodList<?> instrumentedMethods, net.bytebuddy.implementation.LoadedTypeInitializer loadedTypeInitializer, net.bytebuddy.dynamic.scaffold.TypeInitializer typeInitializer, net.bytebuddy.implementation.attribute.TypeAttributeAppender typeAttributeAppender, net.bytebuddy.asm.AsmVisitorWrapper asmVisitorWrapper, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory, net.bytebuddy.implementation.attribute.AnnotationRetention annotationRetention, net.bytebuddy.implementation.auxiliary.AuxiliaryType.NamingStrategy auxiliaryTypeNamingStrategy, net.bytebuddy.implementation.Implementation.Context.Factory implementationContextFactory, net.bytebuddy.dynamic.scaffold.TypeValidation typeValidation, net.bytebuddy.dynamic.scaffold.ClassWriterStrategy classWriterStrategy, net.bytebuddy.pool.TypePool typePool) {
            this.instrumentedType = instrumentedType;
            this.classFileVersion = classFileVersion;
            this.fieldPool = fieldPool;
            this.auxiliaryTypes = auxiliaryTypes;
            this.fields = fields;
            this.methods = methods;
            this.instrumentedMethods = instrumentedMethods;
            this.loadedTypeInitializer = loadedTypeInitializer;
            this.typeInitializer = typeInitializer;
            this.typeAttributeAppender = typeAttributeAppender;
            this.asmVisitorWrapper = asmVisitorWrapper;
            this.auxiliaryTypeNamingStrategy = auxiliaryTypeNamingStrategy;
            this.annotationValueFilterFactory = annotationValueFilterFactory;
            this.annotationRetention = annotationRetention;
            this.implementationContextFactory = implementationContextFactory;
            this.typeValidation = typeValidation;
            this.classWriterStrategy = classWriterStrategy;
            this.typePool = typePool;
        }

        public static <U> net.bytebuddy.dynamic.scaffold.TypeWriter<U> forCreation(net.bytebuddy.dynamic.scaffold.MethodRegistry.Compiled methodRegistry, java.util.List<? extends net.bytebuddy.dynamic.DynamicType> auxiliaryTypes, net.bytebuddy.dynamic.scaffold.TypeWriter.FieldPool fieldPool, net.bytebuddy.implementation.attribute.TypeAttributeAppender typeAttributeAppender, net.bytebuddy.asm.AsmVisitorWrapper asmVisitorWrapper, net.bytebuddy.ClassFileVersion classFileVersion, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory, net.bytebuddy.implementation.attribute.AnnotationRetention annotationRetention, net.bytebuddy.implementation.auxiliary.AuxiliaryType.NamingStrategy auxiliaryTypeNamingStrategy, net.bytebuddy.implementation.Implementation.Context.Factory implementationContextFactory, net.bytebuddy.dynamic.scaffold.TypeValidation typeValidation, net.bytebuddy.dynamic.scaffold.ClassWriterStrategy classWriterStrategy, net.bytebuddy.pool.TypePool typePool) {
            return new net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForCreation<U>(methodRegistry.getInstrumentedType(), classFileVersion, fieldPool, methodRegistry, auxiliaryTypes, methodRegistry.getInstrumentedType().getDeclaredFields(), methodRegistry.getMethods(), methodRegistry.getInstrumentedMethods(), methodRegistry.getLoadedTypeInitializer(), methodRegistry.getTypeInitializer(), typeAttributeAppender, asmVisitorWrapper, annotationValueFilterFactory, annotationRetention, auxiliaryTypeNamingStrategy, implementationContextFactory, typeValidation, classWriterStrategy, typePool);
        }

        public static <U> net.bytebuddy.dynamic.scaffold.TypeWriter<U> forRedefinition(net.bytebuddy.dynamic.scaffold.MethodRegistry.Prepared methodRegistry, java.util.List<? extends net.bytebuddy.dynamic.DynamicType> auxiliaryTypes, net.bytebuddy.dynamic.scaffold.TypeWriter.FieldPool fieldPool, net.bytebuddy.implementation.attribute.TypeAttributeAppender typeAttributeAppender, net.bytebuddy.asm.AsmVisitorWrapper asmVisitorWrapper, net.bytebuddy.ClassFileVersion classFileVersion, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory, net.bytebuddy.implementation.attribute.AnnotationRetention annotationRetention, net.bytebuddy.implementation.auxiliary.AuxiliaryType.NamingStrategy auxiliaryTypeNamingStrategy, net.bytebuddy.implementation.Implementation.Context.Factory implementationContextFactory, net.bytebuddy.dynamic.scaffold.TypeValidation typeValidation, net.bytebuddy.dynamic.scaffold.ClassWriterStrategy classWriterStrategy, net.bytebuddy.pool.TypePool typePool, net.bytebuddy.description.type.TypeDescription originalType, net.bytebuddy.dynamic.ClassFileLocator classFileLocator) {
            return new net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing<U>(methodRegistry.getInstrumentedType(), classFileVersion, fieldPool, auxiliaryTypes, methodRegistry.getInstrumentedType().getDeclaredFields(), methodRegistry.getMethods(), methodRegistry.getInstrumentedMethods(), methodRegistry.getLoadedTypeInitializer(), methodRegistry.getTypeInitializer(), typeAttributeAppender, asmVisitorWrapper, annotationValueFilterFactory, annotationRetention, auxiliaryTypeNamingStrategy, implementationContextFactory, typeValidation, classWriterStrategy, typePool, originalType, classFileLocator, methodRegistry, net.bytebuddy.dynamic.scaffold.subclass.SubclassImplementationTarget.Factory.LEVEL_TYPE, net.bytebuddy.dynamic.scaffold.inline.MethodRebaseResolver.Disabled.INSTANCE);
        }

        public static <U> net.bytebuddy.dynamic.scaffold.TypeWriter<U> forRebasing(net.bytebuddy.dynamic.scaffold.MethodRegistry.Prepared methodRegistry, java.util.List<? extends net.bytebuddy.dynamic.DynamicType> auxiliaryTypes, net.bytebuddy.dynamic.scaffold.TypeWriter.FieldPool fieldPool, net.bytebuddy.implementation.attribute.TypeAttributeAppender typeAttributeAppender, net.bytebuddy.asm.AsmVisitorWrapper asmVisitorWrapper, net.bytebuddy.ClassFileVersion classFileVersion, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory, net.bytebuddy.implementation.attribute.AnnotationRetention annotationRetention, net.bytebuddy.implementation.auxiliary.AuxiliaryType.NamingStrategy auxiliaryTypeNamingStrategy, net.bytebuddy.implementation.Implementation.Context.Factory implementationContextFactory, net.bytebuddy.dynamic.scaffold.TypeValidation typeValidation, net.bytebuddy.dynamic.scaffold.ClassWriterStrategy classWriterStrategy, net.bytebuddy.pool.TypePool typePool, net.bytebuddy.description.type.TypeDescription originalType, net.bytebuddy.dynamic.ClassFileLocator classFileLocator, net.bytebuddy.dynamic.scaffold.inline.MethodRebaseResolver methodRebaseResolver) {
            return new net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing<U>(methodRegistry.getInstrumentedType(), classFileVersion, fieldPool, net.bytebuddy.utility.CompoundList.of(auxiliaryTypes, methodRebaseResolver.getAuxiliaryTypes()), methodRegistry.getInstrumentedType().getDeclaredFields(), methodRegistry.getMethods(), methodRegistry.getInstrumentedMethods(), methodRegistry.getLoadedTypeInitializer(), methodRegistry.getTypeInitializer(), typeAttributeAppender, asmVisitorWrapper, annotationValueFilterFactory, annotationRetention, auxiliaryTypeNamingStrategy, implementationContextFactory, typeValidation, classWriterStrategy, typePool, originalType, classFileLocator, methodRegistry, new net.bytebuddy.dynamic.scaffold.inline.RebaseImplementationTarget.Factory(methodRebaseResolver), methodRebaseResolver);
        }

        public static <U> net.bytebuddy.dynamic.scaffold.TypeWriter<U> forDecoration(net.bytebuddy.description.type.TypeDescription instrumentedType, net.bytebuddy.ClassFileVersion classFileVersion, java.util.List<? extends net.bytebuddy.dynamic.DynamicType> auxiliaryTypes, java.util.List<? extends net.bytebuddy.description.method.MethodDescription> methods, net.bytebuddy.implementation.attribute.TypeAttributeAppender typeAttributeAppender, net.bytebuddy.asm.AsmVisitorWrapper asmVisitorWrapper, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory, net.bytebuddy.implementation.attribute.AnnotationRetention annotationRetention, net.bytebuddy.implementation.auxiliary.AuxiliaryType.NamingStrategy auxiliaryTypeNamingStrategy, net.bytebuddy.implementation.Implementation.Context.Factory implementationContextFactory, net.bytebuddy.dynamic.scaffold.TypeValidation typeValidation, net.bytebuddy.dynamic.scaffold.ClassWriterStrategy classWriterStrategy, net.bytebuddy.pool.TypePool typePool, net.bytebuddy.dynamic.ClassFileLocator classFileLocator) {
            return new net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithDecorationOnly<U>(instrumentedType, classFileVersion, auxiliaryTypes, new net.bytebuddy.description.method.MethodList.Explicit<net.bytebuddy.description.method.MethodDescription>(methods), typeAttributeAppender, asmVisitorWrapper, annotationValueFilterFactory, annotationRetention, auxiliaryTypeNamingStrategy, implementationContextFactory, typeValidation, classWriterStrategy, typePool, classFileLocator);
        }

        @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value = "REC_CATCH_EXCEPTION", justification = "Setting a debugging property should never change the program outcome")
        public net.bytebuddy.dynamic.DynamicType.Unloaded<S> make(net.bytebuddy.dynamic.TypeResolutionStrategy.Resolved typeResolutionStrategy) {
            net.bytebuddy.dynamic.scaffold.TypeWriter.Default<S>.UnresolvedType unresolvedType = create(typeResolutionStrategy.injectedInto(typeInitializer));
            net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ClassDumpAction.dump(net.bytebuddy.dynamic.scaffold.TypeWriter.Default.DUMP_FOLDER, instrumentedType, false, unresolvedType.getBinaryRepresentation());
            return unresolvedType.toDynamicType(typeResolutionStrategy);
        }

        protected abstract net.bytebuddy.dynamic.scaffold.TypeWriter.Default<S>.UnresolvedType create(net.bytebuddy.dynamic.scaffold.TypeInitializer typeInitializer);

        @net.bytebuddy.build.HashCodeAndEqualsPlugin.Enhance(includeSyntheticFields = true)
        protected class UnresolvedType {
            private final byte[] binaryRepresentation;

            private final java.util.List<? extends net.bytebuddy.dynamic.DynamicType> auxiliaryTypes;

            protected UnresolvedType(byte[] binaryRepresentation, java.util.List<? extends net.bytebuddy.dynamic.DynamicType> auxiliaryTypes) {
                this.binaryRepresentation = binaryRepresentation;
                this.auxiliaryTypes = auxiliaryTypes;
            }

            protected net.bytebuddy.dynamic.DynamicType.Unloaded<S> toDynamicType(net.bytebuddy.dynamic.TypeResolutionStrategy.Resolved typeResolutionStrategy) {
                return new net.bytebuddy.dynamic.DynamicType.Unloaded<S>(instrumentedType, binaryRepresentation, loadedTypeInitializer, net.bytebuddy.utility.CompoundList.of(net.bytebuddy.dynamic.scaffold.TypeWriter.Default.this.auxiliaryTypes, auxiliaryTypes), typeResolutionStrategy);
            }

            protected byte[] getBinaryRepresentation() {
                return binaryRepresentation;
            }
        }

        protected static class ValidatingClassVisitor extends org.objectweb.asm.ClassVisitor {
            private static final java.lang.String NO_PARAMETERS = "()";

            private static final java.lang.String RETURNS_VOID = "V";

            private static final java.lang.String STRING_DESCRIPTOR = "Ljava/lang/String;";

            private static final org.objectweb.asm.FieldVisitor IGNORE_FIELD = null;

            private static final org.objectweb.asm.MethodVisitor IGNORE_METHOD = null;

            private net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.Constraint constraint;

            protected ValidatingClassVisitor(org.objectweb.asm.ClassVisitor classVisitor) {
                super(net.bytebuddy.utility.OpenedClassReader.ASM_API, classVisitor);
            }

            protected static org.objectweb.asm.ClassVisitor of(org.objectweb.asm.ClassVisitor classVisitor, net.bytebuddy.dynamic.scaffold.TypeValidation typeValidation) {
                return typeValidation.isEnabled() ? new net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor(classVisitor) : classVisitor;
            }

            @java.lang.Override
            public void visit(int version, int modifiers, java.lang.String name, java.lang.String signature, java.lang.String superName, java.lang.String[] interfaces) {
                net.bytebuddy.ClassFileVersion classFileVersion = net.bytebuddy.ClassFileVersion.ofMinorMajor(version);
                java.util.List<net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.Constraint> constraints = new java.util.ArrayList<net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.Constraint>();
                constraints.add(new net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.Constraint.ForClassFileVersion(classFileVersion));
                if (name.endsWith(('/' + (net.bytebuddy.description.type.PackageDescription.PACKAGE_CLASS_NAME)))) {
                    constraints.add(net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.Constraint.ForPackageType.INSTANCE);
                }else
                    if ((modifiers & (org.objectweb.asm.Opcodes.ACC_ANNOTATION)) != 0) {
                        if (!(classFileVersion.isAtLeast(net.bytebuddy.ClassFileVersion.JAVA_V5))) {
                            throw new java.lang.IllegalStateException(("Cannot define an annotation type for class file version " + classFileVersion));
                        }
                        constraints.add((classFileVersion.isAtLeast(net.bytebuddy.ClassFileVersion.JAVA_V8) ? net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.Constraint.ForAnnotation.JAVA_8 : net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.Constraint.ForAnnotation.CLASSIC));
                    }else
                        if ((modifiers & (org.objectweb.asm.Opcodes.ACC_INTERFACE)) != 0) {
                            constraints.add((classFileVersion.isAtLeast(net.bytebuddy.ClassFileVersion.JAVA_V8) ? net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.Constraint.ForInterface.JAVA_8 : net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.Constraint.ForInterface.CLASSIC));
                        }else
                            if ((modifiers & (org.objectweb.asm.Opcodes.ACC_ABSTRACT)) != 0) {
                                constraints.add(net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.Constraint.ForClass.ABSTRACT);
                            }else {
                                constraints.add(net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.Constraint.ForClass.MANIFEST);
                            }



                constraint = new net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.Constraint.Compound(constraints);
                constraint.assertType(modifiers, (interfaces != null), (signature != null));
                super.visit(version, modifiers, name, signature, superName, interfaces);
            }

            @java.lang.Override
            public org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String descriptor, boolean visible) {
                constraint.assertAnnotation();
                return super.visitAnnotation(descriptor, visible);
            }

            @java.lang.Override
            public org.objectweb.asm.AnnotationVisitor visitTypeAnnotation(int typeReference, org.objectweb.asm.TypePath typePath, java.lang.String descriptor, boolean visible) {
                constraint.assertTypeAnnotation();
                return super.visitTypeAnnotation(typeReference, typePath, descriptor, visible);
            }

            @java.lang.Override
            public void visitNestHost(java.lang.String nestHost) {
                constraint.assertNestMate();
                super.visitNestHost(nestHost);
            }

            @java.lang.Override
            public void visitNestMember(java.lang.String nestMember) {
                constraint.assertNestMate();
                super.visitNestMember(nestMember);
            }

            @java.lang.Override
            public org.objectweb.asm.FieldVisitor visitField(int modifiers, java.lang.String name, java.lang.String descriptor, java.lang.String signature, java.lang.Object defaultValue) {
                if (defaultValue != null) {
                    java.lang.Class<?> type;
                    switch (descriptor.charAt(0)) {
                        case 'Z' :
                        case 'B' :
                        case 'C' :
                        case 'S' :
                        case 'I' :
                            type = java.lang.Integer.class;
                            break;
                        case 'J' :
                            type = java.lang.Long.class;
                            break;
                        case 'F' :
                            type = java.lang.Float.class;
                            break;
                        case 'D' :
                            type = java.lang.Double.class;
                            break;
                        default :
                            if (!(descriptor.equals(net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.STRING_DESCRIPTOR))) {
                                throw new java.lang.IllegalStateException(("Cannot define a default value for type of field " + name));
                            }
                            type = java.lang.String.class;
                    }
                    if (!(type.isInstance(defaultValue))) {
                        throw new java.lang.IllegalStateException(((("Field " + name) + " defines an incompatible default value ") + defaultValue));
                    }else
                        if (type == (java.lang.Integer.class)) {
                            int minimum;
                            int maximum;
                            switch (descriptor.charAt(0)) {
                                case 'Z' :
                                    minimum = 0;
                                    maximum = 1;
                                    break;
                                case 'B' :
                                    minimum = java.lang.Byte.MIN_VALUE;
                                    maximum = java.lang.Byte.MAX_VALUE;
                                    break;
                                case 'C' :
                                    minimum = java.lang.Character.MIN_VALUE;
                                    maximum = java.lang.Character.MAX_VALUE;
                                    break;
                                case 'S' :
                                    minimum = java.lang.Short.MIN_VALUE;
                                    maximum = java.lang.Short.MAX_VALUE;
                                    break;
                                default :
                                    minimum = java.lang.Integer.MIN_VALUE;
                                    maximum = java.lang.Integer.MAX_VALUE;
                            }
                            int value = ((java.lang.Integer) (defaultValue));
                            if ((value < minimum) || (value > maximum)) {
                                throw new java.lang.IllegalStateException(((("Field " + name) + " defines an incompatible default value ") + defaultValue));
                            }
                        }

                }
                constraint.assertField(name, ((modifiers & (org.objectweb.asm.Opcodes.ACC_PUBLIC)) != 0), ((modifiers & (org.objectweb.asm.Opcodes.ACC_STATIC)) != 0), ((modifiers & (org.objectweb.asm.Opcodes.ACC_FINAL)) != 0), (signature != null));
                org.objectweb.asm.FieldVisitor fieldVisitor = super.visitField(modifiers, name, descriptor, signature, defaultValue);
                return fieldVisitor == null ? net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.IGNORE_FIELD : new net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.ValidatingFieldVisitor(fieldVisitor);
            }

            @java.lang.Override
            public org.objectweb.asm.MethodVisitor visitMethod(int modifiers, java.lang.String name, java.lang.String descriptor, java.lang.String signature, java.lang.String[] exceptions) {
                constraint.assertMethod(name, ((modifiers & (org.objectweb.asm.Opcodes.ACC_ABSTRACT)) != 0), ((modifiers & (org.objectweb.asm.Opcodes.ACC_PUBLIC)) != 0), ((modifiers & (org.objectweb.asm.Opcodes.ACC_PRIVATE)) != 0), ((modifiers & (org.objectweb.asm.Opcodes.ACC_STATIC)) != 0), (((!(name.equals(net.bytebuddy.description.method.MethodDescription.CONSTRUCTOR_INTERNAL_NAME))) && (!(name.equals(net.bytebuddy.description.method.MethodDescription.TYPE_INITIALIZER_INTERNAL_NAME)))) && ((modifiers & ((org.objectweb.asm.Opcodes.ACC_PRIVATE) | (org.objectweb.asm.Opcodes.ACC_STATIC))) == 0)), name.equals(net.bytebuddy.description.method.MethodDescription.CONSTRUCTOR_INTERNAL_NAME), ((!(descriptor.startsWith(net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.NO_PARAMETERS))) || (descriptor.endsWith(net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.RETURNS_VOID))), (signature != null));
                org.objectweb.asm.MethodVisitor methodVisitor = super.visitMethod(modifiers, name, descriptor, signature, exceptions);
                return methodVisitor == null ? net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.IGNORE_METHOD : new net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.ValidatingMethodVisitor(methodVisitor, name);
            }

            protected interface Constraint {
                void assertType(int modifier, boolean definesInterfaces, boolean isGeneric);

                void assertField(java.lang.String name, boolean isPublic, boolean isStatic, boolean isFinal, boolean isGeneric);

                void assertMethod(java.lang.String name, boolean isAbstract, boolean isPublic, boolean isPrivate, boolean isStatic, boolean isVirtual, boolean isConstructor, boolean isDefaultValueIncompatible, boolean isGeneric);

                void assertAnnotation();

                void assertTypeAnnotation();

                void assertDefaultValue(java.lang.String name);

                void assertDefaultMethodCall();

                void assertTypeInConstantPool();

                void assertMethodTypeInConstantPool();

                void assertHandleInConstantPool();

                void assertInvokeDynamic();

                void assertSubRoutine();

                void assertDynamicValueInConstantPool();

                void assertNestMate();

                enum ForClass implements net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.Constraint {

                    MANIFEST(true),
                    ABSTRACT(false);
                    private final boolean manifestType;

                    ForClass(boolean manifestType) {
                        this.manifestType = manifestType;
                    }

                    public void assertType(int modifier, boolean definesInterfaces, boolean isGeneric) {
                    }

                    public void assertField(java.lang.String name, boolean isPublic, boolean isStatic, boolean isFinal, boolean isGeneric) {
                    }

                    public void assertMethod(java.lang.String name, boolean isAbstract, boolean isPublic, boolean isPrivate, boolean isStatic, boolean isVirtual, boolean isConstructor, boolean isDefaultValueIncompatible, boolean isGeneric) {
                        if (isAbstract && (manifestType)) {
                            throw new java.lang.IllegalStateException((("Cannot define abstract method '" + name) + "' for non-abstract class"));
                        }
                    }

                    public void assertAnnotation() {
                    }

                    public void assertTypeAnnotation() {
                    }

                    public void assertDefaultValue(java.lang.String name) {
                        throw new java.lang.IllegalStateException((("Cannot define default value for '" + name) + "' for non-annotation type"));
                    }

                    public void assertDefaultMethodCall() {
                    }

                    public void assertTypeInConstantPool() {
                    }

                    public void assertMethodTypeInConstantPool() {
                    }

                    public void assertHandleInConstantPool() {
                    }

                    public void assertInvokeDynamic() {
                    }

                    public void assertSubRoutine() {
                    }

                    public void assertDynamicValueInConstantPool() {
                    }

                    public void assertNestMate() {
                    }
                }

                enum ForPackageType implements net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.Constraint {

                    INSTANCE;
                    public void assertField(java.lang.String name, boolean isPublic, boolean isStatic, boolean isFinal, boolean isGeneric) {
                        throw new java.lang.IllegalStateException("Cannot define a field for a package description type");
                    }

                    public void assertMethod(java.lang.String name, boolean isAbstract, boolean isPublic, boolean isPrivate, boolean isStatic, boolean isVirtual, boolean isConstructor, boolean isNoDefaultValue, boolean isGeneric) {
                        throw new java.lang.IllegalStateException("Cannot define a method for a package description type");
                    }

                    public void assertAnnotation() {
                    }

                    public void assertTypeAnnotation() {
                    }

                    public void assertDefaultValue(java.lang.String name) {
                    }

                    public void assertDefaultMethodCall() {
                    }

                    public void assertTypeInConstantPool() {
                    }

                    public void assertMethodTypeInConstantPool() {
                    }

                    public void assertHandleInConstantPool() {
                    }

                    public void assertInvokeDynamic() {
                    }

                    public void assertSubRoutine() {
                    }

                    public void assertType(int modifier, boolean definesInterfaces, boolean isGeneric) {
                        if (modifier != (net.bytebuddy.description.type.PackageDescription.PACKAGE_MODIFIERS)) {
                            throw new java.lang.IllegalStateException((("A package description type must define " + (net.bytebuddy.description.type.PackageDescription.PACKAGE_MODIFIERS)) + " as modifier"));
                        }else
                            if (definesInterfaces) {
                                throw new java.lang.IllegalStateException("Cannot implement interface for package type");
                            }

                    }

                    public void assertDynamicValueInConstantPool() {
                    }

                    public void assertNestMate() {
                    }
                }

                enum ForInterface implements net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.Constraint {

                    CLASSIC(true),
                    JAVA_8(false);
                    private final boolean classic;

                    ForInterface(boolean classic) {
                        this.classic = classic;
                    }

                    public void assertField(java.lang.String name, boolean isPublic, boolean isStatic, boolean isFinal, boolean isGeneric) {
                        if (((!isStatic) || (!isPublic)) || (!isFinal)) {
                            throw new java.lang.IllegalStateException((("Cannot only define public, static, final field '" + name) + "' for interface type"));
                        }
                    }

                    public void assertMethod(java.lang.String name, boolean isAbstract, boolean isPublic, boolean isPrivate, boolean isStatic, boolean isVirtual, boolean isConstructor, boolean isDefaultValueIncompatible, boolean isGeneric) {
                        if (!(name.equals(net.bytebuddy.description.method.MethodDescription.TYPE_INITIALIZER_INTERNAL_NAME))) {
                            if (isConstructor) {
                                throw new java.lang.IllegalStateException("Cannot define constructor for interface type");
                            }else
                                if ((classic) && (!isPublic)) {
                                    throw new java.lang.IllegalStateException((("Cannot define non-public method '" + name) + "' for interface type"));
                                }else
                                    if ((classic) && (!isVirtual)) {
                                        throw new java.lang.IllegalStateException((("Cannot define non-virtual method '" + name) + "' for a pre-Java 8 interface type"));
                                    }else
                                        if ((classic) && (!isAbstract)) {
                                            throw new java.lang.IllegalStateException((("Cannot define default method '" + name) + "' for pre-Java 8 interface type"));
                                        }



                        }
                    }

                    public void assertAnnotation() {
                    }

                    public void assertTypeAnnotation() {
                    }

                    public void assertDefaultValue(java.lang.String name) {
                        throw new java.lang.IllegalStateException((("Cannot define default value for '" + name) + "' for non-annotation type"));
                    }

                    public void assertDefaultMethodCall() {
                    }

                    public void assertType(int modifier, boolean definesInterfaces, boolean isGeneric) {
                    }

                    public void assertTypeInConstantPool() {
                    }

                    public void assertMethodTypeInConstantPool() {
                    }

                    public void assertHandleInConstantPool() {
                    }

                    public void assertInvokeDynamic() {
                    }

                    public void assertSubRoutine() {
                    }

                    public void assertDynamicValueInConstantPool() {
                    }

                    public void assertNestMate() {
                    }
                }

                enum ForAnnotation implements net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.Constraint {

                    CLASSIC(true),
                    JAVA_8(false);
                    private final boolean classic;

                    ForAnnotation(boolean classic) {
                        this.classic = classic;
                    }

                    public void assertField(java.lang.String name, boolean isPublic, boolean isStatic, boolean isFinal, boolean isGeneric) {
                        if (((!isStatic) || (!isPublic)) || (!isFinal)) {
                            throw new java.lang.IllegalStateException((("Cannot only define public, static, final field '" + name) + "' for interface type"));
                        }
                    }

                    public void assertMethod(java.lang.String name, boolean isAbstract, boolean isPublic, boolean isPrivate, boolean isStatic, boolean isVirtual, boolean isConstructor, boolean isDefaultValueIncompatible, boolean isGeneric) {
                        if (!(name.equals(net.bytebuddy.description.method.MethodDescription.TYPE_INITIALIZER_INTERNAL_NAME))) {
                            if (isConstructor) {
                                throw new java.lang.IllegalStateException("Cannot define constructor for interface type");
                            }else
                                if ((classic) && (!isVirtual)) {
                                    throw new java.lang.IllegalStateException((("Cannot define non-virtual method '" + name) + "' for a pre-Java 8 annotation type"));
                                }else
                                    if ((!isStatic) && isDefaultValueIncompatible) {
                                        throw new java.lang.IllegalStateException((("Cannot define method '" + name) + "' with the given signature as an annotation type method"));
                                    }


                        }
                    }

                    public void assertAnnotation() {
                    }

                    public void assertTypeAnnotation() {
                    }

                    public void assertDefaultValue(java.lang.String name) {
                    }

                    public void assertDefaultMethodCall() {
                    }

                    public void assertType(int modifier, boolean definesInterfaces, boolean isGeneric) {
                        if ((modifier & (org.objectweb.asm.Opcodes.ACC_INTERFACE)) == 0) {
                            throw new java.lang.IllegalStateException("Cannot define annotation type without interface modifier");
                        }
                    }

                    public void assertTypeInConstantPool() {
                    }

                    public void assertMethodTypeInConstantPool() {
                    }

                    public void assertHandleInConstantPool() {
                    }

                    public void assertInvokeDynamic() {
                    }

                    public void assertSubRoutine() {
                    }

                    public void assertDynamicValueInConstantPool() {
                    }

                    public void assertNestMate() {
                    }
                }

                @net.bytebuddy.build.HashCodeAndEqualsPlugin.Enhance
                class ForClassFileVersion implements net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.Constraint {
                    private final net.bytebuddy.ClassFileVersion classFileVersion;

                    protected ForClassFileVersion(net.bytebuddy.ClassFileVersion classFileVersion) {
                        this.classFileVersion = classFileVersion;
                    }

                    public void assertType(int modifiers, boolean definesInterfaces, boolean isGeneric) {
                        if (((modifiers & (org.objectweb.asm.Opcodes.ACC_ANNOTATION)) != 0) && (!(classFileVersion.isAtLeast(net.bytebuddy.ClassFileVersion.JAVA_V5)))) {
                            throw new java.lang.IllegalStateException(("Cannot define annotation type for class file version " + (classFileVersion)));
                        }else
                            if (isGeneric && (!(classFileVersion.isAtLeast(net.bytebuddy.ClassFileVersion.JAVA_V5)))) {
                                throw new java.lang.IllegalStateException(("Cannot define a generic type for class file version " + (classFileVersion)));
                            }

                    }

                    public void assertField(java.lang.String name, boolean isPublic, boolean isStatic, boolean isFinal, boolean isGeneric) {
                        if (isGeneric && (!(classFileVersion.isAtLeast(net.bytebuddy.ClassFileVersion.JAVA_V5)))) {
                            throw new java.lang.IllegalStateException(((("Cannot define generic field '" + name) + "' for class file version ") + (classFileVersion)));
                        }
                    }

                    public void assertMethod(java.lang.String name, boolean isAbstract, boolean isPublic, boolean isPrivate, boolean isStatic, boolean isVirtual, boolean isConstructor, boolean isDefaultValueIncompatible, boolean isGeneric) {
                        if (isGeneric && (!(classFileVersion.isAtLeast(net.bytebuddy.ClassFileVersion.JAVA_V5)))) {
                            throw new java.lang.IllegalStateException(((("Cannot define generic method '" + name) + "' for class file version ") + (classFileVersion)));
                        }else
                            if ((!isVirtual) && isAbstract) {
                                throw new java.lang.IllegalStateException((("Cannot define static or non-virtual method '" + name) + "' to be abstract"));
                            }

                    }

                    public void assertAnnotation() {
                        if (classFileVersion.isLessThan(net.bytebuddy.ClassFileVersion.JAVA_V5)) {
                            throw new java.lang.IllegalStateException(("Cannot write annotations for class file version " + (classFileVersion)));
                        }
                    }

                    public void assertTypeAnnotation() {
                        if (classFileVersion.isLessThan(net.bytebuddy.ClassFileVersion.JAVA_V5)) {
                            throw new java.lang.IllegalStateException(("Cannot write type annotations for class file version " + (classFileVersion)));
                        }
                    }

                    public void assertDefaultValue(java.lang.String name) {
                    }

                    public void assertDefaultMethodCall() {
                        if (classFileVersion.isLessThan(net.bytebuddy.ClassFileVersion.JAVA_V8)) {
                            throw new java.lang.IllegalStateException(("Cannot invoke default method for class file version " + (classFileVersion)));
                        }
                    }

                    public void assertTypeInConstantPool() {
                        if (classFileVersion.isLessThan(net.bytebuddy.ClassFileVersion.JAVA_V5)) {
                            throw new java.lang.IllegalStateException(("Cannot write type to constant pool for class file version " + (classFileVersion)));
                        }
                    }

                    public void assertMethodTypeInConstantPool() {
                        if (classFileVersion.isLessThan(net.bytebuddy.ClassFileVersion.JAVA_V7)) {
                            throw new java.lang.IllegalStateException(("Cannot write method type to constant pool for class file version " + (classFileVersion)));
                        }
                    }

                    public void assertHandleInConstantPool() {
                        if (classFileVersion.isLessThan(net.bytebuddy.ClassFileVersion.JAVA_V7)) {
                            throw new java.lang.IllegalStateException(("Cannot write method handle to constant pool for class file version " + (classFileVersion)));
                        }
                    }

                    public void assertInvokeDynamic() {
                        if (classFileVersion.isLessThan(net.bytebuddy.ClassFileVersion.JAVA_V7)) {
                            throw new java.lang.IllegalStateException(("Cannot write invoke dynamic instruction for class file version " + (classFileVersion)));
                        }
                    }

                    public void assertSubRoutine() {
                        if (classFileVersion.isGreaterThan(net.bytebuddy.ClassFileVersion.JAVA_V5)) {
                            throw new java.lang.IllegalStateException(("Cannot write subroutine for class file version " + (classFileVersion)));
                        }
                    }

                    public void assertDynamicValueInConstantPool() {
                        if (classFileVersion.isLessThan(net.bytebuddy.ClassFileVersion.JAVA_V11)) {
                            throw new java.lang.IllegalStateException(("Cannot write dynamic constant for class file version " + (classFileVersion)));
                        }
                    }

                    public void assertNestMate() {
                        if (classFileVersion.isLessThan(net.bytebuddy.ClassFileVersion.JAVA_V11)) {
                            throw new java.lang.IllegalStateException(("Cannot define nest mate for class file version " + (classFileVersion)));
                        }
                    }
                }

                @net.bytebuddy.build.HashCodeAndEqualsPlugin.Enhance
                class Compound implements net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.Constraint {
                    private final java.util.List<net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.Constraint> constraints;

                    public Compound(java.util.List<? extends net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.Constraint> constraints) {
                        this.constraints = new java.util.ArrayList<net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.Constraint>();
                        for (net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.Constraint constraint : constraints) {
                            if (constraint instanceof net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.Constraint.Compound) {
                                this.constraints.addAll(((net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.Constraint.Compound) (constraint)).constraints);
                            }else {
                                this.constraints.add(constraint);
                            }
                        }
                    }

                    public void assertType(int modifier, boolean definesInterfaces, boolean isGeneric) {
                        for (net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.Constraint constraint : constraints) {
                            constraint.assertType(modifier, definesInterfaces, isGeneric);
                        }
                    }

                    public void assertField(java.lang.String name, boolean isPublic, boolean isStatic, boolean isFinal, boolean isGeneric) {
                        for (net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.Constraint constraint : constraints) {
                            constraint.assertField(name, isPublic, isStatic, isFinal, isGeneric);
                        }
                    }

                    public void assertMethod(java.lang.String name, boolean isAbstract, boolean isPublic, boolean isPrivate, boolean isStatic, boolean isVirtual, boolean isConstructor, boolean isDefaultValueIncompatible, boolean isGeneric) {
                        for (net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.Constraint constraint : constraints) {
                            constraint.assertMethod(name, isAbstract, isPublic, isPrivate, isStatic, isVirtual, isConstructor, isDefaultValueIncompatible, isGeneric);
                        }
                    }

                    public void assertDefaultValue(java.lang.String name) {
                        for (net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.Constraint constraint : constraints) {
                            constraint.assertDefaultValue(name);
                        }
                    }

                    public void assertDefaultMethodCall() {
                        for (net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.Constraint constraint : constraints) {
                            constraint.assertDefaultMethodCall();
                        }
                    }

                    public void assertAnnotation() {
                        for (net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.Constraint constraint : constraints) {
                            constraint.assertAnnotation();
                        }
                    }

                    public void assertTypeAnnotation() {
                        for (net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.Constraint constraint : constraints) {
                            constraint.assertTypeAnnotation();
                        }
                    }

                    public void assertTypeInConstantPool() {
                        for (net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.Constraint constraint : constraints) {
                            constraint.assertTypeInConstantPool();
                        }
                    }

                    public void assertMethodTypeInConstantPool() {
                        for (net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.Constraint constraint : constraints) {
                            constraint.assertMethodTypeInConstantPool();
                        }
                    }

                    public void assertHandleInConstantPool() {
                        for (net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.Constraint constraint : constraints) {
                            constraint.assertHandleInConstantPool();
                        }
                    }

                    public void assertInvokeDynamic() {
                        for (net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.Constraint constraint : constraints) {
                            constraint.assertInvokeDynamic();
                        }
                    }

                    public void assertSubRoutine() {
                        for (net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.Constraint constraint : constraints) {
                            constraint.assertSubRoutine();
                        }
                    }

                    public void assertDynamicValueInConstantPool() {
                        for (net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.Constraint constraint : constraints) {
                            constraint.assertDynamicValueInConstantPool();
                        }
                    }

                    public void assertNestMate() {
                        for (net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.Constraint constraint : constraints) {
                            constraint.assertNestMate();
                        }
                    }
                }
            }

            protected class ValidatingFieldVisitor extends org.objectweb.asm.FieldVisitor {
                protected ValidatingFieldVisitor(org.objectweb.asm.FieldVisitor fieldVisitor) {
                    super(net.bytebuddy.utility.OpenedClassReader.ASM_API, fieldVisitor);
                }

                @java.lang.Override
                public org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String desc, boolean visible) {
                    constraint.assertAnnotation();
                    return super.visitAnnotation(desc, visible);
                }
            }

            protected class ValidatingMethodVisitor extends org.objectweb.asm.MethodVisitor {
                private final java.lang.String name;

                protected ValidatingMethodVisitor(org.objectweb.asm.MethodVisitor methodVisitor, java.lang.String name) {
                    super(net.bytebuddy.utility.OpenedClassReader.ASM_API, methodVisitor);
                    this.name = name;
                }

                @java.lang.Override
                public org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String desc, boolean visible) {
                    constraint.assertAnnotation();
                    return super.visitAnnotation(desc, visible);
                }

                @java.lang.Override
                public org.objectweb.asm.AnnotationVisitor visitAnnotationDefault() {
                    constraint.assertDefaultValue(name);
                    return super.visitAnnotationDefault();
                }

                @java.lang.Override
                @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value = "SF_SWITCH_NO_DEFAULT", justification = "Fall through to default case is intentional")
                public void visitLdcInsn(java.lang.Object value) {
                    if (value instanceof org.objectweb.asm.Type) {
                        org.objectweb.asm.Type type = ((org.objectweb.asm.Type) (value));
                        switch (type.getSort()) {
                            case org.objectweb.asm.Type.OBJECT :
                            case org.objectweb.asm.Type.ARRAY :
                                constraint.assertTypeInConstantPool();
                                break;
                            case org.objectweb.asm.Type.METHOD :
                                constraint.assertMethodTypeInConstantPool();
                                break;
                        }
                    }else
                        if (value instanceof org.objectweb.asm.Handle) {
                            constraint.assertHandleInConstantPool();
                        }else
                            if (value instanceof org.objectweb.asm.ConstantDynamic) {
                                constraint.assertDynamicValueInConstantPool();
                            }


                    super.visitLdcInsn(value);
                }

                @java.lang.Override
                public void visitMethodInsn(int opcode, java.lang.String owner, java.lang.String name, java.lang.String descriptor, boolean isInterface) {
                    if (isInterface && (opcode == (org.objectweb.asm.Opcodes.INVOKESPECIAL))) {
                        constraint.assertDefaultMethodCall();
                    }
                    super.visitMethodInsn(opcode, owner, name, descriptor, isInterface);
                }

                @java.lang.Override
                public void visitInvokeDynamicInsn(java.lang.String name, java.lang.String descriptor, org.objectweb.asm.Handle bootstrapMethod, java.lang.Object[] bootstrapArgument) {
                    constraint.assertInvokeDynamic();
                    for (java.lang.Object constant : bootstrapArgument) {
                        if (constant instanceof org.objectweb.asm.ConstantDynamic) {
                            constraint.assertDynamicValueInConstantPool();
                        }
                    }
                    super.visitInvokeDynamicInsn(name, descriptor, bootstrapMethod, bootstrapArgument);
                }

                @java.lang.Override
                public void visitJumpInsn(int opcode, org.objectweb.asm.Label label) {
                    if (opcode == (org.objectweb.asm.Opcodes.JSR)) {
                        constraint.assertSubRoutine();
                    }
                    super.visitJumpInsn(opcode, label);
                }
            }
        }

        @net.bytebuddy.build.HashCodeAndEqualsPlugin.Enhance
        public abstract static class ForInlining<U> extends net.bytebuddy.dynamic.scaffold.TypeWriter.Default<U> {
            private static final org.objectweb.asm.FieldVisitor IGNORE_FIELD = null;

            private static final org.objectweb.asm.MethodVisitor IGNORE_METHOD = null;

            private static final org.objectweb.asm.AnnotationVisitor IGNORE_ANNOTATION = null;

            protected final net.bytebuddy.description.type.TypeDescription originalType;

            protected final net.bytebuddy.dynamic.ClassFileLocator classFileLocator;

            protected ForInlining(net.bytebuddy.description.type.TypeDescription instrumentedType, net.bytebuddy.ClassFileVersion classFileVersion, net.bytebuddy.dynamic.scaffold.TypeWriter.FieldPool fieldPool, java.util.List<? extends net.bytebuddy.dynamic.DynamicType> auxiliaryTypes, net.bytebuddy.description.field.FieldList<net.bytebuddy.description.field.FieldDescription.InDefinedShape> fields, net.bytebuddy.description.method.MethodList<?> methods, net.bytebuddy.description.method.MethodList<?> instrumentedMethods, net.bytebuddy.implementation.LoadedTypeInitializer loadedTypeInitializer, net.bytebuddy.dynamic.scaffold.TypeInitializer typeInitializer, net.bytebuddy.implementation.attribute.TypeAttributeAppender typeAttributeAppender, net.bytebuddy.asm.AsmVisitorWrapper asmVisitorWrapper, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory, net.bytebuddy.implementation.attribute.AnnotationRetention annotationRetention, net.bytebuddy.implementation.auxiliary.AuxiliaryType.NamingStrategy auxiliaryTypeNamingStrategy, net.bytebuddy.implementation.Implementation.Context.Factory implementationContextFactory, net.bytebuddy.dynamic.scaffold.TypeValidation typeValidation, net.bytebuddy.dynamic.scaffold.ClassWriterStrategy classWriterStrategy, net.bytebuddy.pool.TypePool typePool, net.bytebuddy.description.type.TypeDescription originalType, net.bytebuddy.dynamic.ClassFileLocator classFileLocator) {
                super(instrumentedType, classFileVersion, fieldPool, auxiliaryTypes, fields, methods, instrumentedMethods, loadedTypeInitializer, typeInitializer, typeAttributeAppender, asmVisitorWrapper, annotationValueFilterFactory, annotationRetention, auxiliaryTypeNamingStrategy, implementationContextFactory, typeValidation, classWriterStrategy, typePool);
                this.originalType = originalType;
                this.classFileLocator = classFileLocator;
            }

            @java.lang.Override
            protected net.bytebuddy.dynamic.scaffold.TypeWriter.Default<U>.UnresolvedType create(net.bytebuddy.dynamic.scaffold.TypeInitializer typeInitializer) {
                try {
                    int writerFlags = asmVisitorWrapper.mergeWriter(net.bytebuddy.asm.AsmVisitorWrapper.NO_FLAGS);
                    int readerFlags = asmVisitorWrapper.mergeReader(net.bytebuddy.asm.AsmVisitorWrapper.NO_FLAGS);
                    byte[] binaryRepresentation = classFileLocator.locate(originalType.getName()).resolve();
                    net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ClassDumpAction.dump(net.bytebuddy.dynamic.scaffold.TypeWriter.Default.DUMP_FOLDER, instrumentedType, true, binaryRepresentation);
                    org.objectweb.asm.ClassReader classReader = net.bytebuddy.utility.OpenedClassReader.of(binaryRepresentation);
                    org.objectweb.asm.ClassWriter classWriter = classWriterStrategy.resolve(writerFlags, typePool, classReader);
                    net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.ContextRegistry contextRegistry = new net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.ContextRegistry();
                    classReader.accept(writeTo(net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.of(classWriter, typeValidation), typeInitializer, contextRegistry, writerFlags, readerFlags), readerFlags);
                    return new UnresolvedType(classWriter.toByteArray(), contextRegistry.getAuxiliaryTypes());
                } catch (java.io.IOException exception) {
                    throw new java.lang.RuntimeException("The class file could not be written", exception);
                }
            }

            protected abstract org.objectweb.asm.ClassVisitor writeTo(org.objectweb.asm.ClassVisitor classVisitor, net.bytebuddy.dynamic.scaffold.TypeInitializer typeInitializer, net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.ContextRegistry contextRegistry, int writerFlags, int readerFlags);

            protected static class ContextRegistry {
                private net.bytebuddy.implementation.Implementation.Context.ExtractableView implementationContext;

                public void setImplementationContext(net.bytebuddy.implementation.Implementation.Context.ExtractableView implementationContext) {
                    this.implementationContext = implementationContext;
                }

                @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value = "UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR", justification = "Lazy value definition is intended")
                public java.util.List<net.bytebuddy.dynamic.DynamicType> getAuxiliaryTypes() {
                    return implementationContext.getAuxiliaryTypes();
                }
            }

            @net.bytebuddy.build.HashCodeAndEqualsPlugin.Enhance
            protected static class WithFullProcessing<V> extends net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining<V> {
                private final net.bytebuddy.dynamic.scaffold.MethodRegistry.Prepared methodRegistry;

                private final net.bytebuddy.implementation.Implementation.Target.Factory implementationTargetFactory;

                private final net.bytebuddy.dynamic.scaffold.inline.MethodRebaseResolver methodRebaseResolver;

                protected WithFullProcessing(net.bytebuddy.description.type.TypeDescription instrumentedType, net.bytebuddy.ClassFileVersion classFileVersion, net.bytebuddy.dynamic.scaffold.TypeWriter.FieldPool fieldPool, java.util.List<? extends net.bytebuddy.dynamic.DynamicType> auxiliaryTypes, net.bytebuddy.description.field.FieldList<net.bytebuddy.description.field.FieldDescription.InDefinedShape> fields, net.bytebuddy.description.method.MethodList<?> methods, net.bytebuddy.description.method.MethodList<?> instrumentedMethods, net.bytebuddy.implementation.LoadedTypeInitializer loadedTypeInitializer, net.bytebuddy.dynamic.scaffold.TypeInitializer typeInitializer, net.bytebuddy.implementation.attribute.TypeAttributeAppender typeAttributeAppender, net.bytebuddy.asm.AsmVisitorWrapper asmVisitorWrapper, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory, net.bytebuddy.implementation.attribute.AnnotationRetention annotationRetention, net.bytebuddy.implementation.auxiliary.AuxiliaryType.NamingStrategy auxiliaryTypeNamingStrategy, net.bytebuddy.implementation.Implementation.Context.Factory implementationContextFactory, net.bytebuddy.dynamic.scaffold.TypeValidation typeValidation, net.bytebuddy.dynamic.scaffold.ClassWriterStrategy classWriterStrategy, net.bytebuddy.pool.TypePool typePool, net.bytebuddy.description.type.TypeDescription originalType, net.bytebuddy.dynamic.ClassFileLocator classFileLocator, net.bytebuddy.dynamic.scaffold.MethodRegistry.Prepared methodRegistry, net.bytebuddy.implementation.Implementation.Target.Factory implementationTargetFactory, net.bytebuddy.dynamic.scaffold.inline.MethodRebaseResolver methodRebaseResolver) {
                    super(instrumentedType, classFileVersion, fieldPool, auxiliaryTypes, fields, methods, instrumentedMethods, loadedTypeInitializer, typeInitializer, typeAttributeAppender, asmVisitorWrapper, annotationValueFilterFactory, annotationRetention, auxiliaryTypeNamingStrategy, implementationContextFactory, typeValidation, classWriterStrategy, typePool, originalType, classFileLocator);
                    this.methodRegistry = methodRegistry;
                    this.implementationTargetFactory = implementationTargetFactory;
                    this.methodRebaseResolver = methodRebaseResolver;
                }

                protected org.objectweb.asm.ClassVisitor writeTo(org.objectweb.asm.ClassVisitor classVisitor, net.bytebuddy.dynamic.scaffold.TypeInitializer typeInitializer, net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.ContextRegistry contextRegistry, int writerFlags, int readerFlags) {
                    classVisitor = new RedefinitionClassVisitor(classVisitor, typeInitializer, contextRegistry, writerFlags, readerFlags);
                    return originalType.getName().equals(instrumentedType.getName()) ? classVisitor : new net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.OpenedClassRemapper(classVisitor, new org.objectweb.asm.commons.SimpleRemapper(originalType.getInternalName(), instrumentedType.getInternalName()));
                }

                protected static class OpenedClassRemapper extends org.objectweb.asm.commons.ClassRemapper {
                    protected OpenedClassRemapper(org.objectweb.asm.ClassVisitor classVisitor, org.objectweb.asm.commons.Remapper remapper) {
                        super(net.bytebuddy.utility.OpenedClassReader.ASM_API, classVisitor, remapper);
                    }
                }

                protected interface InitializationHandler {
                    void complete(org.objectweb.asm.ClassVisitor classVisitor, net.bytebuddy.implementation.Implementation.Context.ExtractableView implementationContext);

                    class Creating extends net.bytebuddy.dynamic.scaffold.TypeInitializer.Drain.Default implements net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler {
                        protected Creating(net.bytebuddy.description.type.TypeDescription instrumentedType, net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool methodPool, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory) {
                            super(instrumentedType, methodPool, annotationValueFilterFactory);
                        }

                        public void complete(org.objectweb.asm.ClassVisitor classVisitor, net.bytebuddy.implementation.Implementation.Context.ExtractableView implementationContext) {
                            implementationContext.drain(this, classVisitor, annotationValueFilterFactory);
                        }
                    }

                    abstract class Appending extends org.objectweb.asm.MethodVisitor implements net.bytebuddy.dynamic.scaffold.TypeInitializer.Drain , net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler {
                        protected final net.bytebuddy.description.type.TypeDescription instrumentedType;

                        protected final net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record record;

                        protected final net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory;

                        protected final net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler.Appending.FrameWriter frameWriter;

                        protected int stackSize;

                        protected int localVariableLength;

                        protected Appending(org.objectweb.asm.MethodVisitor methodVisitor, net.bytebuddy.description.type.TypeDescription instrumentedType, net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record record, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory, boolean requireFrames, boolean expandFrames) {
                            super(net.bytebuddy.utility.OpenedClassReader.ASM_API, methodVisitor);
                            this.instrumentedType = instrumentedType;
                            this.record = record;
                            this.annotationValueFilterFactory = annotationValueFilterFactory;
                            if (!requireFrames) {
                                frameWriter = net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler.Appending.FrameWriter.NoOp.INSTANCE;
                            }else
                                if (expandFrames) {
                                    frameWriter = net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler.Appending.FrameWriter.Expanding.INSTANCE;
                                }else {
                                    frameWriter = new net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler.Appending.FrameWriter.Active();
                                }

                        }

                        protected static net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler of(boolean enabled, org.objectweb.asm.MethodVisitor methodVisitor, net.bytebuddy.description.type.TypeDescription instrumentedType, net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool methodPool, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory, boolean requireFrames, boolean expandFrames) {
                            return enabled ? net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler.Appending.withDrain(methodVisitor, instrumentedType, methodPool, annotationValueFilterFactory, requireFrames, expandFrames) : net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler.Appending.withoutDrain(methodVisitor, instrumentedType, methodPool, annotationValueFilterFactory, requireFrames, expandFrames);
                        }

                        private static net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler.Appending.WithDrain withDrain(org.objectweb.asm.MethodVisitor methodVisitor, net.bytebuddy.description.type.TypeDescription instrumentedType, net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool methodPool, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory, boolean requireFrames, boolean expandFrames) {
                            net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record record = methodPool.target(new net.bytebuddy.description.method.MethodDescription.Latent.TypeInitializer(instrumentedType));
                            return record.getSort().isImplemented() ? new net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler.Appending.WithDrain.WithActiveRecord(methodVisitor, instrumentedType, record, annotationValueFilterFactory, requireFrames, expandFrames) : new net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler.Appending.WithDrain.WithoutActiveRecord(methodVisitor, instrumentedType, record, annotationValueFilterFactory, requireFrames, expandFrames);
                        }

                        private static net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler.Appending.WithoutDrain withoutDrain(org.objectweb.asm.MethodVisitor methodVisitor, net.bytebuddy.description.type.TypeDescription instrumentedType, net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool methodPool, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory, boolean requireFrames, boolean expandFrames) {
                            net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record record = methodPool.target(new net.bytebuddy.description.method.MethodDescription.Latent.TypeInitializer(instrumentedType));
                            return record.getSort().isImplemented() ? new net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler.Appending.WithoutDrain.WithActiveRecord(methodVisitor, instrumentedType, record, annotationValueFilterFactory, requireFrames, expandFrames) : new net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler.Appending.WithoutDrain.WithoutActiveRecord(methodVisitor, instrumentedType, record, annotationValueFilterFactory);
                        }

                        @java.lang.Override
                        public void visitCode() {
                            record.applyAttributes(mv, annotationValueFilterFactory);
                            super.visitCode();
                            onStart();
                        }

                        protected abstract void onStart();

                        @java.lang.Override
                        public void visitFrame(int type, int localVariableLength, java.lang.Object[] localVariable, int stackSize, java.lang.Object[] stack) {
                            super.visitFrame(type, localVariableLength, localVariable, stackSize, stack);
                            frameWriter.onFrame(type, localVariableLength);
                        }

                        @java.lang.Override
                        public void visitMaxs(int stackSize, int localVariableLength) {
                            this.stackSize = stackSize;
                            this.localVariableLength = localVariableLength;
                        }

                        @java.lang.Override
                        public abstract void visitEnd();

                        public void apply(org.objectweb.asm.ClassVisitor classVisitor, net.bytebuddy.dynamic.scaffold.TypeInitializer typeInitializer, net.bytebuddy.implementation.Implementation.Context implementationContext) {
                            net.bytebuddy.implementation.bytecode.ByteCodeAppender.Size size = typeInitializer.apply(mv, implementationContext, new net.bytebuddy.description.method.MethodDescription.Latent.TypeInitializer(instrumentedType));
                            stackSize = java.lang.Math.max(stackSize, size.getOperandStackSize());
                            localVariableLength = java.lang.Math.max(localVariableLength, size.getLocalVariableSize());
                            onComplete(implementationContext);
                        }

                        protected abstract void onComplete(net.bytebuddy.implementation.Implementation.Context implementationContext);

                        public void complete(org.objectweb.asm.ClassVisitor classVisitor, net.bytebuddy.implementation.Implementation.Context.ExtractableView implementationContext) {
                            implementationContext.drain(this, classVisitor, annotationValueFilterFactory);
                            mv.visitMaxs(stackSize, localVariableLength);
                            mv.visitEnd();
                        }

                        protected interface FrameWriter {
                            java.lang.Object[] EMPTY = new java.lang.Object[0];

                            void onFrame(int type, int localVariableLength);

                            void emitFrame(org.objectweb.asm.MethodVisitor methodVisitor);

                            enum NoOp implements net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler.Appending.FrameWriter {

                                INSTANCE;
                                public void onFrame(int type, int localVariableLength) {
                                }

                                public void emitFrame(org.objectweb.asm.MethodVisitor methodVisitor) {
                                }
                            }

                            enum Expanding implements net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler.Appending.FrameWriter {

                                INSTANCE;
                                public void onFrame(int type, int localVariableLength) {
                                }

                                public void emitFrame(org.objectweb.asm.MethodVisitor methodVisitor) {
                                    methodVisitor.visitFrame(org.objectweb.asm.Opcodes.F_NEW, net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler.Appending.FrameWriter.Expanding.EMPTY.length, net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler.Appending.FrameWriter.EMPTY, net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler.Appending.FrameWriter.Expanding.EMPTY.length, net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler.Appending.FrameWriter.EMPTY);
                                }
                            }

                            class Active implements net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler.Appending.FrameWriter {
                                private int currentLocalVariableLength;

                                public void onFrame(int type, int localVariableLength) {
                                    switch (type) {
                                        case org.objectweb.asm.Opcodes.F_SAME :
                                        case org.objectweb.asm.Opcodes.F_SAME1 :
                                            break;
                                        case org.objectweb.asm.Opcodes.F_APPEND :
                                            currentLocalVariableLength += localVariableLength;
                                            break;
                                        case org.objectweb.asm.Opcodes.F_CHOP :
                                            currentLocalVariableLength -= localVariableLength;
                                            break;
                                        case org.objectweb.asm.Opcodes.F_NEW :
                                        case org.objectweb.asm.Opcodes.F_FULL :
                                            currentLocalVariableLength = localVariableLength;
                                            break;
                                        default :
                                            throw new java.lang.IllegalStateException(("Unexpected frame type: " + type));
                                    }
                                }

                                public void emitFrame(org.objectweb.asm.MethodVisitor methodVisitor) {
                                    if ((currentLocalVariableLength) == 0) {
                                        methodVisitor.visitFrame(org.objectweb.asm.Opcodes.F_SAME, net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler.Appending.FrameWriter.Active.EMPTY.length, net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler.Appending.FrameWriter.EMPTY, net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler.Appending.FrameWriter.Active.EMPTY.length, net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler.Appending.FrameWriter.EMPTY);
                                    }else
                                        if ((currentLocalVariableLength) > 3) {
                                            methodVisitor.visitFrame(org.objectweb.asm.Opcodes.F_FULL, net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler.Appending.FrameWriter.Active.EMPTY.length, net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler.Appending.FrameWriter.EMPTY, net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler.Appending.FrameWriter.Active.EMPTY.length, net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler.Appending.FrameWriter.EMPTY);
                                        }else {
                                            methodVisitor.visitFrame(org.objectweb.asm.Opcodes.F_CHOP, currentLocalVariableLength, net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler.Appending.FrameWriter.EMPTY, net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler.Appending.FrameWriter.Active.EMPTY.length, net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler.Appending.FrameWriter.EMPTY);
                                        }

                                    currentLocalVariableLength = 0;
                                }
                            }
                        }

                        protected abstract static class WithoutDrain extends net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler.Appending {
                            protected WithoutDrain(org.objectweb.asm.MethodVisitor methodVisitor, net.bytebuddy.description.type.TypeDescription instrumentedType, net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record record, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory, boolean requireFrames, boolean expandFrames) {
                                super(methodVisitor, instrumentedType, record, annotationValueFilterFactory, requireFrames, expandFrames);
                            }

                            @java.lang.Override
                            protected void onStart() {
                            }

                            @java.lang.Override
                            public void visitEnd() {
                            }

                            protected static class WithoutActiveRecord extends net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler.Appending.WithoutDrain {
                                protected WithoutActiveRecord(org.objectweb.asm.MethodVisitor methodVisitor, net.bytebuddy.description.type.TypeDescription instrumentedType, net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record record, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory) {
                                    super(methodVisitor, instrumentedType, record, annotationValueFilterFactory, false, false);
                                }

                                @java.lang.Override
                                protected void onComplete(net.bytebuddy.implementation.Implementation.Context implementationContext) {
                                }
                            }

                            protected static class WithActiveRecord extends net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler.Appending.WithoutDrain {
                                private final org.objectweb.asm.Label label;

                                protected WithActiveRecord(org.objectweb.asm.MethodVisitor methodVisitor, net.bytebuddy.description.type.TypeDescription instrumentedType, net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record record, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory, boolean requireFrames, boolean expandFrames) {
                                    super(methodVisitor, instrumentedType, record, annotationValueFilterFactory, requireFrames, expandFrames);
                                    label = new org.objectweb.asm.Label();
                                }

                                @java.lang.Override
                                public void visitInsn(int opcode) {
                                    if (opcode == (org.objectweb.asm.Opcodes.RETURN)) {
                                        mv.visitJumpInsn(org.objectweb.asm.Opcodes.GOTO, label);
                                    }else {
                                        super.visitInsn(opcode);
                                    }
                                }

                                @java.lang.Override
                                protected void onComplete(net.bytebuddy.implementation.Implementation.Context implementationContext) {
                                    mv.visitLabel(label);
                                    frameWriter.emitFrame(mv);
                                    net.bytebuddy.implementation.bytecode.ByteCodeAppender.Size size = record.applyCode(mv, implementationContext);
                                    stackSize = java.lang.Math.max(stackSize, size.getOperandStackSize());
                                    localVariableLength = java.lang.Math.max(localVariableLength, size.getLocalVariableSize());
                                }
                            }
                        }

                        protected abstract static class WithDrain extends net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler.Appending {
                            protected final org.objectweb.asm.Label appended;

                            protected final org.objectweb.asm.Label original;

                            protected WithDrain(org.objectweb.asm.MethodVisitor methodVisitor, net.bytebuddy.description.type.TypeDescription instrumentedType, net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record record, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory, boolean requireFrames, boolean expandFrames) {
                                super(methodVisitor, instrumentedType, record, annotationValueFilterFactory, requireFrames, expandFrames);
                                appended = new org.objectweb.asm.Label();
                                original = new org.objectweb.asm.Label();
                            }

                            @java.lang.Override
                            protected void onStart() {
                                mv.visitJumpInsn(org.objectweb.asm.Opcodes.GOTO, appended);
                                mv.visitLabel(original);
                                frameWriter.emitFrame(mv);
                            }

                            @java.lang.Override
                            public void visitEnd() {
                                mv.visitLabel(appended);
                                frameWriter.emitFrame(mv);
                            }

                            @java.lang.Override
                            protected void onComplete(net.bytebuddy.implementation.Implementation.Context implementationContext) {
                                mv.visitJumpInsn(org.objectweb.asm.Opcodes.GOTO, original);
                                onAfterComplete(implementationContext);
                            }

                            protected abstract void onAfterComplete(net.bytebuddy.implementation.Implementation.Context implementationContext);

                            protected static class WithoutActiveRecord extends net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler.Appending.WithDrain {
                                protected WithoutActiveRecord(org.objectweb.asm.MethodVisitor methodVisitor, net.bytebuddy.description.type.TypeDescription instrumentedType, net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record record, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory, boolean requireFrames, boolean expandFrames) {
                                    super(methodVisitor, instrumentedType, record, annotationValueFilterFactory, requireFrames, expandFrames);
                                }

                                @java.lang.Override
                                protected void onAfterComplete(net.bytebuddy.implementation.Implementation.Context implementationContext) {
                                }
                            }

                            protected static class WithActiveRecord extends net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler.Appending.WithDrain {
                                private final org.objectweb.asm.Label label;

                                protected WithActiveRecord(org.objectweb.asm.MethodVisitor methodVisitor, net.bytebuddy.description.type.TypeDescription instrumentedType, net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record record, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory, boolean requireFrames, boolean expandFrames) {
                                    super(methodVisitor, instrumentedType, record, annotationValueFilterFactory, requireFrames, expandFrames);
                                    label = new org.objectweb.asm.Label();
                                }

                                @java.lang.Override
                                public void visitInsn(int opcode) {
                                    if (opcode == (org.objectweb.asm.Opcodes.RETURN)) {
                                        mv.visitJumpInsn(org.objectweb.asm.Opcodes.GOTO, label);
                                    }else {
                                        super.visitInsn(opcode);
                                    }
                                }

                                @java.lang.Override
                                protected void onAfterComplete(net.bytebuddy.implementation.Implementation.Context implementationContext) {
                                    mv.visitLabel(label);
                                    frameWriter.emitFrame(mv);
                                    net.bytebuddy.implementation.bytecode.ByteCodeAppender.Size size = record.applyCode(mv, implementationContext);
                                    stackSize = java.lang.Math.max(stackSize, size.getOperandStackSize());
                                    localVariableLength = java.lang.Math.max(localVariableLength, size.getLocalVariableSize());
                                }
                            }
                        }
                    }
                }

                @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value = "UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR", justification = "Field access order is implied by ASM")
                protected class RedefinitionClassVisitor extends net.bytebuddy.utility.visitor.MetadataAwareClassVisitor {
                    private final net.bytebuddy.dynamic.scaffold.TypeInitializer typeInitializer;

                    private final net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.ContextRegistry contextRegistry;

                    private final int writerFlags;

                    private final int readerFlags;

                    private final java.util.LinkedHashMap<java.lang.String, net.bytebuddy.description.field.FieldDescription> declarableFields;

                    private final java.util.LinkedHashMap<java.lang.String, net.bytebuddy.description.method.MethodDescription> declarableMethods;

                    private final java.util.Set<java.lang.String> nestMembers;

                    private final java.util.LinkedHashMap<java.lang.String, net.bytebuddy.description.type.TypeDescription> declaredTypes;

                    private net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool methodPool;

                    private net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler initializationHandler;

                    private net.bytebuddy.implementation.Implementation.Context.ExtractableView implementationContext;

                    private boolean retainDeprecationModifiers;

                    protected RedefinitionClassVisitor(org.objectweb.asm.ClassVisitor classVisitor, net.bytebuddy.dynamic.scaffold.TypeInitializer typeInitializer, net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.ContextRegistry contextRegistry, int writerFlags, int readerFlags) {
                        super(net.bytebuddy.utility.OpenedClassReader.ASM_API, classVisitor);
                        this.typeInitializer = typeInitializer;
                        this.contextRegistry = contextRegistry;
                        this.writerFlags = writerFlags;
                        this.readerFlags = readerFlags;
                        declarableFields = new java.util.LinkedHashMap<java.lang.String, net.bytebuddy.description.field.FieldDescription>();
                        for (net.bytebuddy.description.field.FieldDescription fieldDescription : fields) {
                            declarableFields.put(((fieldDescription.getInternalName()) + (fieldDescription.getDescriptor())), fieldDescription);
                        }
                        declarableMethods = new java.util.LinkedHashMap<java.lang.String, net.bytebuddy.description.method.MethodDescription>();
                        for (net.bytebuddy.description.method.MethodDescription methodDescription : instrumentedMethods) {
                            declarableMethods.put(((methodDescription.getInternalName()) + (methodDescription.getDescriptor())), methodDescription);
                        }
                        if (instrumentedType.isNestHost()) {
                            nestMembers = new java.util.LinkedHashSet<java.lang.String>();
                            for (net.bytebuddy.description.type.TypeDescription typeDescription : instrumentedType.getNestMembers().filter(net.bytebuddy.matcher.ElementMatchers.not(net.bytebuddy.matcher.ElementMatchers.is(instrumentedType)))) {
                                nestMembers.add(typeDescription.getInternalName());
                            }
                        }else {
                            nestMembers = java.util.Collections.emptySet();
                        }
                        declaredTypes = new java.util.LinkedHashMap<java.lang.String, net.bytebuddy.description.type.TypeDescription>();
                        for (net.bytebuddy.description.type.TypeDescription typeDescription : instrumentedType.getDeclaredTypes()) {
                            declaredTypes.put(typeDescription.getInternalName(), typeDescription);
                        }
                    }

                    @java.lang.Override
                    public void visit(int classFileVersionNumber, int modifiers, java.lang.String internalName, java.lang.String genericSignature, java.lang.String superClassInternalName, java.lang.String[] interfaceTypeInternalName) {
                        net.bytebuddy.ClassFileVersion classFileVersion = net.bytebuddy.ClassFileVersion.ofMinorMajor(classFileVersionNumber);
                        methodPool = methodRegistry.compile(implementationTargetFactory, classFileVersion);
                        initializationHandler = new net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler.Creating(instrumentedType, methodPool, annotationValueFilterFactory);
                        implementationContext = implementationContextFactory.make(instrumentedType, auxiliaryTypeNamingStrategy, typeInitializer, classFileVersion, net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.this.classFileVersion);
                        retainDeprecationModifiers = classFileVersion.isLessThan(net.bytebuddy.ClassFileVersion.JAVA_V5);
                        contextRegistry.setImplementationContext(implementationContext);
                        cv = asmVisitorWrapper.wrap(instrumentedType, cv, implementationContext, typePool, fields, methods, writerFlags, readerFlags);
                        cv.visit(classFileVersionNumber, (((instrumentedType.getActualModifiers((((modifiers & (org.objectweb.asm.Opcodes.ACC_SUPER)) != 0) && (!(instrumentedType.isInterface()))))) | (resolveDeprecationModifiers(modifiers))) | (((modifiers & (org.objectweb.asm.Opcodes.ACC_FINAL)) != 0) && (instrumentedType.isAnonymousType()) ? org.objectweb.asm.Opcodes.ACC_FINAL : 0)), instrumentedType.getInternalName(), (net.bytebuddy.description.type.TypeDescription.AbstractBase.RAW_TYPES ? genericSignature : instrumentedType.getGenericSignature()), ((instrumentedType.getSuperClass()) == null ? instrumentedType.isInterface() ? net.bytebuddy.description.type.TypeDescription.OBJECT.getInternalName() : net.bytebuddy.dynamic.scaffold.TypeWriter.Default.NO_REFERENCE : instrumentedType.getSuperClass().asErasure().getInternalName()), instrumentedType.getInterfaces().asErasures().toInternalNames());
                    }

                    @java.lang.Override
                    protected void onVisitNestHost(java.lang.String nestHost) {
                        onNestHost();
                    }

                    @java.lang.Override
                    protected void onNestHost() {
                        if (!(instrumentedType.isNestHost())) {
                            cv.visitNestHost(instrumentedType.getNestHost().getInternalName());
                        }
                    }

                    @java.lang.Override
                    protected void onVisitOuterClass(java.lang.String owner, java.lang.String name, java.lang.String descriptor) {
                        try {
                            onOuterType();
                        } catch (java.lang.Throwable ignored) {
                            cv.visitOuterClass(owner, name, descriptor);
                        }
                    }

                    @java.lang.Override
                    protected void onOuterType() {
                        net.bytebuddy.description.method.MethodDescription.InDefinedShape enclosingMethod = instrumentedType.getEnclosingMethod();
                        if (enclosingMethod != null) {
                            cv.visitOuterClass(enclosingMethod.getDeclaringType().getInternalName(), enclosingMethod.getInternalName(), enclosingMethod.getDescriptor());
                        }else
                            if ((instrumentedType.isLocalType()) || (instrumentedType.isAnonymousType())) {
                                cv.visitOuterClass(instrumentedType.getEnclosingType().getInternalName(), net.bytebuddy.dynamic.scaffold.TypeWriter.Default.NO_REFERENCE, net.bytebuddy.dynamic.scaffold.TypeWriter.Default.NO_REFERENCE);
                            }

                    }

                    @java.lang.Override
                    protected void onAfterAttributes() {
                        typeAttributeAppender.apply(cv, instrumentedType, annotationValueFilterFactory.on(instrumentedType));
                    }

                    @java.lang.Override
                    protected org.objectweb.asm.AnnotationVisitor onVisitTypeAnnotation(int typeReference, org.objectweb.asm.TypePath typePath, java.lang.String descriptor, boolean visible) {
                        return annotationRetention.isEnabled() ? cv.visitTypeAnnotation(typeReference, typePath, descriptor, visible) : net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.IGNORE_ANNOTATION;
                    }

                    @java.lang.Override
                    protected org.objectweb.asm.AnnotationVisitor onVisitAnnotation(java.lang.String descriptor, boolean visible) {
                        return annotationRetention.isEnabled() ? cv.visitAnnotation(descriptor, visible) : net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.IGNORE_ANNOTATION;
                    }

                    @java.lang.Override
                    protected org.objectweb.asm.FieldVisitor onVisitField(int modifiers, java.lang.String internalName, java.lang.String descriptor, java.lang.String genericSignature, java.lang.Object defaultValue) {
                        net.bytebuddy.description.field.FieldDescription fieldDescription = declarableFields.remove((internalName + descriptor));
                        if (fieldDescription != null) {
                            net.bytebuddy.dynamic.scaffold.TypeWriter.FieldPool.Record record = fieldPool.target(fieldDescription);
                            if (!(record.isImplicit())) {
                                return redefine(record, defaultValue, modifiers, genericSignature);
                            }
                        }
                        return cv.visitField(modifiers, internalName, descriptor, genericSignature, defaultValue);
                    }

                    protected org.objectweb.asm.FieldVisitor redefine(net.bytebuddy.dynamic.scaffold.TypeWriter.FieldPool.Record record, java.lang.Object defaultValue, int modifiers, java.lang.String genericSignature) {
                        net.bytebuddy.description.field.FieldDescription instrumentedField = record.getField();
                        org.objectweb.asm.FieldVisitor fieldVisitor = cv.visitField(((instrumentedField.getActualModifiers()) | (resolveDeprecationModifiers(modifiers))), instrumentedField.getInternalName(), instrumentedField.getDescriptor(), (net.bytebuddy.description.type.TypeDescription.AbstractBase.RAW_TYPES ? genericSignature : instrumentedField.getGenericSignature()), record.resolveDefault(defaultValue));
                        return fieldVisitor == null ? net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.IGNORE_FIELD : new AttributeObtainingFieldVisitor(fieldVisitor, record);
                    }

                    @java.lang.Override
                    protected org.objectweb.asm.MethodVisitor onVisitMethod(int modifiers, java.lang.String internalName, java.lang.String descriptor, java.lang.String genericSignature, java.lang.String[] exceptionName) {
                        if (internalName.equals(net.bytebuddy.description.method.MethodDescription.TYPE_INITIALIZER_INTERNAL_NAME)) {
                            org.objectweb.asm.MethodVisitor methodVisitor = cv.visitMethod(modifiers, internalName, descriptor, genericSignature, exceptionName);
                            return methodVisitor == null ? net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.IGNORE_METHOD : (((org.objectweb.asm.MethodVisitor) (initializationHandler = net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler.Appending.of(implementationContext.isEnabled(), methodVisitor, instrumentedType, methodPool, annotationValueFilterFactory, ((((writerFlags) & (org.objectweb.asm.ClassWriter.COMPUTE_FRAMES)) == 0) && (implementationContext.getClassFileVersion().isAtLeast(net.bytebuddy.ClassFileVersion.JAVA_V6))), (((readerFlags) & (org.objectweb.asm.ClassReader.EXPAND_FRAMES)) != 0)))));
                        }else {
                            net.bytebuddy.description.method.MethodDescription methodDescription = declarableMethods.remove((internalName + descriptor));
                            return methodDescription == null ? cv.visitMethod(modifiers, internalName, descriptor, genericSignature, exceptionName) : redefine(methodDescription, ((modifiers & (org.objectweb.asm.Opcodes.ACC_ABSTRACT)) != 0), modifiers, genericSignature);
                        }
                    }

                    protected org.objectweb.asm.MethodVisitor redefine(net.bytebuddy.description.method.MethodDescription methodDescription, boolean abstractOrigin, int modifiers, java.lang.String genericSignature) {
                        net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record record = methodPool.target(methodDescription);
                        if (!(record.getSort().isDefined())) {
                            return cv.visitMethod(((methodDescription.getActualModifiers()) | (resolveDeprecationModifiers(modifiers))), methodDescription.getInternalName(), methodDescription.getDescriptor(), (net.bytebuddy.description.type.TypeDescription.AbstractBase.RAW_TYPES ? genericSignature : methodDescription.getGenericSignature()), methodDescription.getExceptionTypes().asErasures().toInternalNames());
                        }
                        net.bytebuddy.description.method.MethodDescription implementedMethod = record.getMethod();
                        org.objectweb.asm.MethodVisitor methodVisitor = cv.visitMethod(((net.bytebuddy.description.modifier.ModifierContributor.Resolver.of(java.util.Collections.singleton(record.getVisibility())).resolve(implementedMethod.getActualModifiers(record.getSort().isImplemented()))) | (resolveDeprecationModifiers(modifiers))), implementedMethod.getInternalName(), implementedMethod.getDescriptor(), (net.bytebuddy.description.type.TypeDescription.AbstractBase.RAW_TYPES ? genericSignature : implementedMethod.getGenericSignature()), implementedMethod.getExceptionTypes().asErasures().toInternalNames());
                        if (methodVisitor == null) {
                            return net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.IGNORE_METHOD;
                        }else
                            if (abstractOrigin) {
                                return new AttributeObtainingMethodVisitor(methodVisitor, record);
                            }else
                                if (methodDescription.isNative()) {
                                    net.bytebuddy.dynamic.scaffold.inline.MethodRebaseResolver.Resolution resolution = methodRebaseResolver.resolve(implementedMethod.asDefined());
                                    if (resolution.isRebased()) {
                                        org.objectweb.asm.MethodVisitor rebasedMethodVisitor = super.visitMethod(((resolution.getResolvedMethod().getActualModifiers()) | (resolveDeprecationModifiers(modifiers))), resolution.getResolvedMethod().getInternalName(), resolution.getResolvedMethod().getDescriptor(), (net.bytebuddy.description.type.TypeDescription.AbstractBase.RAW_TYPES ? genericSignature : implementedMethod.getGenericSignature()), resolution.getResolvedMethod().getExceptionTypes().asErasures().toInternalNames());
                                        if (rebasedMethodVisitor != null) {
                                            rebasedMethodVisitor.visitEnd();
                                        }
                                    }
                                    return new AttributeObtainingMethodVisitor(methodVisitor, record);
                                }else {
                                    return new CodePreservingMethodVisitor(methodVisitor, record, methodRebaseResolver.resolve(implementedMethod.asDefined()));
                                }


                    }

                    @java.lang.Override
                    protected void onVisitInnerClass(java.lang.String internalName, java.lang.String outerName, java.lang.String innerName, int modifiers) {
                        if (!(internalName.equals(instrumentedType.getInternalName()))) {
                            net.bytebuddy.description.type.TypeDescription declaredType = declaredTypes.remove(internalName);
                            if (declaredType == null) {
                                cv.visitInnerClass(internalName, outerName, innerName, modifiers);
                            }else {
                                cv.visitInnerClass(internalName, ((declaredType.isMemberType()) || (((outerName != null) && (innerName == null)) && (declaredType.isAnonymousType())) ? instrumentedType.getInternalName() : net.bytebuddy.dynamic.scaffold.TypeWriter.Default.NO_REFERENCE), (declaredType.isAnonymousType() ? net.bytebuddy.dynamic.scaffold.TypeWriter.Default.NO_REFERENCE : declaredType.getSimpleName()), declaredType.getModifiers());
                            }
                        }
                    }

                    @java.lang.Override
                    protected void onVisitNestMember(java.lang.String nestMember) {
                        if ((instrumentedType.isNestHost()) && (nestMembers.remove(nestMember))) {
                            cv.visitNestMember(nestMember);
                        }
                    }

                    @java.lang.Override
                    protected void onVisitEnd() {
                        for (net.bytebuddy.description.field.FieldDescription fieldDescription : declarableFields.values()) {
                            fieldPool.target(fieldDescription).apply(cv, annotationValueFilterFactory);
                        }
                        for (net.bytebuddy.description.method.MethodDescription methodDescription : declarableMethods.values()) {
                            methodPool.target(methodDescription).apply(cv, implementationContext, annotationValueFilterFactory);
                        }
                        initializationHandler.complete(cv, implementationContext);
                        net.bytebuddy.description.type.TypeDescription declaringType = instrumentedType.getDeclaringType();
                        if (declaringType != null) {
                            cv.visitInnerClass(instrumentedType.getInternalName(), declaringType.getInternalName(), instrumentedType.getSimpleName(), instrumentedType.getModifiers());
                        }else
                            if (instrumentedType.isLocalType()) {
                                cv.visitInnerClass(instrumentedType.getInternalName(), net.bytebuddy.dynamic.scaffold.TypeWriter.Default.NO_REFERENCE, instrumentedType.getSimpleName(), instrumentedType.getModifiers());
                            }else
                                if (instrumentedType.isAnonymousType()) {
                                    cv.visitInnerClass(instrumentedType.getInternalName(), net.bytebuddy.dynamic.scaffold.TypeWriter.Default.NO_REFERENCE, net.bytebuddy.dynamic.scaffold.TypeWriter.Default.NO_REFERENCE, instrumentedType.getModifiers());
                                }


                        for (net.bytebuddy.description.type.TypeDescription typeDescription : declaredTypes.values()) {
                            cv.visitInnerClass(typeDescription.getInternalName(), (typeDescription.isMemberType() ? instrumentedType.getInternalName() : net.bytebuddy.dynamic.scaffold.TypeWriter.Default.NO_REFERENCE), (typeDescription.isAnonymousType() ? net.bytebuddy.dynamic.scaffold.TypeWriter.Default.NO_REFERENCE : typeDescription.getSimpleName()), typeDescription.getModifiers());
                        }
                        cv.visitEnd();
                    }

                    private int resolveDeprecationModifiers(int modifiers) {
                        return (retainDeprecationModifiers) && ((modifiers & (org.objectweb.asm.Opcodes.ACC_DEPRECATED)) != 0) ? org.objectweb.asm.Opcodes.ACC_DEPRECATED : net.bytebuddy.description.modifier.ModifierContributor.EMPTY_MASK;
                    }

                    protected class AttributeObtainingFieldVisitor extends org.objectweb.asm.FieldVisitor {
                        private final net.bytebuddy.dynamic.scaffold.TypeWriter.FieldPool.Record record;

                        protected AttributeObtainingFieldVisitor(org.objectweb.asm.FieldVisitor fieldVisitor, net.bytebuddy.dynamic.scaffold.TypeWriter.FieldPool.Record record) {
                            super(net.bytebuddy.utility.OpenedClassReader.ASM_API, fieldVisitor);
                            this.record = record;
                        }

                        @java.lang.Override
                        public org.objectweb.asm.AnnotationVisitor visitTypeAnnotation(int typeReference, org.objectweb.asm.TypePath typePath, java.lang.String descriptor, boolean visible) {
                            return annotationRetention.isEnabled() ? super.visitTypeAnnotation(typeReference, typePath, descriptor, visible) : net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.IGNORE_ANNOTATION;
                        }

                        @java.lang.Override
                        public org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String descriptor, boolean visible) {
                            return annotationRetention.isEnabled() ? super.visitAnnotation(descriptor, visible) : net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.IGNORE_ANNOTATION;
                        }

                        @java.lang.Override
                        public void visitEnd() {
                            record.apply(fv, annotationValueFilterFactory);
                            super.visitEnd();
                        }
                    }

                    protected class CodePreservingMethodVisitor extends org.objectweb.asm.MethodVisitor {
                        private final org.objectweb.asm.MethodVisitor actualMethodVisitor;

                        private final net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record record;

                        private final net.bytebuddy.dynamic.scaffold.inline.MethodRebaseResolver.Resolution resolution;

                        protected CodePreservingMethodVisitor(org.objectweb.asm.MethodVisitor actualMethodVisitor, net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record record, net.bytebuddy.dynamic.scaffold.inline.MethodRebaseResolver.Resolution resolution) {
                            super(net.bytebuddy.utility.OpenedClassReader.ASM_API, actualMethodVisitor);
                            this.actualMethodVisitor = actualMethodVisitor;
                            this.record = record;
                            this.resolution = resolution;
                            record.applyHead(actualMethodVisitor);
                        }

                        @java.lang.Override
                        public org.objectweb.asm.AnnotationVisitor visitAnnotationDefault() {
                            return net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.IGNORE_ANNOTATION;
                        }

                        @java.lang.Override
                        public org.objectweb.asm.AnnotationVisitor visitTypeAnnotation(int typeReference, org.objectweb.asm.TypePath typePath, java.lang.String descriptor, boolean visible) {
                            return annotationRetention.isEnabled() ? super.visitTypeAnnotation(typeReference, typePath, descriptor, visible) : net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.IGNORE_ANNOTATION;
                        }

                        @java.lang.Override
                        public org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String descriptor, boolean visible) {
                            return annotationRetention.isEnabled() ? super.visitAnnotation(descriptor, visible) : net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.IGNORE_ANNOTATION;
                        }

                        @java.lang.Override
                        public void visitAnnotableParameterCount(int count, boolean visible) {
                            if (annotationRetention.isEnabled()) {
                                super.visitAnnotableParameterCount(count, visible);
                            }
                        }

                        @java.lang.Override
                        public org.objectweb.asm.AnnotationVisitor visitParameterAnnotation(int index, java.lang.String descriptor, boolean visible) {
                            return annotationRetention.isEnabled() ? super.visitParameterAnnotation(index, descriptor, visible) : net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.IGNORE_ANNOTATION;
                        }

                        @java.lang.Override
                        public void visitCode() {
                            record.applyBody(actualMethodVisitor, implementationContext, annotationValueFilterFactory);
                            actualMethodVisitor.visitEnd();
                            mv = (resolution.isRebased()) ? cv.visitMethod(resolution.getResolvedMethod().getActualModifiers(), resolution.getResolvedMethod().getInternalName(), resolution.getResolvedMethod().getDescriptor(), resolution.getResolvedMethod().getGenericSignature(), resolution.getResolvedMethod().getExceptionTypes().asErasures().toInternalNames()) : net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.IGNORE_METHOD;
                            super.visitCode();
                        }

                        @java.lang.Override
                        public void visitMaxs(int stackSize, int localVariableLength) {
                            super.visitMaxs(stackSize, java.lang.Math.max(localVariableLength, resolution.getResolvedMethod().getStackSize()));
                        }
                    }

                    protected class AttributeObtainingMethodVisitor extends org.objectweb.asm.MethodVisitor {
                        private final org.objectweb.asm.MethodVisitor actualMethodVisitor;

                        private final net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record record;

                        protected AttributeObtainingMethodVisitor(org.objectweb.asm.MethodVisitor actualMethodVisitor, net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record record) {
                            super(net.bytebuddy.utility.OpenedClassReader.ASM_API, actualMethodVisitor);
                            this.actualMethodVisitor = actualMethodVisitor;
                            this.record = record;
                            record.applyHead(actualMethodVisitor);
                        }

                        @java.lang.Override
                        public org.objectweb.asm.AnnotationVisitor visitAnnotationDefault() {
                            return net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.IGNORE_ANNOTATION;
                        }

                        @java.lang.Override
                        public org.objectweb.asm.AnnotationVisitor visitTypeAnnotation(int typeReference, org.objectweb.asm.TypePath typePath, java.lang.String descriptor, boolean visible) {
                            return annotationRetention.isEnabled() ? super.visitTypeAnnotation(typeReference, typePath, descriptor, visible) : net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.IGNORE_ANNOTATION;
                        }

                        @java.lang.Override
                        public org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String descriptor, boolean visible) {
                            return annotationRetention.isEnabled() ? super.visitAnnotation(descriptor, visible) : net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.IGNORE_ANNOTATION;
                        }

                        @java.lang.Override
                        public void visitAnnotableParameterCount(int count, boolean visible) {
                            if (annotationRetention.isEnabled()) {
                                super.visitAnnotableParameterCount(count, visible);
                            }
                        }

                        @java.lang.Override
                        public org.objectweb.asm.AnnotationVisitor visitParameterAnnotation(int index, java.lang.String descriptor, boolean visible) {
                            return annotationRetention.isEnabled() ? super.visitParameterAnnotation(index, descriptor, visible) : net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.IGNORE_ANNOTATION;
                        }

                        @java.lang.Override
                        public void visitCode() {
                            mv = net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.IGNORE_METHOD;
                        }

                        @java.lang.Override
                        public void visitEnd() {
                            record.applyBody(actualMethodVisitor, implementationContext, annotationValueFilterFactory);
                            actualMethodVisitor.visitEnd();
                        }
                    }
                }
            }

            protected static class WithDecorationOnly<V> extends net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining<V> {
                protected WithDecorationOnly(net.bytebuddy.description.type.TypeDescription instrumentedType, net.bytebuddy.ClassFileVersion classFileVersion, java.util.List<? extends net.bytebuddy.dynamic.DynamicType> auxiliaryTypes, net.bytebuddy.description.method.MethodList<?> methods, net.bytebuddy.implementation.attribute.TypeAttributeAppender typeAttributeAppender, net.bytebuddy.asm.AsmVisitorWrapper asmVisitorWrapper, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory, net.bytebuddy.implementation.attribute.AnnotationRetention annotationRetention, net.bytebuddy.implementation.auxiliary.AuxiliaryType.NamingStrategy auxiliaryTypeNamingStrategy, net.bytebuddy.implementation.Implementation.Context.Factory implementationContextFactory, net.bytebuddy.dynamic.scaffold.TypeValidation typeValidation, net.bytebuddy.dynamic.scaffold.ClassWriterStrategy classWriterStrategy, net.bytebuddy.pool.TypePool typePool, net.bytebuddy.dynamic.ClassFileLocator classFileLocator) {
                    super(instrumentedType, classFileVersion, net.bytebuddy.dynamic.scaffold.TypeWriter.FieldPool.Disabled.INSTANCE, auxiliaryTypes, new net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithDecorationOnly.LazyFieldList(instrumentedType), methods, new net.bytebuddy.description.method.MethodList.Empty<net.bytebuddy.description.method.MethodDescription>(), net.bytebuddy.implementation.LoadedTypeInitializer.NoOp.INSTANCE, net.bytebuddy.dynamic.scaffold.TypeInitializer.None.INSTANCE, typeAttributeAppender, asmVisitorWrapper, annotationValueFilterFactory, annotationRetention, auxiliaryTypeNamingStrategy, implementationContextFactory, typeValidation, classWriterStrategy, typePool, instrumentedType, classFileLocator);
                }

                protected org.objectweb.asm.ClassVisitor writeTo(org.objectweb.asm.ClassVisitor classVisitor, net.bytebuddy.dynamic.scaffold.TypeInitializer typeInitializer, net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.ContextRegistry contextRegistry, int writerFlags, int readerFlags) {
                    if (typeInitializer.isDefined()) {
                        throw new java.lang.UnsupportedOperationException("Cannot apply a type initializer for a decoration");
                    }
                    return new DecorationClassVisitor(classVisitor, contextRegistry, writerFlags, readerFlags);
                }

                protected static class LazyFieldList extends net.bytebuddy.description.field.FieldList.AbstractBase<net.bytebuddy.description.field.FieldDescription.InDefinedShape> {
                    private final net.bytebuddy.description.type.TypeDescription instrumentedType;

                    protected LazyFieldList(net.bytebuddy.description.type.TypeDescription instrumentedType) {
                        this.instrumentedType = instrumentedType;
                    }

                    public net.bytebuddy.description.field.FieldDescription.InDefinedShape get(int index) {
                        return instrumentedType.getDeclaredFields().get(index);
                    }

                    public int size() {
                        return instrumentedType.getDeclaredFields().size();
                    }
                }

                @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value = "UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR", justification = "Field access order is implied by ASM")
                protected class DecorationClassVisitor extends net.bytebuddy.utility.visitor.MetadataAwareClassVisitor implements net.bytebuddy.dynamic.scaffold.TypeInitializer.Drain {
                    private final net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.ContextRegistry contextRegistry;

                    private final int writerFlags;

                    private final int readerFlags;

                    private net.bytebuddy.implementation.Implementation.Context.ExtractableView implementationContext;

                    protected DecorationClassVisitor(org.objectweb.asm.ClassVisitor classVisitor, net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.ContextRegistry contextRegistry, int writerFlags, int readerFlags) {
                        super(net.bytebuddy.utility.OpenedClassReader.ASM_API, classVisitor);
                        this.contextRegistry = contextRegistry;
                        this.writerFlags = writerFlags;
                        this.readerFlags = readerFlags;
                    }

                    @java.lang.Override
                    public void visit(int classFileVersionNumber, int modifiers, java.lang.String internalName, java.lang.String genericSignature, java.lang.String superClassInternalName, java.lang.String[] interfaceTypeInternalName) {
                        net.bytebuddy.ClassFileVersion classFileVersion = net.bytebuddy.ClassFileVersion.ofMinorMajor(classFileVersionNumber);
                        implementationContext = implementationContextFactory.make(instrumentedType, auxiliaryTypeNamingStrategy, typeInitializer, classFileVersion, net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithDecorationOnly.this.classFileVersion);
                        contextRegistry.setImplementationContext(implementationContext);
                        cv = asmVisitorWrapper.wrap(instrumentedType, cv, implementationContext, typePool, fields, methods, writerFlags, readerFlags);
                        cv.visit(classFileVersionNumber, modifiers, internalName, genericSignature, superClassInternalName, interfaceTypeInternalName);
                    }

                    @java.lang.Override
                    protected void onNestHost() {
                    }

                    @java.lang.Override
                    protected void onOuterType() {
                    }

                    @java.lang.Override
                    protected org.objectweb.asm.AnnotationVisitor onVisitTypeAnnotation(int typeReference, org.objectweb.asm.TypePath typePath, java.lang.String descriptor, boolean visible) {
                        return annotationRetention.isEnabled() ? cv.visitTypeAnnotation(typeReference, typePath, descriptor, visible) : net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.IGNORE_ANNOTATION;
                    }

                    @java.lang.Override
                    protected org.objectweb.asm.AnnotationVisitor onVisitAnnotation(java.lang.String descriptor, boolean visible) {
                        return annotationRetention.isEnabled() ? cv.visitAnnotation(descriptor, visible) : net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.IGNORE_ANNOTATION;
                    }

                    @java.lang.Override
                    protected void onAfterAttributes() {
                        typeAttributeAppender.apply(cv, instrumentedType, annotationValueFilterFactory.on(instrumentedType));
                    }

                    @java.lang.Override
                    protected void onVisitEnd() {
                        implementationContext.drain(this, cv, annotationValueFilterFactory);
                        cv.visitEnd();
                    }

                    public void apply(org.objectweb.asm.ClassVisitor classVisitor, net.bytebuddy.dynamic.scaffold.TypeInitializer typeInitializer, net.bytebuddy.implementation.Implementation.Context implementationContext) {
                    }
                }
            }
        }

        @net.bytebuddy.build.HashCodeAndEqualsPlugin.Enhance
        public static class ForCreation<U> extends net.bytebuddy.dynamic.scaffold.TypeWriter.Default<U> {
            private final net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool methodPool;

            protected ForCreation(net.bytebuddy.description.type.TypeDescription instrumentedType, net.bytebuddy.ClassFileVersion classFileVersion, net.bytebuddy.dynamic.scaffold.TypeWriter.FieldPool fieldPool, net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool methodPool, java.util.List<? extends net.bytebuddy.dynamic.DynamicType> auxiliaryTypes, net.bytebuddy.description.field.FieldList<net.bytebuddy.description.field.FieldDescription.InDefinedShape> fields, net.bytebuddy.description.method.MethodList<?> methods, net.bytebuddy.description.method.MethodList<?> instrumentedMethods, net.bytebuddy.implementation.LoadedTypeInitializer loadedTypeInitializer, net.bytebuddy.dynamic.scaffold.TypeInitializer typeInitializer, net.bytebuddy.implementation.attribute.TypeAttributeAppender typeAttributeAppender, net.bytebuddy.asm.AsmVisitorWrapper asmVisitorWrapper, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory, net.bytebuddy.implementation.attribute.AnnotationRetention annotationRetention, net.bytebuddy.implementation.auxiliary.AuxiliaryType.NamingStrategy auxiliaryTypeNamingStrategy, net.bytebuddy.implementation.Implementation.Context.Factory implementationContextFactory, net.bytebuddy.dynamic.scaffold.TypeValidation typeValidation, net.bytebuddy.dynamic.scaffold.ClassWriterStrategy classWriterStrategy, net.bytebuddy.pool.TypePool typePool) {
                super(instrumentedType, classFileVersion, fieldPool, auxiliaryTypes, fields, methods, instrumentedMethods, loadedTypeInitializer, typeInitializer, typeAttributeAppender, asmVisitorWrapper, annotationValueFilterFactory, annotationRetention, auxiliaryTypeNamingStrategy, implementationContextFactory, typeValidation, classWriterStrategy, typePool);
                this.methodPool = methodPool;
            }

            @java.lang.Override
            protected net.bytebuddy.dynamic.scaffold.TypeWriter.Default<U>.UnresolvedType create(net.bytebuddy.dynamic.scaffold.TypeInitializer typeInitializer) {
                int writerFlags = asmVisitorWrapper.mergeWriter(net.bytebuddy.asm.AsmVisitorWrapper.NO_FLAGS);
                org.objectweb.asm.ClassWriter classWriter = classWriterStrategy.resolve(writerFlags, typePool);
                net.bytebuddy.implementation.Implementation.Context.ExtractableView implementationContext = implementationContextFactory.make(instrumentedType, auxiliaryTypeNamingStrategy, typeInitializer, classFileVersion, classFileVersion);
                org.objectweb.asm.ClassVisitor classVisitor = asmVisitorWrapper.wrap(instrumentedType, net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.of(classWriter, typeValidation), implementationContext, typePool, fields, methods, writerFlags, asmVisitorWrapper.mergeReader(net.bytebuddy.asm.AsmVisitorWrapper.NO_FLAGS));
                classVisitor.visit(classFileVersion.getMinorMajorVersion(), instrumentedType.getActualModifiers((!(instrumentedType.isInterface()))), instrumentedType.getInternalName(), instrumentedType.getGenericSignature(), ((instrumentedType.getSuperClass()) == null ? net.bytebuddy.description.type.TypeDescription.OBJECT : instrumentedType.getSuperClass().asErasure()).getInternalName(), instrumentedType.getInterfaces().asErasures().toInternalNames());
                if (!(instrumentedType.isNestHost())) {
                    classVisitor.visitNestHost(instrumentedType.getNestHost().getInternalName());
                }
                net.bytebuddy.description.method.MethodDescription.InDefinedShape enclosingMethod = instrumentedType.getEnclosingMethod();
                if (enclosingMethod != null) {
                    classVisitor.visitOuterClass(enclosingMethod.getDeclaringType().getInternalName(), enclosingMethod.getInternalName(), enclosingMethod.getDescriptor());
                }else
                    if ((instrumentedType.isLocalType()) || (instrumentedType.isAnonymousType())) {
                        classVisitor.visitOuterClass(instrumentedType.getEnclosingType().getInternalName(), net.bytebuddy.dynamic.scaffold.TypeWriter.Default.NO_REFERENCE, net.bytebuddy.dynamic.scaffold.TypeWriter.Default.NO_REFERENCE);
                    }

                typeAttributeAppender.apply(classVisitor, instrumentedType, annotationValueFilterFactory.on(instrumentedType));
                for (net.bytebuddy.description.field.FieldDescription fieldDescription : fields) {
                    fieldPool.target(fieldDescription).apply(classVisitor, annotationValueFilterFactory);
                }
                for (net.bytebuddy.description.method.MethodDescription methodDescription : instrumentedMethods) {
                    methodPool.target(methodDescription).apply(classVisitor, implementationContext, annotationValueFilterFactory);
                }
                implementationContext.drain(new net.bytebuddy.dynamic.scaffold.TypeInitializer.Drain.Default(instrumentedType, methodPool, annotationValueFilterFactory), classVisitor, annotationValueFilterFactory);
                if (instrumentedType.isNestHost()) {
                    for (net.bytebuddy.description.type.TypeDescription typeDescription : instrumentedType.getNestMembers().filter(net.bytebuddy.matcher.ElementMatchers.not(net.bytebuddy.matcher.ElementMatchers.is(instrumentedType)))) {
                        classVisitor.visitNestMember(typeDescription.getInternalName());
                    }
                }
                net.bytebuddy.description.type.TypeDescription declaringType = instrumentedType.getDeclaringType();
                if (declaringType != null) {
                    classVisitor.visitInnerClass(instrumentedType.getInternalName(), declaringType.getInternalName(), instrumentedType.getSimpleName(), instrumentedType.getModifiers());
                }else
                    if (instrumentedType.isLocalType()) {
                        classVisitor.visitInnerClass(instrumentedType.getInternalName(), net.bytebuddy.dynamic.scaffold.TypeWriter.Default.NO_REFERENCE, instrumentedType.getSimpleName(), instrumentedType.getModifiers());
                    }else
                        if (instrumentedType.isAnonymousType()) {
                            classVisitor.visitInnerClass(instrumentedType.getInternalName(), net.bytebuddy.dynamic.scaffold.TypeWriter.Default.NO_REFERENCE, net.bytebuddy.dynamic.scaffold.TypeWriter.Default.NO_REFERENCE, instrumentedType.getModifiers());
                        }


                for (net.bytebuddy.description.type.TypeDescription typeDescription : instrumentedType.getDeclaredTypes()) {
                    classVisitor.visitInnerClass(typeDescription.getInternalName(), (typeDescription.isMemberType() ? instrumentedType.getInternalName() : net.bytebuddy.dynamic.scaffold.TypeWriter.Default.NO_REFERENCE), (typeDescription.isAnonymousType() ? net.bytebuddy.dynamic.scaffold.TypeWriter.Default.NO_REFERENCE : typeDescription.getSimpleName()), typeDescription.getModifiers());
                }
                classVisitor.visitEnd();
                return new UnresolvedType(classWriter.toByteArray(), implementationContext.getAuxiliaryTypes());
            }
        }

        @net.bytebuddy.build.HashCodeAndEqualsPlugin.Enhance
        protected static class ClassDumpAction implements java.security.PrivilegedExceptionAction<java.lang.Void> {
            private static final java.lang.Void NOTHING = null;

            private final java.lang.String target;

            private final net.bytebuddy.description.type.TypeDescription instrumentedType;

            private final boolean original;

            private final byte[] binaryRepresentation;

            protected ClassDumpAction(java.lang.String target, net.bytebuddy.description.type.TypeDescription instrumentedType, boolean original, byte[] binaryRepresentation) {
                this.target = target;
                this.instrumentedType = instrumentedType;
                this.original = original;
                this.binaryRepresentation = binaryRepresentation;
            }

            protected static void dump(java.lang.String dumpFolder, net.bytebuddy.description.type.TypeDescription instrumentedType, boolean original, byte[] binaryRepresentation) {
                if (dumpFolder != null) {
                    try {
                        java.security.AccessController.doPrivileged(new net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ClassDumpAction(dumpFolder, instrumentedType, original, binaryRepresentation));
                    } catch (java.lang.Exception exception) {
                        exception.printStackTrace();
                    }
                }
            }

            public java.lang.Void run() throws java.lang.Exception {
                java.io.OutputStream outputStream = new java.io.FileOutputStream(new java.io.File(target, (((instrumentedType.getName()) + (original ? "-original." : ".")) + (java.lang.System.currentTimeMillis()))));
                try {
                    outputStream.write(binaryRepresentation);
                    return net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ClassDumpAction.NOTHING;
                } finally {
                    outputStream.close();
                }
            }
        }
    }
}
18:46:45.781 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
18:46:45.781 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #16
18:46:45.781 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation net.bytebuddy.dynamic.scaffold.TypeWriter$FieldPool$Record$ForExplicitField:309 which is executed by 464 tests
683157614
18:46:46.218 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
Feb 13, 2019 6:46:46 PM net.bytebuddy.test.utility.JavaVersionRule$NoOpStatement evaluate
WARNING: Ignoring test case: Requires a Java version of at least 11
java.lang.IllegalStateException: public static final java.lang.String net.bytebuddy.implementation.FieldAccessorOtherTest$StaticFieldHolder.FOO is not declared by class net.bytebuddy.renamed.java.util.concurrent.Callable$ByteBuddy$wzt3fXVa
    at net.bytebuddy.implementation.FieldAccessor$FieldLocation$Absolute.prepare(FieldAccessor.java:209)
    at net.bytebuddy.implementation.FieldAccessor$ForImplicitProperty.appender(FieldAccessor.java:656)
    at net.bytebuddy.dynamic.scaffold.MethodRegistry$Handler$ForImplementation.compile(MethodRegistry.java:230)
    at net.bytebuddy.dynamic.scaffold.MethodRegistry$Handler$ForImplementation.compile(MethodRegistry.java:202)
    at net.bytebuddy.dynamic.scaffold.MethodRegistry$Default$Prepared.compile(MethodRegistry.java:731)
    at net.bytebuddy.dynamic.scaffold.subclass.SubclassDynamicTypeBuilder.make(SubclassDynamicTypeBuilder.java:199)
Feb 13, 2019 6:46:51 PM net.bytebuddy.test.utility.JavaVersionRule$NoOpStatement evaluate
WARNING: Ignoring test case: Requires a Java version of at least 11
Feb 13, 2019 6:46:51 PM net.bytebuddy.test.utility.JavaVersionRule$NoOpStatement evaluate
WARNING: Ignoring test case: Requires a Java version of at least 11
Feb 13, 2019 6:46:51 PM net.bytebuddy.test.utility.JavaVersionRule$NoOpStatement evaluate
WARNING: Ignoring test case: Requires a Java version of at least 11
Feb 13, 2019 6:46:51 PM net.bytebuddy.test.utility.JavaVersionRule$NoOpStatement evaluate
WARNING: Ignoring test case: Requires a Java version of at least 11
Feb 13, 2019 6:46:51 PM net.bytebuddy.test.utility.JavaVersionRule$NoOpStatement evaluate
WARNING: Ignoring test case: Requires a Java version of at least 11
Feb 13, 2019 6:46:52 PM net.bytebuddy.test.utility.JavaVersionRule$NoOpStatement evaluate
WARNING: Ignoring test case: Requires a Java version of at least 11
Feb 13, 2019 6:46:52 PM net.bytebuddy.test.utility.JavaVersionRule$NoOpStatement evaluate
WARNING: Ignoring test case: Requires a Java version of at least 11
18:46:52.129 [pool-14-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (5784 ms)
<> Total tests run: 7089
<> Ignored tests: 8
<> Failed tests: 1
~ testStaticFieldOfOtherClass(net.bytebuddy.implementation.FieldAccessorOtherTest)
[public static final java.lang.String net.bytebuddy.implementation.FieldAccessorOtherTest$StaticFieldHolder.FOO is not declared by class net.bytebuddy.renamed.java.util.concurrent.Callable$ByteBuddy$wzt3fXVa]
java.lang.IllegalStateException: public static final java.lang.String net.bytebuddy.implementation.FieldAccessorOtherTest$StaticFieldHolder.FOO is not declared by class net.bytebuddy.renamed.java.util.concurrent.Callable$ByteBuddy$wzt3fXVa    at net.bytebuddy.implementation.FieldAccessor$FieldLocation$Absolute.prepare(FieldAccessor.java:209)
    at net.bytebuddy.implementation.FieldAccessor$ForImplicitProperty.appender(FieldAccessor.java:656)
    at net.bytebuddy.dynamic.scaffold.MethodRegistry$Handler$ForImplementation.compile(MethodRegistry.java:230)
    at net.bytebuddy.dynamic.scaffold.MethodRegistry$Handler$ForImplementation.compile(MethodRegistry.java:202)
    at net.bytebuddy.dynamic.scaffold.MethodRegistry$Default$Prepared.compile(MethodRegistry.java:731)
    at net.bytebuddy.dynamic.scaffold.subclass.SubclassDynamicTypeBuilder.make(SubclassDynamicTypeBuilder.java:199)

19:00:17.048 [pool-13-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
TypeWriter.java:798: error: net.bytebuddy.dynamic.DynamicType.Unloaded is abstract; cannot be instantiated
                return new net.bytebuddy.dynamic.DynamicType.Unloaded<S>(instrumentedType, binaryRepresentation, loadedTypeInitializer, net.bytebuddy.utility.CompoundList.of(net.bytebuddy.dynamic.scaffold.TypeWriter.Default.this.auxiliaryTypes, auxiliaryTypes), typeResolutionStrategy);
                       ^
19:13:41.120 [pool-13-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public interface TypeWriter<T> {
    java.lang.String DUMP_PROPERTY = "net.bytebuddy.dump";

    net.bytebuddy.dynamic.DynamicType.Unloaded<T> make(net.bytebuddy.dynamic.TypeResolutionStrategy.Resolved typeResolver);

    interface FieldPool {
        net.bytebuddy.dynamic.scaffold.TypeWriter.FieldPool.Record target(net.bytebuddy.description.field.FieldDescription fieldDescription);

        interface Record {
            boolean isImplicit();

            net.bytebuddy.description.field.FieldDescription getField();

            net.bytebuddy.implementation.attribute.FieldAttributeAppender getFieldAppender();

            java.lang.Object resolveDefault(java.lang.Object defaultValue);

            void apply(org.objectweb.asm.ClassVisitor classVisitor, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory);

            void apply(org.objectweb.asm.FieldVisitor fieldVisitor, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory);

            @net.bytebuddy.build.HashCodeAndEqualsPlugin.Enhance
            class ForImplicitField implements net.bytebuddy.dynamic.scaffold.TypeWriter.FieldPool.Record {
                private final net.bytebuddy.description.field.FieldDescription fieldDescription;

                public ForImplicitField(net.bytebuddy.description.field.FieldDescription fieldDescription) {
                    this.fieldDescription = fieldDescription;
                }

                public boolean isImplicit() {
                    return true;
                }

                public net.bytebuddy.description.field.FieldDescription getField() {
                    return fieldDescription;
                }

                public net.bytebuddy.implementation.attribute.FieldAttributeAppender getFieldAppender() {
                    throw new java.lang.IllegalStateException(("An implicit field record does not expose a field appender: " + (this)));
                }

                public java.lang.Object resolveDefault(java.lang.Object defaultValue) {
                    throw new java.lang.IllegalStateException(("An implicit field record does not expose a default value: " + (this)));
                }

                public void apply(org.objectweb.asm.ClassVisitor classVisitor, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory) {
                    org.objectweb.asm.FieldVisitor fieldVisitor = classVisitor.visitField(fieldDescription.getActualModifiers(), fieldDescription.getInternalName(), fieldDescription.getDescriptor(), fieldDescription.getGenericSignature(), net.bytebuddy.description.field.FieldDescription.NO_DEFAULT_VALUE);
                    if (fieldVisitor != null) {
                        net.bytebuddy.implementation.attribute.FieldAttributeAppender.ForInstrumentedField.INSTANCE.apply(fieldVisitor, fieldDescription, annotationValueFilterFactory.on(fieldDescription));
                        fieldVisitor.visitEnd();
                    }
                }

                public void apply(org.objectweb.asm.FieldVisitor fieldVisitor, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory) {
                    throw new java.lang.IllegalStateException(("An implicit field record is not intended for partial application: " + (this)));
                }
            }

            @net.bytebuddy.build.HashCodeAndEqualsPlugin.Enhance
            class ForExplicitField implements net.bytebuddy.dynamic.scaffold.TypeWriter.FieldPool.Record {
                private final net.bytebuddy.implementation.attribute.FieldAttributeAppender attributeAppender;

                private final java.lang.Object defaultValue;

                private final net.bytebuddy.description.field.FieldDescription fieldDescription;

                public ForExplicitField(net.bytebuddy.implementation.attribute.FieldAttributeAppender attributeAppender, java.lang.Object defaultValue, net.bytebuddy.description.field.FieldDescription fieldDescription) {
                    this.attributeAppender = attributeAppender;
                    this.defaultValue = defaultValue;
                    this.fieldDescription = fieldDescription;
                }

                public boolean isImplicit() {
                    return false;
                }

                public net.bytebuddy.description.field.FieldDescription getField() {
                    return fieldDescription;
                }

                public net.bytebuddy.implementation.attribute.FieldAttributeAppender getFieldAppender() {
                    return attributeAppender;
                }

                public java.lang.Object resolveDefault(java.lang.Object defaultValue) {
                    return (this.defaultValue) == null ? defaultValue : this.defaultValue;
                }

                public void apply(org.objectweb.asm.ClassVisitor classVisitor, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory) {
                    org.objectweb.asm.FieldVisitor fieldVisitor = classVisitor.visitField(fieldDescription.getActualModifiers(), fieldDescription.getInternalName(), fieldDescription.getDescriptor(), fieldDescription.getGenericSignature(), resolveDefault(net.bytebuddy.description.field.FieldDescription.NO_DEFAULT_VALUE));
                    if (fieldVisitor != null) {
                        boolean spoonDefaultValue = false;
                        try {
                            spoonDefaultValue = true;
                        } catch (java.lang.Exception __NopolProcessorException) {
                        }
                        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                        if (fr.inria.lille.commons.trace.RuntimeValues.instance(2).isEnabled()) {
                            fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectionStarts();
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("annotationValueFilterFactory",annotationValueFilterFactory);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("fieldVisitor",fieldVisitor);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("net.bytebuddy.dynamic.scaffold.TypeWriter.FieldPool.Record.ForExplicitField.this.fieldDescription",net.bytebuddy.dynamic.scaffold.TypeWriter.FieldPool.Record.ForExplicitField.this.fieldDescription);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("classVisitor",classVisitor);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("net.bytebuddy.dynamic.scaffold.TypeWriter.FieldPool.Record.ForExplicitField.this.defaultValue",net.bytebuddy.dynamic.scaffold.TypeWriter.FieldPool.Record.ForExplicitField.this.defaultValue);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("net.bytebuddy.dynamic.scaffold.TypeWriter.FieldPool.Record.ForExplicitField.this.attributeAppender",net.bytebuddy.dynamic.scaffold.TypeWriter.FieldPool.Record.ForExplicitField.this.attributeAppender);} catch (Exception ex1) {ex1.printStackTrace();};
                            fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectOutput(runtimeAngelicValue);
                            fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectionEnds();
                        }
                        if (runtimeAngelicValue)
                            attributeAppender.apply(fieldVisitor, fieldDescription, annotationValueFilterFactory.on(fieldDescription));

                        fieldVisitor.visitEnd();
                    }
                }

                public void apply(org.objectweb.asm.FieldVisitor fieldVisitor, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory) {
                    attributeAppender.apply(fieldVisitor, fieldDescription, annotationValueFilterFactory.on(fieldDescription));
                }
            }
        }

        enum Disabled implements net.bytebuddy.dynamic.scaffold.TypeWriter.FieldPool {

            INSTANCE;
            public net.bytebuddy.dynamic.scaffold.TypeWriter.FieldPool.Record target(net.bytebuddy.description.field.FieldDescription fieldDescription) {
                throw new java.lang.IllegalStateException("Cannot look up field from disabld pool");
            }
        }
    }

    interface MethodPool {
        net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record target(net.bytebuddy.description.method.MethodDescription methodDescription);

        interface Record {
            net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record.Sort getSort();

            net.bytebuddy.description.method.MethodDescription getMethod();

            net.bytebuddy.description.modifier.Visibility getVisibility();

            net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record prepend(net.bytebuddy.implementation.bytecode.ByteCodeAppender byteCodeAppender);

            void apply(org.objectweb.asm.ClassVisitor classVisitor, net.bytebuddy.implementation.Implementation.Context implementationContext, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory);

            void applyHead(org.objectweb.asm.MethodVisitor methodVisitor);

            void applyBody(org.objectweb.asm.MethodVisitor methodVisitor, net.bytebuddy.implementation.Implementation.Context implementationContext, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory);

            void applyAttributes(org.objectweb.asm.MethodVisitor methodVisitor, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory);

            net.bytebuddy.implementation.bytecode.ByteCodeAppender.Size applyCode(org.objectweb.asm.MethodVisitor methodVisitor, net.bytebuddy.implementation.Implementation.Context implementationContext);

            enum Sort {

                SKIPPED(false, false),
                DEFINED(true, false),
                IMPLEMENTED(true, true);
                private final boolean define;

                private final boolean implement;

                Sort(boolean define, boolean implement) {
                    this.define = define;
                    this.implement = implement;
                }

                public boolean isDefined() {
                    return define;
                }

                public boolean isImplemented() {
                    return implement;
                }
            }

            @net.bytebuddy.build.HashCodeAndEqualsPlugin.Enhance
            class ForNonImplementedMethod implements net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record {
                private final net.bytebuddy.description.method.MethodDescription methodDescription;

                public ForNonImplementedMethod(net.bytebuddy.description.method.MethodDescription methodDescription) {
                    this.methodDescription = methodDescription;
                }

                public void apply(org.objectweb.asm.ClassVisitor classVisitor, net.bytebuddy.implementation.Implementation.Context implementationContext, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory) {
                }

                public void applyBody(org.objectweb.asm.MethodVisitor methodVisitor, net.bytebuddy.implementation.Implementation.Context implementationContext, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory) {
                    throw new java.lang.IllegalStateException(("Cannot apply body for non-implemented method on " + (methodDescription)));
                }

                public void applyAttributes(org.objectweb.asm.MethodVisitor methodVisitor, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory) {
                }

                public net.bytebuddy.implementation.bytecode.ByteCodeAppender.Size applyCode(org.objectweb.asm.MethodVisitor methodVisitor, net.bytebuddy.implementation.Implementation.Context implementationContext) {
                    throw new java.lang.IllegalStateException(("Cannot apply code for non-implemented method on " + (methodDescription)));
                }

                public void applyHead(org.objectweb.asm.MethodVisitor methodVisitor) {
                    throw new java.lang.IllegalStateException(("Cannot apply head for non-implemented method on " + (methodDescription)));
                }

                public net.bytebuddy.description.method.MethodDescription getMethod() {
                    return methodDescription;
                }

                public net.bytebuddy.description.modifier.Visibility getVisibility() {
                    return methodDescription.getVisibility();
                }

                public net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record.Sort getSort() {
                    return net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record.Sort.SKIPPED;
                }

                public net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record prepend(net.bytebuddy.implementation.bytecode.ByteCodeAppender byteCodeAppender) {
                    return new net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record.ForDefinedMethod.WithBody(methodDescription, new net.bytebuddy.implementation.bytecode.ByteCodeAppender.Compound(byteCodeAppender, new net.bytebuddy.implementation.bytecode.ByteCodeAppender.Simple(net.bytebuddy.implementation.bytecode.constant.DefaultValue.of(methodDescription.getReturnType()), net.bytebuddy.implementation.bytecode.member.MethodReturn.of(methodDescription.getReturnType()))));
                }
            }

            abstract class ForDefinedMethod implements net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record {
                public void apply(org.objectweb.asm.ClassVisitor classVisitor, net.bytebuddy.implementation.Implementation.Context implementationContext, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory) {
                    org.objectweb.asm.MethodVisitor methodVisitor = classVisitor.visitMethod(getMethod().getActualModifiers(getSort().isImplemented(), getVisibility()), getMethod().getInternalName(), getMethod().getDescriptor(), getMethod().getGenericSignature(), getMethod().getExceptionTypes().asErasures().toInternalNames());
                    if (methodVisitor != null) {
                        net.bytebuddy.description.method.ParameterList<?> parameterList = getMethod().getParameters();
                        if (parameterList.hasExplicitMetaData()) {
                            for (net.bytebuddy.description.method.ParameterDescription parameterDescription : parameterList) {
                                methodVisitor.visitParameter(parameterDescription.getName(), parameterDescription.getModifiers());
                            }
                        }
                        applyHead(methodVisitor);
                        applyBody(methodVisitor, implementationContext, annotationValueFilterFactory);
                        methodVisitor.visitEnd();
                    }
                }

                @net.bytebuddy.build.HashCodeAndEqualsPlugin.Enhance
                public static class WithBody extends net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record.ForDefinedMethod {
                    private final net.bytebuddy.description.method.MethodDescription methodDescription;

                    private final net.bytebuddy.implementation.bytecode.ByteCodeAppender byteCodeAppender;

                    private final net.bytebuddy.implementation.attribute.MethodAttributeAppender methodAttributeAppender;

                    private final net.bytebuddy.description.modifier.Visibility visibility;

                    public WithBody(net.bytebuddy.description.method.MethodDescription methodDescription, net.bytebuddy.implementation.bytecode.ByteCodeAppender byteCodeAppender) {
                        this(methodDescription, byteCodeAppender, net.bytebuddy.implementation.attribute.MethodAttributeAppender.NoOp.INSTANCE, methodDescription.getVisibility());
                    }

                    public WithBody(net.bytebuddy.description.method.MethodDescription methodDescription, net.bytebuddy.implementation.bytecode.ByteCodeAppender byteCodeAppender, net.bytebuddy.implementation.attribute.MethodAttributeAppender methodAttributeAppender, net.bytebuddy.description.modifier.Visibility visibility) {
                        this.methodDescription = methodDescription;
                        this.byteCodeAppender = byteCodeAppender;
                        this.methodAttributeAppender = methodAttributeAppender;
                        this.visibility = visibility;
                    }

                    public net.bytebuddy.description.method.MethodDescription getMethod() {
                        return methodDescription;
                    }

                    public net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record.Sort getSort() {
                        return net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record.Sort.IMPLEMENTED;
                    }

                    public net.bytebuddy.description.modifier.Visibility getVisibility() {
                        return visibility;
                    }

                    public void applyHead(org.objectweb.asm.MethodVisitor methodVisitor) {
                    }

                    public void applyBody(org.objectweb.asm.MethodVisitor methodVisitor, net.bytebuddy.implementation.Implementation.Context implementationContext, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory) {
                        applyAttributes(methodVisitor, annotationValueFilterFactory);
                        methodVisitor.visitCode();
                        net.bytebuddy.implementation.bytecode.ByteCodeAppender.Size size = applyCode(methodVisitor, implementationContext);
                        methodVisitor.visitMaxs(size.getOperandStackSize(), size.getLocalVariableSize());
                    }

                    public void applyAttributes(org.objectweb.asm.MethodVisitor methodVisitor, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory) {
                        methodAttributeAppender.apply(methodVisitor, methodDescription, annotationValueFilterFactory.on(methodDescription));
                    }

                    public net.bytebuddy.implementation.bytecode.ByteCodeAppender.Size applyCode(org.objectweb.asm.MethodVisitor methodVisitor, net.bytebuddy.implementation.Implementation.Context implementationContext) {
                        return byteCodeAppender.apply(methodVisitor, implementationContext, methodDescription);
                    }

                    public net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record prepend(net.bytebuddy.implementation.bytecode.ByteCodeAppender byteCodeAppender) {
                        return new net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record.ForDefinedMethod.WithBody(methodDescription, new net.bytebuddy.implementation.bytecode.ByteCodeAppender.Compound(byteCodeAppender, this.byteCodeAppender), methodAttributeAppender, visibility);
                    }
                }

                @net.bytebuddy.build.HashCodeAndEqualsPlugin.Enhance
                public static class WithoutBody extends net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record.ForDefinedMethod {
                    private final net.bytebuddy.description.method.MethodDescription methodDescription;

                    private final net.bytebuddy.implementation.attribute.MethodAttributeAppender methodAttributeAppender;

                    private final net.bytebuddy.description.modifier.Visibility visibility;

                    public WithoutBody(net.bytebuddy.description.method.MethodDescription methodDescription, net.bytebuddy.implementation.attribute.MethodAttributeAppender methodAttributeAppender, net.bytebuddy.description.modifier.Visibility visibility) {
                        this.methodDescription = methodDescription;
                        this.methodAttributeAppender = methodAttributeAppender;
                        this.visibility = visibility;
                    }

                    public net.bytebuddy.description.method.MethodDescription getMethod() {
                        return methodDescription;
                    }

                    public net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record.Sort getSort() {
                        return net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record.Sort.DEFINED;
                    }

                    public net.bytebuddy.description.modifier.Visibility getVisibility() {
                        return visibility;
                    }

                    public void applyHead(org.objectweb.asm.MethodVisitor methodVisitor) {
                    }

                    public void applyBody(org.objectweb.asm.MethodVisitor methodVisitor, net.bytebuddy.implementation.Implementation.Context implementationContext, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory) {
                        applyAttributes(methodVisitor, annotationValueFilterFactory);
                    }

                    public void applyAttributes(org.objectweb.asm.MethodVisitor methodVisitor, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory) {
                        methodAttributeAppender.apply(methodVisitor, methodDescription, annotationValueFilterFactory.on(methodDescription));
                    }

                    public net.bytebuddy.implementation.bytecode.ByteCodeAppender.Size applyCode(org.objectweb.asm.MethodVisitor methodVisitor, net.bytebuddy.implementation.Implementation.Context implementationContext) {
                        throw new java.lang.IllegalStateException(("Cannot apply code for abstract method on " + (methodDescription)));
                    }

                    public net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record prepend(net.bytebuddy.implementation.bytecode.ByteCodeAppender byteCodeAppender) {
                        throw new java.lang.IllegalStateException(("Cannot prepend code for abstract method on " + (methodDescription)));
                    }
                }

                @net.bytebuddy.build.HashCodeAndEqualsPlugin.Enhance
                public static class WithAnnotationDefaultValue extends net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record.ForDefinedMethod {
                    private final net.bytebuddy.description.method.MethodDescription methodDescription;

                    private final net.bytebuddy.description.annotation.AnnotationValue<?, ?> annotationValue;

                    private final net.bytebuddy.implementation.attribute.MethodAttributeAppender methodAttributeAppender;

                    public WithAnnotationDefaultValue(net.bytebuddy.description.method.MethodDescription methodDescription, net.bytebuddy.description.annotation.AnnotationValue<?, ?> annotationValue, net.bytebuddy.implementation.attribute.MethodAttributeAppender methodAttributeAppender) {
                        this.methodDescription = methodDescription;
                        this.annotationValue = annotationValue;
                        this.methodAttributeAppender = methodAttributeAppender;
                    }

                    public net.bytebuddy.description.method.MethodDescription getMethod() {
                        return methodDescription;
                    }

                    public net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record.Sort getSort() {
                        return net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record.Sort.DEFINED;
                    }

                    public net.bytebuddy.description.modifier.Visibility getVisibility() {
                        return methodDescription.getVisibility();
                    }

                    public void applyHead(org.objectweb.asm.MethodVisitor methodVisitor) {
                        if (!(methodDescription.isDefaultValue(annotationValue))) {
                            throw new java.lang.IllegalStateException(((("Cannot set " + (annotationValue)) + " as default for ") + (methodDescription)));
                        }
                        org.objectweb.asm.AnnotationVisitor annotationVisitor = methodVisitor.visitAnnotationDefault();
                        net.bytebuddy.implementation.attribute.AnnotationAppender.Default.apply(annotationVisitor, methodDescription.getReturnType().asErasure(), net.bytebuddy.implementation.attribute.AnnotationAppender.NO_NAME, annotationValue.resolve());
                        annotationVisitor.visitEnd();
                    }

                    public void applyBody(org.objectweb.asm.MethodVisitor methodVisitor, net.bytebuddy.implementation.Implementation.Context implementationContext, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory) {
                        methodAttributeAppender.apply(methodVisitor, methodDescription, annotationValueFilterFactory.on(methodDescription));
                    }

                    public void applyAttributes(org.objectweb.asm.MethodVisitor methodVisitor, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory) {
                        throw new java.lang.IllegalStateException(("Cannot apply attributes for default value on " + (methodDescription)));
                    }

                    public net.bytebuddy.implementation.bytecode.ByteCodeAppender.Size applyCode(org.objectweb.asm.MethodVisitor methodVisitor, net.bytebuddy.implementation.Implementation.Context implementationContext) {
                        throw new java.lang.IllegalStateException(("Cannot apply code for default value on " + (methodDescription)));
                    }

                    public net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record prepend(net.bytebuddy.implementation.bytecode.ByteCodeAppender byteCodeAppender) {
                        throw new java.lang.IllegalStateException(("Cannot prepend code for default value on " + (methodDescription)));
                    }
                }

                @net.bytebuddy.build.HashCodeAndEqualsPlugin.Enhance
                public static class OfVisibilityBridge extends net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record.ForDefinedMethod implements net.bytebuddy.implementation.bytecode.ByteCodeAppender {
                    private final net.bytebuddy.description.method.MethodDescription visibilityBridge;

                    private final net.bytebuddy.description.method.MethodDescription bridgeTarget;

                    private final net.bytebuddy.description.type.TypeDescription bridgeType;

                    private final net.bytebuddy.implementation.attribute.MethodAttributeAppender attributeAppender;

                    protected OfVisibilityBridge(net.bytebuddy.description.method.MethodDescription visibilityBridge, net.bytebuddy.description.method.MethodDescription bridgeTarget, net.bytebuddy.description.type.TypeDescription bridgeType, net.bytebuddy.implementation.attribute.MethodAttributeAppender attributeAppender) {
                        this.visibilityBridge = visibilityBridge;
                        this.bridgeTarget = bridgeTarget;
                        this.bridgeType = bridgeType;
                        this.attributeAppender = attributeAppender;
                    }

                    public static net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record of(net.bytebuddy.description.type.TypeDescription instrumentedType, net.bytebuddy.description.method.MethodDescription bridgeTarget, net.bytebuddy.implementation.attribute.MethodAttributeAppender attributeAppender) {
                        net.bytebuddy.description.type.TypeDefinition bridgeType = null;
                        if (bridgeTarget.isDefaultMethod()) {
                            net.bytebuddy.description.type.TypeDescription declaringType = bridgeTarget.getDeclaringType().asErasure();
                            for (net.bytebuddy.description.type.TypeDescription interfaceType : instrumentedType.getInterfaces().asErasures().filter(net.bytebuddy.matcher.ElementMatchers.isSubTypeOf(declaringType))) {
                                if ((bridgeType == null) || (declaringType.isAssignableTo(bridgeType.asErasure()))) {
                                    bridgeType = interfaceType;
                                }
                            }
                        }
                        if (bridgeType == null) {
                            bridgeType = instrumentedType.getSuperClass();
                        }
                        return new net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record.ForDefinedMethod.OfVisibilityBridge(new net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record.ForDefinedMethod.OfVisibilityBridge.VisibilityBridge(instrumentedType, bridgeTarget), bridgeTarget, bridgeType.asErasure(), attributeAppender);
                    }

                    public net.bytebuddy.description.method.MethodDescription getMethod() {
                        return visibilityBridge;
                    }

                    public net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record.Sort getSort() {
                        return net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record.Sort.IMPLEMENTED;
                    }

                    public net.bytebuddy.description.modifier.Visibility getVisibility() {
                        return bridgeTarget.getVisibility();
                    }

                    public net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record prepend(net.bytebuddy.implementation.bytecode.ByteCodeAppender byteCodeAppender) {
                        return new net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record.ForDefinedMethod.WithBody(visibilityBridge, new net.bytebuddy.implementation.bytecode.ByteCodeAppender.Compound(this, byteCodeAppender), attributeAppender, bridgeTarget.getVisibility());
                    }

                    public void applyHead(org.objectweb.asm.MethodVisitor methodVisitor) {
                    }

                    public void applyBody(org.objectweb.asm.MethodVisitor methodVisitor, net.bytebuddy.implementation.Implementation.Context implementationContext, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory) {
                        applyAttributes(methodVisitor, annotationValueFilterFactory);
                        methodVisitor.visitCode();
                        net.bytebuddy.implementation.bytecode.ByteCodeAppender.Size size = applyCode(methodVisitor, implementationContext);
                        methodVisitor.visitMaxs(size.getOperandStackSize(), size.getLocalVariableSize());
                    }

                    public void applyAttributes(org.objectweb.asm.MethodVisitor methodVisitor, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory) {
                        attributeAppender.apply(methodVisitor, visibilityBridge, annotationValueFilterFactory.on(visibilityBridge));
                    }

                    public net.bytebuddy.implementation.bytecode.ByteCodeAppender.Size applyCode(org.objectweb.asm.MethodVisitor methodVisitor, net.bytebuddy.implementation.Implementation.Context implementationContext) {
                        return apply(methodVisitor, implementationContext, visibilityBridge);
                    }

                    public net.bytebuddy.implementation.bytecode.ByteCodeAppender.Size apply(org.objectweb.asm.MethodVisitor methodVisitor, net.bytebuddy.implementation.Implementation.Context implementationContext, net.bytebuddy.description.method.MethodDescription instrumentedMethod) {
                        return new net.bytebuddy.implementation.bytecode.ByteCodeAppender.Simple(net.bytebuddy.implementation.bytecode.member.MethodVariableAccess.allArgumentsOf(instrumentedMethod).prependThisReference(), net.bytebuddy.implementation.bytecode.member.MethodInvocation.invoke(bridgeTarget).special(bridgeType), net.bytebuddy.implementation.bytecode.member.MethodReturn.of(instrumentedMethod.getReturnType())).apply(methodVisitor, implementationContext, instrumentedMethod);
                    }

                    protected static class VisibilityBridge extends net.bytebuddy.description.method.MethodDescription.InDefinedShape.AbstractBase {
                        private final net.bytebuddy.description.type.TypeDescription instrumentedType;

                        private final net.bytebuddy.description.method.MethodDescription bridgeTarget;

                        protected VisibilityBridge(net.bytebuddy.description.type.TypeDescription instrumentedType, net.bytebuddy.description.method.MethodDescription bridgeTarget) {
                            this.instrumentedType = instrumentedType;
                            this.bridgeTarget = bridgeTarget;
                        }

                        public net.bytebuddy.description.type.TypeDescription getDeclaringType() {
                            return instrumentedType;
                        }

                        public net.bytebuddy.description.method.ParameterList<net.bytebuddy.description.method.ParameterDescription.InDefinedShape> getParameters() {
                            return new net.bytebuddy.description.method.ParameterList.Explicit.ForTypes(this, bridgeTarget.getParameters().asTypeList().asRawTypes());
                        }

                        public net.bytebuddy.description.type.TypeDescription.Generic getReturnType() {
                            return bridgeTarget.getReturnType().asRawType();
                        }

                        public net.bytebuddy.description.type.TypeList.Generic getExceptionTypes() {
                            return bridgeTarget.getExceptionTypes().asRawTypes();
                        }

                        public net.bytebuddy.description.annotation.AnnotationValue<?, ?> getDefaultValue() {
                            return net.bytebuddy.description.annotation.AnnotationValue.UNDEFINED;
                        }

                        public net.bytebuddy.description.type.TypeList.Generic getTypeVariables() {
                            return new net.bytebuddy.description.type.TypeList.Generic.Empty();
                        }

                        public net.bytebuddy.description.annotation.AnnotationList getDeclaredAnnotations() {
                            return bridgeTarget.getDeclaredAnnotations();
                        }

                        public int getModifiers() {
                            return (((bridgeTarget.getModifiers()) | (org.objectweb.asm.Opcodes.ACC_SYNTHETIC)) | (org.objectweb.asm.Opcodes.ACC_BRIDGE)) & (~(org.objectweb.asm.Opcodes.ACC_NATIVE));
                        }

                        public java.lang.String getInternalName() {
                            return bridgeTarget.getName();
                        }
                    }
                }
            }

            @net.bytebuddy.build.HashCodeAndEqualsPlugin.Enhance
            class AccessBridgeWrapper implements net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record {
                private final net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record delegate;

                private final net.bytebuddy.description.type.TypeDescription instrumentedType;

                private final net.bytebuddy.description.method.MethodDescription bridgeTarget;

                private final java.util.Set<net.bytebuddy.description.method.MethodDescription.TypeToken> bridgeTypes;

                private final net.bytebuddy.implementation.attribute.MethodAttributeAppender attributeAppender;

                protected AccessBridgeWrapper(net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record delegate, net.bytebuddy.description.type.TypeDescription instrumentedType, net.bytebuddy.description.method.MethodDescription bridgeTarget, java.util.Set<net.bytebuddy.description.method.MethodDescription.TypeToken> bridgeTypes, net.bytebuddy.implementation.attribute.MethodAttributeAppender attributeAppender) {
                    this.delegate = delegate;
                    this.instrumentedType = instrumentedType;
                    this.bridgeTarget = bridgeTarget;
                    this.bridgeTypes = bridgeTypes;
                    this.attributeAppender = attributeAppender;
                }

                public static net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record of(net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record delegate, net.bytebuddy.description.type.TypeDescription instrumentedType, net.bytebuddy.description.method.MethodDescription bridgeTarget, java.util.Set<net.bytebuddy.description.method.MethodDescription.TypeToken> bridgeTypes, net.bytebuddy.implementation.attribute.MethodAttributeAppender attributeAppender) {
                    java.util.Set<net.bytebuddy.description.method.MethodDescription.TypeToken> compatibleBridgeTypes = new java.util.HashSet<net.bytebuddy.description.method.MethodDescription.TypeToken>();
                    for (net.bytebuddy.description.method.MethodDescription.TypeToken bridgeType : bridgeTypes) {
                        if (bridgeTarget.isBridgeCompatible(bridgeType)) {
                            compatibleBridgeTypes.add(bridgeType);
                        }
                    }
                    return (compatibleBridgeTypes.isEmpty()) || ((instrumentedType.isInterface()) && (!(delegate.getSort().isImplemented()))) ? delegate : new net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record.AccessBridgeWrapper(delegate, instrumentedType, bridgeTarget, compatibleBridgeTypes, attributeAppender);
                }

                public net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record.Sort getSort() {
                    return delegate.getSort();
                }

                public net.bytebuddy.description.method.MethodDescription getMethod() {
                    return bridgeTarget;
                }

                public net.bytebuddy.description.modifier.Visibility getVisibility() {
                    return delegate.getVisibility();
                }

                public net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record prepend(net.bytebuddy.implementation.bytecode.ByteCodeAppender byteCodeAppender) {
                    return new net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record.AccessBridgeWrapper(delegate.prepend(byteCodeAppender), instrumentedType, bridgeTarget, bridgeTypes, attributeAppender);
                }

                public void apply(org.objectweb.asm.ClassVisitor classVisitor, net.bytebuddy.implementation.Implementation.Context implementationContext, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory) {
                    delegate.apply(classVisitor, implementationContext, annotationValueFilterFactory);
                    for (net.bytebuddy.description.method.MethodDescription.TypeToken bridgeType : bridgeTypes) {
                        net.bytebuddy.description.method.MethodDescription.InDefinedShape bridgeMethod = new net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record.AccessBridgeWrapper.AccessorBridge(bridgeTarget, bridgeType, instrumentedType);
                        net.bytebuddy.description.method.MethodDescription.InDefinedShape bridgeTarget = new net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record.AccessBridgeWrapper.BridgeTarget(this.bridgeTarget, instrumentedType);
                        org.objectweb.asm.MethodVisitor methodVisitor = classVisitor.visitMethod(bridgeMethod.getActualModifiers(true, getVisibility()), bridgeMethod.getInternalName(), bridgeMethod.getDescriptor(), net.bytebuddy.description.method.MethodDescription.NON_GENERIC_SIGNATURE, bridgeMethod.getExceptionTypes().asErasures().toInternalNames());
                        if (methodVisitor != null) {
                            attributeAppender.apply(methodVisitor, bridgeMethod, annotationValueFilterFactory.on(instrumentedType));
                            methodVisitor.visitCode();
                            net.bytebuddy.implementation.bytecode.ByteCodeAppender.Size size = new net.bytebuddy.implementation.bytecode.ByteCodeAppender.Simple(net.bytebuddy.implementation.bytecode.member.MethodVariableAccess.allArgumentsOf(bridgeMethod).asBridgeOf(bridgeTarget).prependThisReference(), net.bytebuddy.implementation.bytecode.member.MethodInvocation.invoke(bridgeTarget).virtual(instrumentedType), (bridgeTarget.getReturnType().asErasure().isAssignableTo(bridgeMethod.getReturnType().asErasure()) ? net.bytebuddy.implementation.bytecode.StackManipulation.Trivial.INSTANCE : net.bytebuddy.implementation.bytecode.assign.TypeCasting.to(bridgeMethod.getReturnType().asErasure())), net.bytebuddy.implementation.bytecode.member.MethodReturn.of(bridgeMethod.getReturnType())).apply(methodVisitor, implementationContext, bridgeMethod);
                            methodVisitor.visitMaxs(size.getOperandStackSize(), size.getLocalVariableSize());
                            methodVisitor.visitEnd();
                        }
                    }
                }

                public void applyHead(org.objectweb.asm.MethodVisitor methodVisitor) {
                    delegate.applyHead(methodVisitor);
                }

                public void applyBody(org.objectweb.asm.MethodVisitor methodVisitor, net.bytebuddy.implementation.Implementation.Context implementationContext, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory) {
                    delegate.applyBody(methodVisitor, implementationContext, annotationValueFilterFactory);
                }

                public void applyAttributes(org.objectweb.asm.MethodVisitor methodVisitor, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory) {
                    delegate.applyAttributes(methodVisitor, annotationValueFilterFactory);
                }

                public net.bytebuddy.implementation.bytecode.ByteCodeAppender.Size applyCode(org.objectweb.asm.MethodVisitor methodVisitor, net.bytebuddy.implementation.Implementation.Context implementationContext) {
                    return delegate.applyCode(methodVisitor, implementationContext);
                }

                protected static class AccessorBridge extends net.bytebuddy.description.method.MethodDescription.InDefinedShape.AbstractBase {
                    private final net.bytebuddy.description.method.MethodDescription bridgeTarget;

                    private final net.bytebuddy.description.method.MethodDescription.TypeToken bridgeType;

                    private final net.bytebuddy.description.type.TypeDescription instrumentedType;

                    protected AccessorBridge(net.bytebuddy.description.method.MethodDescription bridgeTarget, net.bytebuddy.description.method.MethodDescription.TypeToken bridgeType, net.bytebuddy.description.type.TypeDescription instrumentedType) {
                        this.bridgeTarget = bridgeTarget;
                        this.bridgeType = bridgeType;
                        this.instrumentedType = instrumentedType;
                    }

                    public net.bytebuddy.description.type.TypeDescription getDeclaringType() {
                        return instrumentedType;
                    }

                    public net.bytebuddy.description.method.ParameterList<net.bytebuddy.description.method.ParameterDescription.InDefinedShape> getParameters() {
                        return new net.bytebuddy.description.method.ParameterList.Explicit.ForTypes(this, bridgeType.getParameterTypes());
                    }

                    public net.bytebuddy.description.type.TypeDescription.Generic getReturnType() {
                        return bridgeType.getReturnType().asGenericType();
                    }

                    public net.bytebuddy.description.type.TypeList.Generic getExceptionTypes() {
                        return bridgeTarget.getExceptionTypes().accept(net.bytebuddy.description.type.TypeDescription.Generic.Visitor.TypeErasing.INSTANCE);
                    }

                    public net.bytebuddy.description.annotation.AnnotationValue<?, ?> getDefaultValue() {
                        return net.bytebuddy.description.annotation.AnnotationValue.UNDEFINED;
                    }

                    public net.bytebuddy.description.type.TypeList.Generic getTypeVariables() {
                        return new net.bytebuddy.description.type.TypeList.Generic.Empty();
                    }

                    public net.bytebuddy.description.annotation.AnnotationList getDeclaredAnnotations() {
                        return new net.bytebuddy.description.annotation.AnnotationList.Empty();
                    }

                    public int getModifiers() {
                        return (((bridgeTarget.getModifiers()) | (org.objectweb.asm.Opcodes.ACC_BRIDGE)) | (org.objectweb.asm.Opcodes.ACC_SYNTHETIC)) & (~((org.objectweb.asm.Opcodes.ACC_ABSTRACT) | (org.objectweb.asm.Opcodes.ACC_NATIVE)));
                    }

                    public java.lang.String getInternalName() {
                        return bridgeTarget.getInternalName();
                    }
                }

                protected static class BridgeTarget extends net.bytebuddy.description.method.MethodDescription.InDefinedShape.AbstractBase {
                    private final net.bytebuddy.description.method.MethodDescription bridgeTarget;

                    private final net.bytebuddy.description.type.TypeDescription instrumentedType;

                    protected BridgeTarget(net.bytebuddy.description.method.MethodDescription bridgeTarget, net.bytebuddy.description.type.TypeDescription instrumentedType) {
                        this.bridgeTarget = bridgeTarget;
                        this.instrumentedType = instrumentedType;
                    }

                    public net.bytebuddy.description.type.TypeDescription getDeclaringType() {
                        return instrumentedType;
                    }

                    public net.bytebuddy.description.method.ParameterList<net.bytebuddy.description.method.ParameterDescription.InDefinedShape> getParameters() {
                        return new net.bytebuddy.description.method.ParameterList.ForTokens(this, bridgeTarget.getParameters().asTokenList(net.bytebuddy.matcher.ElementMatchers.is(instrumentedType)));
                    }

                    public net.bytebuddy.description.type.TypeDescription.Generic getReturnType() {
                        return bridgeTarget.getReturnType();
                    }

                    public net.bytebuddy.description.type.TypeList.Generic getExceptionTypes() {
                        return bridgeTarget.getExceptionTypes();
                    }

                    public net.bytebuddy.description.annotation.AnnotationValue<?, ?> getDefaultValue() {
                        return bridgeTarget.getDefaultValue();
                    }

                    public net.bytebuddy.description.type.TypeList.Generic getTypeVariables() {
                        return bridgeTarget.getTypeVariables();
                    }

                    public net.bytebuddy.description.annotation.AnnotationList getDeclaredAnnotations() {
                        return bridgeTarget.getDeclaredAnnotations();
                    }

                    public int getModifiers() {
                        return bridgeTarget.getModifiers();
                    }

                    public java.lang.String getInternalName() {
                        return bridgeTarget.getInternalName();
                    }
                }
            }
        }
    }

    @net.bytebuddy.build.HashCodeAndEqualsPlugin.Enhance
    abstract class Default<S> implements net.bytebuddy.dynamic.scaffold.TypeWriter<S> {
        private static final java.lang.String NO_REFERENCE = null;

        protected static final java.lang.String DUMP_FOLDER;

        static {
            java.lang.String dumpFolder;
            try {
                dumpFolder = java.security.AccessController.doPrivileged(new net.bytebuddy.utility.privilege.GetSystemPropertyAction(net.bytebuddy.dynamic.scaffold.TypeWriter.DUMP_PROPERTY));
            } catch (java.lang.RuntimeException exception) {
                dumpFolder = null;
            }
            DUMP_FOLDER = dumpFolder;
        }

        protected final net.bytebuddy.description.type.TypeDescription instrumentedType;

        protected final net.bytebuddy.ClassFileVersion classFileVersion;

        protected final net.bytebuddy.dynamic.scaffold.TypeWriter.FieldPool fieldPool;

        protected final java.util.List<? extends net.bytebuddy.dynamic.DynamicType> auxiliaryTypes;

        protected final net.bytebuddy.description.field.FieldList<net.bytebuddy.description.field.FieldDescription.InDefinedShape> fields;

        protected final net.bytebuddy.description.method.MethodList<?> methods;

        protected final net.bytebuddy.description.method.MethodList<?> instrumentedMethods;

        protected final net.bytebuddy.implementation.LoadedTypeInitializer loadedTypeInitializer;

        protected final net.bytebuddy.dynamic.scaffold.TypeInitializer typeInitializer;

        protected final net.bytebuddy.implementation.attribute.TypeAttributeAppender typeAttributeAppender;

        protected final net.bytebuddy.asm.AsmVisitorWrapper asmVisitorWrapper;

        protected final net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory;

        protected final net.bytebuddy.implementation.attribute.AnnotationRetention annotationRetention;

        protected final net.bytebuddy.implementation.auxiliary.AuxiliaryType.NamingStrategy auxiliaryTypeNamingStrategy;

        protected final net.bytebuddy.implementation.Implementation.Context.Factory implementationContextFactory;

        protected final net.bytebuddy.dynamic.scaffold.TypeValidation typeValidation;

        protected final net.bytebuddy.dynamic.scaffold.ClassWriterStrategy classWriterStrategy;

        protected final net.bytebuddy.pool.TypePool typePool;

        protected Default(net.bytebuddy.description.type.TypeDescription instrumentedType, net.bytebuddy.ClassFileVersion classFileVersion, net.bytebuddy.dynamic.scaffold.TypeWriter.FieldPool fieldPool, java.util.List<? extends net.bytebuddy.dynamic.DynamicType> auxiliaryTypes, net.bytebuddy.description.field.FieldList<net.bytebuddy.description.field.FieldDescription.InDefinedShape> fields, net.bytebuddy.description.method.MethodList<?> methods, net.bytebuddy.description.method.MethodList<?> instrumentedMethods, net.bytebuddy.implementation.LoadedTypeInitializer loadedTypeInitializer, net.bytebuddy.dynamic.scaffold.TypeInitializer typeInitializer, net.bytebuddy.implementation.attribute.TypeAttributeAppender typeAttributeAppender, net.bytebuddy.asm.AsmVisitorWrapper asmVisitorWrapper, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory, net.bytebuddy.implementation.attribute.AnnotationRetention annotationRetention, net.bytebuddy.implementation.auxiliary.AuxiliaryType.NamingStrategy auxiliaryTypeNamingStrategy, net.bytebuddy.implementation.Implementation.Context.Factory implementationContextFactory, net.bytebuddy.dynamic.scaffold.TypeValidation typeValidation, net.bytebuddy.dynamic.scaffold.ClassWriterStrategy classWriterStrategy, net.bytebuddy.pool.TypePool typePool) {
            this.instrumentedType = instrumentedType;
            this.classFileVersion = classFileVersion;
            this.fieldPool = fieldPool;
            this.auxiliaryTypes = auxiliaryTypes;
            this.fields = fields;
            this.methods = methods;
            this.instrumentedMethods = instrumentedMethods;
            this.loadedTypeInitializer = loadedTypeInitializer;
            this.typeInitializer = typeInitializer;
            this.typeAttributeAppender = typeAttributeAppender;
            this.asmVisitorWrapper = asmVisitorWrapper;
            this.auxiliaryTypeNamingStrategy = auxiliaryTypeNamingStrategy;
            this.annotationValueFilterFactory = annotationValueFilterFactory;
            this.annotationRetention = annotationRetention;
            this.implementationContextFactory = implementationContextFactory;
            this.typeValidation = typeValidation;
            this.classWriterStrategy = classWriterStrategy;
            this.typePool = typePool;
        }

        public static <U> net.bytebuddy.dynamic.scaffold.TypeWriter<U> forCreation(net.bytebuddy.dynamic.scaffold.MethodRegistry.Compiled methodRegistry, java.util.List<? extends net.bytebuddy.dynamic.DynamicType> auxiliaryTypes, net.bytebuddy.dynamic.scaffold.TypeWriter.FieldPool fieldPool, net.bytebuddy.implementation.attribute.TypeAttributeAppender typeAttributeAppender, net.bytebuddy.asm.AsmVisitorWrapper asmVisitorWrapper, net.bytebuddy.ClassFileVersion classFileVersion, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory, net.bytebuddy.implementation.attribute.AnnotationRetention annotationRetention, net.bytebuddy.implementation.auxiliary.AuxiliaryType.NamingStrategy auxiliaryTypeNamingStrategy, net.bytebuddy.implementation.Implementation.Context.Factory implementationContextFactory, net.bytebuddy.dynamic.scaffold.TypeValidation typeValidation, net.bytebuddy.dynamic.scaffold.ClassWriterStrategy classWriterStrategy, net.bytebuddy.pool.TypePool typePool) {
            return new net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForCreation<U>(methodRegistry.getInstrumentedType(), classFileVersion, fieldPool, methodRegistry, auxiliaryTypes, methodRegistry.getInstrumentedType().getDeclaredFields(), methodRegistry.getMethods(), methodRegistry.getInstrumentedMethods(), methodRegistry.getLoadedTypeInitializer(), methodRegistry.getTypeInitializer(), typeAttributeAppender, asmVisitorWrapper, annotationValueFilterFactory, annotationRetention, auxiliaryTypeNamingStrategy, implementationContextFactory, typeValidation, classWriterStrategy, typePool);
        }

        public static <U> net.bytebuddy.dynamic.scaffold.TypeWriter<U> forRedefinition(net.bytebuddy.dynamic.scaffold.MethodRegistry.Prepared methodRegistry, java.util.List<? extends net.bytebuddy.dynamic.DynamicType> auxiliaryTypes, net.bytebuddy.dynamic.scaffold.TypeWriter.FieldPool fieldPool, net.bytebuddy.implementation.attribute.TypeAttributeAppender typeAttributeAppender, net.bytebuddy.asm.AsmVisitorWrapper asmVisitorWrapper, net.bytebuddy.ClassFileVersion classFileVersion, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory, net.bytebuddy.implementation.attribute.AnnotationRetention annotationRetention, net.bytebuddy.implementation.auxiliary.AuxiliaryType.NamingStrategy auxiliaryTypeNamingStrategy, net.bytebuddy.implementation.Implementation.Context.Factory implementationContextFactory, net.bytebuddy.dynamic.scaffold.TypeValidation typeValidation, net.bytebuddy.dynamic.scaffold.ClassWriterStrategy classWriterStrategy, net.bytebuddy.pool.TypePool typePool, net.bytebuddy.description.type.TypeDescription originalType, net.bytebuddy.dynamic.ClassFileLocator classFileLocator) {
            return new net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing<U>(methodRegistry.getInstrumentedType(), classFileVersion, fieldPool, auxiliaryTypes, methodRegistry.getInstrumentedType().getDeclaredFields(), methodRegistry.getMethods(), methodRegistry.getInstrumentedMethods(), methodRegistry.getLoadedTypeInitializer(), methodRegistry.getTypeInitializer(), typeAttributeAppender, asmVisitorWrapper, annotationValueFilterFactory, annotationRetention, auxiliaryTypeNamingStrategy, implementationContextFactory, typeValidation, classWriterStrategy, typePool, originalType, classFileLocator, methodRegistry, net.bytebuddy.dynamic.scaffold.subclass.SubclassImplementationTarget.Factory.LEVEL_TYPE, net.bytebuddy.dynamic.scaffold.inline.MethodRebaseResolver.Disabled.INSTANCE);
        }

        public static <U> net.bytebuddy.dynamic.scaffold.TypeWriter<U> forRebasing(net.bytebuddy.dynamic.scaffold.MethodRegistry.Prepared methodRegistry, java.util.List<? extends net.bytebuddy.dynamic.DynamicType> auxiliaryTypes, net.bytebuddy.dynamic.scaffold.TypeWriter.FieldPool fieldPool, net.bytebuddy.implementation.attribute.TypeAttributeAppender typeAttributeAppender, net.bytebuddy.asm.AsmVisitorWrapper asmVisitorWrapper, net.bytebuddy.ClassFileVersion classFileVersion, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory, net.bytebuddy.implementation.attribute.AnnotationRetention annotationRetention, net.bytebuddy.implementation.auxiliary.AuxiliaryType.NamingStrategy auxiliaryTypeNamingStrategy, net.bytebuddy.implementation.Implementation.Context.Factory implementationContextFactory, net.bytebuddy.dynamic.scaffold.TypeValidation typeValidation, net.bytebuddy.dynamic.scaffold.ClassWriterStrategy classWriterStrategy, net.bytebuddy.pool.TypePool typePool, net.bytebuddy.description.type.TypeDescription originalType, net.bytebuddy.dynamic.ClassFileLocator classFileLocator, net.bytebuddy.dynamic.scaffold.inline.MethodRebaseResolver methodRebaseResolver) {
            return new net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing<U>(methodRegistry.getInstrumentedType(), classFileVersion, fieldPool, net.bytebuddy.utility.CompoundList.of(auxiliaryTypes, methodRebaseResolver.getAuxiliaryTypes()), methodRegistry.getInstrumentedType().getDeclaredFields(), methodRegistry.getMethods(), methodRegistry.getInstrumentedMethods(), methodRegistry.getLoadedTypeInitializer(), methodRegistry.getTypeInitializer(), typeAttributeAppender, asmVisitorWrapper, annotationValueFilterFactory, annotationRetention, auxiliaryTypeNamingStrategy, implementationContextFactory, typeValidation, classWriterStrategy, typePool, originalType, classFileLocator, methodRegistry, new net.bytebuddy.dynamic.scaffold.inline.RebaseImplementationTarget.Factory(methodRebaseResolver), methodRebaseResolver);
        }

        public static <U> net.bytebuddy.dynamic.scaffold.TypeWriter<U> forDecoration(net.bytebuddy.description.type.TypeDescription instrumentedType, net.bytebuddy.ClassFileVersion classFileVersion, java.util.List<? extends net.bytebuddy.dynamic.DynamicType> auxiliaryTypes, java.util.List<? extends net.bytebuddy.description.method.MethodDescription> methods, net.bytebuddy.implementation.attribute.TypeAttributeAppender typeAttributeAppender, net.bytebuddy.asm.AsmVisitorWrapper asmVisitorWrapper, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory, net.bytebuddy.implementation.attribute.AnnotationRetention annotationRetention, net.bytebuddy.implementation.auxiliary.AuxiliaryType.NamingStrategy auxiliaryTypeNamingStrategy, net.bytebuddy.implementation.Implementation.Context.Factory implementationContextFactory, net.bytebuddy.dynamic.scaffold.TypeValidation typeValidation, net.bytebuddy.dynamic.scaffold.ClassWriterStrategy classWriterStrategy, net.bytebuddy.pool.TypePool typePool, net.bytebuddy.dynamic.ClassFileLocator classFileLocator) {
            return new net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithDecorationOnly<U>(instrumentedType, classFileVersion, auxiliaryTypes, new net.bytebuddy.description.method.MethodList.Explicit<net.bytebuddy.description.method.MethodDescription>(methods), typeAttributeAppender, asmVisitorWrapper, annotationValueFilterFactory, annotationRetention, auxiliaryTypeNamingStrategy, implementationContextFactory, typeValidation, classWriterStrategy, typePool, classFileLocator);
        }

        @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value = "REC_CATCH_EXCEPTION", justification = "Setting a debugging property should never change the program outcome")
        public net.bytebuddy.dynamic.DynamicType.Unloaded<S> make(net.bytebuddy.dynamic.TypeResolutionStrategy.Resolved typeResolutionStrategy) {
            net.bytebuddy.dynamic.scaffold.TypeWriter.Default<S>.UnresolvedType unresolvedType = create(typeResolutionStrategy.injectedInto(typeInitializer));
            net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ClassDumpAction.dump(net.bytebuddy.dynamic.scaffold.TypeWriter.Default.DUMP_FOLDER, instrumentedType, false, unresolvedType.getBinaryRepresentation());
            return unresolvedType.toDynamicType(typeResolutionStrategy);
        }

        protected abstract net.bytebuddy.dynamic.scaffold.TypeWriter.Default<S>.UnresolvedType create(net.bytebuddy.dynamic.scaffold.TypeInitializer typeInitializer);

        @net.bytebuddy.build.HashCodeAndEqualsPlugin.Enhance(includeSyntheticFields = true)
        protected class UnresolvedType {
            private final byte[] binaryRepresentation;

            private final java.util.List<? extends net.bytebuddy.dynamic.DynamicType> auxiliaryTypes;

            protected UnresolvedType(byte[] binaryRepresentation, java.util.List<? extends net.bytebuddy.dynamic.DynamicType> auxiliaryTypes) {
                this.binaryRepresentation = binaryRepresentation;
                this.auxiliaryTypes = auxiliaryTypes;
            }

            protected net.bytebuddy.dynamic.DynamicType.Unloaded<S> toDynamicType(net.bytebuddy.dynamic.TypeResolutionStrategy.Resolved typeResolutionStrategy) {
                return new net.bytebuddy.dynamic.DynamicType.Unloaded<S>(instrumentedType, binaryRepresentation, loadedTypeInitializer, net.bytebuddy.utility.CompoundList.of(net.bytebuddy.dynamic.scaffold.TypeWriter.Default.this.auxiliaryTypes, auxiliaryTypes), typeResolutionStrategy);
            }

            protected byte[] getBinaryRepresentation() {
                return binaryRepresentation;
            }
        }

        protected static class ValidatingClassVisitor extends org.objectweb.asm.ClassVisitor {
            private static final java.lang.String NO_PARAMETERS = "()";

            private static final java.lang.String RETURNS_VOID = "V";

            private static final java.lang.String STRING_DESCRIPTOR = "Ljava/lang/String;";

            private static final org.objectweb.asm.FieldVisitor IGNORE_FIELD = null;

            private static final org.objectweb.asm.MethodVisitor IGNORE_METHOD = null;

            private net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.Constraint constraint;

            protected ValidatingClassVisitor(org.objectweb.asm.ClassVisitor classVisitor) {
                super(net.bytebuddy.utility.OpenedClassReader.ASM_API, classVisitor);
            }

            protected static org.objectweb.asm.ClassVisitor of(org.objectweb.asm.ClassVisitor classVisitor, net.bytebuddy.dynamic.scaffold.TypeValidation typeValidation) {
                return typeValidation.isEnabled() ? new net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor(classVisitor) : classVisitor;
            }

            @java.lang.Override
            public void visit(int version, int modifiers, java.lang.String name, java.lang.String signature, java.lang.String superName, java.lang.String[] interfaces) {
                net.bytebuddy.ClassFileVersion classFileVersion = net.bytebuddy.ClassFileVersion.ofMinorMajor(version);
                java.util.List<net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.Constraint> constraints = new java.util.ArrayList<net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.Constraint>();
                constraints.add(new net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.Constraint.ForClassFileVersion(classFileVersion));
                if (name.endsWith(('/' + (net.bytebuddy.description.type.PackageDescription.PACKAGE_CLASS_NAME)))) {
                    constraints.add(net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.Constraint.ForPackageType.INSTANCE);
                }else
                    if ((modifiers & (org.objectweb.asm.Opcodes.ACC_ANNOTATION)) != 0) {
                        if (!(classFileVersion.isAtLeast(net.bytebuddy.ClassFileVersion.JAVA_V5))) {
                            throw new java.lang.IllegalStateException(("Cannot define an annotation type for class file version " + classFileVersion));
                        }
                        constraints.add((classFileVersion.isAtLeast(net.bytebuddy.ClassFileVersion.JAVA_V8) ? net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.Constraint.ForAnnotation.JAVA_8 : net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.Constraint.ForAnnotation.CLASSIC));
                    }else
                        if ((modifiers & (org.objectweb.asm.Opcodes.ACC_INTERFACE)) != 0) {
                            constraints.add((classFileVersion.isAtLeast(net.bytebuddy.ClassFileVersion.JAVA_V8) ? net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.Constraint.ForInterface.JAVA_8 : net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.Constraint.ForInterface.CLASSIC));
                        }else
                            if ((modifiers & (org.objectweb.asm.Opcodes.ACC_ABSTRACT)) != 0) {
                                constraints.add(net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.Constraint.ForClass.ABSTRACT);
                            }else {
                                constraints.add(net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.Constraint.ForClass.MANIFEST);
                            }



                constraint = new net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.Constraint.Compound(constraints);
                constraint.assertType(modifiers, (interfaces != null), (signature != null));
                super.visit(version, modifiers, name, signature, superName, interfaces);
            }

            @java.lang.Override
            public org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String descriptor, boolean visible) {
                constraint.assertAnnotation();
                return super.visitAnnotation(descriptor, visible);
            }

            @java.lang.Override
            public org.objectweb.asm.AnnotationVisitor visitTypeAnnotation(int typeReference, org.objectweb.asm.TypePath typePath, java.lang.String descriptor, boolean visible) {
                constraint.assertTypeAnnotation();
                return super.visitTypeAnnotation(typeReference, typePath, descriptor, visible);
            }

            @java.lang.Override
            public void visitNestHost(java.lang.String nestHost) {
                constraint.assertNestMate();
                super.visitNestHost(nestHost);
            }

            @java.lang.Override
            public void visitNestMember(java.lang.String nestMember) {
                constraint.assertNestMate();
                super.visitNestMember(nestMember);
            }

            @java.lang.Override
            public org.objectweb.asm.FieldVisitor visitField(int modifiers, java.lang.String name, java.lang.String descriptor, java.lang.String signature, java.lang.Object defaultValue) {
                if (defaultValue != null) {
                    java.lang.Class<?> type;
                    switch (descriptor.charAt(0)) {
                        case 'Z' :
                        case 'B' :
                        case 'C' :
                        case 'S' :
                        case 'I' :
                            type = java.lang.Integer.class;
                            break;
                        case 'J' :
                            type = java.lang.Long.class;
                            break;
                        case 'F' :
                            type = java.lang.Float.class;
                            break;
                        case 'D' :
                            type = java.lang.Double.class;
                            break;
                        default :
                            if (!(descriptor.equals(net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.STRING_DESCRIPTOR))) {
                                throw new java.lang.IllegalStateException(("Cannot define a default value for type of field " + name));
                            }
                            type = java.lang.String.class;
                    }
                    if (!(type.isInstance(defaultValue))) {
                        throw new java.lang.IllegalStateException(((("Field " + name) + " defines an incompatible default value ") + defaultValue));
                    }else
                        if (type == (java.lang.Integer.class)) {
                            int minimum;
                            int maximum;
                            switch (descriptor.charAt(0)) {
                                case 'Z' :
                                    minimum = 0;
                                    maximum = 1;
                                    break;
                                case 'B' :
                                    minimum = java.lang.Byte.MIN_VALUE;
                                    maximum = java.lang.Byte.MAX_VALUE;
                                    break;
                                case 'C' :
                                    minimum = java.lang.Character.MIN_VALUE;
                                    maximum = java.lang.Character.MAX_VALUE;
                                    break;
                                case 'S' :
                                    minimum = java.lang.Short.MIN_VALUE;
                                    maximum = java.lang.Short.MAX_VALUE;
                                    break;
                                default :
                                    minimum = java.lang.Integer.MIN_VALUE;
                                    maximum = java.lang.Integer.MAX_VALUE;
                            }
                            int value = ((java.lang.Integer) (defaultValue));
                            if ((value < minimum) || (value > maximum)) {
                                throw new java.lang.IllegalStateException(((("Field " + name) + " defines an incompatible default value ") + defaultValue));
                            }
                        }

                }
                constraint.assertField(name, ((modifiers & (org.objectweb.asm.Opcodes.ACC_PUBLIC)) != 0), ((modifiers & (org.objectweb.asm.Opcodes.ACC_STATIC)) != 0), ((modifiers & (org.objectweb.asm.Opcodes.ACC_FINAL)) != 0), (signature != null));
                org.objectweb.asm.FieldVisitor fieldVisitor = super.visitField(modifiers, name, descriptor, signature, defaultValue);
                return fieldVisitor == null ? net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.IGNORE_FIELD : new net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.ValidatingFieldVisitor(fieldVisitor);
            }

            @java.lang.Override
            public org.objectweb.asm.MethodVisitor visitMethod(int modifiers, java.lang.String name, java.lang.String descriptor, java.lang.String signature, java.lang.String[] exceptions) {
                constraint.assertMethod(name, ((modifiers & (org.objectweb.asm.Opcodes.ACC_ABSTRACT)) != 0), ((modifiers & (org.objectweb.asm.Opcodes.ACC_PUBLIC)) != 0), ((modifiers & (org.objectweb.asm.Opcodes.ACC_PRIVATE)) != 0), ((modifiers & (org.objectweb.asm.Opcodes.ACC_STATIC)) != 0), (((!(name.equals(net.bytebuddy.description.method.MethodDescription.CONSTRUCTOR_INTERNAL_NAME))) && (!(name.equals(net.bytebuddy.description.method.MethodDescription.TYPE_INITIALIZER_INTERNAL_NAME)))) && ((modifiers & ((org.objectweb.asm.Opcodes.ACC_PRIVATE) | (org.objectweb.asm.Opcodes.ACC_STATIC))) == 0)), name.equals(net.bytebuddy.description.method.MethodDescription.CONSTRUCTOR_INTERNAL_NAME), ((!(descriptor.startsWith(net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.NO_PARAMETERS))) || (descriptor.endsWith(net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.RETURNS_VOID))), (signature != null));
                org.objectweb.asm.MethodVisitor methodVisitor = super.visitMethod(modifiers, name, descriptor, signature, exceptions);
                return methodVisitor == null ? net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.IGNORE_METHOD : new net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.ValidatingMethodVisitor(methodVisitor, name);
            }

            protected interface Constraint {
                void assertType(int modifier, boolean definesInterfaces, boolean isGeneric);

                void assertField(java.lang.String name, boolean isPublic, boolean isStatic, boolean isFinal, boolean isGeneric);

                void assertMethod(java.lang.String name, boolean isAbstract, boolean isPublic, boolean isPrivate, boolean isStatic, boolean isVirtual, boolean isConstructor, boolean isDefaultValueIncompatible, boolean isGeneric);

                void assertAnnotation();

                void assertTypeAnnotation();

                void assertDefaultValue(java.lang.String name);

                void assertDefaultMethodCall();

                void assertTypeInConstantPool();

                void assertMethodTypeInConstantPool();

                void assertHandleInConstantPool();

                void assertInvokeDynamic();

                void assertSubRoutine();

                void assertDynamicValueInConstantPool();

                void assertNestMate();

                enum ForClass implements net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.Constraint {

                    MANIFEST(true),
                    ABSTRACT(false);
                    private final boolean manifestType;

                    ForClass(boolean manifestType) {
                        this.manifestType = manifestType;
                    }

                    public void assertType(int modifier, boolean definesInterfaces, boolean isGeneric) {
                    }

                    public void assertField(java.lang.String name, boolean isPublic, boolean isStatic, boolean isFinal, boolean isGeneric) {
                    }

                    public void assertMethod(java.lang.String name, boolean isAbstract, boolean isPublic, boolean isPrivate, boolean isStatic, boolean isVirtual, boolean isConstructor, boolean isDefaultValueIncompatible, boolean isGeneric) {
                        if (isAbstract && (manifestType)) {
                            throw new java.lang.IllegalStateException((("Cannot define abstract method '" + name) + "' for non-abstract class"));
                        }
                    }

                    public void assertAnnotation() {
                    }

                    public void assertTypeAnnotation() {
                    }

                    public void assertDefaultValue(java.lang.String name) {
                        throw new java.lang.IllegalStateException((("Cannot define default value for '" + name) + "' for non-annotation type"));
                    }

                    public void assertDefaultMethodCall() {
                    }

                    public void assertTypeInConstantPool() {
                    }

                    public void assertMethodTypeInConstantPool() {
                    }

                    public void assertHandleInConstantPool() {
                    }

                    public void assertInvokeDynamic() {
                    }

                    public void assertSubRoutine() {
                    }

                    public void assertDynamicValueInConstantPool() {
                    }

                    public void assertNestMate() {
                    }
                }

                enum ForPackageType implements net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.Constraint {

                    INSTANCE;
                    public void assertField(java.lang.String name, boolean isPublic, boolean isStatic, boolean isFinal, boolean isGeneric) {
                        throw new java.lang.IllegalStateException("Cannot define a field for a package description type");
                    }

                    public void assertMethod(java.lang.String name, boolean isAbstract, boolean isPublic, boolean isPrivate, boolean isStatic, boolean isVirtual, boolean isConstructor, boolean isNoDefaultValue, boolean isGeneric) {
                        throw new java.lang.IllegalStateException("Cannot define a method for a package description type");
                    }

                    public void assertAnnotation() {
                    }

                    public void assertTypeAnnotation() {
                    }

                    public void assertDefaultValue(java.lang.String name) {
                    }

                    public void assertDefaultMethodCall() {
                    }

                    public void assertTypeInConstantPool() {
                    }

                    public void assertMethodTypeInConstantPool() {
                    }

                    public void assertHandleInConstantPool() {
                    }

                    public void assertInvokeDynamic() {
                    }

                    public void assertSubRoutine() {
                    }

                    public void assertType(int modifier, boolean definesInterfaces, boolean isGeneric) {
                        if (modifier != (net.bytebuddy.description.type.PackageDescription.PACKAGE_MODIFIERS)) {
                            throw new java.lang.IllegalStateException((("A package description type must define " + (net.bytebuddy.description.type.PackageDescription.PACKAGE_MODIFIERS)) + " as modifier"));
                        }else
                            if (definesInterfaces) {
                                throw new java.lang.IllegalStateException("Cannot implement interface for package type");
                            }

                    }

                    public void assertDynamicValueInConstantPool() {
                    }

                    public void assertNestMate() {
                    }
                }

                enum ForInterface implements net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.Constraint {

                    CLASSIC(true),
                    JAVA_8(false);
                    private final boolean classic;

                    ForInterface(boolean classic) {
                        this.classic = classic;
                    }

                    public void assertField(java.lang.String name, boolean isPublic, boolean isStatic, boolean isFinal, boolean isGeneric) {
                        if (((!isStatic) || (!isPublic)) || (!isFinal)) {
                            throw new java.lang.IllegalStateException((("Cannot only define public, static, final field '" + name) + "' for interface type"));
                        }
                    }

                    public void assertMethod(java.lang.String name, boolean isAbstract, boolean isPublic, boolean isPrivate, boolean isStatic, boolean isVirtual, boolean isConstructor, boolean isDefaultValueIncompatible, boolean isGeneric) {
                        if (!(name.equals(net.bytebuddy.description.method.MethodDescription.TYPE_INITIALIZER_INTERNAL_NAME))) {
                            if (isConstructor) {
                                throw new java.lang.IllegalStateException("Cannot define constructor for interface type");
                            }else
                                if ((classic) && (!isPublic)) {
                                    throw new java.lang.IllegalStateException((("Cannot define non-public method '" + name) + "' for interface type"));
                                }else
                                    if ((classic) && (!isVirtual)) {
                                        throw new java.lang.IllegalStateException((("Cannot define non-virtual method '" + name) + "' for a pre-Java 8 interface type"));
                                    }else
                                        if ((classic) && (!isAbstract)) {
                                            throw new java.lang.IllegalStateException((("Cannot define default method '" + name) + "' for pre-Java 8 interface type"));
                                        }



                        }
                    }

                    public void assertAnnotation() {
                    }

                    public void assertTypeAnnotation() {
                    }

                    public void assertDefaultValue(java.lang.String name) {
                        throw new java.lang.IllegalStateException((("Cannot define default value for '" + name) + "' for non-annotation type"));
                    }

                    public void assertDefaultMethodCall() {
                    }

                    public void assertType(int modifier, boolean definesInterfaces, boolean isGeneric) {
                    }

                    public void assertTypeInConstantPool() {
                    }

                    public void assertMethodTypeInConstantPool() {
                    }

                    public void assertHandleInConstantPool() {
                    }

                    public void assertInvokeDynamic() {
                    }

                    public void assertSubRoutine() {
                    }

                    public void assertDynamicValueInConstantPool() {
                    }

                    public void assertNestMate() {
                    }
                }

                enum ForAnnotation implements net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.Constraint {

                    CLASSIC(true),
                    JAVA_8(false);
                    private final boolean classic;

                    ForAnnotation(boolean classic) {
                        this.classic = classic;
                    }

                    public void assertField(java.lang.String name, boolean isPublic, boolean isStatic, boolean isFinal, boolean isGeneric) {
                        if (((!isStatic) || (!isPublic)) || (!isFinal)) {
                            throw new java.lang.IllegalStateException((("Cannot only define public, static, final field '" + name) + "' for interface type"));
                        }
                    }

                    public void assertMethod(java.lang.String name, boolean isAbstract, boolean isPublic, boolean isPrivate, boolean isStatic, boolean isVirtual, boolean isConstructor, boolean isDefaultValueIncompatible, boolean isGeneric) {
                        if (!(name.equals(net.bytebuddy.description.method.MethodDescription.TYPE_INITIALIZER_INTERNAL_NAME))) {
                            if (isConstructor) {
                                throw new java.lang.IllegalStateException("Cannot define constructor for interface type");
                            }else
                                if ((classic) && (!isVirtual)) {
                                    throw new java.lang.IllegalStateException((("Cannot define non-virtual method '" + name) + "' for a pre-Java 8 annotation type"));
                                }else
                                    if ((!isStatic) && isDefaultValueIncompatible) {
                                        throw new java.lang.IllegalStateException((("Cannot define method '" + name) + "' with the given signature as an annotation type method"));
                                    }


                        }
                    }

                    public void assertAnnotation() {
                    }

                    public void assertTypeAnnotation() {
                    }

                    public void assertDefaultValue(java.lang.String name) {
                    }

                    public void assertDefaultMethodCall() {
                    }

                    public void assertType(int modifier, boolean definesInterfaces, boolean isGeneric) {
                        if ((modifier & (org.objectweb.asm.Opcodes.ACC_INTERFACE)) == 0) {
                            throw new java.lang.IllegalStateException("Cannot define annotation type without interface modifier");
                        }
                    }

                    public void assertTypeInConstantPool() {
                    }

                    public void assertMethodTypeInConstantPool() {
                    }

                    public void assertHandleInConstantPool() {
                    }

                    public void assertInvokeDynamic() {
                    }

                    public void assertSubRoutine() {
                    }

                    public void assertDynamicValueInConstantPool() {
                    }

                    public void assertNestMate() {
                    }
                }

                @net.bytebuddy.build.HashCodeAndEqualsPlugin.Enhance
                class ForClassFileVersion implements net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.Constraint {
                    private final net.bytebuddy.ClassFileVersion classFileVersion;

                    protected ForClassFileVersion(net.bytebuddy.ClassFileVersion classFileVersion) {
                        this.classFileVersion = classFileVersion;
                    }

                    public void assertType(int modifiers, boolean definesInterfaces, boolean isGeneric) {
                        if (((modifiers & (org.objectweb.asm.Opcodes.ACC_ANNOTATION)) != 0) && (!(classFileVersion.isAtLeast(net.bytebuddy.ClassFileVersion.JAVA_V5)))) {
                            throw new java.lang.IllegalStateException(("Cannot define annotation type for class file version " + (classFileVersion)));
                        }else
                            if (isGeneric && (!(classFileVersion.isAtLeast(net.bytebuddy.ClassFileVersion.JAVA_V5)))) {
                                throw new java.lang.IllegalStateException(("Cannot define a generic type for class file version " + (classFileVersion)));
                            }

                    }

                    public void assertField(java.lang.String name, boolean isPublic, boolean isStatic, boolean isFinal, boolean isGeneric) {
                        if (isGeneric && (!(classFileVersion.isAtLeast(net.bytebuddy.ClassFileVersion.JAVA_V5)))) {
                            throw new java.lang.IllegalStateException(((("Cannot define generic field '" + name) + "' for class file version ") + (classFileVersion)));
                        }
                    }

                    public void assertMethod(java.lang.String name, boolean isAbstract, boolean isPublic, boolean isPrivate, boolean isStatic, boolean isVirtual, boolean isConstructor, boolean isDefaultValueIncompatible, boolean isGeneric) {
                        if (isGeneric && (!(classFileVersion.isAtLeast(net.bytebuddy.ClassFileVersion.JAVA_V5)))) {
                            throw new java.lang.IllegalStateException(((("Cannot define generic method '" + name) + "' for class file version ") + (classFileVersion)));
                        }else
                            if ((!isVirtual) && isAbstract) {
                                throw new java.lang.IllegalStateException((("Cannot define static or non-virtual method '" + name) + "' to be abstract"));
                            }

                    }

                    public void assertAnnotation() {
                        if (classFileVersion.isLessThan(net.bytebuddy.ClassFileVersion.JAVA_V5)) {
                            throw new java.lang.IllegalStateException(("Cannot write annotations for class file version " + (classFileVersion)));
                        }
                    }

                    public void assertTypeAnnotation() {
                        if (classFileVersion.isLessThan(net.bytebuddy.ClassFileVersion.JAVA_V5)) {
                            throw new java.lang.IllegalStateException(("Cannot write type annotations for class file version " + (classFileVersion)));
                        }
                    }

                    public void assertDefaultValue(java.lang.String name) {
                    }

                    public void assertDefaultMethodCall() {
                        if (classFileVersion.isLessThan(net.bytebuddy.ClassFileVersion.JAVA_V8)) {
                            throw new java.lang.IllegalStateException(("Cannot invoke default method for class file version " + (classFileVersion)));
                        }
                    }

                    public void assertTypeInConstantPool() {
                        if (classFileVersion.isLessThan(net.bytebuddy.ClassFileVersion.JAVA_V5)) {
                            throw new java.lang.IllegalStateException(("Cannot write type to constant pool for class file version " + (classFileVersion)));
                        }
                    }

                    public void assertMethodTypeInConstantPool() {
                        if (classFileVersion.isLessThan(net.bytebuddy.ClassFileVersion.JAVA_V7)) {
                            throw new java.lang.IllegalStateException(("Cannot write method type to constant pool for class file version " + (classFileVersion)));
                        }
                    }

                    public void assertHandleInConstantPool() {
                        if (classFileVersion.isLessThan(net.bytebuddy.ClassFileVersion.JAVA_V7)) {
                            throw new java.lang.IllegalStateException(("Cannot write method handle to constant pool for class file version " + (classFileVersion)));
                        }
                    }

                    public void assertInvokeDynamic() {
                        if (classFileVersion.isLessThan(net.bytebuddy.ClassFileVersion.JAVA_V7)) {
                            throw new java.lang.IllegalStateException(("Cannot write invoke dynamic instruction for class file version " + (classFileVersion)));
                        }
                    }

                    public void assertSubRoutine() {
                        if (classFileVersion.isGreaterThan(net.bytebuddy.ClassFileVersion.JAVA_V5)) {
                            throw new java.lang.IllegalStateException(("Cannot write subroutine for class file version " + (classFileVersion)));
                        }
                    }

                    public void assertDynamicValueInConstantPool() {
                        if (classFileVersion.isLessThan(net.bytebuddy.ClassFileVersion.JAVA_V11)) {
                            throw new java.lang.IllegalStateException(("Cannot write dynamic constant for class file version " + (classFileVersion)));
                        }
                    }

                    public void assertNestMate() {
                        if (classFileVersion.isLessThan(net.bytebuddy.ClassFileVersion.JAVA_V11)) {
                            throw new java.lang.IllegalStateException(("Cannot define nest mate for class file version " + (classFileVersion)));
                        }
                    }
                }

                @net.bytebuddy.build.HashCodeAndEqualsPlugin.Enhance
                class Compound implements net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.Constraint {
                    private final java.util.List<net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.Constraint> constraints;

                    public Compound(java.util.List<? extends net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.Constraint> constraints) {
                        this.constraints = new java.util.ArrayList<net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.Constraint>();
                        for (net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.Constraint constraint : constraints) {
                            if (constraint instanceof net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.Constraint.Compound) {
                                this.constraints.addAll(((net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.Constraint.Compound) (constraint)).constraints);
                            }else {
                                this.constraints.add(constraint);
                            }
                        }
                    }

                    public void assertType(int modifier, boolean definesInterfaces, boolean isGeneric) {
                        for (net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.Constraint constraint : constraints) {
                            constraint.assertType(modifier, definesInterfaces, isGeneric);
                        }
                    }

                    public void assertField(java.lang.String name, boolean isPublic, boolean isStatic, boolean isFinal, boolean isGeneric) {
                        for (net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.Constraint constraint : constraints) {
                            constraint.assertField(name, isPublic, isStatic, isFinal, isGeneric);
                        }
                    }

                    public void assertMethod(java.lang.String name, boolean isAbstract, boolean isPublic, boolean isPrivate, boolean isStatic, boolean isVirtual, boolean isConstructor, boolean isDefaultValueIncompatible, boolean isGeneric) {
                        for (net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.Constraint constraint : constraints) {
                            constraint.assertMethod(name, isAbstract, isPublic, isPrivate, isStatic, isVirtual, isConstructor, isDefaultValueIncompatible, isGeneric);
                        }
                    }

                    public void assertDefaultValue(java.lang.String name) {
                        for (net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.Constraint constraint : constraints) {
                            constraint.assertDefaultValue(name);
                        }
                    }

                    public void assertDefaultMethodCall() {
                        for (net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.Constraint constraint : constraints) {
                            constraint.assertDefaultMethodCall();
                        }
                    }

                    public void assertAnnotation() {
                        for (net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.Constraint constraint : constraints) {
                            constraint.assertAnnotation();
                        }
                    }

                    public void assertTypeAnnotation() {
                        for (net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.Constraint constraint : constraints) {
                            constraint.assertTypeAnnotation();
                        }
                    }

                    public void assertTypeInConstantPool() {
                        for (net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.Constraint constraint : constraints) {
                            constraint.assertTypeInConstantPool();
                        }
                    }

                    public void assertMethodTypeInConstantPool() {
                        for (net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.Constraint constraint : constraints) {
                            constraint.assertMethodTypeInConstantPool();
                        }
                    }

                    public void assertHandleInConstantPool() {
                        for (net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.Constraint constraint : constraints) {
                            constraint.assertHandleInConstantPool();
                        }
                    }

                    public void assertInvokeDynamic() {
                        for (net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.Constraint constraint : constraints) {
                            constraint.assertInvokeDynamic();
                        }
                    }

                    public void assertSubRoutine() {
                        for (net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.Constraint constraint : constraints) {
                            constraint.assertSubRoutine();
                        }
                    }

                    public void assertDynamicValueInConstantPool() {
                        for (net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.Constraint constraint : constraints) {
                            constraint.assertDynamicValueInConstantPool();
                        }
                    }

                    public void assertNestMate() {
                        for (net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.Constraint constraint : constraints) {
                            constraint.assertNestMate();
                        }
                    }
                }
            }

            protected class ValidatingFieldVisitor extends org.objectweb.asm.FieldVisitor {
                protected ValidatingFieldVisitor(org.objectweb.asm.FieldVisitor fieldVisitor) {
                    super(net.bytebuddy.utility.OpenedClassReader.ASM_API, fieldVisitor);
                }

                @java.lang.Override
                public org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String desc, boolean visible) {
                    constraint.assertAnnotation();
                    return super.visitAnnotation(desc, visible);
                }
            }

            protected class ValidatingMethodVisitor extends org.objectweb.asm.MethodVisitor {
                private final java.lang.String name;

                protected ValidatingMethodVisitor(org.objectweb.asm.MethodVisitor methodVisitor, java.lang.String name) {
                    super(net.bytebuddy.utility.OpenedClassReader.ASM_API, methodVisitor);
                    this.name = name;
                }

                @java.lang.Override
                public org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String desc, boolean visible) {
                    constraint.assertAnnotation();
                    return super.visitAnnotation(desc, visible);
                }

                @java.lang.Override
                public org.objectweb.asm.AnnotationVisitor visitAnnotationDefault() {
                    constraint.assertDefaultValue(name);
                    return super.visitAnnotationDefault();
                }

                @java.lang.Override
                @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value = "SF_SWITCH_NO_DEFAULT", justification = "Fall through to default case is intentional")
                public void visitLdcInsn(java.lang.Object value) {
                    if (value instanceof org.objectweb.asm.Type) {
                        org.objectweb.asm.Type type = ((org.objectweb.asm.Type) (value));
                        switch (type.getSort()) {
                            case org.objectweb.asm.Type.OBJECT :
                            case org.objectweb.asm.Type.ARRAY :
                                constraint.assertTypeInConstantPool();
                                break;
                            case org.objectweb.asm.Type.METHOD :
                                constraint.assertMethodTypeInConstantPool();
                                break;
                        }
                    }else
                        if (value instanceof org.objectweb.asm.Handle) {
                            constraint.assertHandleInConstantPool();
                        }else
                            if (value instanceof org.objectweb.asm.ConstantDynamic) {
                                constraint.assertDynamicValueInConstantPool();
                            }


                    super.visitLdcInsn(value);
                }

                @java.lang.Override
                public void visitMethodInsn(int opcode, java.lang.String owner, java.lang.String name, java.lang.String descriptor, boolean isInterface) {
                    if (isInterface && (opcode == (org.objectweb.asm.Opcodes.INVOKESPECIAL))) {
                        constraint.assertDefaultMethodCall();
                    }
                    super.visitMethodInsn(opcode, owner, name, descriptor, isInterface);
                }

                @java.lang.Override
                public void visitInvokeDynamicInsn(java.lang.String name, java.lang.String descriptor, org.objectweb.asm.Handle bootstrapMethod, java.lang.Object[] bootstrapArgument) {
                    constraint.assertInvokeDynamic();
                    for (java.lang.Object constant : bootstrapArgument) {
                        if (constant instanceof org.objectweb.asm.ConstantDynamic) {
                            constraint.assertDynamicValueInConstantPool();
                        }
                    }
                    super.visitInvokeDynamicInsn(name, descriptor, bootstrapMethod, bootstrapArgument);
                }

                @java.lang.Override
                public void visitJumpInsn(int opcode, org.objectweb.asm.Label label) {
                    if (opcode == (org.objectweb.asm.Opcodes.JSR)) {
                        constraint.assertSubRoutine();
                    }
                    super.visitJumpInsn(opcode, label);
                }
            }
        }

        @net.bytebuddy.build.HashCodeAndEqualsPlugin.Enhance
        public abstract static class ForInlining<U> extends net.bytebuddy.dynamic.scaffold.TypeWriter.Default<U> {
            private static final org.objectweb.asm.FieldVisitor IGNORE_FIELD = null;

            private static final org.objectweb.asm.MethodVisitor IGNORE_METHOD = null;

            private static final org.objectweb.asm.AnnotationVisitor IGNORE_ANNOTATION = null;

            protected final net.bytebuddy.description.type.TypeDescription originalType;

            protected final net.bytebuddy.dynamic.ClassFileLocator classFileLocator;

            protected ForInlining(net.bytebuddy.description.type.TypeDescription instrumentedType, net.bytebuddy.ClassFileVersion classFileVersion, net.bytebuddy.dynamic.scaffold.TypeWriter.FieldPool fieldPool, java.util.List<? extends net.bytebuddy.dynamic.DynamicType> auxiliaryTypes, net.bytebuddy.description.field.FieldList<net.bytebuddy.description.field.FieldDescription.InDefinedShape> fields, net.bytebuddy.description.method.MethodList<?> methods, net.bytebuddy.description.method.MethodList<?> instrumentedMethods, net.bytebuddy.implementation.LoadedTypeInitializer loadedTypeInitializer, net.bytebuddy.dynamic.scaffold.TypeInitializer typeInitializer, net.bytebuddy.implementation.attribute.TypeAttributeAppender typeAttributeAppender, net.bytebuddy.asm.AsmVisitorWrapper asmVisitorWrapper, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory, net.bytebuddy.implementation.attribute.AnnotationRetention annotationRetention, net.bytebuddy.implementation.auxiliary.AuxiliaryType.NamingStrategy auxiliaryTypeNamingStrategy, net.bytebuddy.implementation.Implementation.Context.Factory implementationContextFactory, net.bytebuddy.dynamic.scaffold.TypeValidation typeValidation, net.bytebuddy.dynamic.scaffold.ClassWriterStrategy classWriterStrategy, net.bytebuddy.pool.TypePool typePool, net.bytebuddy.description.type.TypeDescription originalType, net.bytebuddy.dynamic.ClassFileLocator classFileLocator) {
                super(instrumentedType, classFileVersion, fieldPool, auxiliaryTypes, fields, methods, instrumentedMethods, loadedTypeInitializer, typeInitializer, typeAttributeAppender, asmVisitorWrapper, annotationValueFilterFactory, annotationRetention, auxiliaryTypeNamingStrategy, implementationContextFactory, typeValidation, classWriterStrategy, typePool);
                this.originalType = originalType;
                this.classFileLocator = classFileLocator;
            }

            @java.lang.Override
            protected net.bytebuddy.dynamic.scaffold.TypeWriter.Default<U>.UnresolvedType create(net.bytebuddy.dynamic.scaffold.TypeInitializer typeInitializer) {
                try {
                    int writerFlags = asmVisitorWrapper.mergeWriter(net.bytebuddy.asm.AsmVisitorWrapper.NO_FLAGS);
                    int readerFlags = asmVisitorWrapper.mergeReader(net.bytebuddy.asm.AsmVisitorWrapper.NO_FLAGS);
                    byte[] binaryRepresentation = classFileLocator.locate(originalType.getName()).resolve();
                    net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ClassDumpAction.dump(net.bytebuddy.dynamic.scaffold.TypeWriter.Default.DUMP_FOLDER, instrumentedType, true, binaryRepresentation);
                    org.objectweb.asm.ClassReader classReader = net.bytebuddy.utility.OpenedClassReader.of(binaryRepresentation);
                    org.objectweb.asm.ClassWriter classWriter = classWriterStrategy.resolve(writerFlags, typePool, classReader);
                    net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.ContextRegistry contextRegistry = new net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.ContextRegistry();
                    classReader.accept(writeTo(net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.of(classWriter, typeValidation), typeInitializer, contextRegistry, writerFlags, readerFlags), readerFlags);
                    return new UnresolvedType(classWriter.toByteArray(), contextRegistry.getAuxiliaryTypes());
                } catch (java.io.IOException exception) {
                    throw new java.lang.RuntimeException("The class file could not be written", exception);
                }
            }

            protected abstract org.objectweb.asm.ClassVisitor writeTo(org.objectweb.asm.ClassVisitor classVisitor, net.bytebuddy.dynamic.scaffold.TypeInitializer typeInitializer, net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.ContextRegistry contextRegistry, int writerFlags, int readerFlags);

            protected static class ContextRegistry {
                private net.bytebuddy.implementation.Implementation.Context.ExtractableView implementationContext;

                public void setImplementationContext(net.bytebuddy.implementation.Implementation.Context.ExtractableView implementationContext) {
                    this.implementationContext = implementationContext;
                }

                @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value = "UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR", justification = "Lazy value definition is intended")
                public java.util.List<net.bytebuddy.dynamic.DynamicType> getAuxiliaryTypes() {
                    return implementationContext.getAuxiliaryTypes();
                }
            }

            @net.bytebuddy.build.HashCodeAndEqualsPlugin.Enhance
            protected static class WithFullProcessing<V> extends net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining<V> {
                private final net.bytebuddy.dynamic.scaffold.MethodRegistry.Prepared methodRegistry;

                private final net.bytebuddy.implementation.Implementation.Target.Factory implementationTargetFactory;

                private final net.bytebuddy.dynamic.scaffold.inline.MethodRebaseResolver methodRebaseResolver;

                protected WithFullProcessing(net.bytebuddy.description.type.TypeDescription instrumentedType, net.bytebuddy.ClassFileVersion classFileVersion, net.bytebuddy.dynamic.scaffold.TypeWriter.FieldPool fieldPool, java.util.List<? extends net.bytebuddy.dynamic.DynamicType> auxiliaryTypes, net.bytebuddy.description.field.FieldList<net.bytebuddy.description.field.FieldDescription.InDefinedShape> fields, net.bytebuddy.description.method.MethodList<?> methods, net.bytebuddy.description.method.MethodList<?> instrumentedMethods, net.bytebuddy.implementation.LoadedTypeInitializer loadedTypeInitializer, net.bytebuddy.dynamic.scaffold.TypeInitializer typeInitializer, net.bytebuddy.implementation.attribute.TypeAttributeAppender typeAttributeAppender, net.bytebuddy.asm.AsmVisitorWrapper asmVisitorWrapper, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory, net.bytebuddy.implementation.attribute.AnnotationRetention annotationRetention, net.bytebuddy.implementation.auxiliary.AuxiliaryType.NamingStrategy auxiliaryTypeNamingStrategy, net.bytebuddy.implementation.Implementation.Context.Factory implementationContextFactory, net.bytebuddy.dynamic.scaffold.TypeValidation typeValidation, net.bytebuddy.dynamic.scaffold.ClassWriterStrategy classWriterStrategy, net.bytebuddy.pool.TypePool typePool, net.bytebuddy.description.type.TypeDescription originalType, net.bytebuddy.dynamic.ClassFileLocator classFileLocator, net.bytebuddy.dynamic.scaffold.MethodRegistry.Prepared methodRegistry, net.bytebuddy.implementation.Implementation.Target.Factory implementationTargetFactory, net.bytebuddy.dynamic.scaffold.inline.MethodRebaseResolver methodRebaseResolver) {
                    super(instrumentedType, classFileVersion, fieldPool, auxiliaryTypes, fields, methods, instrumentedMethods, loadedTypeInitializer, typeInitializer, typeAttributeAppender, asmVisitorWrapper, annotationValueFilterFactory, annotationRetention, auxiliaryTypeNamingStrategy, implementationContextFactory, typeValidation, classWriterStrategy, typePool, originalType, classFileLocator);
                    this.methodRegistry = methodRegistry;
                    this.implementationTargetFactory = implementationTargetFactory;
                    this.methodRebaseResolver = methodRebaseResolver;
                }

                protected org.objectweb.asm.ClassVisitor writeTo(org.objectweb.asm.ClassVisitor classVisitor, net.bytebuddy.dynamic.scaffold.TypeInitializer typeInitializer, net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.ContextRegistry contextRegistry, int writerFlags, int readerFlags) {
                    classVisitor = new RedefinitionClassVisitor(classVisitor, typeInitializer, contextRegistry, writerFlags, readerFlags);
                    return originalType.getName().equals(instrumentedType.getName()) ? classVisitor : new net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.OpenedClassRemapper(classVisitor, new org.objectweb.asm.commons.SimpleRemapper(originalType.getInternalName(), instrumentedType.getInternalName()));
                }

                protected static class OpenedClassRemapper extends org.objectweb.asm.commons.ClassRemapper {
                    protected OpenedClassRemapper(org.objectweb.asm.ClassVisitor classVisitor, org.objectweb.asm.commons.Remapper remapper) {
                        super(net.bytebuddy.utility.OpenedClassReader.ASM_API, classVisitor, remapper);
                    }
                }

                protected interface InitializationHandler {
                    void complete(org.objectweb.asm.ClassVisitor classVisitor, net.bytebuddy.implementation.Implementation.Context.ExtractableView implementationContext);

                    class Creating extends net.bytebuddy.dynamic.scaffold.TypeInitializer.Drain.Default implements net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler {
                        protected Creating(net.bytebuddy.description.type.TypeDescription instrumentedType, net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool methodPool, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory) {
                            super(instrumentedType, methodPool, annotationValueFilterFactory);
                        }

                        public void complete(org.objectweb.asm.ClassVisitor classVisitor, net.bytebuddy.implementation.Implementation.Context.ExtractableView implementationContext) {
                            implementationContext.drain(this, classVisitor, annotationValueFilterFactory);
                        }
                    }

                    abstract class Appending extends org.objectweb.asm.MethodVisitor implements net.bytebuddy.dynamic.scaffold.TypeInitializer.Drain , net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler {
                        protected final net.bytebuddy.description.type.TypeDescription instrumentedType;

                        protected final net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record record;

                        protected final net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory;

                        protected final net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler.Appending.FrameWriter frameWriter;

                        protected int stackSize;

                        protected int localVariableLength;

                        protected Appending(org.objectweb.asm.MethodVisitor methodVisitor, net.bytebuddy.description.type.TypeDescription instrumentedType, net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record record, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory, boolean requireFrames, boolean expandFrames) {
                            super(net.bytebuddy.utility.OpenedClassReader.ASM_API, methodVisitor);
                            this.instrumentedType = instrumentedType;
                            this.record = record;
                            this.annotationValueFilterFactory = annotationValueFilterFactory;
                            if (!requireFrames) {
                                frameWriter = net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler.Appending.FrameWriter.NoOp.INSTANCE;
                            }else
                                if (expandFrames) {
                                    frameWriter = net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler.Appending.FrameWriter.Expanding.INSTANCE;
                                }else {
                                    frameWriter = new net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler.Appending.FrameWriter.Active();
                                }

                        }

                        protected static net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler of(boolean enabled, org.objectweb.asm.MethodVisitor methodVisitor, net.bytebuddy.description.type.TypeDescription instrumentedType, net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool methodPool, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory, boolean requireFrames, boolean expandFrames) {
                            return enabled ? net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler.Appending.withDrain(methodVisitor, instrumentedType, methodPool, annotationValueFilterFactory, requireFrames, expandFrames) : net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler.Appending.withoutDrain(methodVisitor, instrumentedType, methodPool, annotationValueFilterFactory, requireFrames, expandFrames);
                        }

                        private static net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler.Appending.WithDrain withDrain(org.objectweb.asm.MethodVisitor methodVisitor, net.bytebuddy.description.type.TypeDescription instrumentedType, net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool methodPool, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory, boolean requireFrames, boolean expandFrames) {
                            net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record record = methodPool.target(new net.bytebuddy.description.method.MethodDescription.Latent.TypeInitializer(instrumentedType));
                            return record.getSort().isImplemented() ? new net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler.Appending.WithDrain.WithActiveRecord(methodVisitor, instrumentedType, record, annotationValueFilterFactory, requireFrames, expandFrames) : new net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler.Appending.WithDrain.WithoutActiveRecord(methodVisitor, instrumentedType, record, annotationValueFilterFactory, requireFrames, expandFrames);
                        }

                        private static net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler.Appending.WithoutDrain withoutDrain(org.objectweb.asm.MethodVisitor methodVisitor, net.bytebuddy.description.type.TypeDescription instrumentedType, net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool methodPool, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory, boolean requireFrames, boolean expandFrames) {
                            net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record record = methodPool.target(new net.bytebuddy.description.method.MethodDescription.Latent.TypeInitializer(instrumentedType));
                            return record.getSort().isImplemented() ? new net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler.Appending.WithoutDrain.WithActiveRecord(methodVisitor, instrumentedType, record, annotationValueFilterFactory, requireFrames, expandFrames) : new net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler.Appending.WithoutDrain.WithoutActiveRecord(methodVisitor, instrumentedType, record, annotationValueFilterFactory);
                        }

                        @java.lang.Override
                        public void visitCode() {
                            record.applyAttributes(mv, annotationValueFilterFactory);
                            super.visitCode();
                            onStart();
                        }

                        protected abstract void onStart();

                        @java.lang.Override
                        public void visitFrame(int type, int localVariableLength, java.lang.Object[] localVariable, int stackSize, java.lang.Object[] stack) {
                            super.visitFrame(type, localVariableLength, localVariable, stackSize, stack);
                            frameWriter.onFrame(type, localVariableLength);
                        }

                        @java.lang.Override
                        public void visitMaxs(int stackSize, int localVariableLength) {
                            this.stackSize = stackSize;
                            this.localVariableLength = localVariableLength;
                        }

                        @java.lang.Override
                        public abstract void visitEnd();

                        public void apply(org.objectweb.asm.ClassVisitor classVisitor, net.bytebuddy.dynamic.scaffold.TypeInitializer typeInitializer, net.bytebuddy.implementation.Implementation.Context implementationContext) {
                            net.bytebuddy.implementation.bytecode.ByteCodeAppender.Size size = typeInitializer.apply(mv, implementationContext, new net.bytebuddy.description.method.MethodDescription.Latent.TypeInitializer(instrumentedType));
                            stackSize = java.lang.Math.max(stackSize, size.getOperandStackSize());
                            localVariableLength = java.lang.Math.max(localVariableLength, size.getLocalVariableSize());
                            onComplete(implementationContext);
                        }

                        protected abstract void onComplete(net.bytebuddy.implementation.Implementation.Context implementationContext);

                        public void complete(org.objectweb.asm.ClassVisitor classVisitor, net.bytebuddy.implementation.Implementation.Context.ExtractableView implementationContext) {
                            implementationContext.drain(this, classVisitor, annotationValueFilterFactory);
                            mv.visitMaxs(stackSize, localVariableLength);
                            mv.visitEnd();
                        }

                        protected interface FrameWriter {
                            java.lang.Object[] EMPTY = new java.lang.Object[0];

                            void onFrame(int type, int localVariableLength);

                            void emitFrame(org.objectweb.asm.MethodVisitor methodVisitor);

                            enum NoOp implements net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler.Appending.FrameWriter {

                                INSTANCE;
                                public void onFrame(int type, int localVariableLength) {
                                }

                                public void emitFrame(org.objectweb.asm.MethodVisitor methodVisitor) {
                                }
                            }

                            enum Expanding implements net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler.Appending.FrameWriter {

                                INSTANCE;
                                public void onFrame(int type, int localVariableLength) {
                                }

                                public void emitFrame(org.objectweb.asm.MethodVisitor methodVisitor) {
                                    methodVisitor.visitFrame(org.objectweb.asm.Opcodes.F_NEW, net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler.Appending.FrameWriter.Expanding.EMPTY.length, net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler.Appending.FrameWriter.EMPTY, net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler.Appending.FrameWriter.Expanding.EMPTY.length, net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler.Appending.FrameWriter.EMPTY);
                                }
                            }

                            class Active implements net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler.Appending.FrameWriter {
                                private int currentLocalVariableLength;

                                public void onFrame(int type, int localVariableLength) {
                                    switch (type) {
                                        case org.objectweb.asm.Opcodes.F_SAME :
                                        case org.objectweb.asm.Opcodes.F_SAME1 :
                                            break;
                                        case org.objectweb.asm.Opcodes.F_APPEND :
                                            currentLocalVariableLength += localVariableLength;
                                            break;
                                        case org.objectweb.asm.Opcodes.F_CHOP :
                                            currentLocalVariableLength -= localVariableLength;
                                            break;
                                        case org.objectweb.asm.Opcodes.F_NEW :
                                        case org.objectweb.asm.Opcodes.F_FULL :
                                            currentLocalVariableLength = localVariableLength;
                                            break;
                                        default :
                                            throw new java.lang.IllegalStateException(("Unexpected frame type: " + type));
                                    }
                                }

                                public void emitFrame(org.objectweb.asm.MethodVisitor methodVisitor) {
                                    if ((currentLocalVariableLength) == 0) {
                                        methodVisitor.visitFrame(org.objectweb.asm.Opcodes.F_SAME, net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler.Appending.FrameWriter.Active.EMPTY.length, net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler.Appending.FrameWriter.EMPTY, net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler.Appending.FrameWriter.Active.EMPTY.length, net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler.Appending.FrameWriter.EMPTY);
                                    }else
                                        if ((currentLocalVariableLength) > 3) {
                                            methodVisitor.visitFrame(org.objectweb.asm.Opcodes.F_FULL, net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler.Appending.FrameWriter.Active.EMPTY.length, net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler.Appending.FrameWriter.EMPTY, net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler.Appending.FrameWriter.Active.EMPTY.length, net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler.Appending.FrameWriter.EMPTY);
                                        }else {
                                            methodVisitor.visitFrame(org.objectweb.asm.Opcodes.F_CHOP, currentLocalVariableLength, net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler.Appending.FrameWriter.EMPTY, net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler.Appending.FrameWriter.Active.EMPTY.length, net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler.Appending.FrameWriter.EMPTY);
                                        }

                                    currentLocalVariableLength = 0;
                                }
                            }
                        }

                        protected abstract static class WithoutDrain extends net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler.Appending {
                            protected WithoutDrain(org.objectweb.asm.MethodVisitor methodVisitor, net.bytebuddy.description.type.TypeDescription instrumentedType, net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record record, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory, boolean requireFrames, boolean expandFrames) {
                                super(methodVisitor, instrumentedType, record, annotationValueFilterFactory, requireFrames, expandFrames);
                            }

                            @java.lang.Override
                            protected void onStart() {
                            }

                            @java.lang.Override
                            public void visitEnd() {
                            }

                            protected static class WithoutActiveRecord extends net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler.Appending.WithoutDrain {
                                protected WithoutActiveRecord(org.objectweb.asm.MethodVisitor methodVisitor, net.bytebuddy.description.type.TypeDescription instrumentedType, net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record record, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory) {
                                    super(methodVisitor, instrumentedType, record, annotationValueFilterFactory, false, false);
                                }

                                @java.lang.Override
                                protected void onComplete(net.bytebuddy.implementation.Implementation.Context implementationContext) {
                                }
                            }

                            protected static class WithActiveRecord extends net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler.Appending.WithoutDrain {
                                private final org.objectweb.asm.Label label;

                                protected WithActiveRecord(org.objectweb.asm.MethodVisitor methodVisitor, net.bytebuddy.description.type.TypeDescription instrumentedType, net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record record, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory, boolean requireFrames, boolean expandFrames) {
                                    super(methodVisitor, instrumentedType, record, annotationValueFilterFactory, requireFrames, expandFrames);
                                    label = new org.objectweb.asm.Label();
                                }

                                @java.lang.Override
                                public void visitInsn(int opcode) {
                                    if (opcode == (org.objectweb.asm.Opcodes.RETURN)) {
                                        mv.visitJumpInsn(org.objectweb.asm.Opcodes.GOTO, label);
                                    }else {
                                        super.visitInsn(opcode);
                                    }
                                }

                                @java.lang.Override
                                protected void onComplete(net.bytebuddy.implementation.Implementation.Context implementationContext) {
                                    mv.visitLabel(label);
                                    frameWriter.emitFrame(mv);
                                    net.bytebuddy.implementation.bytecode.ByteCodeAppender.Size size = record.applyCode(mv, implementationContext);
                                    stackSize = java.lang.Math.max(stackSize, size.getOperandStackSize());
                                    localVariableLength = java.lang.Math.max(localVariableLength, size.getLocalVariableSize());
                                }
                            }
                        }

                        protected abstract static class WithDrain extends net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler.Appending {
                            protected final org.objectweb.asm.Label appended;

                            protected final org.objectweb.asm.Label original;

                            protected WithDrain(org.objectweb.asm.MethodVisitor methodVisitor, net.bytebuddy.description.type.TypeDescription instrumentedType, net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record record, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory, boolean requireFrames, boolean expandFrames) {
                                super(methodVisitor, instrumentedType, record, annotationValueFilterFactory, requireFrames, expandFrames);
                                appended = new org.objectweb.asm.Label();
                                original = new org.objectweb.asm.Label();
                            }

                            @java.lang.Override
                            protected void onStart() {
                                mv.visitJumpInsn(org.objectweb.asm.Opcodes.GOTO, appended);
                                mv.visitLabel(original);
                                frameWriter.emitFrame(mv);
                            }

                            @java.lang.Override
                            public void visitEnd() {
                                mv.visitLabel(appended);
                                frameWriter.emitFrame(mv);
                            }

                            @java.lang.Override
                            protected void onComplete(net.bytebuddy.implementation.Implementation.Context implementationContext) {
                                mv.visitJumpInsn(org.objectweb.asm.Opcodes.GOTO, original);
                                onAfterComplete(implementationContext);
                            }

                            protected abstract void onAfterComplete(net.bytebuddy.implementation.Implementation.Context implementationContext);

                            protected static class WithoutActiveRecord extends net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler.Appending.WithDrain {
                                protected WithoutActiveRecord(org.objectweb.asm.MethodVisitor methodVisitor, net.bytebuddy.description.type.TypeDescription instrumentedType, net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record record, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory, boolean requireFrames, boolean expandFrames) {
                                    super(methodVisitor, instrumentedType, record, annotationValueFilterFactory, requireFrames, expandFrames);
                                }

                                @java.lang.Override
                                protected void onAfterComplete(net.bytebuddy.implementation.Implementation.Context implementationContext) {
                                }
                            }

                            protected static class WithActiveRecord extends net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler.Appending.WithDrain {
                                private final org.objectweb.asm.Label label;

                                protected WithActiveRecord(org.objectweb.asm.MethodVisitor methodVisitor, net.bytebuddy.description.type.TypeDescription instrumentedType, net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record record, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory, boolean requireFrames, boolean expandFrames) {
                                    super(methodVisitor, instrumentedType, record, annotationValueFilterFactory, requireFrames, expandFrames);
                                    label = new org.objectweb.asm.Label();
                                }

                                @java.lang.Override
                                public void visitInsn(int opcode) {
                                    if (opcode == (org.objectweb.asm.Opcodes.RETURN)) {
                                        mv.visitJumpInsn(org.objectweb.asm.Opcodes.GOTO, label);
                                    }else {
                                        super.visitInsn(opcode);
                                    }
                                }

                                @java.lang.Override
                                protected void onAfterComplete(net.bytebuddy.implementation.Implementation.Context implementationContext) {
                                    mv.visitLabel(label);
                                    frameWriter.emitFrame(mv);
                                    net.bytebuddy.implementation.bytecode.ByteCodeAppender.Size size = record.applyCode(mv, implementationContext);
                                    stackSize = java.lang.Math.max(stackSize, size.getOperandStackSize());
                                    localVariableLength = java.lang.Math.max(localVariableLength, size.getLocalVariableSize());
                                }
                            }
                        }
                    }
                }

                @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value = "UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR", justification = "Field access order is implied by ASM")
                protected class RedefinitionClassVisitor extends net.bytebuddy.utility.visitor.MetadataAwareClassVisitor {
                    private final net.bytebuddy.dynamic.scaffold.TypeInitializer typeInitializer;

                    private final net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.ContextRegistry contextRegistry;

                    private final int writerFlags;

                    private final int readerFlags;

                    private final java.util.LinkedHashMap<java.lang.String, net.bytebuddy.description.field.FieldDescription> declarableFields;

                    private final java.util.LinkedHashMap<java.lang.String, net.bytebuddy.description.method.MethodDescription> declarableMethods;

                    private final java.util.Set<java.lang.String> nestMembers;

                    private final java.util.LinkedHashMap<java.lang.String, net.bytebuddy.description.type.TypeDescription> declaredTypes;

                    private net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool methodPool;

                    private net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler initializationHandler;

                    private net.bytebuddy.implementation.Implementation.Context.ExtractableView implementationContext;

                    private boolean retainDeprecationModifiers;

                    protected RedefinitionClassVisitor(org.objectweb.asm.ClassVisitor classVisitor, net.bytebuddy.dynamic.scaffold.TypeInitializer typeInitializer, net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.ContextRegistry contextRegistry, int writerFlags, int readerFlags) {
                        super(net.bytebuddy.utility.OpenedClassReader.ASM_API, classVisitor);
                        this.typeInitializer = typeInitializer;
                        this.contextRegistry = contextRegistry;
                        this.writerFlags = writerFlags;
                        this.readerFlags = readerFlags;
                        declarableFields = new java.util.LinkedHashMap<java.lang.String, net.bytebuddy.description.field.FieldDescription>();
                        for (net.bytebuddy.description.field.FieldDescription fieldDescription : fields) {
                            declarableFields.put(((fieldDescription.getInternalName()) + (fieldDescription.getDescriptor())), fieldDescription);
                        }
                        declarableMethods = new java.util.LinkedHashMap<java.lang.String, net.bytebuddy.description.method.MethodDescription>();
                        for (net.bytebuddy.description.method.MethodDescription methodDescription : instrumentedMethods) {
                            declarableMethods.put(((methodDescription.getInternalName()) + (methodDescription.getDescriptor())), methodDescription);
                        }
                        if (instrumentedType.isNestHost()) {
                            nestMembers = new java.util.LinkedHashSet<java.lang.String>();
                            for (net.bytebuddy.description.type.TypeDescription typeDescription : instrumentedType.getNestMembers().filter(net.bytebuddy.matcher.ElementMatchers.not(net.bytebuddy.matcher.ElementMatchers.is(instrumentedType)))) {
                                nestMembers.add(typeDescription.getInternalName());
                            }
                        }else {
                            nestMembers = java.util.Collections.emptySet();
                        }
                        declaredTypes = new java.util.LinkedHashMap<java.lang.String, net.bytebuddy.description.type.TypeDescription>();
                        for (net.bytebuddy.description.type.TypeDescription typeDescription : instrumentedType.getDeclaredTypes()) {
                            declaredTypes.put(typeDescription.getInternalName(), typeDescription);
                        }
                    }

                    @java.lang.Override
                    public void visit(int classFileVersionNumber, int modifiers, java.lang.String internalName, java.lang.String genericSignature, java.lang.String superClassInternalName, java.lang.String[] interfaceTypeInternalName) {
                        net.bytebuddy.ClassFileVersion classFileVersion = net.bytebuddy.ClassFileVersion.ofMinorMajor(classFileVersionNumber);
                        methodPool = methodRegistry.compile(implementationTargetFactory, classFileVersion);
                        initializationHandler = new net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler.Creating(instrumentedType, methodPool, annotationValueFilterFactory);
                        implementationContext = implementationContextFactory.make(instrumentedType, auxiliaryTypeNamingStrategy, typeInitializer, classFileVersion, net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.this.classFileVersion);
                        retainDeprecationModifiers = classFileVersion.isLessThan(net.bytebuddy.ClassFileVersion.JAVA_V5);
                        contextRegistry.setImplementationContext(implementationContext);
                        cv = asmVisitorWrapper.wrap(instrumentedType, cv, implementationContext, typePool, fields, methods, writerFlags, readerFlags);
                        cv.visit(classFileVersionNumber, (((instrumentedType.getActualModifiers((((modifiers & (org.objectweb.asm.Opcodes.ACC_SUPER)) != 0) && (!(instrumentedType.isInterface()))))) | (resolveDeprecationModifiers(modifiers))) | (((modifiers & (org.objectweb.asm.Opcodes.ACC_FINAL)) != 0) && (instrumentedType.isAnonymousType()) ? org.objectweb.asm.Opcodes.ACC_FINAL : 0)), instrumentedType.getInternalName(), (net.bytebuddy.description.type.TypeDescription.AbstractBase.RAW_TYPES ? genericSignature : instrumentedType.getGenericSignature()), ((instrumentedType.getSuperClass()) == null ? instrumentedType.isInterface() ? net.bytebuddy.description.type.TypeDescription.OBJECT.getInternalName() : net.bytebuddy.dynamic.scaffold.TypeWriter.Default.NO_REFERENCE : instrumentedType.getSuperClass().asErasure().getInternalName()), instrumentedType.getInterfaces().asErasures().toInternalNames());
                    }

                    @java.lang.Override
                    protected void onVisitNestHost(java.lang.String nestHost) {
                        onNestHost();
                    }

                    @java.lang.Override
                    protected void onNestHost() {
                        if (!(instrumentedType.isNestHost())) {
                            cv.visitNestHost(instrumentedType.getNestHost().getInternalName());
                        }
                    }

                    @java.lang.Override
                    protected void onVisitOuterClass(java.lang.String owner, java.lang.String name, java.lang.String descriptor) {
                        try {
                            onOuterType();
                        } catch (java.lang.Throwable ignored) {
                            cv.visitOuterClass(owner, name, descriptor);
                        }
                    }

                    @java.lang.Override
                    protected void onOuterType() {
                        net.bytebuddy.description.method.MethodDescription.InDefinedShape enclosingMethod = instrumentedType.getEnclosingMethod();
                        if (enclosingMethod != null) {
                            cv.visitOuterClass(enclosingMethod.getDeclaringType().getInternalName(), enclosingMethod.getInternalName(), enclosingMethod.getDescriptor());
                        }else
                            if ((instrumentedType.isLocalType()) || (instrumentedType.isAnonymousType())) {
                                cv.visitOuterClass(instrumentedType.getEnclosingType().getInternalName(), net.bytebuddy.dynamic.scaffold.TypeWriter.Default.NO_REFERENCE, net.bytebuddy.dynamic.scaffold.TypeWriter.Default.NO_REFERENCE);
                            }

                    }

                    @java.lang.Override
                    protected void onAfterAttributes() {
                        typeAttributeAppender.apply(cv, instrumentedType, annotationValueFilterFactory.on(instrumentedType));
                    }

                    @java.lang.Override
                    protected org.objectweb.asm.AnnotationVisitor onVisitTypeAnnotation(int typeReference, org.objectweb.asm.TypePath typePath, java.lang.String descriptor, boolean visible) {
                        return annotationRetention.isEnabled() ? cv.visitTypeAnnotation(typeReference, typePath, descriptor, visible) : net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.IGNORE_ANNOTATION;
                    }

                    @java.lang.Override
                    protected org.objectweb.asm.AnnotationVisitor onVisitAnnotation(java.lang.String descriptor, boolean visible) {
                        return annotationRetention.isEnabled() ? cv.visitAnnotation(descriptor, visible) : net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.IGNORE_ANNOTATION;
                    }

                    @java.lang.Override
                    protected org.objectweb.asm.FieldVisitor onVisitField(int modifiers, java.lang.String internalName, java.lang.String descriptor, java.lang.String genericSignature, java.lang.Object defaultValue) {
                        net.bytebuddy.description.field.FieldDescription fieldDescription = declarableFields.remove((internalName + descriptor));
                        if (fieldDescription != null) {
                            net.bytebuddy.dynamic.scaffold.TypeWriter.FieldPool.Record record = fieldPool.target(fieldDescription);
                            if (!(record.isImplicit())) {
                                return redefine(record, defaultValue, modifiers, genericSignature);
                            }
                        }
                        return cv.visitField(modifiers, internalName, descriptor, genericSignature, defaultValue);
                    }

                    protected org.objectweb.asm.FieldVisitor redefine(net.bytebuddy.dynamic.scaffold.TypeWriter.FieldPool.Record record, java.lang.Object defaultValue, int modifiers, java.lang.String genericSignature) {
                        net.bytebuddy.description.field.FieldDescription instrumentedField = record.getField();
                        org.objectweb.asm.FieldVisitor fieldVisitor = cv.visitField(((instrumentedField.getActualModifiers()) | (resolveDeprecationModifiers(modifiers))), instrumentedField.getInternalName(), instrumentedField.getDescriptor(), (net.bytebuddy.description.type.TypeDescription.AbstractBase.RAW_TYPES ? genericSignature : instrumentedField.getGenericSignature()), record.resolveDefault(defaultValue));
                        return fieldVisitor == null ? net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.IGNORE_FIELD : new AttributeObtainingFieldVisitor(fieldVisitor, record);
                    }

                    @java.lang.Override
                    protected org.objectweb.asm.MethodVisitor onVisitMethod(int modifiers, java.lang.String internalName, java.lang.String descriptor, java.lang.String genericSignature, java.lang.String[] exceptionName) {
                        if (internalName.equals(net.bytebuddy.description.method.MethodDescription.TYPE_INITIALIZER_INTERNAL_NAME)) {
                            org.objectweb.asm.MethodVisitor methodVisitor = cv.visitMethod(modifiers, internalName, descriptor, genericSignature, exceptionName);
                            return methodVisitor == null ? net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.IGNORE_METHOD : (((org.objectweb.asm.MethodVisitor) (initializationHandler = net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithFullProcessing.InitializationHandler.Appending.of(implementationContext.isEnabled(), methodVisitor, instrumentedType, methodPool, annotationValueFilterFactory, ((((writerFlags) & (org.objectweb.asm.ClassWriter.COMPUTE_FRAMES)) == 0) && (implementationContext.getClassFileVersion().isAtLeast(net.bytebuddy.ClassFileVersion.JAVA_V6))), (((readerFlags) & (org.objectweb.asm.ClassReader.EXPAND_FRAMES)) != 0)))));
                        }else {
                            net.bytebuddy.description.method.MethodDescription methodDescription = declarableMethods.remove((internalName + descriptor));
                            return methodDescription == null ? cv.visitMethod(modifiers, internalName, descriptor, genericSignature, exceptionName) : redefine(methodDescription, ((modifiers & (org.objectweb.asm.Opcodes.ACC_ABSTRACT)) != 0), modifiers, genericSignature);
                        }
                    }

                    protected org.objectweb.asm.MethodVisitor redefine(net.bytebuddy.description.method.MethodDescription methodDescription, boolean abstractOrigin, int modifiers, java.lang.String genericSignature) {
                        net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record record = methodPool.target(methodDescription);
                        if (!(record.getSort().isDefined())) {
                            return cv.visitMethod(((methodDescription.getActualModifiers()) | (resolveDeprecationModifiers(modifiers))), methodDescription.getInternalName(), methodDescription.getDescriptor(), (net.bytebuddy.description.type.TypeDescription.AbstractBase.RAW_TYPES ? genericSignature : methodDescription.getGenericSignature()), methodDescription.getExceptionTypes().asErasures().toInternalNames());
                        }
                        net.bytebuddy.description.method.MethodDescription implementedMethod = record.getMethod();
                        org.objectweb.asm.MethodVisitor methodVisitor = cv.visitMethod(((net.bytebuddy.description.modifier.ModifierContributor.Resolver.of(java.util.Collections.singleton(record.getVisibility())).resolve(implementedMethod.getActualModifiers(record.getSort().isImplemented()))) | (resolveDeprecationModifiers(modifiers))), implementedMethod.getInternalName(), implementedMethod.getDescriptor(), (net.bytebuddy.description.type.TypeDescription.AbstractBase.RAW_TYPES ? genericSignature : implementedMethod.getGenericSignature()), implementedMethod.getExceptionTypes().asErasures().toInternalNames());
                        if (methodVisitor == null) {
                            return net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.IGNORE_METHOD;
                        }else
                            if (abstractOrigin) {
                                return new AttributeObtainingMethodVisitor(methodVisitor, record);
                            }else
                                if (methodDescription.isNative()) {
                                    net.bytebuddy.dynamic.scaffold.inline.MethodRebaseResolver.Resolution resolution = methodRebaseResolver.resolve(implementedMethod.asDefined());
                                    if (resolution.isRebased()) {
                                        org.objectweb.asm.MethodVisitor rebasedMethodVisitor = super.visitMethod(((resolution.getResolvedMethod().getActualModifiers()) | (resolveDeprecationModifiers(modifiers))), resolution.getResolvedMethod().getInternalName(), resolution.getResolvedMethod().getDescriptor(), (net.bytebuddy.description.type.TypeDescription.AbstractBase.RAW_TYPES ? genericSignature : implementedMethod.getGenericSignature()), resolution.getResolvedMethod().getExceptionTypes().asErasures().toInternalNames());
                                        if (rebasedMethodVisitor != null) {
                                            rebasedMethodVisitor.visitEnd();
                                        }
                                    }
                                    return new AttributeObtainingMethodVisitor(methodVisitor, record);
                                }else {
                                    return new CodePreservingMethodVisitor(methodVisitor, record, methodRebaseResolver.resolve(implementedMethod.asDefined()));
                                }


                    }

                    @java.lang.Override
                    protected void onVisitInnerClass(java.lang.String internalName, java.lang.String outerName, java.lang.String innerName, int modifiers) {
                        if (!(internalName.equals(instrumentedType.getInternalName()))) {
                            net.bytebuddy.description.type.TypeDescription declaredType = declaredTypes.remove(internalName);
                            if (declaredType == null) {
                                cv.visitInnerClass(internalName, outerName, innerName, modifiers);
                            }else {
                                cv.visitInnerClass(internalName, ((declaredType.isMemberType()) || (((outerName != null) && (innerName == null)) && (declaredType.isAnonymousType())) ? instrumentedType.getInternalName() : net.bytebuddy.dynamic.scaffold.TypeWriter.Default.NO_REFERENCE), (declaredType.isAnonymousType() ? net.bytebuddy.dynamic.scaffold.TypeWriter.Default.NO_REFERENCE : declaredType.getSimpleName()), declaredType.getModifiers());
                            }
                        }
                    }

                    @java.lang.Override
                    protected void onVisitNestMember(java.lang.String nestMember) {
                        if ((instrumentedType.isNestHost()) && (nestMembers.remove(nestMember))) {
                            cv.visitNestMember(nestMember);
                        }
                    }

                    @java.lang.Override
                    protected void onVisitEnd() {
                        for (net.bytebuddy.description.field.FieldDescription fieldDescription : declarableFields.values()) {
                            fieldPool.target(fieldDescription).apply(cv, annotationValueFilterFactory);
                        }
                        for (net.bytebuddy.description.method.MethodDescription methodDescription : declarableMethods.values()) {
                            methodPool.target(methodDescription).apply(cv, implementationContext, annotationValueFilterFactory);
                        }
                        initializationHandler.complete(cv, implementationContext);
                        net.bytebuddy.description.type.TypeDescription declaringType = instrumentedType.getDeclaringType();
                        if (declaringType != null) {
                            cv.visitInnerClass(instrumentedType.getInternalName(), declaringType.getInternalName(), instrumentedType.getSimpleName(), instrumentedType.getModifiers());
                        }else
                            if (instrumentedType.isLocalType()) {
                                cv.visitInnerClass(instrumentedType.getInternalName(), net.bytebuddy.dynamic.scaffold.TypeWriter.Default.NO_REFERENCE, instrumentedType.getSimpleName(), instrumentedType.getModifiers());
                            }else
                                if (instrumentedType.isAnonymousType()) {
                                    cv.visitInnerClass(instrumentedType.getInternalName(), net.bytebuddy.dynamic.scaffold.TypeWriter.Default.NO_REFERENCE, net.bytebuddy.dynamic.scaffold.TypeWriter.Default.NO_REFERENCE, instrumentedType.getModifiers());
                                }


                        for (net.bytebuddy.description.type.TypeDescription typeDescription : declaredTypes.values()) {
                            cv.visitInnerClass(typeDescription.getInternalName(), (typeDescription.isMemberType() ? instrumentedType.getInternalName() : net.bytebuddy.dynamic.scaffold.TypeWriter.Default.NO_REFERENCE), (typeDescription.isAnonymousType() ? net.bytebuddy.dynamic.scaffold.TypeWriter.Default.NO_REFERENCE : typeDescription.getSimpleName()), typeDescription.getModifiers());
                        }
                        cv.visitEnd();
                    }

                    private int resolveDeprecationModifiers(int modifiers) {
                        return (retainDeprecationModifiers) && ((modifiers & (org.objectweb.asm.Opcodes.ACC_DEPRECATED)) != 0) ? org.objectweb.asm.Opcodes.ACC_DEPRECATED : net.bytebuddy.description.modifier.ModifierContributor.EMPTY_MASK;
                    }

                    protected class AttributeObtainingFieldVisitor extends org.objectweb.asm.FieldVisitor {
                        private final net.bytebuddy.dynamic.scaffold.TypeWriter.FieldPool.Record record;

                        protected AttributeObtainingFieldVisitor(org.objectweb.asm.FieldVisitor fieldVisitor, net.bytebuddy.dynamic.scaffold.TypeWriter.FieldPool.Record record) {
                            super(net.bytebuddy.utility.OpenedClassReader.ASM_API, fieldVisitor);
                            this.record = record;
                        }

                        @java.lang.Override
                        public org.objectweb.asm.AnnotationVisitor visitTypeAnnotation(int typeReference, org.objectweb.asm.TypePath typePath, java.lang.String descriptor, boolean visible) {
                            return annotationRetention.isEnabled() ? super.visitTypeAnnotation(typeReference, typePath, descriptor, visible) : net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.IGNORE_ANNOTATION;
                        }

                        @java.lang.Override
                        public org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String descriptor, boolean visible) {
                            return annotationRetention.isEnabled() ? super.visitAnnotation(descriptor, visible) : net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.IGNORE_ANNOTATION;
                        }

                        @java.lang.Override
                        public void visitEnd() {
                            record.apply(fv, annotationValueFilterFactory);
                            super.visitEnd();
                        }
                    }

                    protected class CodePreservingMethodVisitor extends org.objectweb.asm.MethodVisitor {
                        private final org.objectweb.asm.MethodVisitor actualMethodVisitor;

                        private final net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record record;

                        private final net.bytebuddy.dynamic.scaffold.inline.MethodRebaseResolver.Resolution resolution;

                        protected CodePreservingMethodVisitor(org.objectweb.asm.MethodVisitor actualMethodVisitor, net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record record, net.bytebuddy.dynamic.scaffold.inline.MethodRebaseResolver.Resolution resolution) {
                            super(net.bytebuddy.utility.OpenedClassReader.ASM_API, actualMethodVisitor);
                            this.actualMethodVisitor = actualMethodVisitor;
                            this.record = record;
                            this.resolution = resolution;
                            record.applyHead(actualMethodVisitor);
                        }

                        @java.lang.Override
                        public org.objectweb.asm.AnnotationVisitor visitAnnotationDefault() {
                            return net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.IGNORE_ANNOTATION;
                        }

                        @java.lang.Override
                        public org.objectweb.asm.AnnotationVisitor visitTypeAnnotation(int typeReference, org.objectweb.asm.TypePath typePath, java.lang.String descriptor, boolean visible) {
                            return annotationRetention.isEnabled() ? super.visitTypeAnnotation(typeReference, typePath, descriptor, visible) : net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.IGNORE_ANNOTATION;
                        }

                        @java.lang.Override
                        public org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String descriptor, boolean visible) {
                            return annotationRetention.isEnabled() ? super.visitAnnotation(descriptor, visible) : net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.IGNORE_ANNOTATION;
                        }

                        @java.lang.Override
                        public void visitAnnotableParameterCount(int count, boolean visible) {
                            if (annotationRetention.isEnabled()) {
                                super.visitAnnotableParameterCount(count, visible);
                            }
                        }

                        @java.lang.Override
                        public org.objectweb.asm.AnnotationVisitor visitParameterAnnotation(int index, java.lang.String descriptor, boolean visible) {
                            return annotationRetention.isEnabled() ? super.visitParameterAnnotation(index, descriptor, visible) : net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.IGNORE_ANNOTATION;
                        }

                        @java.lang.Override
                        public void visitCode() {
                            record.applyBody(actualMethodVisitor, implementationContext, annotationValueFilterFactory);
                            actualMethodVisitor.visitEnd();
                            mv = (resolution.isRebased()) ? cv.visitMethod(resolution.getResolvedMethod().getActualModifiers(), resolution.getResolvedMethod().getInternalName(), resolution.getResolvedMethod().getDescriptor(), resolution.getResolvedMethod().getGenericSignature(), resolution.getResolvedMethod().getExceptionTypes().asErasures().toInternalNames()) : net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.IGNORE_METHOD;
                            super.visitCode();
                        }

                        @java.lang.Override
                        public void visitMaxs(int stackSize, int localVariableLength) {
                            super.visitMaxs(stackSize, java.lang.Math.max(localVariableLength, resolution.getResolvedMethod().getStackSize()));
                        }
                    }

                    protected class AttributeObtainingMethodVisitor extends org.objectweb.asm.MethodVisitor {
                        private final org.objectweb.asm.MethodVisitor actualMethodVisitor;

                        private final net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record record;

                        protected AttributeObtainingMethodVisitor(org.objectweb.asm.MethodVisitor actualMethodVisitor, net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool.Record record) {
                            super(net.bytebuddy.utility.OpenedClassReader.ASM_API, actualMethodVisitor);
                            this.actualMethodVisitor = actualMethodVisitor;
                            this.record = record;
                            record.applyHead(actualMethodVisitor);
                        }

                        @java.lang.Override
                        public org.objectweb.asm.AnnotationVisitor visitAnnotationDefault() {
                            return net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.IGNORE_ANNOTATION;
                        }

                        @java.lang.Override
                        public org.objectweb.asm.AnnotationVisitor visitTypeAnnotation(int typeReference, org.objectweb.asm.TypePath typePath, java.lang.String descriptor, boolean visible) {
                            return annotationRetention.isEnabled() ? super.visitTypeAnnotation(typeReference, typePath, descriptor, visible) : net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.IGNORE_ANNOTATION;
                        }

                        @java.lang.Override
                        public org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String descriptor, boolean visible) {
                            return annotationRetention.isEnabled() ? super.visitAnnotation(descriptor, visible) : net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.IGNORE_ANNOTATION;
                        }

                        @java.lang.Override
                        public void visitAnnotableParameterCount(int count, boolean visible) {
                            if (annotationRetention.isEnabled()) {
                                super.visitAnnotableParameterCount(count, visible);
                            }
                        }

                        @java.lang.Override
                        public org.objectweb.asm.AnnotationVisitor visitParameterAnnotation(int index, java.lang.String descriptor, boolean visible) {
                            return annotationRetention.isEnabled() ? super.visitParameterAnnotation(index, descriptor, visible) : net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.IGNORE_ANNOTATION;
                        }

                        @java.lang.Override
                        public void visitCode() {
                            mv = net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.IGNORE_METHOD;
                        }

                        @java.lang.Override
                        public void visitEnd() {
                            record.applyBody(actualMethodVisitor, implementationContext, annotationValueFilterFactory);
                            actualMethodVisitor.visitEnd();
                        }
                    }
                }
            }

            protected static class WithDecorationOnly<V> extends net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining<V> {
                protected WithDecorationOnly(net.bytebuddy.description.type.TypeDescription instrumentedType, net.bytebuddy.ClassFileVersion classFileVersion, java.util.List<? extends net.bytebuddy.dynamic.DynamicType> auxiliaryTypes, net.bytebuddy.description.method.MethodList<?> methods, net.bytebuddy.implementation.attribute.TypeAttributeAppender typeAttributeAppender, net.bytebuddy.asm.AsmVisitorWrapper asmVisitorWrapper, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory, net.bytebuddy.implementation.attribute.AnnotationRetention annotationRetention, net.bytebuddy.implementation.auxiliary.AuxiliaryType.NamingStrategy auxiliaryTypeNamingStrategy, net.bytebuddy.implementation.Implementation.Context.Factory implementationContextFactory, net.bytebuddy.dynamic.scaffold.TypeValidation typeValidation, net.bytebuddy.dynamic.scaffold.ClassWriterStrategy classWriterStrategy, net.bytebuddy.pool.TypePool typePool, net.bytebuddy.dynamic.ClassFileLocator classFileLocator) {
                    super(instrumentedType, classFileVersion, net.bytebuddy.dynamic.scaffold.TypeWriter.FieldPool.Disabled.INSTANCE, auxiliaryTypes, new net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithDecorationOnly.LazyFieldList(instrumentedType), methods, new net.bytebuddy.description.method.MethodList.Empty<net.bytebuddy.description.method.MethodDescription>(), net.bytebuddy.implementation.LoadedTypeInitializer.NoOp.INSTANCE, net.bytebuddy.dynamic.scaffold.TypeInitializer.None.INSTANCE, typeAttributeAppender, asmVisitorWrapper, annotationValueFilterFactory, annotationRetention, auxiliaryTypeNamingStrategy, implementationContextFactory, typeValidation, classWriterStrategy, typePool, instrumentedType, classFileLocator);
                }

                protected org.objectweb.asm.ClassVisitor writeTo(org.objectweb.asm.ClassVisitor classVisitor, net.bytebuddy.dynamic.scaffold.TypeInitializer typeInitializer, net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.ContextRegistry contextRegistry, int writerFlags, int readerFlags) {
                    if (typeInitializer.isDefined()) {
                        throw new java.lang.UnsupportedOperationException("Cannot apply a type initializer for a decoration");
                    }
                    return new DecorationClassVisitor(classVisitor, contextRegistry, writerFlags, readerFlags);
                }

                protected static class LazyFieldList extends net.bytebuddy.description.field.FieldList.AbstractBase<net.bytebuddy.description.field.FieldDescription.InDefinedShape> {
                    private final net.bytebuddy.description.type.TypeDescription instrumentedType;

                    protected LazyFieldList(net.bytebuddy.description.type.TypeDescription instrumentedType) {
                        this.instrumentedType = instrumentedType;
                    }

                    public net.bytebuddy.description.field.FieldDescription.InDefinedShape get(int index) {
                        return instrumentedType.getDeclaredFields().get(index);
                    }

                    public int size() {
                        return instrumentedType.getDeclaredFields().size();
                    }
                }

                @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value = "UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR", justification = "Field access order is implied by ASM")
                protected class DecorationClassVisitor extends net.bytebuddy.utility.visitor.MetadataAwareClassVisitor implements net.bytebuddy.dynamic.scaffold.TypeInitializer.Drain {
                    private final net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.ContextRegistry contextRegistry;

                    private final int writerFlags;

                    private final int readerFlags;

                    private net.bytebuddy.implementation.Implementation.Context.ExtractableView implementationContext;

                    protected DecorationClassVisitor(org.objectweb.asm.ClassVisitor classVisitor, net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.ContextRegistry contextRegistry, int writerFlags, int readerFlags) {
                        super(net.bytebuddy.utility.OpenedClassReader.ASM_API, classVisitor);
                        this.contextRegistry = contextRegistry;
                        this.writerFlags = writerFlags;
                        this.readerFlags = readerFlags;
                    }

                    @java.lang.Override
                    public void visit(int classFileVersionNumber, int modifiers, java.lang.String internalName, java.lang.String genericSignature, java.lang.String superClassInternalName, java.lang.String[] interfaceTypeInternalName) {
                        net.bytebuddy.ClassFileVersion classFileVersion = net.bytebuddy.ClassFileVersion.ofMinorMajor(classFileVersionNumber);
                        implementationContext = implementationContextFactory.make(instrumentedType, auxiliaryTypeNamingStrategy, typeInitializer, classFileVersion, net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.WithDecorationOnly.this.classFileVersion);
                        contextRegistry.setImplementationContext(implementationContext);
                        cv = asmVisitorWrapper.wrap(instrumentedType, cv, implementationContext, typePool, fields, methods, writerFlags, readerFlags);
                        cv.visit(classFileVersionNumber, modifiers, internalName, genericSignature, superClassInternalName, interfaceTypeInternalName);
                    }

                    @java.lang.Override
                    protected void onNestHost() {
                    }

                    @java.lang.Override
                    protected void onOuterType() {
                    }

                    @java.lang.Override
                    protected org.objectweb.asm.AnnotationVisitor onVisitTypeAnnotation(int typeReference, org.objectweb.asm.TypePath typePath, java.lang.String descriptor, boolean visible) {
                        return annotationRetention.isEnabled() ? cv.visitTypeAnnotation(typeReference, typePath, descriptor, visible) : net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.IGNORE_ANNOTATION;
                    }

                    @java.lang.Override
                    protected org.objectweb.asm.AnnotationVisitor onVisitAnnotation(java.lang.String descriptor, boolean visible) {
                        return annotationRetention.isEnabled() ? cv.visitAnnotation(descriptor, visible) : net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ForInlining.IGNORE_ANNOTATION;
                    }

                    @java.lang.Override
                    protected void onAfterAttributes() {
                        typeAttributeAppender.apply(cv, instrumentedType, annotationValueFilterFactory.on(instrumentedType));
                    }

                    @java.lang.Override
                    protected void onVisitEnd() {
                        implementationContext.drain(this, cv, annotationValueFilterFactory);
                        cv.visitEnd();
                    }

                    public void apply(org.objectweb.asm.ClassVisitor classVisitor, net.bytebuddy.dynamic.scaffold.TypeInitializer typeInitializer, net.bytebuddy.implementation.Implementation.Context implementationContext) {
                    }
                }
            }
        }

        @net.bytebuddy.build.HashCodeAndEqualsPlugin.Enhance
        public static class ForCreation<U> extends net.bytebuddy.dynamic.scaffold.TypeWriter.Default<U> {
            private final net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool methodPool;

            protected ForCreation(net.bytebuddy.description.type.TypeDescription instrumentedType, net.bytebuddy.ClassFileVersion classFileVersion, net.bytebuddy.dynamic.scaffold.TypeWriter.FieldPool fieldPool, net.bytebuddy.dynamic.scaffold.TypeWriter.MethodPool methodPool, java.util.List<? extends net.bytebuddy.dynamic.DynamicType> auxiliaryTypes, net.bytebuddy.description.field.FieldList<net.bytebuddy.description.field.FieldDescription.InDefinedShape> fields, net.bytebuddy.description.method.MethodList<?> methods, net.bytebuddy.description.method.MethodList<?> instrumentedMethods, net.bytebuddy.implementation.LoadedTypeInitializer loadedTypeInitializer, net.bytebuddy.dynamic.scaffold.TypeInitializer typeInitializer, net.bytebuddy.implementation.attribute.TypeAttributeAppender typeAttributeAppender, net.bytebuddy.asm.AsmVisitorWrapper asmVisitorWrapper, net.bytebuddy.implementation.attribute.AnnotationValueFilter.Factory annotationValueFilterFactory, net.bytebuddy.implementation.attribute.AnnotationRetention annotationRetention, net.bytebuddy.implementation.auxiliary.AuxiliaryType.NamingStrategy auxiliaryTypeNamingStrategy, net.bytebuddy.implementation.Implementation.Context.Factory implementationContextFactory, net.bytebuddy.dynamic.scaffold.TypeValidation typeValidation, net.bytebuddy.dynamic.scaffold.ClassWriterStrategy classWriterStrategy, net.bytebuddy.pool.TypePool typePool) {
                super(instrumentedType, classFileVersion, fieldPool, auxiliaryTypes, fields, methods, instrumentedMethods, loadedTypeInitializer, typeInitializer, typeAttributeAppender, asmVisitorWrapper, annotationValueFilterFactory, annotationRetention, auxiliaryTypeNamingStrategy, implementationContextFactory, typeValidation, classWriterStrategy, typePool);
                this.methodPool = methodPool;
            }

            @java.lang.Override
            protected net.bytebuddy.dynamic.scaffold.TypeWriter.Default<U>.UnresolvedType create(net.bytebuddy.dynamic.scaffold.TypeInitializer typeInitializer) {
                int writerFlags = asmVisitorWrapper.mergeWriter(net.bytebuddy.asm.AsmVisitorWrapper.NO_FLAGS);
                org.objectweb.asm.ClassWriter classWriter = classWriterStrategy.resolve(writerFlags, typePool);
                net.bytebuddy.implementation.Implementation.Context.ExtractableView implementationContext = implementationContextFactory.make(instrumentedType, auxiliaryTypeNamingStrategy, typeInitializer, classFileVersion, classFileVersion);
                org.objectweb.asm.ClassVisitor classVisitor = asmVisitorWrapper.wrap(instrumentedType, net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ValidatingClassVisitor.of(classWriter, typeValidation), implementationContext, typePool, fields, methods, writerFlags, asmVisitorWrapper.mergeReader(net.bytebuddy.asm.AsmVisitorWrapper.NO_FLAGS));
                classVisitor.visit(classFileVersion.getMinorMajorVersion(), instrumentedType.getActualModifiers((!(instrumentedType.isInterface()))), instrumentedType.getInternalName(), instrumentedType.getGenericSignature(), ((instrumentedType.getSuperClass()) == null ? net.bytebuddy.description.type.TypeDescription.OBJECT : instrumentedType.getSuperClass().asErasure()).getInternalName(), instrumentedType.getInterfaces().asErasures().toInternalNames());
                if (!(instrumentedType.isNestHost())) {
                    classVisitor.visitNestHost(instrumentedType.getNestHost().getInternalName());
                }
                net.bytebuddy.description.method.MethodDescription.InDefinedShape enclosingMethod = instrumentedType.getEnclosingMethod();
                if (enclosingMethod != null) {
                    classVisitor.visitOuterClass(enclosingMethod.getDeclaringType().getInternalName(), enclosingMethod.getInternalName(), enclosingMethod.getDescriptor());
                }else
                    if ((instrumentedType.isLocalType()) || (instrumentedType.isAnonymousType())) {
                        classVisitor.visitOuterClass(instrumentedType.getEnclosingType().getInternalName(), net.bytebuddy.dynamic.scaffold.TypeWriter.Default.NO_REFERENCE, net.bytebuddy.dynamic.scaffold.TypeWriter.Default.NO_REFERENCE);
                    }

                typeAttributeAppender.apply(classVisitor, instrumentedType, annotationValueFilterFactory.on(instrumentedType));
                for (net.bytebuddy.description.field.FieldDescription fieldDescription : fields) {
                    fieldPool.target(fieldDescription).apply(classVisitor, annotationValueFilterFactory);
                }
                for (net.bytebuddy.description.method.MethodDescription methodDescription : instrumentedMethods) {
                    methodPool.target(methodDescription).apply(classVisitor, implementationContext, annotationValueFilterFactory);
                }
                implementationContext.drain(new net.bytebuddy.dynamic.scaffold.TypeInitializer.Drain.Default(instrumentedType, methodPool, annotationValueFilterFactory), classVisitor, annotationValueFilterFactory);
                if (instrumentedType.isNestHost()) {
                    for (net.bytebuddy.description.type.TypeDescription typeDescription : instrumentedType.getNestMembers().filter(net.bytebuddy.matcher.ElementMatchers.not(net.bytebuddy.matcher.ElementMatchers.is(instrumentedType)))) {
                        classVisitor.visitNestMember(typeDescription.getInternalName());
                    }
                }
                net.bytebuddy.description.type.TypeDescription declaringType = instrumentedType.getDeclaringType();
                if (declaringType != null) {
                    classVisitor.visitInnerClass(instrumentedType.getInternalName(), declaringType.getInternalName(), instrumentedType.getSimpleName(), instrumentedType.getModifiers());
                }else
                    if (instrumentedType.isLocalType()) {
                        classVisitor.visitInnerClass(instrumentedType.getInternalName(), net.bytebuddy.dynamic.scaffold.TypeWriter.Default.NO_REFERENCE, instrumentedType.getSimpleName(), instrumentedType.getModifiers());
                    }else
                        if (instrumentedType.isAnonymousType()) {
                            classVisitor.visitInnerClass(instrumentedType.getInternalName(), net.bytebuddy.dynamic.scaffold.TypeWriter.Default.NO_REFERENCE, net.bytebuddy.dynamic.scaffold.TypeWriter.Default.NO_REFERENCE, instrumentedType.getModifiers());
                        }


                for (net.bytebuddy.description.type.TypeDescription typeDescription : instrumentedType.getDeclaredTypes()) {
                    classVisitor.visitInnerClass(typeDescription.getInternalName(), (typeDescription.isMemberType() ? instrumentedType.getInternalName() : net.bytebuddy.dynamic.scaffold.TypeWriter.Default.NO_REFERENCE), (typeDescription.isAnonymousType() ? net.bytebuddy.dynamic.scaffold.TypeWriter.Default.NO_REFERENCE : typeDescription.getSimpleName()), typeDescription.getModifiers());
                }
                classVisitor.visitEnd();
                return new UnresolvedType(classWriter.toByteArray(), implementationContext.getAuxiliaryTypes());
            }
        }

        @net.bytebuddy.build.HashCodeAndEqualsPlugin.Enhance
        protected static class ClassDumpAction implements java.security.PrivilegedExceptionAction<java.lang.Void> {
            private static final java.lang.Void NOTHING = null;

            private final java.lang.String target;

            private final net.bytebuddy.description.type.TypeDescription instrumentedType;

            private final boolean original;

            private final byte[] binaryRepresentation;

            protected ClassDumpAction(java.lang.String target, net.bytebuddy.description.type.TypeDescription instrumentedType, boolean original, byte[] binaryRepresentation) {
                this.target = target;
                this.instrumentedType = instrumentedType;
                this.original = original;
                this.binaryRepresentation = binaryRepresentation;
            }

            protected static void dump(java.lang.String dumpFolder, net.bytebuddy.description.type.TypeDescription instrumentedType, boolean original, byte[] binaryRepresentation) {
                if (dumpFolder != null) {
                    try {
                        java.security.AccessController.doPrivileged(new net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ClassDumpAction(dumpFolder, instrumentedType, original, binaryRepresentation));
                    } catch (java.lang.Exception exception) {
                        exception.printStackTrace();
                    }
                }
            }

            public java.lang.Void run() throws java.lang.Exception {
                java.io.OutputStream outputStream = new java.io.FileOutputStream(new java.io.File(target, (((instrumentedType.getName()) + (original ? "-original." : ".")) + (java.lang.System.currentTimeMillis()))));
                try {
                    outputStream.write(binaryRepresentation);
                    return net.bytebuddy.dynamic.scaffold.TypeWriter.Default.ClassDumpAction.NOTHING;
                } finally {
                    outputStream.close();
                }
            }
        }
    }
}
19:13:41.122 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
19:13:41.122 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #17
19:13:41.122 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation net.bytebuddy.dynamic.scaffold.TypeWriter$FieldPool$Record$ForExplicitField:308 which is executed by 464 tests
683157614
19:13:41.554 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
Feb 13, 2019 7:13:42 PM net.bytebuddy.test.utility.JavaVersionRule$NoOpStatement evaluate
WARNING: Ignoring test case: Requires a Java version of at least 11
java.lang.IllegalStateException: public static final java.lang.String net.bytebuddy.implementation.FieldAccessorOtherTest$StaticFieldHolder.FOO is not declared by class net.bytebuddy.renamed.java.util.concurrent.Callable$ByteBuddy$A8efV8Sa
    at net.bytebuddy.implementation.FieldAccessor$FieldLocation$Absolute.prepare(FieldAccessor.java:209)
    at net.bytebuddy.implementation.FieldAccessor$ForImplicitProperty.appender(FieldAccessor.java:656)
    at net.bytebuddy.dynamic.scaffold.MethodRegistry$Handler$ForImplementation.compile(MethodRegistry.java:230)
    at net.bytebuddy.dynamic.scaffold.MethodRegistry$Handler$ForImplementation.compile(MethodRegistry.java:202)
    at net.bytebuddy.dynamic.scaffold.MethodRegistry$Default$Prepared.compile(MethodRegistry.java:731)
    at net.bytebuddy.dynamic.scaffold.subclass.SubclassDynamicTypeBuilder.make(SubclassDynamicTypeBuilder.java:199)
Feb 13, 2019 7:13:48 PM net.bytebuddy.test.utility.JavaVersionRule$NoOpStatement evaluate
WARNING: Ignoring test case: Requires a Java version of at least 11
Feb 13, 2019 7:13:48 PM net.bytebuddy.test.utility.JavaVersionRule$NoOpStatement evaluate
WARNING: Ignoring test case: Requires a Java version of at least 11
Feb 13, 2019 7:13:48 PM net.bytebuddy.test.utility.JavaVersionRule$NoOpStatement evaluate
WARNING: Ignoring test case: Requires a Java version of at least 11
Feb 13, 2019 7:13:48 PM net.bytebuddy.test.utility.JavaVersionRule$NoOpStatement evaluate
WARNING: Ignoring test case: Requires a Java version of at least 11
Feb 13, 2019 7:13:48 PM net.bytebuddy.test.utility.JavaVersionRule$NoOpStatement evaluate
WARNING: Ignoring test case: Requires a Java version of at least 11
Feb 13, 2019 7:13:48 PM net.bytebuddy.test.utility.JavaVersionRule$NoOpStatement evaluate
WARNING: Ignoring test case: Requires a Java version of at least 11
Feb 13, 2019 7:13:49 PM net.bytebuddy.test.utility.JavaVersionRule$NoOpStatement evaluate
WARNING: Ignoring test case: Requires a Java version of at least 11
19:13:49.017 [pool-16-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (7337 ms)
<> Total tests run: 7089
<> Ignored tests: 8
<> Failed tests: 1
~ testStaticFieldOfOtherClass(net.bytebuddy.implementation.FieldAccessorOtherTest)
[public static final java.lang.String net.bytebuddy.implementation.FieldAccessorOtherTest$StaticFieldHolder.FOO is not declared by class net.bytebuddy.renamed.java.util.concurrent.Callable$ByteBuddy$A8efV8Sa]
java.lang.IllegalStateException: public static final java.lang.String net.bytebuddy.implementation.FieldAccessorOtherTest$StaticFieldHolder.FOO is not declared by class net.bytebuddy.renamed.java.util.concurrent.Callable$ByteBuddy$A8efV8Sa    at net.bytebuddy.implementation.FieldAccessor$FieldLocation$Absolute.prepare(FieldAccessor.java:209)
    at net.bytebuddy.implementation.FieldAccessor$ForImplicitProperty.appender(FieldAccessor.java:656)
    at net.bytebuddy.dynamic.scaffold.MethodRegistry$Handler$ForImplementation.compile(MethodRegistry.java:230)
    at net.bytebuddy.dynamic.scaffold.MethodRegistry$Handler$ForImplementation.compile(MethodRegistry.java:202)
    at net.bytebuddy.dynamic.scaffold.MethodRegistry$Default$Prepared.compile(MethodRegistry.java:731)
    at net.bytebuddy.dynamic.scaffold.subclass.SubclassDynamicTypeBuilder.make(SubclassDynamicTypeBuilder.java:199)

19:18:30.180 [main] ERROR fr.inria.lille.repair.Main - Timeout: execution time > 60 MINUTES
java.util.concurrent.TimeoutException: null
	at java.util.concurrent.FutureTask.get(FutureTask.java:205) ~[na:1.8.0_181]
	at fr.inria.lille.repair.Main.main(Main.java:106) ~[nopol.jar:na]
TIMEOUT
Command exited with non-zero status 255
3896.07user 10.02system 1:00:09elapsed 108%CPU (0avgtext+0avgdata 3286324maxresident)k
37120inputs+11944outputs (3major+1489526minor)pagefaults 0swaps


Node: graphene-66.nancy.grid5000.fr



Date: Wed Feb 13 19:18:30 EST 2019

