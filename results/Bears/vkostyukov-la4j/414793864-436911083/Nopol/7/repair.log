cd /tmp/Nopol_Bears_vkostyukov-la4j_414793864-436911083;
export JAVA_TOOL_OPTIONS="-Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en";
TZ="America/New_York"; export TZ;
export PATH="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:$PATH";
export JAVA_HOME="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/";
time java -Xmx4g -Xms1g -cp /home/tdurieux/defects4j4repair/script/../repair_tools/nopol.jar:/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin//../lib/tools.jar fr.inria.lille.repair.Main \
	--mode repair \
	--type pre_then_cond \
	--oracle angelic \
	--synthesis smt \
	--flocal gzoltar \
	--json \
	--solver z3 \
	--solver-path /home/tdurieux/defects4j4repair/script/../libs/z3/build/z3 \
	--complianceLevel 8 \
	--source src/main/java \
	--classpath "target/classes:target/test-classes:/home/tdurieux/.m2/repository/junit/junit/4.11/junit-4.11.jar:/home/tdurieux/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:/home/tdurieux/defects4j4repair/script/../repair_tools/nopol.jar";
	echo "\n\nNode: `hostname`\n";
	echo "\n\nDate: `date`\n";
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en
16:23:55.919 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Source files: [src/main/java]
16:23:55.934 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Classpath: [file:/tmp/Nopol_Bears_vkostyukov-la4j_414793864-436911083/target/classes/, file:/tmp/Nopol_Bears_vkostyukov-la4j_414793864-436911083/target/test-classes/, file:/home/tdurieux/.m2/repository/junit/junit/4.11/junit-4.11.jar, file:/home/tdurieux/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar, file:/home/tdurieux/defects4j4repair/script/../repair_tools/nopol.jar]
16:23:55.934 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Statement type: PRE_THEN_COND
16:23:55.935 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Args: [org.la4j.decomposition.CholeskyDecompositorTest, org.la4j.decomposition.EigenDecompositorTest, org.la4j.decomposition.LUDecompositorTest, org.la4j.decomposition.QRDecompositorTest, org.la4j.decomposition.SingularValueDecompositorTest, org.la4j.inversion.GaussJordanInverterTest, org.la4j.inversion.NoPivotGaussInverterTest, org.la4j.linear.ForwardBackSubstitutionSolverTest, org.la4j.linear.GaussianSolverTest, org.la4j.linear.JacobiSolverTest, org.la4j.linear.LeastSquaresSolverTest, org.la4j.linear.SeidelSolverTest, org.la4j.linear.SquareRootSolverTest, org.la4j.linear.SweepSolverTest, org.la4j.matrix.dense.Basic1DMatrixTest, org.la4j.matrix.dense.Basic2DMatrixTest, org.la4j.matrix.sparse.CCSMatrixTest, org.la4j.matrix.sparse.CRSMatrixTest, org.la4j.vector.dense.BasicVectorTest, org.la4j.vector.sparse.CompressedVectorTest]
16:23:55.936 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Config: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=true, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=PRE_THEN_COND, synthesis=SMT, oracle=ANGELIC, solver=Z3, solverPath='/home/tdurieux/defects4j4repair/script/../libs/z3/build/z3', projectSources=[src/main/java], projectClasspath='[Ljava.net.URL;@66d33a', projectTests=[org.la4j.decomposition.CholeskyDecompositorTest, org.la4j.decomposition.EigenDecompositorTest, org.la4j.decomposition.LUDecompositorTest, org.la4j.decomposition.QRDecompositorTest, org.la4j.decomposition.SingularValueDecompositorTest, org.la4j.inversion.GaussJordanInverterTest, org.la4j.inversion.NoPivotGaussInverterTest, org.la4j.linear.ForwardBackSubstitutionSolverTest, org.la4j.linear.GaussianSolverTest, org.la4j.linear.JacobiSolverTest, org.la4j.linear.LeastSquaresSolverTest, org.la4j.linear.SeidelSolverTest, org.la4j.linear.SquareRootSolverTest, org.la4j.linear.SweepSolverTest, org.la4j.matrix.dense.Basic1DMatrixTest, org.la4j.matrix.dense.Basic2DMatrixTest, org.la4j.matrix.sparse.CCSMatrixTest, org.la4j.matrix.sparse.CRSMatrixTest, org.la4j.vector.dense.BasicVectorTest, org.la4j.vector.sparse.CompressedVectorTest], complianceLevel=8, outputFolder=., json=true}
16:23:55.937 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Available processors (cores): 4
16:23:55.943 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Free memory: 955 MB
16:23:55.943 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Maximum memory: 3 GB
16:23:55.943 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Total memory available to JVM: 981 MB
16:23:55.943 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Java version: 1.8.0_181
16:23:55.944 [main] INFO  fr.inria.lille.repair.nopol.NoPol - JAVA_HOME: /usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/
16:23:55.944 [main] INFO  fr.inria.lille.repair.nopol.NoPol - PATH: /usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:/usr/lib/oar/oardodo:/usr/lib/oar/oardodo:/usr/local/bin:/usr/bin:/bin:/usr/games
16:24:21.408 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #1
16:24:21.408 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.la4j.Vector:857 which is executed by 2 tests
-1736520348
16:24:21.767 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #2
16:24:21.767 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.la4j.Vector:847 which is executed by 2 tests
-1736520348
16:24:21.863 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #3
16:24:21.863 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.la4j.Vector:845 which is executed by 2 tests
-1736520348
16:24:21.954 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #4
16:24:21.954 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.la4j.Vector:844 which is executed by 2 tests
-1736520348
16:24:22.044 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #5
16:24:22.044 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.la4j.Vector:843 which is executed by 2 tests
-1736520348
16:24:22.146 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
16:24:22.271 [pool-4-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (84 ms)
<> Total tests run: 143
<> Ignored tests: 0
<> Failed tests: 2
~ testFromMap_unordered(org.la4j.vector.sparse.CompressedVectorTest)
[expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>]
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testFromMap_unordered(org.la4j.vector.dense.BasicVectorTest)
[expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>]
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected: org.la4j.vector.dense.BasicVector<> but was: org.la4j.vector.sparse.CompressedVector<>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
16:24:23.319 [pool-5-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (27 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFromMap_unordered(org.la4j.vector.sparse.CompressedVectorTest)
[expected: org.la4j.vector.dense.BasicVector<> but was: org.la4j.vector.sparse.CompressedVector<>]
java.lang.AssertionError: expected: org.la4j.vector.dense.BasicVector<> but was: org.la4j.vector.sparse.CompressedVector<>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected: org.la4j.vector.dense.BasicVector<> but was: org.la4j.vector.sparse.CompressedVector<>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
16:24:23.323 [pool-6-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFromMap_unordered(org.la4j.vector.dense.BasicVectorTest)
[expected: org.la4j.vector.dense.BasicVector<> but was: org.la4j.vector.sparse.CompressedVector<>]
java.lang.AssertionError: expected: org.la4j.vector.dense.BasicVector<> but was: org.la4j.vector.sparse.CompressedVector<>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
16:24:23.327 [pool-7-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFromMap_unordered(org.la4j.vector.sparse.CompressedVectorTest)
[expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>]
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
16:24:23.330 [pool-8-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFromMap_unordered(org.la4j.vector.dense.BasicVectorTest)
[expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>]
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

16:24:23.331 [pool-3-thread-1] DEBUG tests.output - Failing tests with false: 
[testFromMap_unordered(org.la4j.vector.sparse.CompressedVectorTest): expected: org.la4j.vector.dense.BasicVector<> but was: org.la4j.vector.sparse.CompressedVector<>, testFromMap_unordered(org.la4j.vector.dense.BasicVectorTest): expected: org.la4j.vector.dense.BasicVector<> but was: org.la4j.vector.sparse.CompressedVector<>]
16:24:23.331 [pool-3-thread-1] DEBUG tests.output - Failing tests with true: 
[testFromMap_unordered(org.la4j.vector.sparse.CompressedVectorTest): expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>, testFromMap_unordered(org.la4j.vector.dense.BasicVectorTest): expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>]
16:24:23.331 [pool-3-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.la4j.Vector:843.
16:24:23.332 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #6
16:24:23.332 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.la4j.Vector:842 which is executed by 2 tests
-1736520348
16:24:23.420 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #7
16:24:23.420 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.la4j.Vector:841 which is executed by 2 tests
-1736520348
16:24:23.505 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #8
16:24:23.505 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.la4j.Vector:840 which is executed by 2 tests
-1736520348
16:24:23.588 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
16:24:23.850 [pool-10-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (252 ms)
<> Total tests run: 143
<> Ignored tests: 0
<> Failed tests: 2
~ testFromMap_unordered(org.la4j.vector.sparse.CompressedVectorTest)
[expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>]
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testFromMap_unordered(org.la4j.vector.dense.BasicVectorTest)
[expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>]
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected: org.la4j.vector.dense.BasicVector<> but was: org.la4j.vector.sparse.CompressedVector<>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
16:24:24.257 [pool-11-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (22 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFromMap_unordered(org.la4j.vector.sparse.CompressedVectorTest)
[expected: org.la4j.vector.dense.BasicVector<> but was: org.la4j.vector.sparse.CompressedVector<>]
java.lang.AssertionError: expected: org.la4j.vector.dense.BasicVector<> but was: org.la4j.vector.sparse.CompressedVector<>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected: org.la4j.vector.dense.BasicVector<> but was: org.la4j.vector.sparse.CompressedVector<>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
16:24:24.272 [pool-12-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFromMap_unordered(org.la4j.vector.dense.BasicVectorTest)
[expected: org.la4j.vector.dense.BasicVector<> but was: org.la4j.vector.sparse.CompressedVector<>]
java.lang.AssertionError: expected: org.la4j.vector.dense.BasicVector<> but was: org.la4j.vector.sparse.CompressedVector<>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
16:24:24.275 [pool-13-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFromMap_unordered(org.la4j.vector.sparse.CompressedVectorTest)
[expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>]
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
16:24:24.282 [pool-14-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFromMap_unordered(org.la4j.vector.dense.BasicVectorTest)
[expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>]
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

16:24:24.283 [pool-9-thread-1] DEBUG tests.output - Failing tests with false: 
[testFromMap_unordered(org.la4j.vector.sparse.CompressedVectorTest): expected: org.la4j.vector.dense.BasicVector<> but was: org.la4j.vector.sparse.CompressedVector<>, testFromMap_unordered(org.la4j.vector.dense.BasicVectorTest): expected: org.la4j.vector.dense.BasicVector<> but was: org.la4j.vector.sparse.CompressedVector<>]
16:24:24.283 [pool-9-thread-1] DEBUG tests.output - Failing tests with true: 
[testFromMap_unordered(org.la4j.vector.sparse.CompressedVectorTest): expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>, testFromMap_unordered(org.la4j.vector.dense.BasicVectorTest): expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>]
16:24:24.283 [pool-9-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.la4j.Vector:840.
16:24:24.283 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #9
16:24:24.283 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.la4j.Vector:838 which is executed by 2 tests
-1736520348
16:24:24.364 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #10
16:24:24.364 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.la4j.Vector:837 which is executed by 2 tests
-1736520348
16:24:24.443 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #11
16:24:24.443 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.la4j.vector.VectorTest:735 which is executed by 2 tests
16:24:24.443 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.la4j.vector.VectorTest:735
16:24:24.443 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #12
16:24:24.443 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.la4j.vector.VectorTest:734 which is executed by 2 tests
16:24:24.444 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.la4j.vector.VectorTest:734
16:24:24.444 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #13
16:24:24.444 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.la4j.vector.VectorTest:733 which is executed by 2 tests
16:24:24.444 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.la4j.vector.VectorTest:733
16:24:24.444 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #14
16:24:24.444 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.la4j.vector.VectorTest:732 which is executed by 2 tests
16:24:24.444 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.la4j.vector.VectorTest:732
16:24:24.444 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #15
16:24:24.444 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.la4j.vector.VectorTest:731 which is executed by 2 tests
16:24:24.444 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.la4j.vector.VectorTest:731
16:24:24.444 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #16
16:24:24.444 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.la4j.vector.VectorTest:730 which is executed by 2 tests
16:24:24.444 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.la4j.vector.VectorTest:730
16:24:24.445 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #17
16:24:24.445 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.la4j.vector.sparse.CompressedVector$2:585 which is executed by 4 tests
1164465221
16:24:24.536 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #18
16:24:24.536 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.la4j.vector.sparse.CompressedVector:54 which is executed by 255 tests
1164465221
16:24:24.614 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #19
16:24:24.614 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.la4j.vector.sparse.CompressedVector:578 which is executed by 5 tests
1164465221
16:24:24.943 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #20
16:24:24.943 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.la4j.vector.sparse.CompressedVector$2:578 which is executed by 5 tests
1164465221
16:24:25.236 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #21
16:24:25.236 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.la4j.vector.sparse.CompressedVector$2:625 which is executed by 5 tests
1164465221
16:24:25.315 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #22
16:24:25.315 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.la4j.vector.sparse.CompressedVector$2:623 which is executed by 5 tests
1164465221
16:24:25.456 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
16:24:25.529 [pool-16-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (64 ms)
<> Total tests run: 143
<> Ignored tests: 0
<> Failed tests: 2
~ testFromMap_unordered(org.la4j.vector.sparse.CompressedVectorTest)
[expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>]
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testFromMap_unordered(org.la4j.vector.dense.BasicVectorTest)
[expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>]
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

16:24:26.155 [pool-15-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
CompressedVector.java:444: error: ')' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.k",org.la4j.vector.sparse.CompressedVector.2.this.k);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                      ^
CompressedVector.java:444: error: illegal start of expression
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.k",org.la4j.vector.sparse.CompressedVector.2.this.k);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                        ^
CompressedVector.java:444: error: ';' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.k",org.la4j.vector.sparse.CompressedVector.2.this.k);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                         ^
CompressedVector.java:444: error: illegal start of expression
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.k",org.la4j.vector.sparse.CompressedVector.2.this.k);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                             ^
CompressedVector.java:444: error: ';' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.k",org.la4j.vector.sparse.CompressedVector.2.this.k);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                               ^
CompressedVector.java:445: error: ')' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero",org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                   ^
CompressedVector.java:445: error: illegal start of expression
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero",org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                     ^
CompressedVector.java:445: error: ';' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero",org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                      ^
CompressedVector.java:445: error: illegal start of expression
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero",org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                          ^
CompressedVector.java:445: error: ';' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero",org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                                         ^
CompressedVector.java:446: error: ')' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.i",org.la4j.vector.sparse.CompressedVector.2.this.i);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                      ^
CompressedVector.java:446: error: illegal start of expression
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.i",org.la4j.vector.sparse.CompressedVector.2.this.i);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                        ^
CompressedVector.java:446: error: ';' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.i",org.la4j.vector.sparse.CompressedVector.2.this.i);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                         ^
CompressedVector.java:446: error: illegal start of expression
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.i",org.la4j.vector.sparse.CompressedVector.2.this.i);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                             ^
CompressedVector.java:446: error: ';' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.i",org.la4j.vector.sparse.CompressedVector.2.this.i);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                               ^
16:24:26.494 [pool-15-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class CompressedVector extends org.la4j.vector.SparseVector {
    private static final byte VECTOR_TAG = ((byte) (16));

    private static final int MINIMUM_SIZE = 32;

    private double[] values;

    private int[] indices;

    public CompressedVector() {
        this(0);
    }

    public CompressedVector(int length) {
        this(length, 0);
    }

    public CompressedVector(int length, int capacity) {
        super(length);
        int alignedSize = align(length, capacity);
        this.values = new double[alignedSize];
        this.indices = new int[alignedSize];
    }

    public CompressedVector(int length, int cardinality, double[] values, int[] indices) {
        super(length, cardinality);
        this.values = values;
        this.indices = indices;
    }

    public static org.la4j.vector.sparse.CompressedVector zero(int length) {
        return new org.la4j.vector.sparse.CompressedVector(length);
    }

    public static org.la4j.vector.sparse.CompressedVector zero(int length, int capacity) {
        return new org.la4j.vector.sparse.CompressedVector(length, capacity);
    }

    public static org.la4j.vector.sparse.CompressedVector random(int length, double density, java.util.Random random) {
        if ((density < 0.0) || (density > 1.0)) {
            throw new java.lang.IllegalArgumentException("The density value should be between 0 and 1.0");
        }
        int cardinality = ((int) (length * density));
        double[] values = new double[cardinality];
        int[] indices = new int[cardinality];
        for (int i = 0; i < cardinality; i++) {
            values[i] = random.nextDouble();
            indices[i] = random.nextInt(length);
        }
        java.util.Arrays.sort(indices);
        return new org.la4j.vector.sparse.CompressedVector(length, cardinality, values, indices);
    }

    public static org.la4j.vector.sparse.CompressedVector fromArray(double[] array) {
        int length = array.length;
        org.la4j.vector.sparse.CompressedVector result = org.la4j.vector.sparse.CompressedVector.zero(length);
        for (int i = 0; i < length; i++) {
            if ((array[i]) != 0.0) {
                result.set(i, array[i]);
            }
        }
        return result;
    }

    public static org.la4j.vector.sparse.CompressedVector fromBinary(byte[] array) {
        java.nio.ByteBuffer buffer = java.nio.ByteBuffer.wrap(array);
        if ((buffer.get()) != (org.la4j.vector.sparse.CompressedVector.VECTOR_TAG)) {
            throw new java.lang.IllegalArgumentException("Can not decode CompressedVector from the given byte array.");
        }
        int length = buffer.getInt();
        int cardinality = buffer.getInt();
        double[] values = new double[cardinality];
        int[] indices = new int[cardinality];
        for (int i = 0; i < cardinality; i++) {
            indices[i] = buffer.getInt();
            values[i] = buffer.getDouble();
        }
        return new org.la4j.vector.sparse.CompressedVector(length, cardinality, values, indices);
    }

    public static org.la4j.vector.sparse.CompressedVector fromCSV(java.lang.String csv) {
        return org.la4j.Vector.fromCSV(csv).to(org.la4j.Vectors.COMPRESSED);
    }

    public static org.la4j.vector.sparse.CompressedVector fromMatrixMarket(java.lang.String mm) {
        return org.la4j.Vector.fromMatrixMarket(mm).to(org.la4j.Vectors.COMPRESSED);
    }

    public static org.la4j.vector.sparse.CompressedVector fromCollection(java.util.Collection<? extends java.lang.Number> list) {
        return org.la4j.Vector.fromCollection(list).to(org.la4j.Vectors.COMPRESSED);
    }

    public static org.la4j.vector.sparse.CompressedVector fromMap(java.util.Map<java.lang.Integer, ? extends java.lang.Number> map, int length) {
        int cardinality = map.size();
        int[] indices = new int[cardinality];
        double[] values = new double[cardinality];
        int i = 0;
        for (java.util.Map.Entry<java.lang.Integer, ? extends java.lang.Number> entry : map.entrySet()) {
            int index = entry.getKey();
            if ((index < 0) || (index >= length)) {
                throw new java.lang.IllegalArgumentException("Check your map: Index must be 0..n-1");
            }
            indices[i] = index;
            values[i] = entry.getValue().doubleValue();
            i++;
        }
        return new org.la4j.vector.sparse.CompressedVector(length, cardinality, values, indices);
    }

    @java.lang.Override
    public double getOrElse(int i, double defaultValue) {
        ensureIndexIsInBounds(i);
        int k = searchForIndex(i);
        if ((k < (cardinality)) && ((indices[k]) == i)) {
            return values[k];
        }
        return defaultValue;
    }

    @java.lang.Override
    public void set(int i, double value) {
        ensureIndexIsInBounds(i);
        int k = searchForIndex(i);
        if ((k < (cardinality)) && ((indices[k]) == i)) {
            if (value != 0.0) {
                values[k] = value;
            }else {
                remove(k);
            }
        }else {
            insert(k, i, value);
        }
    }

    @java.lang.Override
    public void setAll(double value) {
        if (value == 0.0) {
            cardinality = 0;
        }else {
            if ((values.length) < (length)) {
                values = new double[length];
                indices = new int[length];
            }
            for (int i = 0; i < (length); i++) {
                indices[i] = i;
                values[i] = value;
            }
            cardinality = length;
        }
    }

    @java.lang.Override
    public void swapElements(int i, int j) {
        if (i == j) {
            return;
        }
        int ii = searchForIndex(i);
        int jj = searchForIndex(j);
        boolean iiNotZero = (ii < (cardinality)) && (i == (indices[ii]));
        boolean jjNotZero = (jj < (cardinality)) && (j == (indices[jj]));
        if (iiNotZero && jjNotZero) {
            double sd = values[ii];
            values[ii] = values[jj];
            values[jj] = sd;
        }else {
            double notZero = values[(iiNotZero ? ii : jj)];
            int leftIndex = (ii < jj) ? ii : jj;
            int rightIndex = (ii > jj) ? ii : jj;
            if (((iiNotZero && (leftIndex == ii)) || (jjNotZero && (leftIndex == jj))) && (ii != jj)) {
                java.lang.System.arraycopy(values, (leftIndex + 1), values, leftIndex, ((cardinality) - leftIndex));
                java.lang.System.arraycopy(values, (rightIndex - 1), values, rightIndex, ((cardinality) - rightIndex));
                values[(rightIndex - 1)] = notZero;
                java.lang.System.arraycopy(indices, (leftIndex + 1), indices, leftIndex, ((cardinality) - leftIndex));
                java.lang.System.arraycopy(indices, (rightIndex - 1), indices, rightIndex, ((cardinality) - rightIndex));
                indices[(rightIndex - 1)] = (jjNotZero) ? i : j;
            }else
                if ((iiNotZero && (rightIndex == ii)) || (jjNotZero && (rightIndex == jj))) {
                    java.lang.System.arraycopy(values, (rightIndex + 1), values, rightIndex, ((cardinality) - rightIndex));
                    java.lang.System.arraycopy(values, leftIndex, values, (leftIndex + 1), ((cardinality) - leftIndex));
                    values[leftIndex] = notZero;
                    java.lang.System.arraycopy(indices, (rightIndex + 1), indices, rightIndex, ((cardinality) - rightIndex));
                    java.lang.System.arraycopy(indices, leftIndex, indices, (leftIndex + 1), ((cardinality) - leftIndex));
                    indices[leftIndex] = (jjNotZero) ? i : j;
                }

        }
    }

    @java.lang.Override
    public org.la4j.Vector copyOfLength(int length) {
        ensureLengthIsCorrect(length);
        int $cardinality = (length >= (this.length)) ? cardinality : searchForIndex(length);
        int capacity = align(length, $cardinality);
        double[] $values = new double[capacity];
        int[] $indices = new int[capacity];
        java.lang.System.arraycopy(values, 0, $values, 0, $cardinality);
        java.lang.System.arraycopy(indices, 0, $indices, 0, $cardinality);
        return new org.la4j.vector.sparse.CompressedVector(length, $cardinality, $values, $indices);
    }

    @java.lang.Override
    public void each(org.la4j.vector.functor.VectorProcedure procedure) {
        int k = 0;
        for (int i = 0; i < (length); i++) {
            if ((k < (cardinality)) && ((indices[k]) == i)) {
                procedure.apply(i, values[(k++)]);
            }else {
                procedure.apply(i, 0.0);
            }
        }
    }

    @java.lang.Override
    public void eachNonZero(org.la4j.vector.functor.VectorProcedure procedure) {
        for (int i = 0; i < (cardinality); i++) {
            procedure.apply(indices[i], values[i]);
        }
    }

    @java.lang.Override
    public void updateAt(int i, org.la4j.vector.functor.VectorFunction function) {
        int k = searchForIndex(i);
        if ((k < (cardinality)) && ((indices[k]) == i)) {
            double value = function.evaluate(i, values[k]);
            if (value != 0.0) {
                values[k] = value;
            }else {
                remove(k);
            }
        }else {
            insert(k, i, function.evaluate(i, 0.0));
        }
    }

    @java.lang.Override
    public boolean nonZeroAt(int i) {
        int k = searchForIndex(i);
        return (k < (cardinality)) && ((indices[k]) == i);
    }

    @java.lang.Override
    public <T extends org.la4j.Vector> T to(org.la4j.vector.VectorFactory<T> factory) {
        if ((factory.outputClass) == (org.la4j.vector.sparse.CompressedVector.class)) {
            return factory.outputClass.cast(this);
        }
        return super.to(factory);
    }

    @java.lang.Override
    public org.la4j.Vector blankOfLength(int length) {
        return org.la4j.vector.sparse.CompressedVector.zero(length);
    }

    @java.lang.Override
    public byte[] toBinary() {
        int size = (((1 + 4) + 4) + (8 * (cardinality))) + (8 * (cardinality));
        java.nio.ByteBuffer buffer = java.nio.ByteBuffer.allocate(size);
        buffer.put(org.la4j.vector.sparse.CompressedVector.VECTOR_TAG);
        buffer.putInt(length);
        buffer.putInt(cardinality);
        for (int i = 0; i < (cardinality); i++) {
            buffer.putInt(indices[i]);
            buffer.putDouble(values[i]);
        }
        return buffer.array();
    }

    private int searchForIndex(int i) {
        if (((cardinality) == 0) || (i > (indices[((cardinality) - 1)]))) {
            return cardinality;
        }
        int left = 0;
        int right = cardinality;
        while (left < right) {
            int p = (left + right) / 2;
            if ((indices[p]) > i) {
                right = p;
            }else
                if ((indices[p]) < i) {
                    left = p + 1;
                }else {
                    return p;
                }

        } 
        return left;
    }

    private void insert(int k, int i, double value) {
        if (value == 0.0) {
            return;
        }
        if ((values.length) < ((cardinality) + 1)) {
            growUp();
        }
        if (((cardinality) - k) > 0) {
            java.lang.System.arraycopy(values, k, values, (k + 1), ((cardinality) - k));
            java.lang.System.arraycopy(indices, k, indices, (k + 1), ((cardinality) - k));
        }
        values[k] = value;
        indices[k] = i;
        (cardinality)++;
    }

    private void remove(int k) {
        (cardinality)--;
        if (((cardinality) - k) > 0) {
            java.lang.System.arraycopy(values, (k + 1), values, k, ((cardinality) - k));
            java.lang.System.arraycopy(indices, (k + 1), indices, k, ((cardinality) - k));
        }
    }

    private void growUp() {
        if ((values.length) == (length)) {
            throw new java.lang.IllegalStateException("This vector can't grow up.");
        }
        int capacity = java.lang.Math.min(length, ((((cardinality) * 3) / 2) + 1));
        double[] $values = new double[capacity];
        int[] $indices = new int[capacity];
        java.lang.System.arraycopy(values, 0, $values, 0, cardinality);
        java.lang.System.arraycopy(indices, 0, $indices, 0, cardinality);
        values = $values;
        indices = $indices;
    }

    private int align(int length, int capacity) {
        if (capacity < 0) {
            fail((("Cardinality should be positive: " + capacity) + "."));
        }
        if (capacity > length) {
            fail((("Cardinality should be less then or equal to capacity: " + capacity) + "."));
        }
        return java.lang.Math.min(length, (((capacity / (org.la4j.vector.sparse.CompressedVector.MINIMUM_SIZE)) + 1) * (org.la4j.vector.sparse.CompressedVector.MINIMUM_SIZE)));
    }

    @java.lang.Override
    public org.la4j.iterator.VectorIterator nonZeroIterator() {
        return new org.la4j.iterator.VectorIterator(length) {
            private boolean currentIsRemoved = false;

            private int k = -1;

            private int removedIndex = -1;

            @java.lang.Override
            public int index() {
                return currentIsRemoved ? removedIndex : indices[k];
            }

            @java.lang.Override
            public double get() {
                return currentIsRemoved ? 0.0 : values[k];
            }

            @java.lang.Override
            public void set(double value) {
                if ((value == 0.0) && (!(currentIsRemoved))) {
                    currentIsRemoved = true;
                    removedIndex = indices[k];
                    org.la4j.vector.sparse.CompressedVector.this.remove(((k)--));
                }else
                    if ((value != 0.0) && (!(currentIsRemoved))) {
                        values[k] = value;
                    }else {
                        currentIsRemoved = false;
                        org.la4j.vector.sparse.CompressedVector.this.insert((++(k)), removedIndex, value);
                    }

            }

            @java.lang.Override
            public boolean hasNext() {
                return ((k) + 1) < (cardinality);
            }

            @java.lang.Override
            public java.lang.Double next() {
                if (!(hasNext())) {
                    throw new java.util.NoSuchElementException();
                }
                currentIsRemoved = false;
                return values[(++(k))];
            }
        };
    }

    @java.lang.Override
    public org.la4j.iterator.VectorIterator iterator() {
        return new org.la4j.iterator.VectorIterator(length) {
            private int k = 0;

            private int i = -1;

            private boolean currentNonZero = false;

            @java.lang.Override
            public int index() {
                return i;
            }

            @java.lang.Override
            public double get() {
                return currentNonZero ? values[k] : 0.0;
            }

            @java.lang.Override
            public void set(double value) {
                if (currentNonZero) {
                    if (value == 0.0) {
                        org.la4j.vector.sparse.CompressedVector.this.remove(k);
                        currentNonZero = false;
                    }else {
                        values[k] = value;
                    }
                }else {
                    org.la4j.vector.sparse.CompressedVector.this.insert(k, i, value);
                    currentNonZero = true;
                }
            }

            @java.lang.Override
            public boolean hasNext() {
                return ((i) + 1) < (length);
            }

            @java.lang.Override
            public java.lang.Double next() {
                if (!(hasNext())) {
                    throw new java.util.NoSuchElementException();
                }
                if (currentNonZero) {
                    (k)++;
                }
                (i)++;
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(2).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.k",org.la4j.vector.sparse.CompressedVector.2.this.k);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero",org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.i",org.la4j.vector.sparse.CompressedVector.2.this.i);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectionEnds();
                }
                if (runtimeAngelicValue)
                    currentNonZero = ((k) < (cardinality)) && ((indices[k]) == (i));

                return get();
            }
        };
    }
}
16:24:26.495 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
16:24:26.495 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #23
16:24:26.496 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.la4j.vector.sparse.CompressedVector$2:622 which is executed by 5 tests
1164465221
16:24:26.585 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
16:24:26.655 [pool-18-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (61 ms)
<> Total tests run: 143
<> Ignored tests: 0
<> Failed tests: 2
~ testFromMap_unordered(org.la4j.vector.sparse.CompressedVectorTest)
[expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>]
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testFromMap_unordered(org.la4j.vector.dense.BasicVectorTest)
[expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>]
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

16:24:27.317 [pool-17-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
CompressedVector.java:443: error: ')' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.k",org.la4j.vector.sparse.CompressedVector.2.this.k);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                      ^
CompressedVector.java:443: error: illegal start of expression
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.k",org.la4j.vector.sparse.CompressedVector.2.this.k);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                        ^
CompressedVector.java:443: error: ';' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.k",org.la4j.vector.sparse.CompressedVector.2.this.k);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                         ^
CompressedVector.java:443: error: illegal start of expression
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.k",org.la4j.vector.sparse.CompressedVector.2.this.k);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                             ^
CompressedVector.java:443: error: ';' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.k",org.la4j.vector.sparse.CompressedVector.2.this.k);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                               ^
CompressedVector.java:444: error: ')' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero",org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                   ^
CompressedVector.java:444: error: illegal start of expression
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero",org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                     ^
CompressedVector.java:444: error: ';' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero",org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                      ^
CompressedVector.java:444: error: illegal start of expression
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero",org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                          ^
CompressedVector.java:444: error: ';' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero",org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                                         ^
CompressedVector.java:445: error: ')' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.i",org.la4j.vector.sparse.CompressedVector.2.this.i);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                      ^
CompressedVector.java:445: error: illegal start of expression
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.i",org.la4j.vector.sparse.CompressedVector.2.this.i);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                        ^
CompressedVector.java:445: error: ';' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.i",org.la4j.vector.sparse.CompressedVector.2.this.i);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                         ^
CompressedVector.java:445: error: illegal start of expression
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.i",org.la4j.vector.sparse.CompressedVector.2.this.i);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                             ^
CompressedVector.java:445: error: ';' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.i",org.la4j.vector.sparse.CompressedVector.2.this.i);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                               ^
16:24:27.623 [pool-17-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class CompressedVector extends org.la4j.vector.SparseVector {
    private static final byte VECTOR_TAG = ((byte) (16));

    private static final int MINIMUM_SIZE = 32;

    private double[] values;

    private int[] indices;

    public CompressedVector() {
        this(0);
    }

    public CompressedVector(int length) {
        this(length, 0);
    }

    public CompressedVector(int length, int capacity) {
        super(length);
        int alignedSize = align(length, capacity);
        this.values = new double[alignedSize];
        this.indices = new int[alignedSize];
    }

    public CompressedVector(int length, int cardinality, double[] values, int[] indices) {
        super(length, cardinality);
        this.values = values;
        this.indices = indices;
    }

    public static org.la4j.vector.sparse.CompressedVector zero(int length) {
        return new org.la4j.vector.sparse.CompressedVector(length);
    }

    public static org.la4j.vector.sparse.CompressedVector zero(int length, int capacity) {
        return new org.la4j.vector.sparse.CompressedVector(length, capacity);
    }

    public static org.la4j.vector.sparse.CompressedVector random(int length, double density, java.util.Random random) {
        if ((density < 0.0) || (density > 1.0)) {
            throw new java.lang.IllegalArgumentException("The density value should be between 0 and 1.0");
        }
        int cardinality = ((int) (length * density));
        double[] values = new double[cardinality];
        int[] indices = new int[cardinality];
        for (int i = 0; i < cardinality; i++) {
            values[i] = random.nextDouble();
            indices[i] = random.nextInt(length);
        }
        java.util.Arrays.sort(indices);
        return new org.la4j.vector.sparse.CompressedVector(length, cardinality, values, indices);
    }

    public static org.la4j.vector.sparse.CompressedVector fromArray(double[] array) {
        int length = array.length;
        org.la4j.vector.sparse.CompressedVector result = org.la4j.vector.sparse.CompressedVector.zero(length);
        for (int i = 0; i < length; i++) {
            if ((array[i]) != 0.0) {
                result.set(i, array[i]);
            }
        }
        return result;
    }

    public static org.la4j.vector.sparse.CompressedVector fromBinary(byte[] array) {
        java.nio.ByteBuffer buffer = java.nio.ByteBuffer.wrap(array);
        if ((buffer.get()) != (org.la4j.vector.sparse.CompressedVector.VECTOR_TAG)) {
            throw new java.lang.IllegalArgumentException("Can not decode CompressedVector from the given byte array.");
        }
        int length = buffer.getInt();
        int cardinality = buffer.getInt();
        double[] values = new double[cardinality];
        int[] indices = new int[cardinality];
        for (int i = 0; i < cardinality; i++) {
            indices[i] = buffer.getInt();
            values[i] = buffer.getDouble();
        }
        return new org.la4j.vector.sparse.CompressedVector(length, cardinality, values, indices);
    }

    public static org.la4j.vector.sparse.CompressedVector fromCSV(java.lang.String csv) {
        return org.la4j.Vector.fromCSV(csv).to(org.la4j.Vectors.COMPRESSED);
    }

    public static org.la4j.vector.sparse.CompressedVector fromMatrixMarket(java.lang.String mm) {
        return org.la4j.Vector.fromMatrixMarket(mm).to(org.la4j.Vectors.COMPRESSED);
    }

    public static org.la4j.vector.sparse.CompressedVector fromCollection(java.util.Collection<? extends java.lang.Number> list) {
        return org.la4j.Vector.fromCollection(list).to(org.la4j.Vectors.COMPRESSED);
    }

    public static org.la4j.vector.sparse.CompressedVector fromMap(java.util.Map<java.lang.Integer, ? extends java.lang.Number> map, int length) {
        int cardinality = map.size();
        int[] indices = new int[cardinality];
        double[] values = new double[cardinality];
        int i = 0;
        for (java.util.Map.Entry<java.lang.Integer, ? extends java.lang.Number> entry : map.entrySet()) {
            int index = entry.getKey();
            if ((index < 0) || (index >= length)) {
                throw new java.lang.IllegalArgumentException("Check your map: Index must be 0..n-1");
            }
            indices[i] = index;
            values[i] = entry.getValue().doubleValue();
            i++;
        }
        return new org.la4j.vector.sparse.CompressedVector(length, cardinality, values, indices);
    }

    @java.lang.Override
    public double getOrElse(int i, double defaultValue) {
        ensureIndexIsInBounds(i);
        int k = searchForIndex(i);
        if ((k < (cardinality)) && ((indices[k]) == i)) {
            return values[k];
        }
        return defaultValue;
    }

    @java.lang.Override
    public void set(int i, double value) {
        ensureIndexIsInBounds(i);
        int k = searchForIndex(i);
        if ((k < (cardinality)) && ((indices[k]) == i)) {
            if (value != 0.0) {
                values[k] = value;
            }else {
                remove(k);
            }
        }else {
            insert(k, i, value);
        }
    }

    @java.lang.Override
    public void setAll(double value) {
        if (value == 0.0) {
            cardinality = 0;
        }else {
            if ((values.length) < (length)) {
                values = new double[length];
                indices = new int[length];
            }
            for (int i = 0; i < (length); i++) {
                indices[i] = i;
                values[i] = value;
            }
            cardinality = length;
        }
    }

    @java.lang.Override
    public void swapElements(int i, int j) {
        if (i == j) {
            return;
        }
        int ii = searchForIndex(i);
        int jj = searchForIndex(j);
        boolean iiNotZero = (ii < (cardinality)) && (i == (indices[ii]));
        boolean jjNotZero = (jj < (cardinality)) && (j == (indices[jj]));
        if (iiNotZero && jjNotZero) {
            double sd = values[ii];
            values[ii] = values[jj];
            values[jj] = sd;
        }else {
            double notZero = values[(iiNotZero ? ii : jj)];
            int leftIndex = (ii < jj) ? ii : jj;
            int rightIndex = (ii > jj) ? ii : jj;
            if (((iiNotZero && (leftIndex == ii)) || (jjNotZero && (leftIndex == jj))) && (ii != jj)) {
                java.lang.System.arraycopy(values, (leftIndex + 1), values, leftIndex, ((cardinality) - leftIndex));
                java.lang.System.arraycopy(values, (rightIndex - 1), values, rightIndex, ((cardinality) - rightIndex));
                values[(rightIndex - 1)] = notZero;
                java.lang.System.arraycopy(indices, (leftIndex + 1), indices, leftIndex, ((cardinality) - leftIndex));
                java.lang.System.arraycopy(indices, (rightIndex - 1), indices, rightIndex, ((cardinality) - rightIndex));
                indices[(rightIndex - 1)] = (jjNotZero) ? i : j;
            }else
                if ((iiNotZero && (rightIndex == ii)) || (jjNotZero && (rightIndex == jj))) {
                    java.lang.System.arraycopy(values, (rightIndex + 1), values, rightIndex, ((cardinality) - rightIndex));
                    java.lang.System.arraycopy(values, leftIndex, values, (leftIndex + 1), ((cardinality) - leftIndex));
                    values[leftIndex] = notZero;
                    java.lang.System.arraycopy(indices, (rightIndex + 1), indices, rightIndex, ((cardinality) - rightIndex));
                    java.lang.System.arraycopy(indices, leftIndex, indices, (leftIndex + 1), ((cardinality) - leftIndex));
                    indices[leftIndex] = (jjNotZero) ? i : j;
                }

        }
    }

    @java.lang.Override
    public org.la4j.Vector copyOfLength(int length) {
        ensureLengthIsCorrect(length);
        int $cardinality = (length >= (this.length)) ? cardinality : searchForIndex(length);
        int capacity = align(length, $cardinality);
        double[] $values = new double[capacity];
        int[] $indices = new int[capacity];
        java.lang.System.arraycopy(values, 0, $values, 0, $cardinality);
        java.lang.System.arraycopy(indices, 0, $indices, 0, $cardinality);
        return new org.la4j.vector.sparse.CompressedVector(length, $cardinality, $values, $indices);
    }

    @java.lang.Override
    public void each(org.la4j.vector.functor.VectorProcedure procedure) {
        int k = 0;
        for (int i = 0; i < (length); i++) {
            if ((k < (cardinality)) && ((indices[k]) == i)) {
                procedure.apply(i, values[(k++)]);
            }else {
                procedure.apply(i, 0.0);
            }
        }
    }

    @java.lang.Override
    public void eachNonZero(org.la4j.vector.functor.VectorProcedure procedure) {
        for (int i = 0; i < (cardinality); i++) {
            procedure.apply(indices[i], values[i]);
        }
    }

    @java.lang.Override
    public void updateAt(int i, org.la4j.vector.functor.VectorFunction function) {
        int k = searchForIndex(i);
        if ((k < (cardinality)) && ((indices[k]) == i)) {
            double value = function.evaluate(i, values[k]);
            if (value != 0.0) {
                values[k] = value;
            }else {
                remove(k);
            }
        }else {
            insert(k, i, function.evaluate(i, 0.0));
        }
    }

    @java.lang.Override
    public boolean nonZeroAt(int i) {
        int k = searchForIndex(i);
        return (k < (cardinality)) && ((indices[k]) == i);
    }

    @java.lang.Override
    public <T extends org.la4j.Vector> T to(org.la4j.vector.VectorFactory<T> factory) {
        if ((factory.outputClass) == (org.la4j.vector.sparse.CompressedVector.class)) {
            return factory.outputClass.cast(this);
        }
        return super.to(factory);
    }

    @java.lang.Override
    public org.la4j.Vector blankOfLength(int length) {
        return org.la4j.vector.sparse.CompressedVector.zero(length);
    }

    @java.lang.Override
    public byte[] toBinary() {
        int size = (((1 + 4) + 4) + (8 * (cardinality))) + (8 * (cardinality));
        java.nio.ByteBuffer buffer = java.nio.ByteBuffer.allocate(size);
        buffer.put(org.la4j.vector.sparse.CompressedVector.VECTOR_TAG);
        buffer.putInt(length);
        buffer.putInt(cardinality);
        for (int i = 0; i < (cardinality); i++) {
            buffer.putInt(indices[i]);
            buffer.putDouble(values[i]);
        }
        return buffer.array();
    }

    private int searchForIndex(int i) {
        if (((cardinality) == 0) || (i > (indices[((cardinality) - 1)]))) {
            return cardinality;
        }
        int left = 0;
        int right = cardinality;
        while (left < right) {
            int p = (left + right) / 2;
            if ((indices[p]) > i) {
                right = p;
            }else
                if ((indices[p]) < i) {
                    left = p + 1;
                }else {
                    return p;
                }

        } 
        return left;
    }

    private void insert(int k, int i, double value) {
        if (value == 0.0) {
            return;
        }
        if ((values.length) < ((cardinality) + 1)) {
            growUp();
        }
        if (((cardinality) - k) > 0) {
            java.lang.System.arraycopy(values, k, values, (k + 1), ((cardinality) - k));
            java.lang.System.arraycopy(indices, k, indices, (k + 1), ((cardinality) - k));
        }
        values[k] = value;
        indices[k] = i;
        (cardinality)++;
    }

    private void remove(int k) {
        (cardinality)--;
        if (((cardinality) - k) > 0) {
            java.lang.System.arraycopy(values, (k + 1), values, k, ((cardinality) - k));
            java.lang.System.arraycopy(indices, (k + 1), indices, k, ((cardinality) - k));
        }
    }

    private void growUp() {
        if ((values.length) == (length)) {
            throw new java.lang.IllegalStateException("This vector can't grow up.");
        }
        int capacity = java.lang.Math.min(length, ((((cardinality) * 3) / 2) + 1));
        double[] $values = new double[capacity];
        int[] $indices = new int[capacity];
        java.lang.System.arraycopy(values, 0, $values, 0, cardinality);
        java.lang.System.arraycopy(indices, 0, $indices, 0, cardinality);
        values = $values;
        indices = $indices;
    }

    private int align(int length, int capacity) {
        if (capacity < 0) {
            fail((("Cardinality should be positive: " + capacity) + "."));
        }
        if (capacity > length) {
            fail((("Cardinality should be less then or equal to capacity: " + capacity) + "."));
        }
        return java.lang.Math.min(length, (((capacity / (org.la4j.vector.sparse.CompressedVector.MINIMUM_SIZE)) + 1) * (org.la4j.vector.sparse.CompressedVector.MINIMUM_SIZE)));
    }

    @java.lang.Override
    public org.la4j.iterator.VectorIterator nonZeroIterator() {
        return new org.la4j.iterator.VectorIterator(length) {
            private boolean currentIsRemoved = false;

            private int k = -1;

            private int removedIndex = -1;

            @java.lang.Override
            public int index() {
                return currentIsRemoved ? removedIndex : indices[k];
            }

            @java.lang.Override
            public double get() {
                return currentIsRemoved ? 0.0 : values[k];
            }

            @java.lang.Override
            public void set(double value) {
                if ((value == 0.0) && (!(currentIsRemoved))) {
                    currentIsRemoved = true;
                    removedIndex = indices[k];
                    org.la4j.vector.sparse.CompressedVector.this.remove(((k)--));
                }else
                    if ((value != 0.0) && (!(currentIsRemoved))) {
                        values[k] = value;
                    }else {
                        currentIsRemoved = false;
                        org.la4j.vector.sparse.CompressedVector.this.insert((++(k)), removedIndex, value);
                    }

            }

            @java.lang.Override
            public boolean hasNext() {
                return ((k) + 1) < (cardinality);
            }

            @java.lang.Override
            public java.lang.Double next() {
                if (!(hasNext())) {
                    throw new java.util.NoSuchElementException();
                }
                currentIsRemoved = false;
                return values[(++(k))];
            }
        };
    }

    @java.lang.Override
    public org.la4j.iterator.VectorIterator iterator() {
        return new org.la4j.iterator.VectorIterator(length) {
            private int k = 0;

            private int i = -1;

            private boolean currentNonZero = false;

            @java.lang.Override
            public int index() {
                return i;
            }

            @java.lang.Override
            public double get() {
                return currentNonZero ? values[k] : 0.0;
            }

            @java.lang.Override
            public void set(double value) {
                if (currentNonZero) {
                    if (value == 0.0) {
                        org.la4j.vector.sparse.CompressedVector.this.remove(k);
                        currentNonZero = false;
                    }else {
                        values[k] = value;
                    }
                }else {
                    org.la4j.vector.sparse.CompressedVector.this.insert(k, i, value);
                    currentNonZero = true;
                }
            }

            @java.lang.Override
            public boolean hasNext() {
                return ((i) + 1) < (length);
            }

            @java.lang.Override
            public java.lang.Double next() {
                if (!(hasNext())) {
                    throw new java.util.NoSuchElementException();
                }
                if (currentNonZero) {
                    (k)++;
                }
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(3).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.k",org.la4j.vector.sparse.CompressedVector.2.this.k);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero",org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.i",org.la4j.vector.sparse.CompressedVector.2.this.i);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectionEnds();
                }
                if (runtimeAngelicValue)
                    (i)++;

                currentNonZero = ((k) < (cardinality)) && ((indices[k]) == (i));
                return get();
            }
        };
    }
}
16:24:27.623 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
16:24:27.623 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #24
16:24:27.623 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.la4j.vector.sparse.CompressedVector$2:619 which is executed by 5 tests
1164465221
16:24:27.707 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
16:24:27.777 [pool-20-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (61 ms)
<> Total tests run: 143
<> Ignored tests: 0
<> Failed tests: 2
~ testFromMap_unordered(org.la4j.vector.sparse.CompressedVectorTest)
[expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>]
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testFromMap_unordered(org.la4j.vector.dense.BasicVectorTest)
[expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>]
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

16:24:28.216 [pool-19-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
CompressedVector.java:441: error: ')' expected
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.k",org.la4j.vector.sparse.CompressedVector.2.this.k);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                          ^
CompressedVector.java:441: error: illegal start of expression
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.k",org.la4j.vector.sparse.CompressedVector.2.this.k);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                            ^
CompressedVector.java:441: error: ';' expected
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.k",org.la4j.vector.sparse.CompressedVector.2.this.k);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                             ^
CompressedVector.java:441: error: illegal start of expression
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.k",org.la4j.vector.sparse.CompressedVector.2.this.k);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                 ^
CompressedVector.java:441: error: ';' expected
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.k",org.la4j.vector.sparse.CompressedVector.2.this.k);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                   ^
CompressedVector.java:442: error: ')' expected
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero",org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                       ^
CompressedVector.java:442: error: illegal start of expression
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero",org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                         ^
CompressedVector.java:442: error: ';' expected
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero",org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                          ^
CompressedVector.java:442: error: illegal start of expression
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero",org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                              ^
CompressedVector.java:442: error: ';' expected
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero",org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                                             ^
CompressedVector.java:443: error: ')' expected
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.i",org.la4j.vector.sparse.CompressedVector.2.this.i);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                          ^
CompressedVector.java:443: error: illegal start of expression
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.i",org.la4j.vector.sparse.CompressedVector.2.this.i);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                            ^
CompressedVector.java:443: error: ';' expected
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.i",org.la4j.vector.sparse.CompressedVector.2.this.i);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                             ^
CompressedVector.java:443: error: illegal start of expression
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.i",org.la4j.vector.sparse.CompressedVector.2.this.i);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                 ^
CompressedVector.java:443: error: ';' expected
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.i",org.la4j.vector.sparse.CompressedVector.2.this.i);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                   ^
16:24:28.665 [pool-19-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class CompressedVector extends org.la4j.vector.SparseVector {
    private static final byte VECTOR_TAG = ((byte) (16));

    private static final int MINIMUM_SIZE = 32;

    private double[] values;

    private int[] indices;

    public CompressedVector() {
        this(0);
    }

    public CompressedVector(int length) {
        this(length, 0);
    }

    public CompressedVector(int length, int capacity) {
        super(length);
        int alignedSize = align(length, capacity);
        this.values = new double[alignedSize];
        this.indices = new int[alignedSize];
    }

    public CompressedVector(int length, int cardinality, double[] values, int[] indices) {
        super(length, cardinality);
        this.values = values;
        this.indices = indices;
    }

    public static org.la4j.vector.sparse.CompressedVector zero(int length) {
        return new org.la4j.vector.sparse.CompressedVector(length);
    }

    public static org.la4j.vector.sparse.CompressedVector zero(int length, int capacity) {
        return new org.la4j.vector.sparse.CompressedVector(length, capacity);
    }

    public static org.la4j.vector.sparse.CompressedVector random(int length, double density, java.util.Random random) {
        if ((density < 0.0) || (density > 1.0)) {
            throw new java.lang.IllegalArgumentException("The density value should be between 0 and 1.0");
        }
        int cardinality = ((int) (length * density));
        double[] values = new double[cardinality];
        int[] indices = new int[cardinality];
        for (int i = 0; i < cardinality; i++) {
            values[i] = random.nextDouble();
            indices[i] = random.nextInt(length);
        }
        java.util.Arrays.sort(indices);
        return new org.la4j.vector.sparse.CompressedVector(length, cardinality, values, indices);
    }

    public static org.la4j.vector.sparse.CompressedVector fromArray(double[] array) {
        int length = array.length;
        org.la4j.vector.sparse.CompressedVector result = org.la4j.vector.sparse.CompressedVector.zero(length);
        for (int i = 0; i < length; i++) {
            if ((array[i]) != 0.0) {
                result.set(i, array[i]);
            }
        }
        return result;
    }

    public static org.la4j.vector.sparse.CompressedVector fromBinary(byte[] array) {
        java.nio.ByteBuffer buffer = java.nio.ByteBuffer.wrap(array);
        if ((buffer.get()) != (org.la4j.vector.sparse.CompressedVector.VECTOR_TAG)) {
            throw new java.lang.IllegalArgumentException("Can not decode CompressedVector from the given byte array.");
        }
        int length = buffer.getInt();
        int cardinality = buffer.getInt();
        double[] values = new double[cardinality];
        int[] indices = new int[cardinality];
        for (int i = 0; i < cardinality; i++) {
            indices[i] = buffer.getInt();
            values[i] = buffer.getDouble();
        }
        return new org.la4j.vector.sparse.CompressedVector(length, cardinality, values, indices);
    }

    public static org.la4j.vector.sparse.CompressedVector fromCSV(java.lang.String csv) {
        return org.la4j.Vector.fromCSV(csv).to(org.la4j.Vectors.COMPRESSED);
    }

    public static org.la4j.vector.sparse.CompressedVector fromMatrixMarket(java.lang.String mm) {
        return org.la4j.Vector.fromMatrixMarket(mm).to(org.la4j.Vectors.COMPRESSED);
    }

    public static org.la4j.vector.sparse.CompressedVector fromCollection(java.util.Collection<? extends java.lang.Number> list) {
        return org.la4j.Vector.fromCollection(list).to(org.la4j.Vectors.COMPRESSED);
    }

    public static org.la4j.vector.sparse.CompressedVector fromMap(java.util.Map<java.lang.Integer, ? extends java.lang.Number> map, int length) {
        int cardinality = map.size();
        int[] indices = new int[cardinality];
        double[] values = new double[cardinality];
        int i = 0;
        for (java.util.Map.Entry<java.lang.Integer, ? extends java.lang.Number> entry : map.entrySet()) {
            int index = entry.getKey();
            if ((index < 0) || (index >= length)) {
                throw new java.lang.IllegalArgumentException("Check your map: Index must be 0..n-1");
            }
            indices[i] = index;
            values[i] = entry.getValue().doubleValue();
            i++;
        }
        return new org.la4j.vector.sparse.CompressedVector(length, cardinality, values, indices);
    }

    @java.lang.Override
    public double getOrElse(int i, double defaultValue) {
        ensureIndexIsInBounds(i);
        int k = searchForIndex(i);
        if ((k < (cardinality)) && ((indices[k]) == i)) {
            return values[k];
        }
        return defaultValue;
    }

    @java.lang.Override
    public void set(int i, double value) {
        ensureIndexIsInBounds(i);
        int k = searchForIndex(i);
        if ((k < (cardinality)) && ((indices[k]) == i)) {
            if (value != 0.0) {
                values[k] = value;
            }else {
                remove(k);
            }
        }else {
            insert(k, i, value);
        }
    }

    @java.lang.Override
    public void setAll(double value) {
        if (value == 0.0) {
            cardinality = 0;
        }else {
            if ((values.length) < (length)) {
                values = new double[length];
                indices = new int[length];
            }
            for (int i = 0; i < (length); i++) {
                indices[i] = i;
                values[i] = value;
            }
            cardinality = length;
        }
    }

    @java.lang.Override
    public void swapElements(int i, int j) {
        if (i == j) {
            return;
        }
        int ii = searchForIndex(i);
        int jj = searchForIndex(j);
        boolean iiNotZero = (ii < (cardinality)) && (i == (indices[ii]));
        boolean jjNotZero = (jj < (cardinality)) && (j == (indices[jj]));
        if (iiNotZero && jjNotZero) {
            double sd = values[ii];
            values[ii] = values[jj];
            values[jj] = sd;
        }else {
            double notZero = values[(iiNotZero ? ii : jj)];
            int leftIndex = (ii < jj) ? ii : jj;
            int rightIndex = (ii > jj) ? ii : jj;
            if (((iiNotZero && (leftIndex == ii)) || (jjNotZero && (leftIndex == jj))) && (ii != jj)) {
                java.lang.System.arraycopy(values, (leftIndex + 1), values, leftIndex, ((cardinality) - leftIndex));
                java.lang.System.arraycopy(values, (rightIndex - 1), values, rightIndex, ((cardinality) - rightIndex));
                values[(rightIndex - 1)] = notZero;
                java.lang.System.arraycopy(indices, (leftIndex + 1), indices, leftIndex, ((cardinality) - leftIndex));
                java.lang.System.arraycopy(indices, (rightIndex - 1), indices, rightIndex, ((cardinality) - rightIndex));
                indices[(rightIndex - 1)] = (jjNotZero) ? i : j;
            }else
                if ((iiNotZero && (rightIndex == ii)) || (jjNotZero && (rightIndex == jj))) {
                    java.lang.System.arraycopy(values, (rightIndex + 1), values, rightIndex, ((cardinality) - rightIndex));
                    java.lang.System.arraycopy(values, leftIndex, values, (leftIndex + 1), ((cardinality) - leftIndex));
                    values[leftIndex] = notZero;
                    java.lang.System.arraycopy(indices, (rightIndex + 1), indices, rightIndex, ((cardinality) - rightIndex));
                    java.lang.System.arraycopy(indices, leftIndex, indices, (leftIndex + 1), ((cardinality) - leftIndex));
                    indices[leftIndex] = (jjNotZero) ? i : j;
                }

        }
    }

    @java.lang.Override
    public org.la4j.Vector copyOfLength(int length) {
        ensureLengthIsCorrect(length);
        int $cardinality = (length >= (this.length)) ? cardinality : searchForIndex(length);
        int capacity = align(length, $cardinality);
        double[] $values = new double[capacity];
        int[] $indices = new int[capacity];
        java.lang.System.arraycopy(values, 0, $values, 0, $cardinality);
        java.lang.System.arraycopy(indices, 0, $indices, 0, $cardinality);
        return new org.la4j.vector.sparse.CompressedVector(length, $cardinality, $values, $indices);
    }

    @java.lang.Override
    public void each(org.la4j.vector.functor.VectorProcedure procedure) {
        int k = 0;
        for (int i = 0; i < (length); i++) {
            if ((k < (cardinality)) && ((indices[k]) == i)) {
                procedure.apply(i, values[(k++)]);
            }else {
                procedure.apply(i, 0.0);
            }
        }
    }

    @java.lang.Override
    public void eachNonZero(org.la4j.vector.functor.VectorProcedure procedure) {
        for (int i = 0; i < (cardinality); i++) {
            procedure.apply(indices[i], values[i]);
        }
    }

    @java.lang.Override
    public void updateAt(int i, org.la4j.vector.functor.VectorFunction function) {
        int k = searchForIndex(i);
        if ((k < (cardinality)) && ((indices[k]) == i)) {
            double value = function.evaluate(i, values[k]);
            if (value != 0.0) {
                values[k] = value;
            }else {
                remove(k);
            }
        }else {
            insert(k, i, function.evaluate(i, 0.0));
        }
    }

    @java.lang.Override
    public boolean nonZeroAt(int i) {
        int k = searchForIndex(i);
        return (k < (cardinality)) && ((indices[k]) == i);
    }

    @java.lang.Override
    public <T extends org.la4j.Vector> T to(org.la4j.vector.VectorFactory<T> factory) {
        if ((factory.outputClass) == (org.la4j.vector.sparse.CompressedVector.class)) {
            return factory.outputClass.cast(this);
        }
        return super.to(factory);
    }

    @java.lang.Override
    public org.la4j.Vector blankOfLength(int length) {
        return org.la4j.vector.sparse.CompressedVector.zero(length);
    }

    @java.lang.Override
    public byte[] toBinary() {
        int size = (((1 + 4) + 4) + (8 * (cardinality))) + (8 * (cardinality));
        java.nio.ByteBuffer buffer = java.nio.ByteBuffer.allocate(size);
        buffer.put(org.la4j.vector.sparse.CompressedVector.VECTOR_TAG);
        buffer.putInt(length);
        buffer.putInt(cardinality);
        for (int i = 0; i < (cardinality); i++) {
            buffer.putInt(indices[i]);
            buffer.putDouble(values[i]);
        }
        return buffer.array();
    }

    private int searchForIndex(int i) {
        if (((cardinality) == 0) || (i > (indices[((cardinality) - 1)]))) {
            return cardinality;
        }
        int left = 0;
        int right = cardinality;
        while (left < right) {
            int p = (left + right) / 2;
            if ((indices[p]) > i) {
                right = p;
            }else
                if ((indices[p]) < i) {
                    left = p + 1;
                }else {
                    return p;
                }

        } 
        return left;
    }

    private void insert(int k, int i, double value) {
        if (value == 0.0) {
            return;
        }
        if ((values.length) < ((cardinality) + 1)) {
            growUp();
        }
        if (((cardinality) - k) > 0) {
            java.lang.System.arraycopy(values, k, values, (k + 1), ((cardinality) - k));
            java.lang.System.arraycopy(indices, k, indices, (k + 1), ((cardinality) - k));
        }
        values[k] = value;
        indices[k] = i;
        (cardinality)++;
    }

    private void remove(int k) {
        (cardinality)--;
        if (((cardinality) - k) > 0) {
            java.lang.System.arraycopy(values, (k + 1), values, k, ((cardinality) - k));
            java.lang.System.arraycopy(indices, (k + 1), indices, k, ((cardinality) - k));
        }
    }

    private void growUp() {
        if ((values.length) == (length)) {
            throw new java.lang.IllegalStateException("This vector can't grow up.");
        }
        int capacity = java.lang.Math.min(length, ((((cardinality) * 3) / 2) + 1));
        double[] $values = new double[capacity];
        int[] $indices = new int[capacity];
        java.lang.System.arraycopy(values, 0, $values, 0, cardinality);
        java.lang.System.arraycopy(indices, 0, $indices, 0, cardinality);
        values = $values;
        indices = $indices;
    }

    private int align(int length, int capacity) {
        if (capacity < 0) {
            fail((("Cardinality should be positive: " + capacity) + "."));
        }
        if (capacity > length) {
            fail((("Cardinality should be less then or equal to capacity: " + capacity) + "."));
        }
        return java.lang.Math.min(length, (((capacity / (org.la4j.vector.sparse.CompressedVector.MINIMUM_SIZE)) + 1) * (org.la4j.vector.sparse.CompressedVector.MINIMUM_SIZE)));
    }

    @java.lang.Override
    public org.la4j.iterator.VectorIterator nonZeroIterator() {
        return new org.la4j.iterator.VectorIterator(length) {
            private boolean currentIsRemoved = false;

            private int k = -1;

            private int removedIndex = -1;

            @java.lang.Override
            public int index() {
                return currentIsRemoved ? removedIndex : indices[k];
            }

            @java.lang.Override
            public double get() {
                return currentIsRemoved ? 0.0 : values[k];
            }

            @java.lang.Override
            public void set(double value) {
                if ((value == 0.0) && (!(currentIsRemoved))) {
                    currentIsRemoved = true;
                    removedIndex = indices[k];
                    org.la4j.vector.sparse.CompressedVector.this.remove(((k)--));
                }else
                    if ((value != 0.0) && (!(currentIsRemoved))) {
                        values[k] = value;
                    }else {
                        currentIsRemoved = false;
                        org.la4j.vector.sparse.CompressedVector.this.insert((++(k)), removedIndex, value);
                    }

            }

            @java.lang.Override
            public boolean hasNext() {
                return ((k) + 1) < (cardinality);
            }

            @java.lang.Override
            public java.lang.Double next() {
                if (!(hasNext())) {
                    throw new java.util.NoSuchElementException();
                }
                currentIsRemoved = false;
                return values[(++(k))];
            }
        };
    }

    @java.lang.Override
    public org.la4j.iterator.VectorIterator iterator() {
        return new org.la4j.iterator.VectorIterator(length) {
            private int k = 0;

            private int i = -1;

            private boolean currentNonZero = false;

            @java.lang.Override
            public int index() {
                return i;
            }

            @java.lang.Override
            public double get() {
                return currentNonZero ? values[k] : 0.0;
            }

            @java.lang.Override
            public void set(double value) {
                if (currentNonZero) {
                    if (value == 0.0) {
                        org.la4j.vector.sparse.CompressedVector.this.remove(k);
                        currentNonZero = false;
                    }else {
                        values[k] = value;
                    }
                }else {
                    org.la4j.vector.sparse.CompressedVector.this.insert(k, i, value);
                    currentNonZero = true;
                }
            }

            @java.lang.Override
            public boolean hasNext() {
                return ((i) + 1) < (length);
            }

            @java.lang.Override
            public java.lang.Double next() {
                if (!(hasNext())) {
                    throw new java.util.NoSuchElementException();
                }
                if (currentNonZero) {
                    boolean spoonDefaultValue = false;
                    try {
                        spoonDefaultValue = true;
                    } catch (java.lang.Exception __NopolProcessorException) {
                    }
                    boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                    if (fr.inria.lille.commons.trace.RuntimeValues.instance(4).isEnabled()) {
                        fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectionStarts();
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.k",org.la4j.vector.sparse.CompressedVector.2.this.k);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero",org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.i",org.la4j.vector.sparse.CompressedVector.2.this.i);} catch (Exception ex1) {ex1.printStackTrace();};
                        fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectOutput(runtimeAngelicValue);
                        fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectionEnds();
                    }
                    if (runtimeAngelicValue)
                        (k)++;

                }
                (i)++;
                currentNonZero = ((k) < (cardinality)) && ((indices[k]) == (i));
                return get();
            }
        };
    }
}
16:24:28.666 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
16:24:28.666 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #25
16:24:28.666 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.la4j.vector.sparse.CompressedVector$2:618 which is executed by 5 tests
1164465221
16:24:28.760 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
16:24:28.825 [pool-22-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (57 ms)
<> Total tests run: 143
<> Ignored tests: 0
<> Failed tests: 2
~ testFromMap_unordered(org.la4j.vector.sparse.CompressedVectorTest)
[expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>]
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testFromMap_unordered(org.la4j.vector.dense.BasicVectorTest)
[expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>]
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

16:24:29.270 [pool-21-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
CompressedVector.java:440: error: ')' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.k",org.la4j.vector.sparse.CompressedVector.2.this.k);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                      ^
CompressedVector.java:440: error: illegal start of expression
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.k",org.la4j.vector.sparse.CompressedVector.2.this.k);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                        ^
CompressedVector.java:440: error: ';' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.k",org.la4j.vector.sparse.CompressedVector.2.this.k);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                         ^
CompressedVector.java:440: error: illegal start of expression
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.k",org.la4j.vector.sparse.CompressedVector.2.this.k);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                             ^
CompressedVector.java:440: error: ';' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.k",org.la4j.vector.sparse.CompressedVector.2.this.k);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                               ^
CompressedVector.java:441: error: ')' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero",org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                   ^
CompressedVector.java:441: error: illegal start of expression
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero",org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                     ^
CompressedVector.java:441: error: ';' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero",org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                      ^
CompressedVector.java:441: error: illegal start of expression
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero",org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                          ^
CompressedVector.java:441: error: ';' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero",org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                                         ^
CompressedVector.java:442: error: ')' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.i",org.la4j.vector.sparse.CompressedVector.2.this.i);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                      ^
CompressedVector.java:442: error: illegal start of expression
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.i",org.la4j.vector.sparse.CompressedVector.2.this.i);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                        ^
CompressedVector.java:442: error: ';' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.i",org.la4j.vector.sparse.CompressedVector.2.this.i);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                         ^
CompressedVector.java:442: error: illegal start of expression
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.i",org.la4j.vector.sparse.CompressedVector.2.this.i);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                             ^
CompressedVector.java:442: error: ';' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.i",org.la4j.vector.sparse.CompressedVector.2.this.i);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                               ^
16:24:29.580 [pool-21-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class CompressedVector extends org.la4j.vector.SparseVector {
    private static final byte VECTOR_TAG = ((byte) (16));

    private static final int MINIMUM_SIZE = 32;

    private double[] values;

    private int[] indices;

    public CompressedVector() {
        this(0);
    }

    public CompressedVector(int length) {
        this(length, 0);
    }

    public CompressedVector(int length, int capacity) {
        super(length);
        int alignedSize = align(length, capacity);
        this.values = new double[alignedSize];
        this.indices = new int[alignedSize];
    }

    public CompressedVector(int length, int cardinality, double[] values, int[] indices) {
        super(length, cardinality);
        this.values = values;
        this.indices = indices;
    }

    public static org.la4j.vector.sparse.CompressedVector zero(int length) {
        return new org.la4j.vector.sparse.CompressedVector(length);
    }

    public static org.la4j.vector.sparse.CompressedVector zero(int length, int capacity) {
        return new org.la4j.vector.sparse.CompressedVector(length, capacity);
    }

    public static org.la4j.vector.sparse.CompressedVector random(int length, double density, java.util.Random random) {
        if ((density < 0.0) || (density > 1.0)) {
            throw new java.lang.IllegalArgumentException("The density value should be between 0 and 1.0");
        }
        int cardinality = ((int) (length * density));
        double[] values = new double[cardinality];
        int[] indices = new int[cardinality];
        for (int i = 0; i < cardinality; i++) {
            values[i] = random.nextDouble();
            indices[i] = random.nextInt(length);
        }
        java.util.Arrays.sort(indices);
        return new org.la4j.vector.sparse.CompressedVector(length, cardinality, values, indices);
    }

    public static org.la4j.vector.sparse.CompressedVector fromArray(double[] array) {
        int length = array.length;
        org.la4j.vector.sparse.CompressedVector result = org.la4j.vector.sparse.CompressedVector.zero(length);
        for (int i = 0; i < length; i++) {
            if ((array[i]) != 0.0) {
                result.set(i, array[i]);
            }
        }
        return result;
    }

    public static org.la4j.vector.sparse.CompressedVector fromBinary(byte[] array) {
        java.nio.ByteBuffer buffer = java.nio.ByteBuffer.wrap(array);
        if ((buffer.get()) != (org.la4j.vector.sparse.CompressedVector.VECTOR_TAG)) {
            throw new java.lang.IllegalArgumentException("Can not decode CompressedVector from the given byte array.");
        }
        int length = buffer.getInt();
        int cardinality = buffer.getInt();
        double[] values = new double[cardinality];
        int[] indices = new int[cardinality];
        for (int i = 0; i < cardinality; i++) {
            indices[i] = buffer.getInt();
            values[i] = buffer.getDouble();
        }
        return new org.la4j.vector.sparse.CompressedVector(length, cardinality, values, indices);
    }

    public static org.la4j.vector.sparse.CompressedVector fromCSV(java.lang.String csv) {
        return org.la4j.Vector.fromCSV(csv).to(org.la4j.Vectors.COMPRESSED);
    }

    public static org.la4j.vector.sparse.CompressedVector fromMatrixMarket(java.lang.String mm) {
        return org.la4j.Vector.fromMatrixMarket(mm).to(org.la4j.Vectors.COMPRESSED);
    }

    public static org.la4j.vector.sparse.CompressedVector fromCollection(java.util.Collection<? extends java.lang.Number> list) {
        return org.la4j.Vector.fromCollection(list).to(org.la4j.Vectors.COMPRESSED);
    }

    public static org.la4j.vector.sparse.CompressedVector fromMap(java.util.Map<java.lang.Integer, ? extends java.lang.Number> map, int length) {
        int cardinality = map.size();
        int[] indices = new int[cardinality];
        double[] values = new double[cardinality];
        int i = 0;
        for (java.util.Map.Entry<java.lang.Integer, ? extends java.lang.Number> entry : map.entrySet()) {
            int index = entry.getKey();
            if ((index < 0) || (index >= length)) {
                throw new java.lang.IllegalArgumentException("Check your map: Index must be 0..n-1");
            }
            indices[i] = index;
            values[i] = entry.getValue().doubleValue();
            i++;
        }
        return new org.la4j.vector.sparse.CompressedVector(length, cardinality, values, indices);
    }

    @java.lang.Override
    public double getOrElse(int i, double defaultValue) {
        ensureIndexIsInBounds(i);
        int k = searchForIndex(i);
        if ((k < (cardinality)) && ((indices[k]) == i)) {
            return values[k];
        }
        return defaultValue;
    }

    @java.lang.Override
    public void set(int i, double value) {
        ensureIndexIsInBounds(i);
        int k = searchForIndex(i);
        if ((k < (cardinality)) && ((indices[k]) == i)) {
            if (value != 0.0) {
                values[k] = value;
            }else {
                remove(k);
            }
        }else {
            insert(k, i, value);
        }
    }

    @java.lang.Override
    public void setAll(double value) {
        if (value == 0.0) {
            cardinality = 0;
        }else {
            if ((values.length) < (length)) {
                values = new double[length];
                indices = new int[length];
            }
            for (int i = 0; i < (length); i++) {
                indices[i] = i;
                values[i] = value;
            }
            cardinality = length;
        }
    }

    @java.lang.Override
    public void swapElements(int i, int j) {
        if (i == j) {
            return;
        }
        int ii = searchForIndex(i);
        int jj = searchForIndex(j);
        boolean iiNotZero = (ii < (cardinality)) && (i == (indices[ii]));
        boolean jjNotZero = (jj < (cardinality)) && (j == (indices[jj]));
        if (iiNotZero && jjNotZero) {
            double sd = values[ii];
            values[ii] = values[jj];
            values[jj] = sd;
        }else {
            double notZero = values[(iiNotZero ? ii : jj)];
            int leftIndex = (ii < jj) ? ii : jj;
            int rightIndex = (ii > jj) ? ii : jj;
            if (((iiNotZero && (leftIndex == ii)) || (jjNotZero && (leftIndex == jj))) && (ii != jj)) {
                java.lang.System.arraycopy(values, (leftIndex + 1), values, leftIndex, ((cardinality) - leftIndex));
                java.lang.System.arraycopy(values, (rightIndex - 1), values, rightIndex, ((cardinality) - rightIndex));
                values[(rightIndex - 1)] = notZero;
                java.lang.System.arraycopy(indices, (leftIndex + 1), indices, leftIndex, ((cardinality) - leftIndex));
                java.lang.System.arraycopy(indices, (rightIndex - 1), indices, rightIndex, ((cardinality) - rightIndex));
                indices[(rightIndex - 1)] = (jjNotZero) ? i : j;
            }else
                if ((iiNotZero && (rightIndex == ii)) || (jjNotZero && (rightIndex == jj))) {
                    java.lang.System.arraycopy(values, (rightIndex + 1), values, rightIndex, ((cardinality) - rightIndex));
                    java.lang.System.arraycopy(values, leftIndex, values, (leftIndex + 1), ((cardinality) - leftIndex));
                    values[leftIndex] = notZero;
                    java.lang.System.arraycopy(indices, (rightIndex + 1), indices, rightIndex, ((cardinality) - rightIndex));
                    java.lang.System.arraycopy(indices, leftIndex, indices, (leftIndex + 1), ((cardinality) - leftIndex));
                    indices[leftIndex] = (jjNotZero) ? i : j;
                }

        }
    }

    @java.lang.Override
    public org.la4j.Vector copyOfLength(int length) {
        ensureLengthIsCorrect(length);
        int $cardinality = (length >= (this.length)) ? cardinality : searchForIndex(length);
        int capacity = align(length, $cardinality);
        double[] $values = new double[capacity];
        int[] $indices = new int[capacity];
        java.lang.System.arraycopy(values, 0, $values, 0, $cardinality);
        java.lang.System.arraycopy(indices, 0, $indices, 0, $cardinality);
        return new org.la4j.vector.sparse.CompressedVector(length, $cardinality, $values, $indices);
    }

    @java.lang.Override
    public void each(org.la4j.vector.functor.VectorProcedure procedure) {
        int k = 0;
        for (int i = 0; i < (length); i++) {
            if ((k < (cardinality)) && ((indices[k]) == i)) {
                procedure.apply(i, values[(k++)]);
            }else {
                procedure.apply(i, 0.0);
            }
        }
    }

    @java.lang.Override
    public void eachNonZero(org.la4j.vector.functor.VectorProcedure procedure) {
        for (int i = 0; i < (cardinality); i++) {
            procedure.apply(indices[i], values[i]);
        }
    }

    @java.lang.Override
    public void updateAt(int i, org.la4j.vector.functor.VectorFunction function) {
        int k = searchForIndex(i);
        if ((k < (cardinality)) && ((indices[k]) == i)) {
            double value = function.evaluate(i, values[k]);
            if (value != 0.0) {
                values[k] = value;
            }else {
                remove(k);
            }
        }else {
            insert(k, i, function.evaluate(i, 0.0));
        }
    }

    @java.lang.Override
    public boolean nonZeroAt(int i) {
        int k = searchForIndex(i);
        return (k < (cardinality)) && ((indices[k]) == i);
    }

    @java.lang.Override
    public <T extends org.la4j.Vector> T to(org.la4j.vector.VectorFactory<T> factory) {
        if ((factory.outputClass) == (org.la4j.vector.sparse.CompressedVector.class)) {
            return factory.outputClass.cast(this);
        }
        return super.to(factory);
    }

    @java.lang.Override
    public org.la4j.Vector blankOfLength(int length) {
        return org.la4j.vector.sparse.CompressedVector.zero(length);
    }

    @java.lang.Override
    public byte[] toBinary() {
        int size = (((1 + 4) + 4) + (8 * (cardinality))) + (8 * (cardinality));
        java.nio.ByteBuffer buffer = java.nio.ByteBuffer.allocate(size);
        buffer.put(org.la4j.vector.sparse.CompressedVector.VECTOR_TAG);
        buffer.putInt(length);
        buffer.putInt(cardinality);
        for (int i = 0; i < (cardinality); i++) {
            buffer.putInt(indices[i]);
            buffer.putDouble(values[i]);
        }
        return buffer.array();
    }

    private int searchForIndex(int i) {
        if (((cardinality) == 0) || (i > (indices[((cardinality) - 1)]))) {
            return cardinality;
        }
        int left = 0;
        int right = cardinality;
        while (left < right) {
            int p = (left + right) / 2;
            if ((indices[p]) > i) {
                right = p;
            }else
                if ((indices[p]) < i) {
                    left = p + 1;
                }else {
                    return p;
                }

        } 
        return left;
    }

    private void insert(int k, int i, double value) {
        if (value == 0.0) {
            return;
        }
        if ((values.length) < ((cardinality) + 1)) {
            growUp();
        }
        if (((cardinality) - k) > 0) {
            java.lang.System.arraycopy(values, k, values, (k + 1), ((cardinality) - k));
            java.lang.System.arraycopy(indices, k, indices, (k + 1), ((cardinality) - k));
        }
        values[k] = value;
        indices[k] = i;
        (cardinality)++;
    }

    private void remove(int k) {
        (cardinality)--;
        if (((cardinality) - k) > 0) {
            java.lang.System.arraycopy(values, (k + 1), values, k, ((cardinality) - k));
            java.lang.System.arraycopy(indices, (k + 1), indices, k, ((cardinality) - k));
        }
    }

    private void growUp() {
        if ((values.length) == (length)) {
            throw new java.lang.IllegalStateException("This vector can't grow up.");
        }
        int capacity = java.lang.Math.min(length, ((((cardinality) * 3) / 2) + 1));
        double[] $values = new double[capacity];
        int[] $indices = new int[capacity];
        java.lang.System.arraycopy(values, 0, $values, 0, cardinality);
        java.lang.System.arraycopy(indices, 0, $indices, 0, cardinality);
        values = $values;
        indices = $indices;
    }

    private int align(int length, int capacity) {
        if (capacity < 0) {
            fail((("Cardinality should be positive: " + capacity) + "."));
        }
        if (capacity > length) {
            fail((("Cardinality should be less then or equal to capacity: " + capacity) + "."));
        }
        return java.lang.Math.min(length, (((capacity / (org.la4j.vector.sparse.CompressedVector.MINIMUM_SIZE)) + 1) * (org.la4j.vector.sparse.CompressedVector.MINIMUM_SIZE)));
    }

    @java.lang.Override
    public org.la4j.iterator.VectorIterator nonZeroIterator() {
        return new org.la4j.iterator.VectorIterator(length) {
            private boolean currentIsRemoved = false;

            private int k = -1;

            private int removedIndex = -1;

            @java.lang.Override
            public int index() {
                return currentIsRemoved ? removedIndex : indices[k];
            }

            @java.lang.Override
            public double get() {
                return currentIsRemoved ? 0.0 : values[k];
            }

            @java.lang.Override
            public void set(double value) {
                if ((value == 0.0) && (!(currentIsRemoved))) {
                    currentIsRemoved = true;
                    removedIndex = indices[k];
                    org.la4j.vector.sparse.CompressedVector.this.remove(((k)--));
                }else
                    if ((value != 0.0) && (!(currentIsRemoved))) {
                        values[k] = value;
                    }else {
                        currentIsRemoved = false;
                        org.la4j.vector.sparse.CompressedVector.this.insert((++(k)), removedIndex, value);
                    }

            }

            @java.lang.Override
            public boolean hasNext() {
                return ((k) + 1) < (cardinality);
            }

            @java.lang.Override
            public java.lang.Double next() {
                if (!(hasNext())) {
                    throw new java.util.NoSuchElementException();
                }
                currentIsRemoved = false;
                return values[(++(k))];
            }
        };
    }

    @java.lang.Override
    public org.la4j.iterator.VectorIterator iterator() {
        return new org.la4j.iterator.VectorIterator(length) {
            private int k = 0;

            private int i = -1;

            private boolean currentNonZero = false;

            @java.lang.Override
            public int index() {
                return i;
            }

            @java.lang.Override
            public double get() {
                return currentNonZero ? values[k] : 0.0;
            }

            @java.lang.Override
            public void set(double value) {
                if (currentNonZero) {
                    if (value == 0.0) {
                        org.la4j.vector.sparse.CompressedVector.this.remove(k);
                        currentNonZero = false;
                    }else {
                        values[k] = value;
                    }
                }else {
                    org.la4j.vector.sparse.CompressedVector.this.insert(k, i, value);
                    currentNonZero = true;
                }
            }

            @java.lang.Override
            public boolean hasNext() {
                return ((i) + 1) < (length);
            }

            @java.lang.Override
            public java.lang.Double next() {
                if (!(hasNext())) {
                    throw new java.util.NoSuchElementException();
                }
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(5).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.k",org.la4j.vector.sparse.CompressedVector.2.this.k);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero",org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.i",org.la4j.vector.sparse.CompressedVector.2.this.i);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectionEnds();
                }
                if (runtimeAngelicValue) if (currentNonZero) {
                    (k)++;
                }
                (i)++;
                currentNonZero = ((k) < (cardinality)) && ((indices[k]) == (i));
                return get();
            }
        };
    }
}
16:24:29.580 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
16:24:29.581 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
16:24:29.649 [pool-24-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (61 ms)
<> Total tests run: 143
<> Ignored tests: 0
<> Failed tests: 2
~ testFromMap_unordered(org.la4j.vector.sparse.CompressedVectorTest)
[expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>]
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testFromMap_unordered(org.la4j.vector.dense.BasicVectorTest)
[expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>]
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

16:24:30.230 [pool-23-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
CompressedVector.java:440: error: ')' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.k",org.la4j.vector.sparse.CompressedVector.2.this.k);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                      ^
CompressedVector.java:440: error: illegal start of expression
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.k",org.la4j.vector.sparse.CompressedVector.2.this.k);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                        ^
CompressedVector.java:440: error: ';' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.k",org.la4j.vector.sparse.CompressedVector.2.this.k);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                         ^
CompressedVector.java:440: error: illegal start of expression
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.k",org.la4j.vector.sparse.CompressedVector.2.this.k);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                             ^
CompressedVector.java:440: error: ';' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.k",org.la4j.vector.sparse.CompressedVector.2.this.k);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                               ^
CompressedVector.java:441: error: ')' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero",org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                   ^
CompressedVector.java:441: error: illegal start of expression
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero",org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                     ^
CompressedVector.java:441: error: ';' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero",org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                      ^
CompressedVector.java:441: error: illegal start of expression
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero",org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                          ^
CompressedVector.java:441: error: ';' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero",org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                                         ^
CompressedVector.java:442: error: ')' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.i",org.la4j.vector.sparse.CompressedVector.2.this.i);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                      ^
CompressedVector.java:442: error: illegal start of expression
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.i",org.la4j.vector.sparse.CompressedVector.2.this.i);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                        ^
CompressedVector.java:442: error: ';' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.i",org.la4j.vector.sparse.CompressedVector.2.this.i);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                         ^
CompressedVector.java:442: error: illegal start of expression
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.i",org.la4j.vector.sparse.CompressedVector.2.this.i);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                             ^
CompressedVector.java:442: error: ';' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.i",org.la4j.vector.sparse.CompressedVector.2.this.i);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                               ^
16:24:30.525 [pool-23-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class CompressedVector extends org.la4j.vector.SparseVector {
    private static final byte VECTOR_TAG = ((byte) (16));

    private static final int MINIMUM_SIZE = 32;

    private double[] values;

    private int[] indices;

    public CompressedVector() {
        this(0);
    }

    public CompressedVector(int length) {
        this(length, 0);
    }

    public CompressedVector(int length, int capacity) {
        super(length);
        int alignedSize = align(length, capacity);
        this.values = new double[alignedSize];
        this.indices = new int[alignedSize];
    }

    public CompressedVector(int length, int cardinality, double[] values, int[] indices) {
        super(length, cardinality);
        this.values = values;
        this.indices = indices;
    }

    public static org.la4j.vector.sparse.CompressedVector zero(int length) {
        return new org.la4j.vector.sparse.CompressedVector(length);
    }

    public static org.la4j.vector.sparse.CompressedVector zero(int length, int capacity) {
        return new org.la4j.vector.sparse.CompressedVector(length, capacity);
    }

    public static org.la4j.vector.sparse.CompressedVector random(int length, double density, java.util.Random random) {
        if ((density < 0.0) || (density > 1.0)) {
            throw new java.lang.IllegalArgumentException("The density value should be between 0 and 1.0");
        }
        int cardinality = ((int) (length * density));
        double[] values = new double[cardinality];
        int[] indices = new int[cardinality];
        for (int i = 0; i < cardinality; i++) {
            values[i] = random.nextDouble();
            indices[i] = random.nextInt(length);
        }
        java.util.Arrays.sort(indices);
        return new org.la4j.vector.sparse.CompressedVector(length, cardinality, values, indices);
    }

    public static org.la4j.vector.sparse.CompressedVector fromArray(double[] array) {
        int length = array.length;
        org.la4j.vector.sparse.CompressedVector result = org.la4j.vector.sparse.CompressedVector.zero(length);
        for (int i = 0; i < length; i++) {
            if ((array[i]) != 0.0) {
                result.set(i, array[i]);
            }
        }
        return result;
    }

    public static org.la4j.vector.sparse.CompressedVector fromBinary(byte[] array) {
        java.nio.ByteBuffer buffer = java.nio.ByteBuffer.wrap(array);
        if ((buffer.get()) != (org.la4j.vector.sparse.CompressedVector.VECTOR_TAG)) {
            throw new java.lang.IllegalArgumentException("Can not decode CompressedVector from the given byte array.");
        }
        int length = buffer.getInt();
        int cardinality = buffer.getInt();
        double[] values = new double[cardinality];
        int[] indices = new int[cardinality];
        for (int i = 0; i < cardinality; i++) {
            indices[i] = buffer.getInt();
            values[i] = buffer.getDouble();
        }
        return new org.la4j.vector.sparse.CompressedVector(length, cardinality, values, indices);
    }

    public static org.la4j.vector.sparse.CompressedVector fromCSV(java.lang.String csv) {
        return org.la4j.Vector.fromCSV(csv).to(org.la4j.Vectors.COMPRESSED);
    }

    public static org.la4j.vector.sparse.CompressedVector fromMatrixMarket(java.lang.String mm) {
        return org.la4j.Vector.fromMatrixMarket(mm).to(org.la4j.Vectors.COMPRESSED);
    }

    public static org.la4j.vector.sparse.CompressedVector fromCollection(java.util.Collection<? extends java.lang.Number> list) {
        return org.la4j.Vector.fromCollection(list).to(org.la4j.Vectors.COMPRESSED);
    }

    public static org.la4j.vector.sparse.CompressedVector fromMap(java.util.Map<java.lang.Integer, ? extends java.lang.Number> map, int length) {
        int cardinality = map.size();
        int[] indices = new int[cardinality];
        double[] values = new double[cardinality];
        int i = 0;
        for (java.util.Map.Entry<java.lang.Integer, ? extends java.lang.Number> entry : map.entrySet()) {
            int index = entry.getKey();
            if ((index < 0) || (index >= length)) {
                throw new java.lang.IllegalArgumentException("Check your map: Index must be 0..n-1");
            }
            indices[i] = index;
            values[i] = entry.getValue().doubleValue();
            i++;
        }
        return new org.la4j.vector.sparse.CompressedVector(length, cardinality, values, indices);
    }

    @java.lang.Override
    public double getOrElse(int i, double defaultValue) {
        ensureIndexIsInBounds(i);
        int k = searchForIndex(i);
        if ((k < (cardinality)) && ((indices[k]) == i)) {
            return values[k];
        }
        return defaultValue;
    }

    @java.lang.Override
    public void set(int i, double value) {
        ensureIndexIsInBounds(i);
        int k = searchForIndex(i);
        if ((k < (cardinality)) && ((indices[k]) == i)) {
            if (value != 0.0) {
                values[k] = value;
            }else {
                remove(k);
            }
        }else {
            insert(k, i, value);
        }
    }

    @java.lang.Override
    public void setAll(double value) {
        if (value == 0.0) {
            cardinality = 0;
        }else {
            if ((values.length) < (length)) {
                values = new double[length];
                indices = new int[length];
            }
            for (int i = 0; i < (length); i++) {
                indices[i] = i;
                values[i] = value;
            }
            cardinality = length;
        }
    }

    @java.lang.Override
    public void swapElements(int i, int j) {
        if (i == j) {
            return;
        }
        int ii = searchForIndex(i);
        int jj = searchForIndex(j);
        boolean iiNotZero = (ii < (cardinality)) && (i == (indices[ii]));
        boolean jjNotZero = (jj < (cardinality)) && (j == (indices[jj]));
        if (iiNotZero && jjNotZero) {
            double sd = values[ii];
            values[ii] = values[jj];
            values[jj] = sd;
        }else {
            double notZero = values[(iiNotZero ? ii : jj)];
            int leftIndex = (ii < jj) ? ii : jj;
            int rightIndex = (ii > jj) ? ii : jj;
            if (((iiNotZero && (leftIndex == ii)) || (jjNotZero && (leftIndex == jj))) && (ii != jj)) {
                java.lang.System.arraycopy(values, (leftIndex + 1), values, leftIndex, ((cardinality) - leftIndex));
                java.lang.System.arraycopy(values, (rightIndex - 1), values, rightIndex, ((cardinality) - rightIndex));
                values[(rightIndex - 1)] = notZero;
                java.lang.System.arraycopy(indices, (leftIndex + 1), indices, leftIndex, ((cardinality) - leftIndex));
                java.lang.System.arraycopy(indices, (rightIndex - 1), indices, rightIndex, ((cardinality) - rightIndex));
                indices[(rightIndex - 1)] = (jjNotZero) ? i : j;
            }else
                if ((iiNotZero && (rightIndex == ii)) || (jjNotZero && (rightIndex == jj))) {
                    java.lang.System.arraycopy(values, (rightIndex + 1), values, rightIndex, ((cardinality) - rightIndex));
                    java.lang.System.arraycopy(values, leftIndex, values, (leftIndex + 1), ((cardinality) - leftIndex));
                    values[leftIndex] = notZero;
                    java.lang.System.arraycopy(indices, (rightIndex + 1), indices, rightIndex, ((cardinality) - rightIndex));
                    java.lang.System.arraycopy(indices, leftIndex, indices, (leftIndex + 1), ((cardinality) - leftIndex));
                    indices[leftIndex] = (jjNotZero) ? i : j;
                }

        }
    }

    @java.lang.Override
    public org.la4j.Vector copyOfLength(int length) {
        ensureLengthIsCorrect(length);
        int $cardinality = (length >= (this.length)) ? cardinality : searchForIndex(length);
        int capacity = align(length, $cardinality);
        double[] $values = new double[capacity];
        int[] $indices = new int[capacity];
        java.lang.System.arraycopy(values, 0, $values, 0, $cardinality);
        java.lang.System.arraycopy(indices, 0, $indices, 0, $cardinality);
        return new org.la4j.vector.sparse.CompressedVector(length, $cardinality, $values, $indices);
    }

    @java.lang.Override
    public void each(org.la4j.vector.functor.VectorProcedure procedure) {
        int k = 0;
        for (int i = 0; i < (length); i++) {
            if ((k < (cardinality)) && ((indices[k]) == i)) {
                procedure.apply(i, values[(k++)]);
            }else {
                procedure.apply(i, 0.0);
            }
        }
    }

    @java.lang.Override
    public void eachNonZero(org.la4j.vector.functor.VectorProcedure procedure) {
        for (int i = 0; i < (cardinality); i++) {
            procedure.apply(indices[i], values[i]);
        }
    }

    @java.lang.Override
    public void updateAt(int i, org.la4j.vector.functor.VectorFunction function) {
        int k = searchForIndex(i);
        if ((k < (cardinality)) && ((indices[k]) == i)) {
            double value = function.evaluate(i, values[k]);
            if (value != 0.0) {
                values[k] = value;
            }else {
                remove(k);
            }
        }else {
            insert(k, i, function.evaluate(i, 0.0));
        }
    }

    @java.lang.Override
    public boolean nonZeroAt(int i) {
        int k = searchForIndex(i);
        return (k < (cardinality)) && ((indices[k]) == i);
    }

    @java.lang.Override
    public <T extends org.la4j.Vector> T to(org.la4j.vector.VectorFactory<T> factory) {
        if ((factory.outputClass) == (org.la4j.vector.sparse.CompressedVector.class)) {
            return factory.outputClass.cast(this);
        }
        return super.to(factory);
    }

    @java.lang.Override
    public org.la4j.Vector blankOfLength(int length) {
        return org.la4j.vector.sparse.CompressedVector.zero(length);
    }

    @java.lang.Override
    public byte[] toBinary() {
        int size = (((1 + 4) + 4) + (8 * (cardinality))) + (8 * (cardinality));
        java.nio.ByteBuffer buffer = java.nio.ByteBuffer.allocate(size);
        buffer.put(org.la4j.vector.sparse.CompressedVector.VECTOR_TAG);
        buffer.putInt(length);
        buffer.putInt(cardinality);
        for (int i = 0; i < (cardinality); i++) {
            buffer.putInt(indices[i]);
            buffer.putDouble(values[i]);
        }
        return buffer.array();
    }

    private int searchForIndex(int i) {
        if (((cardinality) == 0) || (i > (indices[((cardinality) - 1)]))) {
            return cardinality;
        }
        int left = 0;
        int right = cardinality;
        while (left < right) {
            int p = (left + right) / 2;
            if ((indices[p]) > i) {
                right = p;
            }else
                if ((indices[p]) < i) {
                    left = p + 1;
                }else {
                    return p;
                }

        } 
        return left;
    }

    private void insert(int k, int i, double value) {
        if (value == 0.0) {
            return;
        }
        if ((values.length) < ((cardinality) + 1)) {
            growUp();
        }
        if (((cardinality) - k) > 0) {
            java.lang.System.arraycopy(values, k, values, (k + 1), ((cardinality) - k));
            java.lang.System.arraycopy(indices, k, indices, (k + 1), ((cardinality) - k));
        }
        values[k] = value;
        indices[k] = i;
        (cardinality)++;
    }

    private void remove(int k) {
        (cardinality)--;
        if (((cardinality) - k) > 0) {
            java.lang.System.arraycopy(values, (k + 1), values, k, ((cardinality) - k));
            java.lang.System.arraycopy(indices, (k + 1), indices, k, ((cardinality) - k));
        }
    }

    private void growUp() {
        if ((values.length) == (length)) {
            throw new java.lang.IllegalStateException("This vector can't grow up.");
        }
        int capacity = java.lang.Math.min(length, ((((cardinality) * 3) / 2) + 1));
        double[] $values = new double[capacity];
        int[] $indices = new int[capacity];
        java.lang.System.arraycopy(values, 0, $values, 0, cardinality);
        java.lang.System.arraycopy(indices, 0, $indices, 0, cardinality);
        values = $values;
        indices = $indices;
    }

    private int align(int length, int capacity) {
        if (capacity < 0) {
            fail((("Cardinality should be positive: " + capacity) + "."));
        }
        if (capacity > length) {
            fail((("Cardinality should be less then or equal to capacity: " + capacity) + "."));
        }
        return java.lang.Math.min(length, (((capacity / (org.la4j.vector.sparse.CompressedVector.MINIMUM_SIZE)) + 1) * (org.la4j.vector.sparse.CompressedVector.MINIMUM_SIZE)));
    }

    @java.lang.Override
    public org.la4j.iterator.VectorIterator nonZeroIterator() {
        return new org.la4j.iterator.VectorIterator(length) {
            private boolean currentIsRemoved = false;

            private int k = -1;

            private int removedIndex = -1;

            @java.lang.Override
            public int index() {
                return currentIsRemoved ? removedIndex : indices[k];
            }

            @java.lang.Override
            public double get() {
                return currentIsRemoved ? 0.0 : values[k];
            }

            @java.lang.Override
            public void set(double value) {
                if ((value == 0.0) && (!(currentIsRemoved))) {
                    currentIsRemoved = true;
                    removedIndex = indices[k];
                    org.la4j.vector.sparse.CompressedVector.this.remove(((k)--));
                }else
                    if ((value != 0.0) && (!(currentIsRemoved))) {
                        values[k] = value;
                    }else {
                        currentIsRemoved = false;
                        org.la4j.vector.sparse.CompressedVector.this.insert((++(k)), removedIndex, value);
                    }

            }

            @java.lang.Override
            public boolean hasNext() {
                return ((k) + 1) < (cardinality);
            }

            @java.lang.Override
            public java.lang.Double next() {
                if (!(hasNext())) {
                    throw new java.util.NoSuchElementException();
                }
                currentIsRemoved = false;
                return values[(++(k))];
            }
        };
    }

    @java.lang.Override
    public org.la4j.iterator.VectorIterator iterator() {
        return new org.la4j.iterator.VectorIterator(length) {
            private int k = 0;

            private int i = -1;

            private boolean currentNonZero = false;

            @java.lang.Override
            public int index() {
                return i;
            }

            @java.lang.Override
            public double get() {
                return currentNonZero ? values[k] : 0.0;
            }

            @java.lang.Override
            public void set(double value) {
                if (currentNonZero) {
                    if (value == 0.0) {
                        org.la4j.vector.sparse.CompressedVector.this.remove(k);
                        currentNonZero = false;
                    }else {
                        values[k] = value;
                    }
                }else {
                    org.la4j.vector.sparse.CompressedVector.this.insert(k, i, value);
                    currentNonZero = true;
                }
            }

            @java.lang.Override
            public boolean hasNext() {
                return ((i) + 1) < (length);
            }

            @java.lang.Override
            public java.lang.Double next() {
                if (!(hasNext())) {
                    throw new java.util.NoSuchElementException();
                }
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = currentNonZero;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(6).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.k",org.la4j.vector.sparse.CompressedVector.2.this.k);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero",org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.i",org.la4j.vector.sparse.CompressedVector.2.this.i);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectionEnds();
                }
                if (runtimeAngelicValue) {
                    (k)++;
                }
                (i)++;
                currentNonZero = ((k) < (cardinality)) && ((indices[k]) == (i));
                return get();
            }
        };
    }
}
16:24:30.525 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
16:24:30.525 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #26
16:24:30.525 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.la4j.vector.sparse.CompressedVector$2:615 which is executed by 5 tests
1164465221
16:24:30.598 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
16:24:30.664 [pool-26-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (58 ms)
<> Total tests run: 143
<> Ignored tests: 0
<> Failed tests: 2
~ testFromMap_unordered(org.la4j.vector.sparse.CompressedVectorTest)
[expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>]
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testFromMap_unordered(org.la4j.vector.dense.BasicVectorTest)
[expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>]
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

16:24:31.085 [pool-25-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
CompressedVector.java:437: error: ')' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(7).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.k",org.la4j.vector.sparse.CompressedVector.2.this.k);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                      ^
CompressedVector.java:437: error: illegal start of expression
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(7).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.k",org.la4j.vector.sparse.CompressedVector.2.this.k);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                        ^
CompressedVector.java:437: error: ';' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(7).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.k",org.la4j.vector.sparse.CompressedVector.2.this.k);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                         ^
CompressedVector.java:437: error: illegal start of expression
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(7).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.k",org.la4j.vector.sparse.CompressedVector.2.this.k);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                             ^
CompressedVector.java:437: error: ';' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(7).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.k",org.la4j.vector.sparse.CompressedVector.2.this.k);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                               ^
CompressedVector.java:438: error: ')' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(7).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero",org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                   ^
CompressedVector.java:438: error: illegal start of expression
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(7).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero",org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                     ^
CompressedVector.java:438: error: ';' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(7).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero",org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                      ^
CompressedVector.java:438: error: illegal start of expression
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(7).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero",org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                          ^
CompressedVector.java:438: error: ';' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(7).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero",org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                                         ^
CompressedVector.java:439: error: ')' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(7).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.i",org.la4j.vector.sparse.CompressedVector.2.this.i);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                      ^
CompressedVector.java:439: error: illegal start of expression
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(7).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.i",org.la4j.vector.sparse.CompressedVector.2.this.i);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                        ^
CompressedVector.java:439: error: ';' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(7).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.i",org.la4j.vector.sparse.CompressedVector.2.this.i);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                         ^
CompressedVector.java:439: error: illegal start of expression
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(7).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.i",org.la4j.vector.sparse.CompressedVector.2.this.i);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                             ^
CompressedVector.java:439: error: ';' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(7).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.i",org.la4j.vector.sparse.CompressedVector.2.this.i);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                               ^
16:24:31.382 [pool-25-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class CompressedVector extends org.la4j.vector.SparseVector {
    private static final byte VECTOR_TAG = ((byte) (16));

    private static final int MINIMUM_SIZE = 32;

    private double[] values;

    private int[] indices;

    public CompressedVector() {
        this(0);
    }

    public CompressedVector(int length) {
        this(length, 0);
    }

    public CompressedVector(int length, int capacity) {
        super(length);
        int alignedSize = align(length, capacity);
        this.values = new double[alignedSize];
        this.indices = new int[alignedSize];
    }

    public CompressedVector(int length, int cardinality, double[] values, int[] indices) {
        super(length, cardinality);
        this.values = values;
        this.indices = indices;
    }

    public static org.la4j.vector.sparse.CompressedVector zero(int length) {
        return new org.la4j.vector.sparse.CompressedVector(length);
    }

    public static org.la4j.vector.sparse.CompressedVector zero(int length, int capacity) {
        return new org.la4j.vector.sparse.CompressedVector(length, capacity);
    }

    public static org.la4j.vector.sparse.CompressedVector random(int length, double density, java.util.Random random) {
        if ((density < 0.0) || (density > 1.0)) {
            throw new java.lang.IllegalArgumentException("The density value should be between 0 and 1.0");
        }
        int cardinality = ((int) (length * density));
        double[] values = new double[cardinality];
        int[] indices = new int[cardinality];
        for (int i = 0; i < cardinality; i++) {
            values[i] = random.nextDouble();
            indices[i] = random.nextInt(length);
        }
        java.util.Arrays.sort(indices);
        return new org.la4j.vector.sparse.CompressedVector(length, cardinality, values, indices);
    }

    public static org.la4j.vector.sparse.CompressedVector fromArray(double[] array) {
        int length = array.length;
        org.la4j.vector.sparse.CompressedVector result = org.la4j.vector.sparse.CompressedVector.zero(length);
        for (int i = 0; i < length; i++) {
            if ((array[i]) != 0.0) {
                result.set(i, array[i]);
            }
        }
        return result;
    }

    public static org.la4j.vector.sparse.CompressedVector fromBinary(byte[] array) {
        java.nio.ByteBuffer buffer = java.nio.ByteBuffer.wrap(array);
        if ((buffer.get()) != (org.la4j.vector.sparse.CompressedVector.VECTOR_TAG)) {
            throw new java.lang.IllegalArgumentException("Can not decode CompressedVector from the given byte array.");
        }
        int length = buffer.getInt();
        int cardinality = buffer.getInt();
        double[] values = new double[cardinality];
        int[] indices = new int[cardinality];
        for (int i = 0; i < cardinality; i++) {
            indices[i] = buffer.getInt();
            values[i] = buffer.getDouble();
        }
        return new org.la4j.vector.sparse.CompressedVector(length, cardinality, values, indices);
    }

    public static org.la4j.vector.sparse.CompressedVector fromCSV(java.lang.String csv) {
        return org.la4j.Vector.fromCSV(csv).to(org.la4j.Vectors.COMPRESSED);
    }

    public static org.la4j.vector.sparse.CompressedVector fromMatrixMarket(java.lang.String mm) {
        return org.la4j.Vector.fromMatrixMarket(mm).to(org.la4j.Vectors.COMPRESSED);
    }

    public static org.la4j.vector.sparse.CompressedVector fromCollection(java.util.Collection<? extends java.lang.Number> list) {
        return org.la4j.Vector.fromCollection(list).to(org.la4j.Vectors.COMPRESSED);
    }

    public static org.la4j.vector.sparse.CompressedVector fromMap(java.util.Map<java.lang.Integer, ? extends java.lang.Number> map, int length) {
        int cardinality = map.size();
        int[] indices = new int[cardinality];
        double[] values = new double[cardinality];
        int i = 0;
        for (java.util.Map.Entry<java.lang.Integer, ? extends java.lang.Number> entry : map.entrySet()) {
            int index = entry.getKey();
            if ((index < 0) || (index >= length)) {
                throw new java.lang.IllegalArgumentException("Check your map: Index must be 0..n-1");
            }
            indices[i] = index;
            values[i] = entry.getValue().doubleValue();
            i++;
        }
        return new org.la4j.vector.sparse.CompressedVector(length, cardinality, values, indices);
    }

    @java.lang.Override
    public double getOrElse(int i, double defaultValue) {
        ensureIndexIsInBounds(i);
        int k = searchForIndex(i);
        if ((k < (cardinality)) && ((indices[k]) == i)) {
            return values[k];
        }
        return defaultValue;
    }

    @java.lang.Override
    public void set(int i, double value) {
        ensureIndexIsInBounds(i);
        int k = searchForIndex(i);
        if ((k < (cardinality)) && ((indices[k]) == i)) {
            if (value != 0.0) {
                values[k] = value;
            }else {
                remove(k);
            }
        }else {
            insert(k, i, value);
        }
    }

    @java.lang.Override
    public void setAll(double value) {
        if (value == 0.0) {
            cardinality = 0;
        }else {
            if ((values.length) < (length)) {
                values = new double[length];
                indices = new int[length];
            }
            for (int i = 0; i < (length); i++) {
                indices[i] = i;
                values[i] = value;
            }
            cardinality = length;
        }
    }

    @java.lang.Override
    public void swapElements(int i, int j) {
        if (i == j) {
            return;
        }
        int ii = searchForIndex(i);
        int jj = searchForIndex(j);
        boolean iiNotZero = (ii < (cardinality)) && (i == (indices[ii]));
        boolean jjNotZero = (jj < (cardinality)) && (j == (indices[jj]));
        if (iiNotZero && jjNotZero) {
            double sd = values[ii];
            values[ii] = values[jj];
            values[jj] = sd;
        }else {
            double notZero = values[(iiNotZero ? ii : jj)];
            int leftIndex = (ii < jj) ? ii : jj;
            int rightIndex = (ii > jj) ? ii : jj;
            if (((iiNotZero && (leftIndex == ii)) || (jjNotZero && (leftIndex == jj))) && (ii != jj)) {
                java.lang.System.arraycopy(values, (leftIndex + 1), values, leftIndex, ((cardinality) - leftIndex));
                java.lang.System.arraycopy(values, (rightIndex - 1), values, rightIndex, ((cardinality) - rightIndex));
                values[(rightIndex - 1)] = notZero;
                java.lang.System.arraycopy(indices, (leftIndex + 1), indices, leftIndex, ((cardinality) - leftIndex));
                java.lang.System.arraycopy(indices, (rightIndex - 1), indices, rightIndex, ((cardinality) - rightIndex));
                indices[(rightIndex - 1)] = (jjNotZero) ? i : j;
            }else
                if ((iiNotZero && (rightIndex == ii)) || (jjNotZero && (rightIndex == jj))) {
                    java.lang.System.arraycopy(values, (rightIndex + 1), values, rightIndex, ((cardinality) - rightIndex));
                    java.lang.System.arraycopy(values, leftIndex, values, (leftIndex + 1), ((cardinality) - leftIndex));
                    values[leftIndex] = notZero;
                    java.lang.System.arraycopy(indices, (rightIndex + 1), indices, rightIndex, ((cardinality) - rightIndex));
                    java.lang.System.arraycopy(indices, leftIndex, indices, (leftIndex + 1), ((cardinality) - leftIndex));
                    indices[leftIndex] = (jjNotZero) ? i : j;
                }

        }
    }

    @java.lang.Override
    public org.la4j.Vector copyOfLength(int length) {
        ensureLengthIsCorrect(length);
        int $cardinality = (length >= (this.length)) ? cardinality : searchForIndex(length);
        int capacity = align(length, $cardinality);
        double[] $values = new double[capacity];
        int[] $indices = new int[capacity];
        java.lang.System.arraycopy(values, 0, $values, 0, $cardinality);
        java.lang.System.arraycopy(indices, 0, $indices, 0, $cardinality);
        return new org.la4j.vector.sparse.CompressedVector(length, $cardinality, $values, $indices);
    }

    @java.lang.Override
    public void each(org.la4j.vector.functor.VectorProcedure procedure) {
        int k = 0;
        for (int i = 0; i < (length); i++) {
            if ((k < (cardinality)) && ((indices[k]) == i)) {
                procedure.apply(i, values[(k++)]);
            }else {
                procedure.apply(i, 0.0);
            }
        }
    }

    @java.lang.Override
    public void eachNonZero(org.la4j.vector.functor.VectorProcedure procedure) {
        for (int i = 0; i < (cardinality); i++) {
            procedure.apply(indices[i], values[i]);
        }
    }

    @java.lang.Override
    public void updateAt(int i, org.la4j.vector.functor.VectorFunction function) {
        int k = searchForIndex(i);
        if ((k < (cardinality)) && ((indices[k]) == i)) {
            double value = function.evaluate(i, values[k]);
            if (value != 0.0) {
                values[k] = value;
            }else {
                remove(k);
            }
        }else {
            insert(k, i, function.evaluate(i, 0.0));
        }
    }

    @java.lang.Override
    public boolean nonZeroAt(int i) {
        int k = searchForIndex(i);
        return (k < (cardinality)) && ((indices[k]) == i);
    }

    @java.lang.Override
    public <T extends org.la4j.Vector> T to(org.la4j.vector.VectorFactory<T> factory) {
        if ((factory.outputClass) == (org.la4j.vector.sparse.CompressedVector.class)) {
            return factory.outputClass.cast(this);
        }
        return super.to(factory);
    }

    @java.lang.Override
    public org.la4j.Vector blankOfLength(int length) {
        return org.la4j.vector.sparse.CompressedVector.zero(length);
    }

    @java.lang.Override
    public byte[] toBinary() {
        int size = (((1 + 4) + 4) + (8 * (cardinality))) + (8 * (cardinality));
        java.nio.ByteBuffer buffer = java.nio.ByteBuffer.allocate(size);
        buffer.put(org.la4j.vector.sparse.CompressedVector.VECTOR_TAG);
        buffer.putInt(length);
        buffer.putInt(cardinality);
        for (int i = 0; i < (cardinality); i++) {
            buffer.putInt(indices[i]);
            buffer.putDouble(values[i]);
        }
        return buffer.array();
    }

    private int searchForIndex(int i) {
        if (((cardinality) == 0) || (i > (indices[((cardinality) - 1)]))) {
            return cardinality;
        }
        int left = 0;
        int right = cardinality;
        while (left < right) {
            int p = (left + right) / 2;
            if ((indices[p]) > i) {
                right = p;
            }else
                if ((indices[p]) < i) {
                    left = p + 1;
                }else {
                    return p;
                }

        } 
        return left;
    }

    private void insert(int k, int i, double value) {
        if (value == 0.0) {
            return;
        }
        if ((values.length) < ((cardinality) + 1)) {
            growUp();
        }
        if (((cardinality) - k) > 0) {
            java.lang.System.arraycopy(values, k, values, (k + 1), ((cardinality) - k));
            java.lang.System.arraycopy(indices, k, indices, (k + 1), ((cardinality) - k));
        }
        values[k] = value;
        indices[k] = i;
        (cardinality)++;
    }

    private void remove(int k) {
        (cardinality)--;
        if (((cardinality) - k) > 0) {
            java.lang.System.arraycopy(values, (k + 1), values, k, ((cardinality) - k));
            java.lang.System.arraycopy(indices, (k + 1), indices, k, ((cardinality) - k));
        }
    }

    private void growUp() {
        if ((values.length) == (length)) {
            throw new java.lang.IllegalStateException("This vector can't grow up.");
        }
        int capacity = java.lang.Math.min(length, ((((cardinality) * 3) / 2) + 1));
        double[] $values = new double[capacity];
        int[] $indices = new int[capacity];
        java.lang.System.arraycopy(values, 0, $values, 0, cardinality);
        java.lang.System.arraycopy(indices, 0, $indices, 0, cardinality);
        values = $values;
        indices = $indices;
    }

    private int align(int length, int capacity) {
        if (capacity < 0) {
            fail((("Cardinality should be positive: " + capacity) + "."));
        }
        if (capacity > length) {
            fail((("Cardinality should be less then or equal to capacity: " + capacity) + "."));
        }
        return java.lang.Math.min(length, (((capacity / (org.la4j.vector.sparse.CompressedVector.MINIMUM_SIZE)) + 1) * (org.la4j.vector.sparse.CompressedVector.MINIMUM_SIZE)));
    }

    @java.lang.Override
    public org.la4j.iterator.VectorIterator nonZeroIterator() {
        return new org.la4j.iterator.VectorIterator(length) {
            private boolean currentIsRemoved = false;

            private int k = -1;

            private int removedIndex = -1;

            @java.lang.Override
            public int index() {
                return currentIsRemoved ? removedIndex : indices[k];
            }

            @java.lang.Override
            public double get() {
                return currentIsRemoved ? 0.0 : values[k];
            }

            @java.lang.Override
            public void set(double value) {
                if ((value == 0.0) && (!(currentIsRemoved))) {
                    currentIsRemoved = true;
                    removedIndex = indices[k];
                    org.la4j.vector.sparse.CompressedVector.this.remove(((k)--));
                }else
                    if ((value != 0.0) && (!(currentIsRemoved))) {
                        values[k] = value;
                    }else {
                        currentIsRemoved = false;
                        org.la4j.vector.sparse.CompressedVector.this.insert((++(k)), removedIndex, value);
                    }

            }

            @java.lang.Override
            public boolean hasNext() {
                return ((k) + 1) < (cardinality);
            }

            @java.lang.Override
            public java.lang.Double next() {
                if (!(hasNext())) {
                    throw new java.util.NoSuchElementException();
                }
                currentIsRemoved = false;
                return values[(++(k))];
            }
        };
    }

    @java.lang.Override
    public org.la4j.iterator.VectorIterator iterator() {
        return new org.la4j.iterator.VectorIterator(length) {
            private int k = 0;

            private int i = -1;

            private boolean currentNonZero = false;

            @java.lang.Override
            public int index() {
                return i;
            }

            @java.lang.Override
            public double get() {
                return currentNonZero ? values[k] : 0.0;
            }

            @java.lang.Override
            public void set(double value) {
                if (currentNonZero) {
                    if (value == 0.0) {
                        org.la4j.vector.sparse.CompressedVector.this.remove(k);
                        currentNonZero = false;
                    }else {
                        values[k] = value;
                    }
                }else {
                    org.la4j.vector.sparse.CompressedVector.this.insert(k, i, value);
                    currentNonZero = true;
                }
            }

            @java.lang.Override
            public boolean hasNext() {
                return ((i) + 1) < (length);
            }

            @java.lang.Override
            public java.lang.Double next() {
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(7).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(7).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(7).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.k",org.la4j.vector.sparse.CompressedVector.2.this.k);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(7).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero",org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(7).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.i",org.la4j.vector.sparse.CompressedVector.2.this.i);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(7).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(7).collectionEnds();
                }
                if (runtimeAngelicValue) if (!(hasNext())) {
                    throw new java.util.NoSuchElementException();
                }
                if (currentNonZero) {
                    (k)++;
                }
                (i)++;
                currentNonZero = ((k) < (cardinality)) && ((indices[k]) == (i));
                return get();
            }
        };
    }
}
16:24:31.382 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
16:24:31.382 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
16:24:31.448 [pool-28-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (58 ms)
<> Total tests run: 143
<> Ignored tests: 0
<> Failed tests: 2
~ testFromMap_unordered(org.la4j.vector.sparse.CompressedVectorTest)
[expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>]
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testFromMap_unordered(org.la4j.vector.dense.BasicVectorTest)
[expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>]
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

16:24:31.905 [pool-27-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
CompressedVector.java:437: error: ')' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.k",org.la4j.vector.sparse.CompressedVector.2.this.k);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                      ^
CompressedVector.java:437: error: illegal start of expression
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.k",org.la4j.vector.sparse.CompressedVector.2.this.k);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                        ^
CompressedVector.java:437: error: ';' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.k",org.la4j.vector.sparse.CompressedVector.2.this.k);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                         ^
CompressedVector.java:437: error: illegal start of expression
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.k",org.la4j.vector.sparse.CompressedVector.2.this.k);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                             ^
CompressedVector.java:437: error: ';' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.k",org.la4j.vector.sparse.CompressedVector.2.this.k);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                               ^
CompressedVector.java:438: error: ')' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero",org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                   ^
CompressedVector.java:438: error: illegal start of expression
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero",org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                     ^
CompressedVector.java:438: error: ';' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero",org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                      ^
CompressedVector.java:438: error: illegal start of expression
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero",org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                          ^
CompressedVector.java:438: error: ';' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero",org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                                         ^
CompressedVector.java:439: error: ')' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.i",org.la4j.vector.sparse.CompressedVector.2.this.i);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                      ^
CompressedVector.java:439: error: illegal start of expression
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.i",org.la4j.vector.sparse.CompressedVector.2.this.i);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                        ^
CompressedVector.java:439: error: ';' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.i",org.la4j.vector.sparse.CompressedVector.2.this.i);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                         ^
CompressedVector.java:439: error: illegal start of expression
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.i",org.la4j.vector.sparse.CompressedVector.2.this.i);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                             ^
CompressedVector.java:439: error: ';' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.i",org.la4j.vector.sparse.CompressedVector.2.this.i);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                               ^
16:24:32.199 [pool-27-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class CompressedVector extends org.la4j.vector.SparseVector {
    private static final byte VECTOR_TAG = ((byte) (16));

    private static final int MINIMUM_SIZE = 32;

    private double[] values;

    private int[] indices;

    public CompressedVector() {
        this(0);
    }

    public CompressedVector(int length) {
        this(length, 0);
    }

    public CompressedVector(int length, int capacity) {
        super(length);
        int alignedSize = align(length, capacity);
        this.values = new double[alignedSize];
        this.indices = new int[alignedSize];
    }

    public CompressedVector(int length, int cardinality, double[] values, int[] indices) {
        super(length, cardinality);
        this.values = values;
        this.indices = indices;
    }

    public static org.la4j.vector.sparse.CompressedVector zero(int length) {
        return new org.la4j.vector.sparse.CompressedVector(length);
    }

    public static org.la4j.vector.sparse.CompressedVector zero(int length, int capacity) {
        return new org.la4j.vector.sparse.CompressedVector(length, capacity);
    }

    public static org.la4j.vector.sparse.CompressedVector random(int length, double density, java.util.Random random) {
        if ((density < 0.0) || (density > 1.0)) {
            throw new java.lang.IllegalArgumentException("The density value should be between 0 and 1.0");
        }
        int cardinality = ((int) (length * density));
        double[] values = new double[cardinality];
        int[] indices = new int[cardinality];
        for (int i = 0; i < cardinality; i++) {
            values[i] = random.nextDouble();
            indices[i] = random.nextInt(length);
        }
        java.util.Arrays.sort(indices);
        return new org.la4j.vector.sparse.CompressedVector(length, cardinality, values, indices);
    }

    public static org.la4j.vector.sparse.CompressedVector fromArray(double[] array) {
        int length = array.length;
        org.la4j.vector.sparse.CompressedVector result = org.la4j.vector.sparse.CompressedVector.zero(length);
        for (int i = 0; i < length; i++) {
            if ((array[i]) != 0.0) {
                result.set(i, array[i]);
            }
        }
        return result;
    }

    public static org.la4j.vector.sparse.CompressedVector fromBinary(byte[] array) {
        java.nio.ByteBuffer buffer = java.nio.ByteBuffer.wrap(array);
        if ((buffer.get()) != (org.la4j.vector.sparse.CompressedVector.VECTOR_TAG)) {
            throw new java.lang.IllegalArgumentException("Can not decode CompressedVector from the given byte array.");
        }
        int length = buffer.getInt();
        int cardinality = buffer.getInt();
        double[] values = new double[cardinality];
        int[] indices = new int[cardinality];
        for (int i = 0; i < cardinality; i++) {
            indices[i] = buffer.getInt();
            values[i] = buffer.getDouble();
        }
        return new org.la4j.vector.sparse.CompressedVector(length, cardinality, values, indices);
    }

    public static org.la4j.vector.sparse.CompressedVector fromCSV(java.lang.String csv) {
        return org.la4j.Vector.fromCSV(csv).to(org.la4j.Vectors.COMPRESSED);
    }

    public static org.la4j.vector.sparse.CompressedVector fromMatrixMarket(java.lang.String mm) {
        return org.la4j.Vector.fromMatrixMarket(mm).to(org.la4j.Vectors.COMPRESSED);
    }

    public static org.la4j.vector.sparse.CompressedVector fromCollection(java.util.Collection<? extends java.lang.Number> list) {
        return org.la4j.Vector.fromCollection(list).to(org.la4j.Vectors.COMPRESSED);
    }

    public static org.la4j.vector.sparse.CompressedVector fromMap(java.util.Map<java.lang.Integer, ? extends java.lang.Number> map, int length) {
        int cardinality = map.size();
        int[] indices = new int[cardinality];
        double[] values = new double[cardinality];
        int i = 0;
        for (java.util.Map.Entry<java.lang.Integer, ? extends java.lang.Number> entry : map.entrySet()) {
            int index = entry.getKey();
            if ((index < 0) || (index >= length)) {
                throw new java.lang.IllegalArgumentException("Check your map: Index must be 0..n-1");
            }
            indices[i] = index;
            values[i] = entry.getValue().doubleValue();
            i++;
        }
        return new org.la4j.vector.sparse.CompressedVector(length, cardinality, values, indices);
    }

    @java.lang.Override
    public double getOrElse(int i, double defaultValue) {
        ensureIndexIsInBounds(i);
        int k = searchForIndex(i);
        if ((k < (cardinality)) && ((indices[k]) == i)) {
            return values[k];
        }
        return defaultValue;
    }

    @java.lang.Override
    public void set(int i, double value) {
        ensureIndexIsInBounds(i);
        int k = searchForIndex(i);
        if ((k < (cardinality)) && ((indices[k]) == i)) {
            if (value != 0.0) {
                values[k] = value;
            }else {
                remove(k);
            }
        }else {
            insert(k, i, value);
        }
    }

    @java.lang.Override
    public void setAll(double value) {
        if (value == 0.0) {
            cardinality = 0;
        }else {
            if ((values.length) < (length)) {
                values = new double[length];
                indices = new int[length];
            }
            for (int i = 0; i < (length); i++) {
                indices[i] = i;
                values[i] = value;
            }
            cardinality = length;
        }
    }

    @java.lang.Override
    public void swapElements(int i, int j) {
        if (i == j) {
            return;
        }
        int ii = searchForIndex(i);
        int jj = searchForIndex(j);
        boolean iiNotZero = (ii < (cardinality)) && (i == (indices[ii]));
        boolean jjNotZero = (jj < (cardinality)) && (j == (indices[jj]));
        if (iiNotZero && jjNotZero) {
            double sd = values[ii];
            values[ii] = values[jj];
            values[jj] = sd;
        }else {
            double notZero = values[(iiNotZero ? ii : jj)];
            int leftIndex = (ii < jj) ? ii : jj;
            int rightIndex = (ii > jj) ? ii : jj;
            if (((iiNotZero && (leftIndex == ii)) || (jjNotZero && (leftIndex == jj))) && (ii != jj)) {
                java.lang.System.arraycopy(values, (leftIndex + 1), values, leftIndex, ((cardinality) - leftIndex));
                java.lang.System.arraycopy(values, (rightIndex - 1), values, rightIndex, ((cardinality) - rightIndex));
                values[(rightIndex - 1)] = notZero;
                java.lang.System.arraycopy(indices, (leftIndex + 1), indices, leftIndex, ((cardinality) - leftIndex));
                java.lang.System.arraycopy(indices, (rightIndex - 1), indices, rightIndex, ((cardinality) - rightIndex));
                indices[(rightIndex - 1)] = (jjNotZero) ? i : j;
            }else
                if ((iiNotZero && (rightIndex == ii)) || (jjNotZero && (rightIndex == jj))) {
                    java.lang.System.arraycopy(values, (rightIndex + 1), values, rightIndex, ((cardinality) - rightIndex));
                    java.lang.System.arraycopy(values, leftIndex, values, (leftIndex + 1), ((cardinality) - leftIndex));
                    values[leftIndex] = notZero;
                    java.lang.System.arraycopy(indices, (rightIndex + 1), indices, rightIndex, ((cardinality) - rightIndex));
                    java.lang.System.arraycopy(indices, leftIndex, indices, (leftIndex + 1), ((cardinality) - leftIndex));
                    indices[leftIndex] = (jjNotZero) ? i : j;
                }

        }
    }

    @java.lang.Override
    public org.la4j.Vector copyOfLength(int length) {
        ensureLengthIsCorrect(length);
        int $cardinality = (length >= (this.length)) ? cardinality : searchForIndex(length);
        int capacity = align(length, $cardinality);
        double[] $values = new double[capacity];
        int[] $indices = new int[capacity];
        java.lang.System.arraycopy(values, 0, $values, 0, $cardinality);
        java.lang.System.arraycopy(indices, 0, $indices, 0, $cardinality);
        return new org.la4j.vector.sparse.CompressedVector(length, $cardinality, $values, $indices);
    }

    @java.lang.Override
    public void each(org.la4j.vector.functor.VectorProcedure procedure) {
        int k = 0;
        for (int i = 0; i < (length); i++) {
            if ((k < (cardinality)) && ((indices[k]) == i)) {
                procedure.apply(i, values[(k++)]);
            }else {
                procedure.apply(i, 0.0);
            }
        }
    }

    @java.lang.Override
    public void eachNonZero(org.la4j.vector.functor.VectorProcedure procedure) {
        for (int i = 0; i < (cardinality); i++) {
            procedure.apply(indices[i], values[i]);
        }
    }

    @java.lang.Override
    public void updateAt(int i, org.la4j.vector.functor.VectorFunction function) {
        int k = searchForIndex(i);
        if ((k < (cardinality)) && ((indices[k]) == i)) {
            double value = function.evaluate(i, values[k]);
            if (value != 0.0) {
                values[k] = value;
            }else {
                remove(k);
            }
        }else {
            insert(k, i, function.evaluate(i, 0.0));
        }
    }

    @java.lang.Override
    public boolean nonZeroAt(int i) {
        int k = searchForIndex(i);
        return (k < (cardinality)) && ((indices[k]) == i);
    }

    @java.lang.Override
    public <T extends org.la4j.Vector> T to(org.la4j.vector.VectorFactory<T> factory) {
        if ((factory.outputClass) == (org.la4j.vector.sparse.CompressedVector.class)) {
            return factory.outputClass.cast(this);
        }
        return super.to(factory);
    }

    @java.lang.Override
    public org.la4j.Vector blankOfLength(int length) {
        return org.la4j.vector.sparse.CompressedVector.zero(length);
    }

    @java.lang.Override
    public byte[] toBinary() {
        int size = (((1 + 4) + 4) + (8 * (cardinality))) + (8 * (cardinality));
        java.nio.ByteBuffer buffer = java.nio.ByteBuffer.allocate(size);
        buffer.put(org.la4j.vector.sparse.CompressedVector.VECTOR_TAG);
        buffer.putInt(length);
        buffer.putInt(cardinality);
        for (int i = 0; i < (cardinality); i++) {
            buffer.putInt(indices[i]);
            buffer.putDouble(values[i]);
        }
        return buffer.array();
    }

    private int searchForIndex(int i) {
        if (((cardinality) == 0) || (i > (indices[((cardinality) - 1)]))) {
            return cardinality;
        }
        int left = 0;
        int right = cardinality;
        while (left < right) {
            int p = (left + right) / 2;
            if ((indices[p]) > i) {
                right = p;
            }else
                if ((indices[p]) < i) {
                    left = p + 1;
                }else {
                    return p;
                }

        } 
        return left;
    }

    private void insert(int k, int i, double value) {
        if (value == 0.0) {
            return;
        }
        if ((values.length) < ((cardinality) + 1)) {
            growUp();
        }
        if (((cardinality) - k) > 0) {
            java.lang.System.arraycopy(values, k, values, (k + 1), ((cardinality) - k));
            java.lang.System.arraycopy(indices, k, indices, (k + 1), ((cardinality) - k));
        }
        values[k] = value;
        indices[k] = i;
        (cardinality)++;
    }

    private void remove(int k) {
        (cardinality)--;
        if (((cardinality) - k) > 0) {
            java.lang.System.arraycopy(values, (k + 1), values, k, ((cardinality) - k));
            java.lang.System.arraycopy(indices, (k + 1), indices, k, ((cardinality) - k));
        }
    }

    private void growUp() {
        if ((values.length) == (length)) {
            throw new java.lang.IllegalStateException("This vector can't grow up.");
        }
        int capacity = java.lang.Math.min(length, ((((cardinality) * 3) / 2) + 1));
        double[] $values = new double[capacity];
        int[] $indices = new int[capacity];
        java.lang.System.arraycopy(values, 0, $values, 0, cardinality);
        java.lang.System.arraycopy(indices, 0, $indices, 0, cardinality);
        values = $values;
        indices = $indices;
    }

    private int align(int length, int capacity) {
        if (capacity < 0) {
            fail((("Cardinality should be positive: " + capacity) + "."));
        }
        if (capacity > length) {
            fail((("Cardinality should be less then or equal to capacity: " + capacity) + "."));
        }
        return java.lang.Math.min(length, (((capacity / (org.la4j.vector.sparse.CompressedVector.MINIMUM_SIZE)) + 1) * (org.la4j.vector.sparse.CompressedVector.MINIMUM_SIZE)));
    }

    @java.lang.Override
    public org.la4j.iterator.VectorIterator nonZeroIterator() {
        return new org.la4j.iterator.VectorIterator(length) {
            private boolean currentIsRemoved = false;

            private int k = -1;

            private int removedIndex = -1;

            @java.lang.Override
            public int index() {
                return currentIsRemoved ? removedIndex : indices[k];
            }

            @java.lang.Override
            public double get() {
                return currentIsRemoved ? 0.0 : values[k];
            }

            @java.lang.Override
            public void set(double value) {
                if ((value == 0.0) && (!(currentIsRemoved))) {
                    currentIsRemoved = true;
                    removedIndex = indices[k];
                    org.la4j.vector.sparse.CompressedVector.this.remove(((k)--));
                }else
                    if ((value != 0.0) && (!(currentIsRemoved))) {
                        values[k] = value;
                    }else {
                        currentIsRemoved = false;
                        org.la4j.vector.sparse.CompressedVector.this.insert((++(k)), removedIndex, value);
                    }

            }

            @java.lang.Override
            public boolean hasNext() {
                return ((k) + 1) < (cardinality);
            }

            @java.lang.Override
            public java.lang.Double next() {
                if (!(hasNext())) {
                    throw new java.util.NoSuchElementException();
                }
                currentIsRemoved = false;
                return values[(++(k))];
            }
        };
    }

    @java.lang.Override
    public org.la4j.iterator.VectorIterator iterator() {
        return new org.la4j.iterator.VectorIterator(length) {
            private int k = 0;

            private int i = -1;

            private boolean currentNonZero = false;

            @java.lang.Override
            public int index() {
                return i;
            }

            @java.lang.Override
            public double get() {
                return currentNonZero ? values[k] : 0.0;
            }

            @java.lang.Override
            public void set(double value) {
                if (currentNonZero) {
                    if (value == 0.0) {
                        org.la4j.vector.sparse.CompressedVector.this.remove(k);
                        currentNonZero = false;
                    }else {
                        values[k] = value;
                    }
                }else {
                    org.la4j.vector.sparse.CompressedVector.this.insert(k, i, value);
                    currentNonZero = true;
                }
            }

            @java.lang.Override
            public boolean hasNext() {
                return ((i) + 1) < (length);
            }

            @java.lang.Override
            public java.lang.Double next() {
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = !(hasNext());
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(8).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.k",org.la4j.vector.sparse.CompressedVector.2.this.k);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero",org.la4j.vector.sparse.CompressedVector.2.this.currentNonZero);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.la4j.vector.sparse.CompressedVector.2.this.i",org.la4j.vector.sparse.CompressedVector.2.this.i);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectionEnds();
                }
                if (runtimeAngelicValue) {
                    throw new java.util.NoSuchElementException();
                }
                if (currentNonZero) {
                    (k)++;
                }
                (i)++;
                currentNonZero = ((k) < (cardinality)) && ((indices[k]) == (i));
                return get();
            }
        };
    }
}
16:24:32.199 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
16:24:32.199 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #27
16:24:32.199 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.la4j.vector.sparse.CompressedVector$2:610 which is executed by 5 tests
1164465221
16:24:32.284 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #28
16:24:32.284 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.la4j.vector.sparse.CompressedVector$2:590 which is executed by 5 tests
1164465221
16:24:32.375 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #29
16:24:32.375 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.la4j.vector.sparse.CompressedVector:222 which is executed by 6 tests
1164465221
16:24:32.443 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #30
16:24:32.443 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.la4j.vector.sparse.CompressedVector:221 which is executed by 6 tests
1164465221
16:24:32.508 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
16:24:32.571 [pool-30-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (56 ms)
<> Total tests run: 143
<> Ignored tests: 0
<> Failed tests: 2
~ testFromMap_unordered(org.la4j.vector.sparse.CompressedVectorTest)
[expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>]
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testFromMap_unordered(org.la4j.vector.dense.BasicVectorTest)
[expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>]
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 2.000 0.000 0.000 0.000>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
16:24:33.134 [pool-31-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (22 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFromMap_unordered(org.la4j.vector.sparse.CompressedVectorTest)
[expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 2.000 0.000 0.000 0.000>]
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 2.000 0.000 0.000 0.000>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 2.000 0.000 0.000 0.000>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
16:24:33.137 [pool-32-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFromMap_unordered(org.la4j.vector.dense.BasicVectorTest)
[expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 2.000 0.000 0.000 0.000>]
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 2.000 0.000 0.000 0.000>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
16:24:33.139 [pool-33-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFromMap_unordered(org.la4j.vector.sparse.CompressedVectorTest)
[expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>]
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
16:24:33.141 [pool-34-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFromMap_unordered(org.la4j.vector.dense.BasicVectorTest)
[expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>]
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

16:24:33.143 [pool-29-thread-1] DEBUG tests.output - Failing tests with false: 
[testFromMap_unordered(org.la4j.vector.sparse.CompressedVectorTest): expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 2.000 0.000 0.000 0.000>, testFromMap_unordered(org.la4j.vector.dense.BasicVectorTest): expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 2.000 0.000 0.000 0.000>]
16:24:33.144 [pool-29-thread-1] DEBUG tests.output - Failing tests with true: 
[testFromMap_unordered(org.la4j.vector.sparse.CompressedVectorTest): expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>, testFromMap_unordered(org.la4j.vector.dense.BasicVectorTest): expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>]
16:24:33.144 [pool-29-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.la4j.vector.sparse.CompressedVector:221.
16:24:33.144 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #31
16:24:33.144 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.la4j.vector.sparse.CompressedVector:220 which is executed by 6 tests
1164465221
16:24:33.211 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
16:24:33.274 [pool-36-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (56 ms)
<> Total tests run: 143
<> Ignored tests: 0
<> Failed tests: 2
~ testFromMap_unordered(org.la4j.vector.sparse.CompressedVectorTest)
[expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>]
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testFromMap_unordered(org.la4j.vector.dense.BasicVectorTest)
[expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>]
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 0.000 0.000>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
16:24:33.806 [pool-37-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (21 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFromMap_unordered(org.la4j.vector.sparse.CompressedVectorTest)
[expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 0.000 0.000>]
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 0.000 0.000>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 0.000 0.000>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
16:24:33.808 [pool-38-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFromMap_unordered(org.la4j.vector.dense.BasicVectorTest)
[expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 0.000 0.000>]
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 0.000 0.000>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
16:24:33.810 [pool-39-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFromMap_unordered(org.la4j.vector.sparse.CompressedVectorTest)
[expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>]
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
16:24:33.811 [pool-40-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFromMap_unordered(org.la4j.vector.dense.BasicVectorTest)
[expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>]
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

16:24:33.818 [pool-35-thread-1] DEBUG tests.output - Failing tests with false: 
[testFromMap_unordered(org.la4j.vector.sparse.CompressedVectorTest): expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 0.000 0.000>, testFromMap_unordered(org.la4j.vector.dense.BasicVectorTest): expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 0.000 0.000>]
16:24:33.818 [pool-35-thread-1] DEBUG tests.output - Failing tests with true: 
[testFromMap_unordered(org.la4j.vector.sparse.CompressedVectorTest): expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>, testFromMap_unordered(org.la4j.vector.dense.BasicVectorTest): expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>]
16:24:33.818 [pool-35-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.la4j.vector.sparse.CompressedVector:220.
16:24:33.818 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #32
16:24:33.818 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.la4j.vector.sparse.CompressedVector:219 which is executed by 6 tests
1164465221
16:24:33.882 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
16:24:33.944 [pool-42-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (56 ms)
<> Total tests run: 143
<> Ignored tests: 0
<> Failed tests: 2
~ testFromMap_unordered(org.la4j.vector.sparse.CompressedVectorTest)
[expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>]
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testFromMap_unordered(org.la4j.vector.dense.BasicVectorTest)
[expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>]
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<1.000 0.000 0.000 0.000 0.000 0.000 0.000>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
16:24:34.466 [pool-43-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (22 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFromMap_unordered(org.la4j.vector.sparse.CompressedVectorTest)
[expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<1.000 0.000 0.000 0.000 0.000 0.000 0.000>]
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<1.000 0.000 0.000 0.000 0.000 0.000 0.000>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<1.000 0.000 0.000 0.000 0.000 0.000 0.000>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
16:24:34.468 [pool-44-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFromMap_unordered(org.la4j.vector.dense.BasicVectorTest)
[expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<1.000 0.000 0.000 0.000 0.000 0.000 0.000>]
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<1.000 0.000 0.000 0.000 0.000 0.000 0.000>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
16:24:34.472 [pool-45-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFromMap_unordered(org.la4j.vector.sparse.CompressedVectorTest)
[expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>]
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
16:24:34.478 [pool-46-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFromMap_unordered(org.la4j.vector.dense.BasicVectorTest)
[expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>]
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

16:24:34.479 [pool-41-thread-1] DEBUG tests.output - Failing tests with false: 
[testFromMap_unordered(org.la4j.vector.sparse.CompressedVectorTest): expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<1.000 0.000 0.000 0.000 0.000 0.000 0.000>, testFromMap_unordered(org.la4j.vector.dense.BasicVectorTest): expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<1.000 0.000 0.000 0.000 0.000 0.000 0.000>]
16:24:34.479 [pool-41-thread-1] DEBUG tests.output - Failing tests with true: 
[testFromMap_unordered(org.la4j.vector.sparse.CompressedVectorTest): expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>, testFromMap_unordered(org.la4j.vector.dense.BasicVectorTest): expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>]
16:24:34.479 [pool-41-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.la4j.vector.sparse.CompressedVector:219.
16:24:34.479 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #33
16:24:34.479 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.la4j.vector.sparse.CompressedVector:216 which is executed by 6 tests
1164465221
16:24:34.546 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
16:24:34.610 [pool-48-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (57 ms)
<> Total tests run: 143
<> Ignored tests: 0
<> Failed tests: 2
~ testFromMap_unordered(org.la4j.vector.sparse.CompressedVectorTest)
[expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>]
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testFromMap_unordered(org.la4j.vector.dense.BasicVectorTest)
[expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>]
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
16:24:35.152 [pool-49-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (22 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFromMap_unordered(org.la4j.vector.sparse.CompressedVectorTest)
[expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>]
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
16:24:35.154 [pool-50-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFromMap_unordered(org.la4j.vector.dense.BasicVectorTest)
[expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>]
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
16:24:35.155 [pool-51-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFromMap_unordered(org.la4j.vector.sparse.CompressedVectorTest)
[expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>]
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
16:24:35.157 [pool-52-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFromMap_unordered(org.la4j.vector.dense.BasicVectorTest)
[expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>]
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

16:24:35.157 [pool-47-thread-1] DEBUG tests.output - Failing tests with false: 
[testFromMap_unordered(org.la4j.vector.sparse.CompressedVectorTest): expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>, testFromMap_unordered(org.la4j.vector.dense.BasicVectorTest): expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>]
16:24:35.157 [pool-47-thread-1] DEBUG tests.output - Failing tests with true: 
[testFromMap_unordered(org.la4j.vector.sparse.CompressedVectorTest): expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>, testFromMap_unordered(org.la4j.vector.dense.BasicVectorTest): expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>]
16:24:35.157 [pool-47-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.la4j.vector.sparse.CompressedVector:216.
16:24:35.157 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
16:24:35.222 [pool-54-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (58 ms)
<> Total tests run: 143
<> Ignored tests: 0
<> Failed tests: 2
~ testFromMap_unordered(org.la4j.vector.sparse.CompressedVectorTest)
[expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>]
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testFromMap_unordered(org.la4j.vector.dense.BasicVectorTest)
[expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>]
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
16:24:35.747 [pool-55-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (23 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFromMap_unordered(org.la4j.vector.sparse.CompressedVectorTest)
[expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>]
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
16:24:35.749 [pool-56-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFromMap_unordered(org.la4j.vector.dense.BasicVectorTest)
[expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>]
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.IllegalArgumentException: Check your map: Index must be 0..n-1
    at org.la4j.vector.sparse.CompressedVector.fromMap(CompressedVector.java:126)
    at org.la4j.vector.SparseVector.fromMap(SparseVector.java:141)
    at org.la4j.Vector.fromMap(Vector.java:202)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
16:24:35.750 [pool-57-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFromMap_unordered(org.la4j.vector.sparse.CompressedVectorTest)
[Check your map: Index must be 0..n-1]
java.lang.IllegalArgumentException: Check your map: Index must be 0..n-1    at org.la4j.vector.sparse.CompressedVector.fromMap(CompressedVector.java:126)
    at org.la4j.vector.SparseVector.fromMap(SparseVector.java:141)
    at org.la4j.Vector.fromMap(Vector.java:202)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.IllegalArgumentException: Check your map: Index must be 0..n-1
    at org.la4j.vector.sparse.CompressedVector.fromMap(CompressedVector.java:126)
    at org.la4j.vector.SparseVector.fromMap(SparseVector.java:141)
    at org.la4j.Vector.fromMap(Vector.java:202)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
16:24:35.751 [pool-58-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFromMap_unordered(org.la4j.vector.dense.BasicVectorTest)
[Check your map: Index must be 0..n-1]
java.lang.IllegalArgumentException: Check your map: Index must be 0..n-1    at org.la4j.vector.sparse.CompressedVector.fromMap(CompressedVector.java:126)
    at org.la4j.vector.SparseVector.fromMap(SparseVector.java:141)
    at org.la4j.Vector.fromMap(Vector.java:202)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

16:24:35.752 [pool-53-thread-1] DEBUG tests.output - Failing tests with false: 
[testFromMap_unordered(org.la4j.vector.sparse.CompressedVectorTest): expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>, testFromMap_unordered(org.la4j.vector.dense.BasicVectorTest): expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>]
16:24:35.752 [pool-53-thread-1] DEBUG tests.output - Failing tests with true: 
[testFromMap_unordered(org.la4j.vector.sparse.CompressedVectorTest): Check your map: Index must be 0..n-1, testFromMap_unordered(org.la4j.vector.dense.BasicVectorTest): Check your map: Index must be 0..n-1]
16:24:35.752 [pool-53-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.la4j.vector.sparse.CompressedVector:216.
16:24:35.752 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #34
16:24:35.752 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.la4j.vector.sparse.CompressedVector:215 which is executed by 6 tests
1164465221
16:24:35.817 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #35
16:24:35.817 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.la4j.vector.sparse.CompressedVector:223 which is executed by 8 tests
1164465221
16:24:35.879 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #36
16:24:35.879 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.la4j.vector.sparse.CompressedVector:214 which is executed by 10 tests
1164465221
16:24:35.947 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
16:24:36.013 [pool-60-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (56 ms)
<> Total tests run: 143
<> Ignored tests: 0
<> Failed tests: 2
~ testFromMap_unordered(org.la4j.vector.sparse.CompressedVectorTest)
[expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>]
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testFromMap_unordered(org.la4j.vector.dense.BasicVectorTest)
[expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>]
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 0.000 0.000>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
16:24:36.511 [pool-61-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (21 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFromMap_unordered(org.la4j.vector.sparse.CompressedVectorTest)
[expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 0.000 0.000>]
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 0.000 0.000>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 0.000 0.000>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
16:24:36.513 [pool-62-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFromMap_unordered(org.la4j.vector.dense.BasicVectorTest)
[expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 0.000 0.000>]
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 0.000 0.000>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
16:24:36.521 [pool-63-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFromMap_unordered(org.la4j.vector.sparse.CompressedVectorTest)
[expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>]
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
16:24:36.525 [pool-64-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFromMap_unordered(org.la4j.vector.dense.BasicVectorTest)
[expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>]
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

16:24:36.527 [pool-59-thread-1] DEBUG tests.output - Failing tests with false: 
[testFromMap_unordered(org.la4j.vector.sparse.CompressedVectorTest): expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 0.000 0.000>, testFromMap_unordered(org.la4j.vector.dense.BasicVectorTest): expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 0.000 0.000>]
16:24:36.527 [pool-59-thread-1] DEBUG tests.output - Failing tests with true: 
[testFromMap_unordered(org.la4j.vector.sparse.CompressedVectorTest): expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>, testFromMap_unordered(org.la4j.vector.dense.BasicVectorTest): expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>]
16:24:36.527 [pool-59-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.la4j.vector.sparse.CompressedVector:214.
16:24:36.527 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #37
16:24:36.527 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.la4j.vector.sparse.CompressedVector:213 which is executed by 10 tests
1164465221
16:24:36.590 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #38
16:24:36.591 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.la4j.vector.sparse.CompressedVector:212 which is executed by 10 tests
1164465221
16:24:36.653 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #39
16:24:36.653 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.la4j.vector.sparse.CompressedVector:211 which is executed by 10 tests
1164465221
16:24:36.732 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #40
16:24:36.732 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.la4j.vector.sparse.CompressedVector:210 which is executed by 12 tests
1164465221
16:24:36.794 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #41
16:24:36.794 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.la4j.Vector:202 which is executed by 12 tests
-1736520348
16:24:36.860 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #42
16:24:36.860 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.la4j.vector.SparseVector:141 which is executed by 12 tests
1517253540
16:24:36.917 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #43
16:24:36.917 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.la4j.Vector:811 which is executed by 16 tests
-1736520348
16:24:36.985 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #44
16:24:36.985 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.la4j.Vector:865 which is executed by 92 tests
-1736520348
16:24:37.051 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #45
16:24:37.051 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.la4j.vector.sparse.CompressedVector:451 which is executed by 99 tests
1164465221
16:24:37.115 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
16:24:37.176 [pool-66-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (53 ms)
<> Total tests run: 143
<> Ignored tests: 0
<> Failed tests: 2
~ testFromMap_unordered(org.la4j.vector.sparse.CompressedVectorTest)
[expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>]
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testFromMap_unordered(org.la4j.vector.dense.BasicVectorTest)
[expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>]
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.OutOfMemoryError: GC overhead limit exceeded
    at java.util.HashMap.newNode(HashMap.java:1747)
    at java.util.HashMap.putVal(HashMap.java:642)
    at java.util.HashMap.put(HashMap.java:612)
    at fr.inria.lille.commons.trace.collector.ValueCollector.collectFrom(ValueCollector.java:19)
    at fr.inria.lille.commons.trace.RuntimeValues.collectInput(RuntimeValues.java:89)
    at org.la4j.vector.sparse.CompressedVector.searchForIndex(CompressedVector.java:295)
16:27:14.015 [pool-67-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (156376 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFromMap_unordered(org.la4j.vector.sparse.CompressedVectorTest)
[GC overhead limit exceeded]
java.lang.OutOfMemoryError: GC overhead limit exceeded    at java.util.HashMap.newNode(HashMap.java:1747)
    at java.util.HashMap.putVal(HashMap.java:642)
    at java.util.HashMap.put(HashMap.java:612)
    at fr.inria.lille.commons.trace.collector.ValueCollector.collectFrom(ValueCollector.java:19)
    at fr.inria.lille.commons.trace.RuntimeValues.collectInput(RuntimeValues.java:89)
    at org.la4j.vector.sparse.CompressedVector.searchForIndex(CompressedVector.java:295)

16:30:34.017 [pool-65-thread-1] DEBUG xxl.java.junit.TestSuiteExecution - Timeout after 200 seconds. Infinite loop?
16:30:34.017 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.TimeoutException
16:30:34.017 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #46
16:30:34.017 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.la4j.vector.sparse.CompressedVector:457 which is executed by 112 tests
1164465221
16:30:34.098 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #47
16:30:34.098 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.la4j.Vector:810 which is executed by 123 tests
-1736520348
16:30:34.165 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
16:30:34.246 [pool-70-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (54 ms)
<> Total tests run: 143
<> Ignored tests: 0
<> Failed tests: 2
~ testFromMap_unordered(org.la4j.vector.sparse.CompressedVectorTest)
[expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>]
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testFromMap_unordered(org.la4j.vector.dense.BasicVectorTest)
[expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>]
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

16:30:34.478 [pool-71-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (20 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.480 [pool-72-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
16:30:34.495 [pool-73-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (9 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFromMap_unordered(org.la4j.vector.sparse.CompressedVectorTest)
[expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>]
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
16:30:34.498 [pool-74-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFromMap_unordered(org.la4j.vector.dense.BasicVectorTest)
[expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>]
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

16:30:34.517 [pool-75-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (9 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.519 [pool-76-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.520 [pool-77-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.522 [pool-78-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.523 [pool-79-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.532 [pool-80-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (7 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.533 [pool-81-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.534 [pool-82-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.536 [pool-83-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.537 [pool-84-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.538 [pool-85-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.542 [pool-86-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.543 [pool-87-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.544 [pool-88-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.545 [pool-89-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.557 [pool-90-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.570 [pool-91-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.575 [pool-92-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.580 [pool-93-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.586 [pool-94-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (5 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.588 [pool-95-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.590 [pool-96-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.591 [pool-97-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.592 [pool-98-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.593 [pool-99-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.598 [pool-100-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.609 [pool-101-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.611 [pool-102-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.613 [pool-103-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.621 [pool-104-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.622 [pool-105-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.623 [pool-106-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.624 [pool-107-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.625 [pool-108-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.625 [pool-109-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.627 [pool-110-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.627 [pool-111-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.628 [pool-112-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.629 [pool-113-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.631 [pool-114-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.632 [pool-115-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.633 [pool-116-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.634 [pool-117-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.634 [pool-118-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.635 [pool-119-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.636 [pool-120-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertFalse(Assert.java:64)
    at org.junit.Assert.assertFalse(Assert.java:74)
    at org.la4j.vector.VectorTest.testEquals(VectorTest.java:669)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
16:30:34.638 [pool-121-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testEquals(org.la4j.vector.sparse.CompressedVectorTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertFalse(Assert.java:64)
    at org.junit.Assert.assertFalse(Assert.java:74)
    at org.la4j.vector.VectorTest.testEquals(VectorTest.java:669)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

16:30:34.639 [pool-122-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.640 [pool-123-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.641 [pool-124-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.642 [pool-125-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.644 [pool-126-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.646 [pool-127-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.650 [pool-128-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.651 [pool-129-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.652 [pool-130-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.655 [pool-131-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.656 [pool-132-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.658 [pool-133-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.662 [pool-134-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.664 [pool-135-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.665 [pool-136-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.666 [pool-137-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.668 [pool-138-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.669 [pool-139-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.671 [pool-140-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.674 [pool-141-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.675 [pool-142-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.675 [pool-143-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.676 [pool-144-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.678 [pool-145-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.679 [pool-146-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.683 [pool-147-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.686 [pool-148-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.688 [pool-149-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.696 [pool-150-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (7 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.699 [pool-151-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.701 [pool-152-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.703 [pool-153-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.704 [pool-154-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.706 [pool-155-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.710 [pool-156-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.712 [pool-157-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.715 [pool-158-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.721 [pool-159-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.722 [pool-160-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.723 [pool-161-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.724 [pool-162-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.726 [pool-163-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.727 [pool-164-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.732 [pool-165-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.732 [pool-166-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.733 [pool-167-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.734 [pool-168-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.735 [pool-169-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.736 [pool-170-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.738 [pool-171-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.738 [pool-172-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.739 [pool-173-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.740 [pool-174-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.741 [pool-175-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.741 [pool-176-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.742 [pool-177-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.743 [pool-178-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.744 [pool-179-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.745 [pool-180-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertFalse(Assert.java:64)
    at org.junit.Assert.assertFalse(Assert.java:74)
    at org.la4j.vector.VectorTest.testEquals(VectorTest.java:669)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
16:30:34.746 [pool-181-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testEquals(org.la4j.vector.dense.BasicVectorTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertFalse(Assert.java:64)
    at org.junit.Assert.assertFalse(Assert.java:74)
    at org.la4j.vector.VectorTest.testEquals(VectorTest.java:669)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

16:30:34.747 [pool-182-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.747 [pool-183-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.749 [pool-184-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.750 [pool-185-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.753 [pool-186-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.755 [pool-187-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.756 [pool-188-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.757 [pool-189-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.759 [pool-190-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.761 [pool-191-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.764 [pool-192-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.765 [pool-193-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.767 [pool-194-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.768 [pool-195-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.769 [pool-196-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.771 [pool-197-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.772 [pool-198-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.773 [pool-199-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.774 [pool-200-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.775 [pool-201-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.777 [pool-202-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.783 [pool-203-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (6 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.785 [pool-204-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.787 [pool-205-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.788 [pool-206-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.793 [pool-207-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (3 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.796 [pool-208-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (3 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.797 [pool-209-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.801 [pool-210-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.802 [pool-211-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.803 [pool-212-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.804 [pool-213-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.805 [pool-214-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.806 [pool-215-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.807 [pool-216-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.807 [pool-217-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.808 [pool-218-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.809 [pool-219-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.810 [pool-220-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.811 [pool-221-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.812 [pool-222-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.812 [pool-223-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.813 [pool-224-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.814 [pool-225-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.815 [pool-226-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.815 [pool-227-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
16:30:34.816 [pool-228-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFromMap_unordered(org.la4j.vector.sparse.CompressedVectorTest)
[expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>]
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

16:30:34.817 [pool-229-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.819 [pool-230-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.821 [pool-231-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.822 [pool-232-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.823 [pool-233-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.824 [pool-234-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.825 [pool-235-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.826 [pool-236-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.827 [pool-237-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.828 [pool-238-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.828 [pool-239-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.829 [pool-240-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.833 [pool-241-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.834 [pool-242-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.835 [pool-243-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.836 [pool-244-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.837 [pool-245-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.839 [pool-246-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.840 [pool-247-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.841 [pool-248-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.843 [pool-249-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.844 [pool-250-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.848 [pool-251-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.849 [pool-252-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.850 [pool-253-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.851 [pool-254-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.852 [pool-255-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.853 [pool-256-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.853 [pool-257-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.855 [pool-258-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.856 [pool-259-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.857 [pool-260-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.858 [pool-261-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.858 [pool-262-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.869 [pool-263-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.873 [pool-264-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (3 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.874 [pool-265-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.875 [pool-266-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.876 [pool-267-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.878 [pool-268-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.882 [pool-269-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.883 [pool-270-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.884 [pool-271-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.885 [pool-272-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.887 [pool-273-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.890 [pool-274-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (3 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.895 [pool-275-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.898 [pool-276-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.900 [pool-277-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.901 [pool-278-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.902 [pool-279-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.903 [pool-280-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.904 [pool-281-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.904 [pool-282-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.905 [pool-283-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.906 [pool-284-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.906 [pool-285-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.907 [pool-286-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.908 [pool-287-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
16:30:34.908 [pool-288-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFromMap_unordered(org.la4j.vector.dense.BasicVectorTest)
[expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>]
java.lang.AssertionError: expected:<1.000 0.000 0.000 2.000 0.000 1.000 0.000> but was:<0.000 0.000 0.000 0.000 0.000 1.000 0.000>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.la4j.vector.VectorTest.testFromMap_unordered(VectorTest.java:735)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

16:30:34.909 [pool-289-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.910 [pool-290-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.910 [pool-291-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.911 [pool-292-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.912 [pool-293-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.919 [pool-294-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.920 [pool-295-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.920 [pool-296-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.921 [pool-297-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.922 [pool-298-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.923 [pool-299-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.923 [pool-300-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.924 [pool-301-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.925 [pool-302-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.925 [pool-303-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.926 [pool-304-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.927 [pool-305-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.927 [pool-306-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.928 [pool-307-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.929 [pool-308-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.929 [pool-309-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.930 [pool-310-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.931 [pool-311-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.931 [pool-312-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.932 [pool-313-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.934 [pool-314-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.935 [pool-315-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.937 [pool-316-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.938 [pool-317-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.939 [pool-318-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.944 [pool-319-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.946 [pool-320-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.973 [pool-321-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (21 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:34.993 [pool-322-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (16 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

16:30:35.267 [pool-69-thread-1] DEBUG f.i.l.c.s.ConstraintBasedSynthesis - Operators:
16:30:35.416 [pool-69-thread-1] DEBUG f.i.l.c.s.ConstraintBasedSynthesis - Operators:
== of arity: 2
!= of arity: 2
< of arity: 2
<= of arity: 2
16:30:35.796 [pool-69-thread-1] DEBUG f.i.l.c.s.ConstraintBasedSynthesis - Operators:
== of arity: 2
!= of arity: 2
< of arity: 2
<= of arity: 2
! of arity: 1
|| of arity: 2
&& of arity: 2
16:30:36.301 [pool-69-thread-1] DEBUG f.i.l.c.s.ConstraintBasedSynthesis - Successful code synthesis: (org.la4j.Vector.DEFAULT_DELIMITER.length()==0) || (!(((that.length) != (1000)) && (3 <= org.la4j.Vector.this.length)))
16:30:36.302 [pool-69-thread-1] INFO  f.i.l.repair.nopol.patch.TestPatch - Applying patch: org.la4j.Vector:810: PRECONDITION (org.la4j.Vector.DEFAULT_DELIMITER.length()==0) || (!(((that.length) != (1000)) && (3 <= org.la4j.Vector.this.length)))
16:30:36.472 [pool-69-thread-1] INFO  f.i.l.repair.nopol.patch.TestPatch - Running test suite to check the patch "(org.la4j.Vector.DEFAULT_DELIMITER.length()==0) || (!(((that.length) != (1000)) && (3 <= org.la4j.Vector.this.length)))" is working
16:30:36.693 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - ----INFORMATION----
16:30:36.726 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb classes : 86
16:30:36.726 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb methods : 829
16:30:36.727 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb Statements Analyzed : 17
16:30:36.727 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb Statements with Angelic Value Found : 1
16:30:36.727 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb inputs in SMT : 13
16:30:36.727 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb SMT level: 3
16:30:36.727 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb SMT components: [7] [== of arity: 2, != of arity: 2, < of arity: 2, <= of arity: 2, ! of arity: 1, || of arity: 2, && of arity: 2]
16:30:36.727 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol -                   class java.lang.Boolean: 7
16:30:36.727 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb variables in SMT : 22
16:30:36.727 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - NoPol Execution time : 400777ms
16:30:36.727 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - 
16:30:36.727 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - ----PATCH FOUND----
16:30:36.727 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - (org.la4j.Vector.DEFAULT_DELIMITER.length()==0) || (!(((that.length) != (1000)) && (3 <= org.la4j.Vector.this.length)))
16:30:36.744 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb test that executes the patch: 123
16:30:36.744 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - org.la4j.Vector:810: PRECONDITION
16:30:36.786 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - --- a/src/main/java/org/la4j/Vector.java
+++ b/src/main/java/org/la4j/Vector.java
@@ -809,4 +809,6 @@
             double diff = Math.abs(a - b);
-            result = (a == b) ||
-                    (diff < precision || diff / Math.max(Math.abs(a), Math.abs(b)) < precision);
+            if ((org.la4j.Vector.DEFAULT_DELIMITER.length()==0) || (!(((that.length) != (1000)) && (3 <= org.la4j.Vector.this.length)))) {
+                result = (a == b) ||
+                (diff < precision || diff / Math.max(Math.abs(a), Math.abs(b)) < precision);
+            }
         }

PATCH
861.90user 4.04system 6:42.02elapsed 215%CPU (0avgtext+0avgdata 4572816maxresident)k
55896inputs+7136outputs (24major+1272821minor)pagefaults 0swaps


Node: graphene-77.nancy.grid5000.fr



Date: Wed Dec 26 16:30:37 EST 2018

