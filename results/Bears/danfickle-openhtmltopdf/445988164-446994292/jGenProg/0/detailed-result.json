{"general":{"NR_RIGHT_COMPILATIONS":638,"NR_ERRONEOUS_VARIANCES":null,"EXECUTION_IDENTIFIER":"danfickle-openhtmltopdf-445988164-446994292","OUTPUT_STATUS":"STOP_BY_PATCH_FOUND","NR_FAILLING_COMPILATIONS":295,"NR_GENERATIONS":933,"TOTAL_TIME":1725.067,"NR_FAILING_VALIDATION_PROCESS":null},"patches":[{"VARIANT_ID":"1866","VALIDATION":"|true|0|71|[]|","patchhunks":[{"LOCATION":"com.openhtmltopdf.visualtest.VisualTester","PATH":"\\\/tmp\\\/jGenProg_Bears_danfickle-openhtmltopdf_445988164-446994292\\\/output_astor\\\/AstorMain-danfickle-openhtmltopdf-445988164-446994292\\\/src\\\/default\\\/com\\\/openhtmltopdf\\\/visualtest\\\/VisualTester.java","INGREDIENT_SCOPE":"LOCAL","SUSPICIOUNESS":"0.983","INGREDIENT_PARENT":"return true","PATCH_HUNK_TYPE":"CtReturnImpl|CtBlockImpl","ORIGINAL_CODE":"return false","BUGGY_CODE_TYPE":"CtReturnImpl|CtBlockImpl","OPERATOR":"ReplaceOp","MODIFIED_FILE_PATH":"\\\/tmp\\\/jGenProg_Bears_danfickle-openhtmltopdf_445988164-446994292\\\/.\\\/output_astor\\\/AstorMain-danfickle-openhtmltopdf-445988164-446994292\\\/\\\/src\\\/\\\/variant-1866_f\\\/com\\\/openhtmltopdf\\\/visualtest\\\/VisualTester.java","LINE":"153","MP_RANKING":"29","PATCH_HUNK_CODE":"return true"}],"TIME":"1725","GENERATION":"933","FOLDER_SOLUTION_CODE":"\\\/tmp\\\/jGenProg_Bears_danfickle-openhtmltopdf_445988164-446994292\\\/.\\\/output_astor\\\/AstorMain-danfickle-openhtmltopdf-445988164-446994292\\\/\\\/bin\\\/\\\/variant-1866","PATCH_DIFF_ORIG":"\\\/var\\\/lib\\\/oar\\\/.batch_job_bashrc: line 5: \\\/home\\\/tdurieux\\\/.bashrc: No such file or directory\\n--- com\\\/openhtmltopdf\\\/visualtest\\\/VisualTester.java\\n+++ com\\\/openhtmltopdf\\\/visualtest\\\/VisualTester.java\\n@@ -150,53 +150,53 @@\\n \\t\\t\\tjava.lang.System.err.println(\\\"Writing generated PDF to file instead in output directory.\\\");\\n \\t\\t\\tjava.io.File output = new java.io.File(this.outputPath, (resource + \\\".pdf\\\"));\\n \\t\\t\\torg.apache.commons.io.FileUtils.writeByteArrayToFile(output, actualPdfBytes);\\n-\\t\\t\\treturn false;\\n-\\t\\t}\\n \\n-\\t\\torg.apache.pdfbox.pdmodel.PDDocument docActual = org.apache.pdfbox.pdmodel.PDDocument.load(actualPdfBytes);\\n-\\t\\torg.apache.pdfbox.pdmodel.PDDocument docExpected = org.apache.pdfbox.pdmodel.PDDocument.load(testFile);\\n \\n-\\t\\torg.apache.pdfbox.rendering.PDFRenderer rendActual = new org.apache.pdfbox.rendering.PDFRenderer(docActual);\\n-\\t\\torg.apache.pdfbox.rendering.PDFRenderer rendExpected = new org.apache.pdfbox.rendering.PDFRenderer(docExpected);\\n \\n-\\t\\tboolean problems = false;\\n \\n-\\t\\tfor (int i = 0; i < (docActual.getNumberOfPages()); i++) {\\n-\\t\\t\\tjava.awt.image.BufferedImage imgActual = (i >= (docActual.getNumberOfPages())) ? com.openhtmltopdf.visualtest.VisualTester.ONE_PX_IMAGE : rendActual.renderImageWithDPI(i, 96.0F, org.apache.pdfbox.rendering.ImageType.RGB);\\n-\\t\\t\\tjava.awt.image.BufferedImage imgExpected = (i >= (docExpected.getNumberOfPages())) ? com.openhtmltopdf.visualtest.VisualTester.ONE_PX_IMAGE : rendExpected.renderImageWithDPI(i, 96.0F, org.apache.pdfbox.rendering.ImageType.RGB);\\n-\\n-\\t\\t\\tif (((imgActual.getWidth()) != (imgExpected.getWidth())) || \\n-\\t\\t\\t((imgActual.getHeight()) != (imgExpected.getHeight()))) {\\n-\\t\\t\\t\\tjava.lang.System.err.println(((\\\"When running test (\\\" + resource) + \\\"), page sizes were different. Please check diff image in output directory.\\\"));\\n-\\t\\t\\t\\tproblems = true;\\n-\\t\\t\\t}\\n \\n-\\t\\t\\tjava.awt.image.BufferedImage diff = compareImages(imgActual, imgExpected);\\n \\n-\\t\\t\\tif (diff != null) {\\n-\\t\\t\\t\\tjava.lang.System.err.println(((\\\"When running test (\\\" + resource) + \\\"), differences were found. Please check diff images in output directory.\\\"));\\n-\\t\\t\\t\\tjava.io.File output = new java.io.File(this.outputPath, (((resource + \\\"---\\\") + i) + \\\"---diff.png\\\"));\\n-\\t\\t\\t\\tjavax.imageio.ImageIO.write(diff, \\\"png\\\", output);\\n-\\n-\\t\\t\\t\\toutput = new java.io.File(this.outputPath, (((resource + \\\"---\\\") + i) + \\\"---actual.png\\\"));\\n-\\t\\t\\t\\tjavax.imageio.ImageIO.write(imgActual, \\\"png\\\", output);\\n-\\n-\\t\\t\\t\\toutput = new java.io.File(this.outputPath, (((resource + \\\"---\\\") + i) + \\\"---expected.png\\\"));\\n-\\t\\t\\t\\tjavax.imageio.ImageIO.write(imgExpected, \\\"png\\\", output);\\n-\\t\\t\\t\\tproblems = true;\\n-\\t\\t\\t}\\n-\\t\\t}\\n \\n-\\t\\tdocActual.close();\\n-\\t\\tdocExpected.close();\\n \\n-\\t\\tif (problems) {\\n-\\t\\t\\tjava.io.File outPdf = new java.io.File(this.outputPath, (resource + \\\".pdf\\\"));\\n-\\t\\t\\torg.apache.commons.io.FileUtils.writeByteArrayToFile(outPdf, actualPdfBytes);\\n-\\t\\t\\treturn false;\\n-\\t\\t}\\n \\n-\\t\\treturn true;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn true;} \\t\\torg.apache.pdfbox.pdmodel.PDDocument docActual = org.apache.pdfbox.pdmodel.PDDocument.load(actualPdfBytes); \\t\\torg.apache.pdfbox.pdmodel.PDDocument docExpected = org.apache.pdfbox.pdmodel.PDDocument.load(testFile); \\t\\torg.apache.pdfbox.rendering.PDFRenderer rendActual = new org.apache.pdfbox.rendering.PDFRenderer(docActual); \\t\\torg.apache.pdfbox.rendering.PDFRenderer rendExpected = new org.apache.pdfbox.rendering.PDFRenderer(docExpected); \\t\\tboolean problems = false; \\t\\tfor (int i = 0; i < (docActual.getNumberOfPages()); i++) { \\t\\t\\tjava.awt.image.BufferedImage imgActual = (i >= (docActual.getNumberOfPages())) ? com.openhtmltopdf.visualtest.VisualTester.ONE_PX_IMAGE : rendActual.renderImageWithDPI(i, 96.0F, org.apache.pdfbox.rendering.ImageType.RGB); \\t\\t\\tjava.awt.image.BufferedImage imgExpected = (i >= (docExpected.getNumberOfPages())) ? com.openhtmltopdf.visualtest.VisualTester.ONE_PX_IMAGE : rendExpected.renderImageWithDPI(i, 96.0F, org.apache.pdfbox.rendering.ImageType.RGB); \\t\\t\\tif (((imgActual.getWidth()) != (imgExpected.getWidth())) || ((imgActual.getHeight()) != (imgExpected.getHeight()))) { \\t\\t\\t\\tjava.lang.System.err.println(((\\\"When running test (\\\" + resource) + \\\"), page sizes were different. Please check diff image in output directory.\\\")); \\t\\t\\t\\tproblems = true;} \\t\\t\\tjava.awt.image.BufferedImage diff = compareImages(imgActual, imgExpected); \\t\\t\\tif (diff != null) { \\t\\t\\t\\tjava.lang.System.err.println(((\\\"When running test (\\\" + resource) + \\\"), differences were found. Please check diff images in output directory.\\\")); \\t\\t\\t\\tjava.io.File output = new java.io.File(this.outputPath, (((resource + \\\"---\\\") + i) + \\\"---diff.png\\\")); \\t\\t\\t\\tjavax.imageio.ImageIO.write(diff, \\\"png\\\", output); \\t\\t\\t\\toutput = new java.io.File(this.outputPath, (((resource + \\\"---\\\") + i) + \\\"---actual.png\\\")); \\t\\t\\t\\tjavax.imageio.ImageIO.write(imgActual, \\\"png\\\", output); \\t\\t\\t\\toutput = new java.io.File(this.outputPath, (((resource + \\\"---\\\") + i) + \\\"---expected.png\\\")); \\t\\t\\t\\tjavax.imageio.ImageIO.write(imgExpected, \\\"png\\\", output); \\t\\t\\t\\tproblems = true;}} \\t\\tdocActual.close(); \\t\\tdocExpected.close(); \\t\\tif (problems) { \\t\\t\\tjava.io.File outPdf = new java.io.File(this.outputPath, (resource + \\\".pdf\\\")); \\t\\t\\torg.apache.commons.io.FileUtils.writeByteArrayToFile(outPdf, actualPdfBytes); \\t\\t\\treturn false;} \\t\\treturn true;\\n \\t}\\n \\n \\tpublic java.awt.image.BufferedImage compareImages(java.awt.image.BufferedImage img1, java.awt.image.BufferedImage img2) {\\n\\n"}]}