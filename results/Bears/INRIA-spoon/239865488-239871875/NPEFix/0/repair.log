cd /tmp/NPEFix_Bears_INRIA-spoon_239865488-239871875;
export JAVA_TOOL_OPTIONS="-Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en";
TZ="America/New_York"; export TZ;
export PATH="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:$PATH";
export JAVA_HOME="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/";
time java -Xmx4g -Xms1g -cp /home/tdurieux/defects4j4repair/script/../repair_tools/npefix.jar fr.inria.spirals.npefix.main.run.Main \
    --test spoon.test.factory.TypeFactoryTest \
    --iteration 100 \
	--complianceLevel 8 \
	--workingdirectory . \
	--source src/main/java \
	--classpath target/classes:target/test-classes:/home/tdurieux/.m2/repository/commons-io/commons-io/2.6/commons-io-2.6.jar:/home/tdurieux/.m2/repository/com/github/stefanbirkner/system-rules/1.9.0/system-rules-1.9.0.jar:/home/tdurieux/.m2/repository/log4j/log4j/1.2.17/log4j-1.2.17.jar:/home/tdurieux/.m2/repository/org/apache/commons/commons-lang3/3.5/commons-lang3-3.5.jar:/home/tdurieux/.m2/repository/org/mockito/mockito-all/2.0.2-beta/mockito-all-2.0.2-beta.jar:/home/tdurieux/.m2/repository/ant/ant/1.6.5/ant-1.6.5.jar:/home/tdurieux/.m2/repository/junit/junit/4.11/junit-4.11.jar:/home/tdurieux/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:/home/tdurieux/.m2/repository/com/martiansoftware/jsap/2.1/jsap-2.1.jar:/home/tdurieux/.m2/repository/org/eclipse/tycho/org.eclipse.jdt.core/3.12.0.v20160516-2131/org.eclipse.jdt.core-3.12.0.v20160516-2131.jar;
	echo "\n\nNode: `hostname`\n";
	echo "\n\nDate: `date`\n";
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en
TernarySplitter  in 136ms
return ((field.getAnnotation(Parameter.class)) != null) || (TemplateParameter.class.isAssignableFrom(field.getType()))
wildcard.setUpper((((type.getUpperBounds()) != null) && (!(type.getUpperBounds()[0].equals(Object.class)))))
return (((getFile()) == null ? (s.getFile()) == null : getFile().equals(s.getFile())) && ((getLine()) == (s.getLine()))) && ((getColumn()) == (s.getColumn()))
return (((getFile()) == null ? (s.getFile()) == null : getFile().equals(s.getFile())) && ((getLine()) == (s.getLine()))) && ((getColumn()) == (s.getColumn()))
return (parent) != null
assert executableJDT != null
boolean isOtherBinding = ((qualifiedNameReference.otherBindings) == null) || ((qualifiedNameReference.otherBindings.length) == 0)
p.getType().setImplicit(((argument.type) == null))
((CtArrayTypeReference) (p.getType())).getComponentType().setImplicit(((argument.type) == null))
return ((added) != null) && (!(added.isEmpty()))
return ((modified) != null) && (!(modified.isEmpty()))
return ((removed) != null) && (!(removed.isEmpty()))
return includeSamePackage || (((getPackage()) != null) && (!(CtTypeImpl.getPackageReference(typeRef).equals(getPackage().getReference()))))
return ((typeRef.getPackage()) != null) && ("java.lang".equals(typeRef.getPackage().toString()))
return ((getDeclaringType()) == null) && ((getPackage()) != null)
return ((getDeclaringType()) == null) && ((getPackage()) != null)
return (super.matches(element)) && ((element.getAnnotation(annotationType)) != null)
environment.debugMessage(((("    " + (e.getClass().getSimpleName())) + " ") + ((e.getPosition()) == null ? "(?)" : "" + (e.getPosition()))))
return (m != null) && (Modifier.isFinal(m.getModifiers()))
return (((parent.defaultValue) != null) && (getFinalExpressionFromCast(parent.defaultValue).equals(childJDT))) && (!(child.equals(ctVariable.getDefaultExpression())))
return (((parent.initialization) != null) && (getFinalExpressionFromCast(parent.initialization).equals(childJDT))) && (!(child.equals(ctVariable.getDefaultExpression())))
return (((parent.returnType) != null) && (parent.returnType.equals(childJDT))) && (!(child.equals(ctMethod.getType())))
return (((parent.defaultValue) != null) && (parent.defaultValue.equals(childJDT))) && (!(child.equals(ctAnnotationMethod.getDefaultExpression())))
return (((parent.qualification) != null) && (getFinalExpressionFromCast(parent.qualification).equals(childJDT))) && (!(child.equals(ctInvocation.getTarget())))
return (((parent.receiver) != null) && (getFinalExpressionFromCast(parent.receiver).equals(childJDT))) && (!(child.equals(ctInvocation.getTarget())))
return (((parent.enclosingInstance) != null) && (getFinalExpressionFromCast(parent.enclosingInstance).equals(childJDT))) && (!(child.equals(ctConstructorCall.getTarget())))
return ((parent.type) != null) && (parent.type.equals(childJDT))
final boolean lookingForFields = (clazz == null) || (coreFactory.createField().getClass().isAssignableFrom(clazz))
return createReference(e.getParent(CtType.class).getReference(), (lambdaMethod == null ? null : lambdaMethod.getType()), executableName, refs)
return ((getExecutable()) != null) && (getExecutable().removeActualTypeArgument(actualTypeArgument))
isGenericTypeExplicit = (typeArgument != null) && ((typeArgument.length) > 0)
isNotInAnnotation = ((newArray.getParent(CtAnnotationType.class)) == null) && ((newArray.getParent(CtAnnotation.class)) == null)
isNotInAnnotation = ((newArray.getParent(CtAnnotationType.class)) == null) && ((newArray.getParent(CtAnnotation.class)) == null)
boolean isInner = (ref.getDeclaringType()) != null
return ((getExecutable()) != null) && (getExecutable().removeActualTypeArgument(actualTypeArgument))
return (currentTypeRef != null) && (typeRef.equals(currentTypeRef))
final CtQuery q = ((CtQueryable) (input)).map(new SuperInheritanceHierarchyFunction(((distinctSet) == null ? new HashSet<String>() : distinctSet)).includingSelf(true))
return (element != null) && (type.isAssignableFrom(element.getClass()))
return (null == inv) || (inv.equals(o))
CheckNotNull  in 901ms
ForceNullInit in 174ms
AddImplicitCastChecker --> 1 in 277ms
new CtScanner() {
    private final List<String> internals = Collections.singletonList("CtCircularTypeReference");

    @Override
    public <T> void visitCtMethod(CtMethod<T> element) {
        if (CallChecker.beforeDeref(element, CtMethod.class, 89, 4139, 4145)) {
            final String npe_invocation_var559 = element.getSimpleName();
            if (CallChecker.beforeDeref(npe_invocation_var559, String.class, 89, 4139, 4161)) {
                if (!(npe_invocation_var559.startsWith("visitCt"))) {
                    return ;
                }
            }
        }
        CtMethod<T> clone = CallChecker.init(CtMethod.class);
        if (CallChecker.beforeDeref(element, CtMethod.class, 92, 4231, 4237)) {
            clone = element.clone();
        }
        final CtParameter<CtElement> ctParameter = ((CtParameter<CtElement>) (element.getParameters().get(0)));
        final CtVariableAccess<CtElement> elementVarRead = factory.Code().createVariableRead(ctParameter.getReference(), false);
        final CtInvocation cloneBuilderInvocation = createCloneBuilderInvocation(elementVarRead);
        final CtLocalVariable localCloningElement = createLocalCloningElement(ctParameter.getType(), cloneBuilderInvocation);
        for (int i = 1; i < ((clone.getBody().getStatements().size()) - 1); i++) {
            final CtInvocation targetInvocation = ((CtInvocation) (((CtInvocation) (clone.getBody().getStatement(i))).getArguments().get(0)));
            if (CallChecker.beforeDeref(targetInvocation, CtInvocation.class, 103, 5012, 5027)) {
                final CtExecutableReference npe_invocation_var560 = targetInvocation.getExecutable();
                if (CallChecker.beforeDeref(npe_invocation_var560, CtExecutableReference.class, 103, 5012, 5043)) {
                    if (CallChecker.beforeDeref("getValue", String.class, 103, 4994, 5003)) {
                        if (CallChecker.beforeDeref(targetInvocation, CtInvocation.class, 103, 5084, 5099)) {
                            final CtExecutableReference npe_invocation_var561 = targetInvocation.getExecutable();
                            if (CallChecker.beforeDeref(npe_invocation_var561, CtExecutableReference.class, 103, 5084, 5115)) {
                                final CtTypeReference npe_invocation_var562 = npe_invocation_var561.getDeclaringType();
                                if (CallChecker.beforeDeref(npe_invocation_var562, CtTypeReference.class, 103, 5084, 5134)) {
                                    if (CallChecker.beforeDeref("CtLiteral", String.class, 103, 5065, 5075)) {
                                        if (("getValue".equals(npe_invocation_var560.getSimpleName())) && ("CtLiteral".equals(npe_invocation_var562.getSimpleName()))) {
                                            if (CallChecker.beforeDeref(clone, CtMethod.class, 104, 5162, 5166)) {
                                                final CtBlock<T> npe_invocation_var563 = clone.getBody();
                                                if (CallChecker.beforeDeref(npe_invocation_var563, CtBlock.class, 104, 5162, 5176)) {
                                                    final CtStatement npe_invocation_var564 = npe_invocation_var563.getStatement((i--));
                                                    if (CallChecker.beforeDeref(npe_invocation_var564, CtStatement.class, 104, 5162, 5194)) {
                                                        npe_invocation_var564.delete();
                                                    }
                                                }
                                            }
                                            continue;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (CallChecker.beforeDeref(clone, CtMethod.class, 107, 5234, 5238)) {
                final CtBlock<T> npe_invocation_var565 = clone.getBody();
                if (CallChecker.beforeDeref(npe_invocation_var565, CtBlock.class, 107, 5234, 5248)) {
                    if (CallChecker.beforeDeref(clone, CtMethod.class, 108, 5313, 5317)) {
                        final CtBlock<T> npe_invocation_var566 = clone.getBody();
                        if (CallChecker.beforeDeref(npe_invocation_var566, CtBlock.class, 108, 5313, 5327)) {
                            if (CallChecker.beforeDeref(factory, Factory.class, 108, 5346, 5352)) {
                                if (CallChecker.beforeDeref(localCloningElement, CtLocalVariable.class, 108, 5380, 5398)) {
                                    final CodeFactory npe_invocation_var567 = factory.Code();
                                    if (CallChecker.beforeDeref(npe_invocation_var567, CodeFactory.class, 108, 5346, 5359)) {
                                        final CtStatement npe_invocation_var568 = npe_invocation_var565.getStatement(i);
                                        if (CallChecker.beforeDeref(npe_invocation_var568, CtStatement.class, 107, 5234, 5264)) {
                                            npe_invocation_var568.replace(createSetter(((CtInvocation) (npe_invocation_var566.getStatement(i))), npe_invocation_var567.createVariableRead(localCloningElement.getReference(), false)));
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        if (CallChecker.beforeDeref(clone, CtMethod.class, 112, 5475, 5479)) {
            final CtBlock<T> npe_invocation_var569 = clone.getBody();
            if (CallChecker.beforeDeref(npe_invocation_var569, CtBlock.class, 112, 5475, 5489)) {
                final CtStatement npe_invocation_var570 = npe_invocation_var569.getStatement(0);
                if (CallChecker.beforeDeref(npe_invocation_var570, CtStatement.class, 112, 5475, 5505)) {
                    npe_invocation_var570.delete();
                }
            }
        }
        if (CallChecker.beforeDeref(clone, CtMethod.class, 113, 5521, 5525)) {
            if (CallChecker.beforeDeref(clone, CtMethod.class, 113, 5550, 5554)) {
                final CtBlock<T> npe_invocation_var571 = clone.getBody();
                if (CallChecker.beforeDeref(npe_invocation_var571, CtBlock.class, 113, 5550, 5564)) {
                    final List<CtStatement> npe_invocation_var572 = npe_invocation_var571.getStatements();
                    if (CallChecker.beforeDeref(npe_invocation_var572, List.class, 113, 5550, 5580)) {
                        final CtBlock<T> npe_invocation_var573 = clone.getBody();
                        if (CallChecker.beforeDeref(npe_invocation_var573, CtBlock.class, 113, 5521, 5535)) {
                            final CtStatement npe_invocation_var574 = npe_invocation_var573.getStatement(((npe_invocation_var572.size()) - 1));
                            if (CallChecker.beforeDeref(npe_invocation_var574, CtStatement.class, 113, 5521, 5592)) {
                                npe_invocation_var574.delete();
                            }
                        }
                    }
                }
            }
        }
        if (CallChecker.beforeDeref(clone, CtMethod.class, 116, 5672, 5676)) {
            final CtBlock<T> npe_invocation_var575 = clone.getBody();
            if (CallChecker.beforeDeref(npe_invocation_var575, CtBlock.class, 116, 5672, 5686)) {
                npe_invocation_var575.insertBegin(localCloningElement);
            }
        }
        if (CallChecker.beforeDeref(clone, CtMethod.class, 119, 5771, 5775)) {
            if (CallChecker.beforeDeref(factory, Factory.class, 119, 5814, 5820)) {
                if (CallChecker.beforeDeref(localCloningElement, CtLocalVariable.class, 119, 5848, 5866)) {
                    final CodeFactory npe_invocation_var576 = factory.Code();
                    if (CallChecker.beforeDeref(npe_invocation_var576, CodeFactory.class, 119, 5814, 5827)) {
                        final CtBlock<T> npe_invocation_var577 = clone.getBody();
                        if (CallChecker.beforeDeref(npe_invocation_var577, CtBlock.class, 119, 5771, 5785)) {
                            npe_invocation_var577.insertEnd(createAssignment(npe_invocation_var576.createVariableRead(localCloningElement.getReference(), false)));
                        }
                    }
                }
            }
        }
        final CtComment comment = factory.Core().createComment();
        if (CallChecker.beforeDeref(comment, CtComment.class, 123, 5996, 6002)) {
            comment.setCommentType(INLINE);
        }
        if (CallChecker.beforeDeref(comment, CtComment.class, 124, 6054, 6060)) {
            comment.setContent(("auto-generated, see " + (CloneVisitorGenerator.class.getName())));
        }
        if (CallChecker.beforeDeref(clone, CtMethod.class, 125, 6142, 6146)) {
            clone.addComment(comment);
        }
        if (CallChecker.beforeDeref(target, CtClass.class, 127, 6174, 6179)) {
            target.addMethod(clone);
        }
    }

    private CtInvocation<?> createSetter(CtInvocation scanInvocation, CtVariableAccess<CtElement> elementVarRead) {
        final CtInvocation<?> getter = ((CtInvocation<?>) (scanInvocation.getArguments().get(0)));
        final String getterName = getter.getExecutable().getSimpleName();
        final CtExecutableReference<Object> setterRef = factory.Executable().createReference((("void CtElement#set" + (getterName.substring(3, getterName.length()))) + "()"));
        final CtExecutableReference<Object> cloneRef = factory.Executable().createReference("CtElement spoon.support.visitor.equals.CloneHelper#clone()");
        final CtInvocation<Object> cloneInv = factory.Code().createInvocation(null, cloneRef, getter);
        if (CallChecker.beforeDeref(factory, Factory.class, 142, 7125, 7131)) {
            if (CallChecker.beforeDeref(factory, Factory.class, 142, 7157, 7163)) {
                final TypeFactory npe_invocation_var578 = factory.Type();
                if (CallChecker.beforeDeref(npe_invocation_var578, TypeFactory.class, 142, 7157, 7170)) {
                    final CodeFactory npe_invocation_var579 = factory.Code();
                    if (CallChecker.beforeDeref(npe_invocation_var579, CodeFactory.class, 142, 7125, 7138)) {
                        if (CallChecker.beforeDeref(cloneInv, CtInvocation.class, 142, 7106, 7113)) {
                            cloneInv.setTarget(npe_invocation_var579.createTypeAccess(npe_invocation_var578.createReference("spoon.support.visitor.equals.CloneHelper")));
                        }
                    }
                }
            }
        }
        if (CallChecker.beforeDeref(factory, Factory.class, 143, 7246, 7252)) {
            final CodeFactory npe_invocation_var580 = factory.Code();
            if (CallChecker.beforeDeref(npe_invocation_var580, CodeFactory.class, 143, 7246, 7259)) {
                return npe_invocation_var580.createInvocation(elementVarRead, setterRef, cloneInv);
            }else
                throw new AbnormalExecutionError();

        }else
            throw new AbnormalExecutionError();

    }

    private CtAssignment createAssignment(CtVariableAccess assignment) {
        if (CallChecker.beforeDeref(factory, Factory.class, 152, 7519, 7525)) {
            final CodeFactory npe_invocation_var581 = factory.Code();
            if (CallChecker.beforeDeref(npe_invocation_var581, CodeFactory.class, 152, 7519, 7532)) {
                return npe_invocation_var581.createVariableAssignment(other, false, assignment);
            }else
                throw new AbnormalExecutionError();

        }else
            throw new AbnormalExecutionError();

    }

    private <T> CtLocalVariable<T> createLocalCloningElement(CtTypeReference<T> typeReference, CtInvocation<T> ctInvocation) {
        if (CallChecker.beforeDeref(factory, Factory.class, 162, 8054, 8060)) {
            final CodeFactory npe_invocation_var582 = factory.Code();
            if (CallChecker.beforeDeref(npe_invocation_var582, CodeFactory.class, 162, 8054, 8067)) {
                return npe_invocation_var582.createLocalVariable(typeReference, ("a" + (typeReference.getSimpleName())), ctInvocation);
            }else
                throw new AbnormalExecutionError();

        }else
            throw new AbnormalExecutionError();

    }

    private CtInvocation<CloneBuilder> createCloneBuilderInvocation(CtVariableAccess<CtElement> elementAccess) {
        final CtExecutableReference<CloneBuilder> buildExecRef = factory.Executable().createReference("CloneBuilder CtElement#build()");
        if (CallChecker.beforeDeref(factory, Factory.class, 172, 8597, 8603)) {
            if (CallChecker.beforeDeref(elementAccess, CtVariableAccess.class, 172, 8720, 8732)) {
                final CodeFactory npe_invocation_var583 = factory.Code();
                if (CallChecker.beforeDeref(npe_invocation_var583, CodeFactory.class, 172, 8597, 8610)) {
                    return npe_invocation_var583.createInvocation(cloneBuilderType, buildExecRef, builderFieldAccess, elementAccess, createFactoryInvocation(elementAccess.clone()));
                }else
                    throw new AbnormalExecutionError();

            }else
                throw new AbnormalExecutionError();

        }else
            throw new AbnormalExecutionError();

    }

    private CtInvocation<Object> createFactoryInvocation(CtVariableAccess<CtElement> elementAccess) {
        final String typeName = elementAccess.getType().getSimpleName();
        final CtInvocation<Object> getFactory = factory.Code().createInvocation(null, factory.Executable().createReference("Factory CtElement#getFactory()"));
        if (CallChecker.beforeDeref(getFactory, CtInvocation.class, 184, 9242, 9251)) {
            getFactory.setTarget(elementAccess);
        }
        String factoryName = CallChecker.init(String.class);
        if (CallChecker.beforeDeref(internals, List.class, 186, 9354, 9362)) {
            if (internals.contains(typeName)) {
                factoryName = "Internal";
            }else {
                factoryName = "Core";
            }
        }
        final CtInvocation<Object> coreFactory = factory.Code().createInvocation(getFactory, factory.Executable().createReference((("CoreFactory Factory#" + factoryName) + "()")));
        if (CallChecker.beforeDeref(factory, Factory.class, 189, 9625, 9631)) {
            if (CallChecker.beforeDeref(factory, Factory.class, 189, 9670, 9676)) {
                if (CallChecker.beforeDeref(typeName, String.class, 189, 9762, 9769)) {
                    final ExecutableFactory npe_invocation_var584 = factory.Executable();
                    if (CallChecker.beforeDeref(npe_invocation_var584, ExecutableFactory.class, 189, 9670, 9689)) {
                        final CodeFactory npe_invocation_var585 = factory.Code();
                        if (CallChecker.beforeDeref(npe_invocation_var585, CodeFactory.class, 189, 9625, 9638)) {
                            return npe_invocation_var585.createInvocation(coreFactory, npe_invocation_var584.createReference((("CoreFactory CtElement#create" + (typeName.substring(2, typeName.length()))) + "()")));
                        }else
                            throw new AbnormalExecutionError();

                    }else
                        throw new AbnormalExecutionError();

                }else
                    throw new AbnormalExecutionError();

            }else
                throw new AbnormalExecutionError();

        }else
            throw new AbnormalExecutionError();

    }
}.scan(npe_invocation_var587.get(CtScanner.class))-->new CtScanner() {
    private final List<String> internals = Collections.singletonList("CtCircularTypeReference");

    @Override
    public <T> void visitCtMethod(CtMethod<T> element) {
        if (CallChecker.beforeDeref(element, CtMethod.class, 89, 4139, 4145)) {
            final String npe_invocation_var559 = element.getSimpleName();
            if (CallChecker.beforeDeref(npe_invocation_var559, String.class, 89, 4139, 4161)) {
                if (!(npe_invocation_var559.startsWith("visitCt"))) {
                    return ;
                }
            }
        }
        CtMethod<T> clone = CallChecker.init(CtMethod.class);
        if (CallChecker.beforeDeref(element, CtMethod.class, 92, 4231, 4237)) {
            clone = element.clone();
        }
        final CtParameter<CtElement> ctParameter = ((CtParameter<CtElement>) (element.getParameters().get(0)));
        final CtVariableAccess<CtElement> elementVarRead = factory.Code().createVariableRead(ctParameter.getReference(), false);
        final CtInvocation cloneBuilderInvocation = createCloneBuilderInvocation(elementVarRead);
        final CtLocalVariable localCloningElement = createLocalCloningElement(ctParameter.getType(), cloneBuilderInvocation);
        for (int i = 1; i < ((clone.getBody().getStatements().size()) - 1); i++) {
            final CtInvocation targetInvocation = ((CtInvocation) (((CtInvocation) (clone.getBody().getStatement(i))).getArguments().get(0)));
            if (CallChecker.beforeDeref(targetInvocation, CtInvocation.class, 103, 5012, 5027)) {
                final CtExecutableReference npe_invocation_var560 = targetInvocation.getExecutable();
                if (CallChecker.beforeDeref(npe_invocation_var560, CtExecutableReference.class, 103, 5012, 5043)) {
                    if (CallChecker.beforeDeref("getValue", String.class, 103, 4994, 5003)) {
                        if (CallChecker.beforeDeref(targetInvocation, CtInvocation.class, 103, 5084, 5099)) {
                            final CtExecutableReference npe_invocation_var561 = targetInvocation.getExecutable();
                            if (CallChecker.beforeDeref(npe_invocation_var561, CtExecutableReference.class, 103, 5084, 5115)) {
                                final CtTypeReference npe_invocation_var562 = npe_invocation_var561.getDeclaringType();
                                if (CallChecker.beforeDeref(npe_invocation_var562, CtTypeReference.class, 103, 5084, 5134)) {
                                    if (CallChecker.beforeDeref("CtLiteral", String.class, 103, 5065, 5075)) {
                                        if (("getValue".equals(npe_invocation_var560.getSimpleName())) && ("CtLiteral".equals(npe_invocation_var562.getSimpleName()))) {
                                            if (CallChecker.beforeDeref(clone, CtMethod.class, 104, 5162, 5166)) {
                                                final CtBlock<T> npe_invocation_var563 = clone.getBody();
                                                if (CallChecker.beforeDeref(npe_invocation_var563, CtBlock.class, 104, 5162, 5176)) {
                                                    final CtStatement npe_invocation_var564 = npe_invocation_var563.getStatement((i--));
                                                    if (CallChecker.beforeDeref(npe_invocation_var564, CtStatement.class, 104, 5162, 5194)) {
                                                        npe_invocation_var564.delete();
                                                    }
                                                }
                                            }
                                            continue;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (CallChecker.beforeDeref(clone, CtMethod.class, 107, 5234, 5238)) {
                final CtBlock<T> npe_invocation_var565 = clone.getBody();
                if (CallChecker.beforeDeref(npe_invocation_var565, CtBlock.class, 107, 5234, 5248)) {
                    if (CallChecker.beforeDeref(clone, CtMethod.class, 108, 5313, 5317)) {
                        final CtBlock<T> npe_invocation_var566 = clone.getBody();
                        if (CallChecker.beforeDeref(npe_invocation_var566, CtBlock.class, 108, 5313, 5327)) {
                            if (CallChecker.beforeDeref(factory, Factory.class, 108, 5346, 5352)) {
                                if (CallChecker.beforeDeref(localCloningElement, CtLocalVariable.class, 108, 5380, 5398)) {
                                    final CodeFactory npe_invocation_var567 = factory.Code();
                                    if (CallChecker.beforeDeref(npe_invocation_var567, CodeFactory.class, 108, 5346, 5359)) {
                                        final CtStatement npe_invocation_var568 = npe_invocation_var565.getStatement(i);
                                        if (CallChecker.beforeDeref(npe_invocation_var568, CtStatement.class, 107, 5234, 5264)) {
                                            npe_invocation_var568.replace(createSetter(((CtInvocation) (npe_invocation_var566.getStatement(i))), npe_invocation_var567.createVariableRead(localCloningElement.getReference(), false)));
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        if (CallChecker.beforeDeref(clone, CtMethod.class, 112, 5475, 5479)) {
            final CtBlock<T> npe_invocation_var569 = clone.getBody();
            if (CallChecker.beforeDeref(npe_invocation_var569, CtBlock.class, 112, 5475, 5489)) {
                final CtStatement npe_invocation_var570 = npe_invocation_var569.getStatement(0);
                if (CallChecker.beforeDeref(npe_invocation_var570, CtStatement.class, 112, 5475, 5505)) {
                    npe_invocation_var570.delete();
                }
            }
        }
        if (CallChecker.beforeDeref(clone, CtMethod.class, 113, 5521, 5525)) {
            if (CallChecker.beforeDeref(clone, CtMethod.class, 113, 5550, 5554)) {
                final CtBlock<T> npe_invocation_var571 = clone.getBody();
                if (CallChecker.beforeDeref(npe_invocation_var571, CtBlock.class, 113, 5550, 5564)) {
                    final List<CtStatement> npe_invocation_var572 = npe_invocation_var571.getStatements();
                    if (CallChecker.beforeDeref(npe_invocation_var572, List.class, 113, 5550, 5580)) {
                        final CtBlock<T> npe_invocation_var573 = clone.getBody();
                        if (CallChecker.beforeDeref(npe_invocation_var573, CtBlock.class, 113, 5521, 5535)) {
                            final CtStatement npe_invocation_var574 = npe_invocation_var573.getStatement(((npe_invocation_var572.size()) - 1));
                            if (CallChecker.beforeDeref(npe_invocation_var574, CtStatement.class, 113, 5521, 5592)) {
                                npe_invocation_var574.delete();
                            }
                        }
                    }
                }
            }
        }
        if (CallChecker.beforeDeref(clone, CtMethod.class, 116, 5672, 5676)) {
            final CtBlock<T> npe_invocation_var575 = clone.getBody();
            if (CallChecker.beforeDeref(npe_invocation_var575, CtBlock.class, 116, 5672, 5686)) {
                npe_invocation_var575.insertBegin(localCloningElement);
            }
        }
        if (CallChecker.beforeDeref(clone, CtMethod.class, 119, 5771, 5775)) {
            if (CallChecker.beforeDeref(factory, Factory.class, 119, 5814, 5820)) {
                if (CallChecker.beforeDeref(localCloningElement, CtLocalVariable.class, 119, 5848, 5866)) {
                    final CodeFactory npe_invocation_var576 = factory.Code();
                    if (CallChecker.beforeDeref(npe_invocation_var576, CodeFactory.class, 119, 5814, 5827)) {
                        final CtBlock<T> npe_invocation_var577 = clone.getBody();
                        if (CallChecker.beforeDeref(npe_invocation_var577, CtBlock.class, 119, 5771, 5785)) {
                            npe_invocation_var577.insertEnd(createAssignment(npe_invocation_var576.createVariableRead(localCloningElement.getReference(), false)));
                        }
                    }
                }
            }
        }
        final CtComment comment = factory.Core().createComment();
        if (CallChecker.beforeDeref(comment, CtComment.class, 123, 5996, 6002)) {
            comment.setCommentType(INLINE);
        }
        if (CallChecker.beforeDeref(comment, CtComment.class, 124, 6054, 6060)) {
            comment.setContent(("auto-generated, see " + (CloneVisitorGenerator.class.getName())));
        }
        if (CallChecker.beforeDeref(clone, CtMethod.class, 125, 6142, 6146)) {
            clone.addComment(comment);
        }
        if (CallChecker.beforeDeref(target, CtClass.class, 127, 6174, 6179)) {
            target.addMethod(clone);
        }
    }

    private CtInvocation<?> createSetter(CtInvocation scanInvocation, CtVariableAccess<CtElement> elementVarRead) {
        final CtInvocation<?> getter = ((CtInvocation<?>) (scanInvocation.getArguments().get(0)));
        final String getterName = getter.getExecutable().getSimpleName();
        final CtExecutableReference<Object> setterRef = factory.Executable().createReference((("void CtElement#set" + (getterName.substring(3, getterName.length()))) + "()"));
        final CtExecutableReference<Object> cloneRef = factory.Executable().createReference("CtElement spoon.support.visitor.equals.CloneHelper#clone()");
        final CtInvocation<Object> cloneInv = factory.Code().createInvocation(null, cloneRef, getter);
        if (CallChecker.beforeDeref(factory, Factory.class, 142, 7125, 7131)) {
            if (CallChecker.beforeDeref(factory, Factory.class, 142, 7157, 7163)) {
                final TypeFactory npe_invocation_var578 = factory.Type();
                if (CallChecker.beforeDeref(npe_invocation_var578, TypeFactory.class, 142, 7157, 7170)) {
                    final CodeFactory npe_invocation_var579 = factory.Code();
                    if (CallChecker.beforeDeref(npe_invocation_var579, CodeFactory.class, 142, 7125, 7138)) {
                        if (CallChecker.beforeDeref(cloneInv, CtInvocation.class, 142, 7106, 7113)) {
                            cloneInv.setTarget(npe_invocation_var579.createTypeAccess(npe_invocation_var578.createReference("spoon.support.visitor.equals.CloneHelper")));
                        }
                    }
                }
            }
        }
        if (CallChecker.beforeDeref(factory, Factory.class, 143, 7246, 7252)) {
            final CodeFactory npe_invocation_var580 = factory.Code();
            if (CallChecker.beforeDeref(npe_invocation_var580, CodeFactory.class, 143, 7246, 7259)) {
                return npe_invocation_var580.createInvocation(elementVarRead, setterRef, cloneInv);
            }else
                throw new AbnormalExecutionError();

        }else
            throw new AbnormalExecutionError();

    }

    private CtAssignment createAssignment(CtVariableAccess assignment) {
        if (CallChecker.beforeDeref(factory, Factory.class, 152, 7519, 7525)) {
            final CodeFactory npe_invocation_var581 = factory.Code();
            if (CallChecker.beforeDeref(npe_invocation_var581, CodeFactory.class, 152, 7519, 7532)) {
                return npe_invocation_var581.createVariableAssignment(other, false, assignment);
            }else
                throw new AbnormalExecutionError();

        }else
            throw new AbnormalExecutionError();

    }

    private <T> CtLocalVariable<T> createLocalCloningElement(CtTypeReference<T> typeReference, CtInvocation<T> ctInvocation) {
        if (CallChecker.beforeDeref(factory, Factory.class, 162, 8054, 8060)) {
            final CodeFactory npe_invocation_var582 = factory.Code();
            if (CallChecker.beforeDeref(npe_invocation_var582, CodeFactory.class, 162, 8054, 8067)) {
                return npe_invocation_var582.createLocalVariable(typeReference, ("a" + (typeReference.getSimpleName())), ctInvocation);
            }else
                throw new AbnormalExecutionError();

        }else
            throw new AbnormalExecutionError();

    }

    private CtInvocation<CloneBuilder> createCloneBuilderInvocation(CtVariableAccess<CtElement> elementAccess) {
        final CtExecutableReference<CloneBuilder> buildExecRef = factory.Executable().createReference("CloneBuilder CtElement#build()");
        if (CallChecker.beforeDeref(factory, Factory.class, 172, 8597, 8603)) {
            if (CallChecker.beforeDeref(elementAccess, CtVariableAccess.class, 172, 8720, 8732)) {
                final CodeFactory npe_invocation_var583 = factory.Code();
                if (CallChecker.beforeDeref(npe_invocation_var583, CodeFactory.class, 172, 8597, 8610)) {
                    return npe_invocation_var583.createInvocation(cloneBuilderType, buildExecRef, builderFieldAccess, elementAccess, createFactoryInvocation(elementAccess.clone()));
                }else
                    throw new AbnormalExecutionError();

            }else
                throw new AbnormalExecutionError();

        }else
            throw new AbnormalExecutionError();

    }

    private CtInvocation<Object> createFactoryInvocation(CtVariableAccess<CtElement> elementAccess) {
        final String typeName = elementAccess.getType().getSimpleName();
        final CtInvocation<Object> getFactory = factory.Code().createInvocation(null, factory.Executable().createReference("Factory CtElement#getFactory()"));
        if (CallChecker.beforeDeref(getFactory, CtInvocation.class, 184, 9242, 9251)) {
            getFactory.setTarget(elementAccess);
        }
        String factoryName = CallChecker.init(String.class);
        if (CallChecker.beforeDeref(internals, List.class, 186, 9354, 9362)) {
            if (internals.contains(typeName)) {
                factoryName = "Internal";
            }else {
                factoryName = "Core";
            }
        }
        final CtInvocation<Object> coreFactory = factory.Code().createInvocation(getFactory, factory.Executable().createReference((("CoreFactory Factory#" + factoryName) + "()")));
        if (CallChecker.beforeDeref(factory, Factory.class, 189, 9625, 9631)) {
            if (CallChecker.beforeDeref(factory, Factory.class, 189, 9670, 9676)) {
                if (CallChecker.beforeDeref(typeName, String.class, 189, 9762, 9769)) {
                    final ExecutableFactory npe_invocation_var584 = factory.Executable();
                    if (CallChecker.beforeDeref(npe_invocation_var584, ExecutableFactory.class, 189, 9670, 9689)) {
                        final CodeFactory npe_invocation_var585 = factory.Code();
                        if (CallChecker.beforeDeref(npe_invocation_var585, CodeFactory.class, 189, 9625, 9638)) {
                            return npe_invocation_var585.createInvocation(coreFactory, npe_invocation_var584.createReference((("CoreFactory CtElement#create" + (typeName.substring(2, typeName.length()))) + "()")));
                        }else
                            throw new AbnormalExecutionError();

                    }else
                        throw new AbnormalExecutionError();

                }else
                    throw new AbnormalExecutionError();

            }else
                throw new AbnormalExecutionError();

        }else
            throw new AbnormalExecutionError();

    }
}.scan(npe_invocation_var587.get(CtScanner.class))
java.lang.ClassCastException: spoon.support.reflect.code.CtVariableWriteImpl cannot be cast to spoon.reflect.code.CtStatement
	at spoon.support.reflect.code.CtForImpl.setForUpdate(CtForImpl.java:137)
	at spoon.support.visitor.replace.ReplacementVisitor$CtForForUpdateReplaceListener.set(ReplacementVisitor.java:1023)
	at spoon.support.visitor.replace.ReplacementVisitor.replaceInListIfExist(ReplacementVisitor.java:129)
	at spoon.support.visitor.replace.ReplacementVisitor.visitCtFor(ReplacementVisitor.java:1033)
	at spoon.support.reflect.code.CtForImpl.accept(CtForImpl.java:50)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.replace.ReplacementVisitor.replace(ReplacementVisitor.java:34)
	at spoon.support.reflect.declaration.CtElementImpl.replace(CtElementImpl.java:421)
	at fr.inria.spirals.npefix.transformer.processors.ProcessorUtility.removeUnaryOperator(ProcessorUtility.java:100)
	at fr.inria.spirals.npefix.transformer.processors.BeforeDerefAdder.process(BeforeDerefAdder.java:186)
	at fr.inria.spirals.npefix.transformer.processors.BeforeDerefAdder.process(BeforeDerefAdder.java:60)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:81)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:141)
	at spoon.reflect.visitor.CtScanner.visitCtBlock(CtScanner.java:291)
	at spoon.support.reflect.code.CtBlockImpl.accept(CtBlockImpl.java:48)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.visitCtMethod(CtScanner.java:549)
	at spoon.support.reflect.declaration.CtMethodImpl.accept(CtMethodImpl.java:70)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:141)
	at spoon.reflect.visitor.CtScanner.visitCtClass(CtScanner.java:327)
	at spoon.support.reflect.declaration.CtClassImpl.accept(CtClassImpl.java:68)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.support.QueueProcessingManager.process(QueueProcessingManager.java:119)
	at fr.inria.spirals.npefix.main.all.Launcher.instrument(Launcher.java:105)
	at fr.inria.spirals.npefix.main.run.Main.run(Main.java:61)
	at fr.inria.spirals.npefix.main.run.Main.main(Main.java:48)
new CtScanner() {
    private final List<String> excludesAST = Arrays.asList("spoon.support.reflect.declaration.CtTypeInformationImpl", "spoon.support.reflect.code.CtAbstractInvocationImpl", "spoon.support.reflect.declaration.CtTypedElementImpl", "spoon.support.reflect.declaration.CtVariableImpl", "spoon.support.reflect.reference.CtActualTypeContainerImpl", "spoon.support.reflect.code.CtCFlowBreakImpl", "spoon.support.reflect.declaration.CtCodeSnippetImpl", "spoon.support.reflect.declaration.CtFormalTypeDeclarerImpl", "spoon.support.reflect.declaration.CtGenericElementImpl", "spoon.support.reflect.reference.CtGenericElementReferenceImpl", "spoon.support.reflect.declaration.CtModifiableImpl", "spoon.support.reflect.declaration.CtMultiTypedElementImpl", "spoon.support.reflect.declaration.CtTypeMemberImpl");

    private final List<String> excludesFields = Arrays.asList("factory", "elementValues", "target", "metadata");

    private final CtTypeReference<List> LIST_REFERENCE = factory.Type().createReference(List.class);

    private final CtTypeReference<Collection> COLLECTION_REFERENCE = factory.Type().createReference(Collection.class);

    private final CtTypeReference<Set> SET_REFERENCE = factory.Type().createReference(Set.class);

    private final CtTypeReference<CtElement> CTELEMENT_REFERENCE = factory.Type().createReference(CtElement.class);

    private final CtClass<?> GETTER_TEMPLATE_MATCHER_CLASS = factory.Class().get(((CloneVisitorGenerator.GENERATING_CLONE_PACKAGE) + ".GetterTemplateMatcher"));

    private final CtClass<?> SETTER_TEMPLATE_MATCHER_CLASS = factory.Class().get(((CloneVisitorGenerator.GENERATING_CLONE_PACKAGE) + ".SetterTemplateMatcher"));

    @Override
    public <T> void visitCtMethod(CtMethod<T> element) {
        if (CallChecker.beforeDeref(element, CtMethod.class, 212, 11613, 11619)) {
            final String npe_invocation_var588 = element.getSimpleName();
            if (CallChecker.beforeDeref(npe_invocation_var588, String.class, 212, 11613, 11635)) {
                if (CallChecker.beforeDeref(element, CtMethod.class, 212, 11663, 11669)) {
                    final String npe_invocation_var589 = element.getSimpleName();
                    if (CallChecker.beforeDeref(npe_invocation_var589, String.class, 212, 11663, 11685)) {
                        if ((!(npe_invocation_var588.startsWith("visitCt"))) && (!(npe_invocation_var589.startsWith("scanCt")))) {
                            return ;
                        }
                    }
                }
            }
        }
        if (CallChecker.beforeDeref(element, CtMethod.class, 215, 11763, 11769)) {
            if (CallChecker.beforeDeref("scanCtVisitable", String.class, 215, 11738, 11754)) {
                if ("scanCtVisitable".equals(element.getSimpleName())) {
                    return ;
                }
            }
        }
        final String qualifiedNameOfImplClass = ("spoon.support" + (element.getParameters().get(0).getType().getQualifiedName().substring(5))) + "Impl";
        if (CallChecker.beforeDeref(excludesAST, List.class, 219, 11963, 11973)) {
            if (excludesAST.contains(qualifiedNameOfImplClass)) {
                return ;
            }
        }
        final CtType<?> declaration = factory.Class().get(qualifiedNameOfImplClass);
        if (declaration == null) {
            if (CallChecker.beforeDeref(element, CtMethod.class, 224, 12255, 12261)) {
                throw new SpoonException(((qualifiedNameOfImplClass + " doesn't have declaration in the source path for ") + (element.getSignature())));
            }else
                throw new AbnormalExecutionError();

        }
        CtMethod<T> clone = CallChecker.init(CtMethod.class);
        if (CallChecker.beforeDeref(element, CtMethod.class, 227, 12311, 12317)) {
            clone = element.clone();
        }
        if (CallChecker.beforeDeref(clone, CtMethod.class, 228, 12332, 12336)) {
            final CtBlock<T> npe_invocation_var590 = clone.getBody();
            if (CallChecker.beforeDeref(npe_invocation_var590, CtBlock.class, 228, 12332, 12346)) {
                final List<CtStatement> npe_invocation_var591 = npe_invocation_var590.getStatements();
                if (CallChecker.beforeDeref(npe_invocation_var591, List.class, 228, 12332, 12362)) {
                    npe_invocation_var591.clear();
                }
            }
        }
        for (CtField<?> ctField : declaration.getFields()) {
            if (CallChecker.beforeDeref(ctField, CtField.class, 230, 12463, 12469)) {
                if (CallChecker.beforeDeref(excludesFields, List.class, 230, 12439, 12452)) {
                    if (excludesFields.contains(ctField.getSimpleName())) {
                        continue;
                    }
                }
            }
            if (isConstantOrStatic(ctField)) {
                continue;
            }
            if (CallChecker.beforeDeref(ctField, CtField.class, 236, 12607, 12613)) {
                if (isSubTypeOfCtElement(ctField.getType())) {
                    continue;
                }
            }
            final CtMethod<?> setterOfField = getSetterOf(ctField);
            final CtInvocation<?> setterInvocation = createSetterInvocation(element.getParameters().get(0).getType(), setterOfField, createGetterInvocation(element.getParameters().get(0), getGetterOf(ctField)));
            final List<CtMethod<?>> methodsToAvoid = getCtMethodThrowUnsupportedOperation(setterOfField);
            if (CallChecker.beforeDeref(methodsToAvoid, List.class, 244, 13046, 13059)) {
                if ((methodsToAvoid.size()) > 0) {
                    if (CallChecker.beforeDeref(clone, CtMethod.class, 245, 13081, 13085)) {
                        final CtBlock<T> npe_invocation_var592 = clone.getBody();
                        if (CallChecker.beforeDeref(npe_invocation_var592, CtBlock.class, 245, 13081, 13095)) {
                            npe_invocation_var592.addStatement(createProtectionToException(setterInvocation, methodsToAvoid));
                        }
                    }
                }else {
                    if (CallChecker.beforeDeref(clone, CtMethod.class, 247, 13194, 13198)) {
                        final CtBlock<T> npe_invocation_var593 = clone.getBody();
                        if (CallChecker.beforeDeref(npe_invocation_var593, CtBlock.class, 247, 13194, 13208)) {
                            npe_invocation_var593.addStatement(setterInvocation);
                        }
                    }
                }
            }
        }
        if (CallChecker.beforeDeref(clone, CtMethod.class, 250, 13263, 13267)) {
            final CtBlock<T> npe_invocation_var594 = clone.getBody();
            if (CallChecker.beforeDeref(npe_invocation_var594, CtBlock.class, 250, 13263, 13277)) {
                final List<CtStatement> npe_invocation_var595 = npe_invocation_var594.getStatements();
                if (CallChecker.beforeDeref(npe_invocation_var595, List.class, 250, 13263, 13293)) {
                    if ((npe_invocation_var595.size()) > 0) {
                        if (CallChecker.beforeDeref(clone, CtMethod.class, 251, 13314, 13318)) {
                            final CtBlock<T> npe_invocation_var596 = clone.getBody();
                            if (CallChecker.beforeDeref(npe_invocation_var596, CtBlock.class, 251, 13314, 13328)) {
                                npe_invocation_var596.insertEnd(createSuperInvocation(element));
                            }
                        }
                        final CtComment comment = factory.Core().createComment();
                        if (CallChecker.beforeDeref(comment, CtComment.class, 255, 13478, 13484)) {
                            comment.setCommentType(INLINE);
                        }
                        if (CallChecker.beforeDeref(comment, CtComment.class, 256, 13537, 13543)) {
                            comment.setContent(("auto-generated, see " + (CloneVisitorGenerator.class.getName())));
                        }
                        if (CallChecker.beforeDeref(clone, CtMethod.class, 257, 13626, 13630)) {
                            clone.addComment(comment);
                        }
                        if (CallChecker.beforeDeref(targetBuilder, CtClass.class, 259, 13659, 13671)) {
                            targetBuilder.addMethod(clone);
                        }
                    }
                }
            }
        }
    }

    private CtIf createProtectionToException(CtInvocation<?> setterInvocation, List<CtMethod<?>> methodsAvoid) {
        final CtIf anIf = factory.Core().createIf();
        if (CallChecker.beforeDeref(factory, Factory.class, 268, 13990, 13996)) {
            final CoreFactory npe_invocation_var597 = factory.Core();
            if (CallChecker.beforeDeref(npe_invocation_var597, CoreFactory.class, 268, 13990, 14003)) {
                final CtUnaryOperator<Object> npe_invocation_var598 = npe_invocation_var597.createUnaryOperator();
                if (CallChecker.beforeDeref(npe_invocation_var598, CtUnaryOperator.class, 268, 13990, 14025)) {
                    final CtUnaryOperator npe_invocation_var599 = npe_invocation_var598.setOperand(createBinaryConditions(methodsAvoid));
                    if (CallChecker.beforeDeref(npe_invocation_var599, CtUnaryOperator.class, 268, 13990, 14074)) {
                        if (CallChecker.beforeDeref(anIf, CtIf.class, 268, 13972, 13975)) {
                            anIf.setCondition(npe_invocation_var599.setKind(UnaryOperatorKind.NOT));
                        }
                    }
                }
            }
        }
        if (CallChecker.beforeDeref(factory, Factory.class, 269, 14135, 14141)) {
            final CodeFactory npe_invocation_var600 = factory.Code();
            if (CallChecker.beforeDeref(npe_invocation_var600, CodeFactory.class, 269, 14135, 14148)) {
                if (CallChecker.beforeDeref(anIf, CtIf.class, 269, 14113, 14116)) {
                    anIf.setThenStatement(npe_invocation_var600.createCtBlock(setterInvocation));
                }
            }
        }
        return anIf;
    }

    private CtExpression<Object> createBinaryConditions(List<CtMethod<?>> methodsAvoid) {
        CtExpression<Object> left = null;
        CtExpression<Object> right = CallChecker.init(CtExpression.class);
        for (int i = 0; i < (methodsAvoid.size()); i++) {
            final CtInterface<?> ctInterface = getInterfaceOf(methodsAvoid.get(i).getDeclaringType());
            if (i == 0) {
                if (CallChecker.beforeDeref(factory, Factory.class, 284, 14668, 14674)) {
                    if (CallChecker.beforeDeref(factory, Factory.class, 285, 14726, 14732)) {
                        if (CallChecker.beforeDeref(ctInterface, CtInterface.class, 285, 14758, 14768)) {
                            final CodeFactory npe_invocation_var601 = factory.Code();
                            if (CallChecker.beforeDeref(npe_invocation_var601, CodeFactory.class, 285, 14726, 14739)) {
                                final CodeFactory npe_invocation_var602 = factory.Code();
                                if (CallChecker.beforeDeref(npe_invocation_var602, CodeFactory.class, 284, 14668, 14681)) {
                                    left = npe_invocation_var602.createBinaryOperator(otherRead, npe_invocation_var601.createTypeAccess(ctInterface.getReference()), BinaryOperatorKind.INSTANCEOF);
                                }
                            }
                        }
                    }
                }
            }else {
                if (CallChecker.beforeDeref(factory, Factory.class, 288, 14858, 14864)) {
                    if (CallChecker.beforeDeref(factory, Factory.class, 289, 14916, 14922)) {
                        if (CallChecker.beforeDeref(ctInterface, CtInterface.class, 289, 14948, 14958)) {
                            final CodeFactory npe_invocation_var603 = factory.Code();
                            if (CallChecker.beforeDeref(npe_invocation_var603, CodeFactory.class, 289, 14916, 14929)) {
                                final CodeFactory npe_invocation_var604 = factory.Code();
                                if (CallChecker.beforeDeref(npe_invocation_var604, CodeFactory.class, 288, 14858, 14871)) {
                                    right = npe_invocation_var604.createBinaryOperator(otherRead, npe_invocation_var603.createTypeAccess(ctInterface.getReference()), BinaryOperatorKind.INSTANCEOF);
                                }
                            }
                        }
                    }
                }
                if (CallChecker.beforeDeref(factory, Factory.class, 292, 15034, 15040)) {
                    final CodeFactory npe_invocation_var605 = factory.Code();
                    if (CallChecker.beforeDeref(npe_invocation_var605, CodeFactory.class, 292, 15034, 15047)) {
                        left = npe_invocation_var605.createBinaryOperator(left, right, BinaryOperatorKind.OR);
                    }
                }
            }
        }
        return left;
    }

    private List<CtMethod<?>> getCtMethodThrowUnsupportedOperation(CtMethod<?> method) {
        final List<CtMethod<?>> avoid = new ArrayList<>();
        final CtInterface<?> ctInterface = getInterfaceOf(method.getDeclaringType());
        if (ctInterface == null) {
            return avoid;
        }
        final CtMethod<?> declarationMethod = getMethodByCtMethod(ctInterface, method);
        for (CtMethod<?> ctMethod : Query.getElements(factory, new OverridingMethodFilter(declarationMethod))) {
            if (!(avoidThrowUnsupportedOperationException(ctMethod))) {
                if (CallChecker.beforeDeref(avoid, List.class, 310, 15837, 15841)) {
                    avoid.add(ctMethod);
                }
            }
        }
        return avoid;
    }

    private boolean avoidThrowUnsupportedOperationException(CtMethod<?> candidate) {
        if (CallChecker.beforeDeref(candidate, CtMethod.class, 320, 16077, 16085)) {
            final CtBlock<?> npe_invocation_var606 = candidate.getBody();
            if (CallChecker.beforeDeref(npe_invocation_var606, CtBlock.class, 320, 16077, 16095)) {
                final List<CtStatement> npe_invocation_var607 = npe_invocation_var606.getStatements();
                if (CallChecker.beforeDeref(npe_invocation_var607, List.class, 320, 16077, 16111)) {
                    if ((npe_invocation_var607.size()) != 1) {
                        return true;
                    }
                }else
                    throw new AbnormalExecutionError();

            }else
                throw new AbnormalExecutionError();

        }else
            throw new AbnormalExecutionError();

        if (CallChecker.beforeDeref(candidate, CtMethod.class, 323, 16162, 16170)) {
            final CtBlock<?> npe_invocation_var608 = candidate.getBody();
            if (CallChecker.beforeDeref(npe_invocation_var608, CtBlock.class, 323, 16162, 16180)) {
                if (!((npe_invocation_var608.getStatement(0)) instanceof CtThrow)) {
                    return true;
                }
            }else
                throw new AbnormalExecutionError();

        }else
            throw new AbnormalExecutionError();

        CtThrow ctThrow = CallChecker.init(CtThrow.class);
        if (CallChecker.beforeDeref(candidate, CtMethod.class, 326, 16267, 16275)) {
            final CtBlock<?> npe_invocation_var609 = candidate.getBody();
            if (CallChecker.beforeDeref(npe_invocation_var609, CtBlock.class, 326, 16267, 16285)) {
                ctThrow = npe_invocation_var609.getStatement(0);
            }
        }
        if (CallChecker.beforeDeref(ctThrow, CtThrow.class, 327, 16314, 16320)) {
            if (!((ctThrow.getThrownExpression()) instanceof CtConstructorCall)) {
                return true;
            }
        }else
            throw new AbnormalExecutionError();

        final CtConstructorCall<? extends Throwable> thrownExpression = ((CtConstructorCall<? extends Throwable>) (ctThrow.getThrownExpression()));
        if (CallChecker.beforeDeref(thrownExpression, CtConstructorCall.class, 331, 16550, 16565)) {
            if (CallChecker.beforeDeref(factory, Factory.class, 331, 16584, 16590)) {
                final TypeFactory npe_invocation_var610 = factory.Type();
                if (CallChecker.beforeDeref(npe_invocation_var610, TypeFactory.class, 331, 16584, 16597)) {
                    final CtTypeReference<? extends Throwable> npe_invocation_var611 = thrownExpression.getType();
                    if (CallChecker.beforeDeref(npe_invocation_var611, CtTypeReference.class, 331, 16550, 16575)) {
                        if (!(npe_invocation_var611.equals(npe_invocation_var610.createReference(UnsupportedOperationException.class)))) {
                            return true;
                        }
                    }else
                        throw new AbnormalExecutionError();

                }else
                    throw new AbnormalExecutionError();

            }else
                throw new AbnormalExecutionError();

        }else
            throw new AbnormalExecutionError();

        return false;
    }

    private CtMethod<?> getMethodByCtMethod(CtType<?> ctType, CtMethod<?> method) {
        for (CtMethod<?> ctMethod : ctType.getAllMethods()) {
            if (CallChecker.beforeDeref(method, CtMethod.class, 342, 16914, 16919)) {
                if (CallChecker.beforeDeref(ctMethod, CtMethod.class, 342, 16944, 16951)) {
                    final String npe_invocation_var612 = method.getSimpleName();
                    if (CallChecker.beforeDeref(npe_invocation_var612, String.class, 342, 16914, 16935)) {
                        if (!(npe_invocation_var612.equals(ctMethod.getSimpleName()))) {
                            continue;
                        }
                    }
                }
            }
            boolean cont = CallChecker.init(boolean.class);
            if (CallChecker.beforeDeref(method, CtMethod.class, 345, 17016, 17021)) {
                final List<?> npe_invocation_var613 = method.getParameters();
                if (CallChecker.beforeDeref(npe_invocation_var613, List.class, 345, 17016, 17037)) {
                    if (CallChecker.beforeDeref(ctMethod, CtMethod.class, 345, 17049, 17056)) {
                        final List<?> npe_invocation_var614 = ctMethod.getParameters();
                        if (CallChecker.beforeDeref(npe_invocation_var614, List.class, 345, 17049, 17072)) {
                            cont = (npe_invocation_var613.size()) == (npe_invocation_var614.size());
                        }
                    }
                }
            }
            for (int i = 0; cont && (i < (method.getParameters().size())); i++) {
                if (CallChecker.beforeDeref(method, CtMethod.class, 347, 17164, 17169)) {
                    final List<?> npe_invocation_var615 = method.getParameters();
                    if (CallChecker.beforeDeref(npe_invocation_var615, List.class, 347, 17164, 17185)) {
                        if (CallChecker.beforeDeref(npe_invocation_var615.get(i), CtParameter.class, 347, 17164, 17192)) {
                            if (CallChecker.beforeDeref(ctMethod, CtMethod.class, 347, 17211, 17218)) {
                                final List<?> npe_invocation_var616 = ctMethod.getParameters();
                                if (CallChecker.beforeDeref(npe_invocation_var616, List.class, 347, 17211, 17234)) {
                                    if (CallChecker.beforeDeref(npe_invocation_var616.get(i), CtParameter.class, 347, 17211, 17241)) {
                                        final CtTypeReference<?> npe_invocation_var617 = npe_invocation_var615.get(i).getType();
                                        if (CallChecker.beforeDeref(npe_invocation_var617, CtTypeReference.class, 347, 17164, 17202)) {
                                            if (!(npe_invocation_var617.equals(npe_invocation_var616.get(i).getType()))) {
                                                cont = false;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (cont) {
                return ctMethod;
            }
        }
        if (CallChecker.beforeDeref(method, CtMethod.class, 355, 17398, 17403)) {
            if (CallChecker.beforeDeref(ctType, CtType.class, 355, 17451, 17456)) {
                throw new AssertionError(((("Can't find method " + (method.getSignature())) + " in the given interface ") + (ctType.getQualifiedName())));
            }else
                throw new AbnormalExecutionError();

        }else
            throw new AbnormalExecutionError();

    }

    private CtInterface<?> getInterfaceOf(CtType<?> declaringType) {
        final CtTypeReference<?>[] interfaces = declaringType.getSuperInterfaces().toArray(new CtTypeReference[declaringType.getSuperInterfaces().size()]);
        for (CtTypeReference<?> anInterface : interfaces) {
            if (CallChecker.beforeDeref(anInterface, CtTypeReference.class, 364, 17831, 17841)) {
                if (CallChecker.beforeDeref(declaringType, CtType.class, 364, 17866, 17878)) {
                    if (CallChecker.beforeDeref(declaringType, CtType.class, 364, 17909, 17921)) {
                        final String npe_invocation_var618 = declaringType.getSimpleName();
                        if (CallChecker.beforeDeref(npe_invocation_var618, String.class, 364, 17909, 17937)) {
                            final String npe_invocation_var619 = declaringType.getSimpleName();
                            if (CallChecker.beforeDeref(npe_invocation_var619, String.class, 364, 17866, 17894)) {
                                final String npe_invocation_var620 = anInterface.getSimpleName();
                                if (CallChecker.beforeDeref(npe_invocation_var620, String.class, 364, 17831, 17857)) {
                                    if (npe_invocation_var620.equals(npe_invocation_var619.substring(0, ((npe_invocation_var618.length()) - 4)))) {
                                        if (CallChecker.beforeDeref(anInterface, CtTypeReference.class, 365, 17987, 17997)) {
                                            return ((CtInterface<?>) (anInterface.getDeclaration()));
                                        }else
                                            throw new AbnormalExecutionError();

                                    }
                                }else
                                    throw new AbnormalExecutionError();

                            }else
                                throw new AbnormalExecutionError();

                        }else
                            throw new AbnormalExecutionError();

                    }else
                        throw new AbnormalExecutionError();

                }else
                    throw new AbnormalExecutionError();

            }else
                throw new AbnormalExecutionError();

        }
        if (CallChecker.beforeDeref(declaringType, CtType.class, 368, 18117, 18129)) {
            throw new AssertionError(("You should have the interface for the implementation " + (declaringType.getQualifiedName())));
        }else
            throw new AbnormalExecutionError();

    }

    private <T> CtInvocation<T> createSuperInvocation(CtMethod<T> element) {
        if (CallChecker.beforeDeref(factory, Factory.class, 377, 18367, 18373)) {
            if (CallChecker.beforeDeref(factory, Factory.class, 378, 18406, 18412)) {
                final CoreFactory npe_invocation_var621 = factory.Core();
                if (CallChecker.beforeDeref(npe_invocation_var621, CoreFactory.class, 378, 18406, 18419)) {
                    if (CallChecker.beforeDeref(element, CtMethod.class, 378, 18442, 18448)) {
                        if (CallChecker.beforeDeref(factory, Factory.class, 378, 18466, 18472)) {
                            if (CallChecker.beforeDeref(element, CtMethod.class, 378, 18500, 18506)) {
                                final List<?> npe_invocation_var622 = element.getParameters();
                                if (CallChecker.beforeDeref(npe_invocation_var622, List.class, 378, 18500, 18522)) {
                                    if (CallChecker.beforeDeref(npe_invocation_var622.get(0), CtParameter.class, 378, 18500, 18529)) {
                                        final CodeFactory npe_invocation_var623 = factory.Code();
                                        if (CallChecker.beforeDeref(npe_invocation_var623, CodeFactory.class, 378, 18466, 18479)) {
                                            final CodeFactory npe_invocation_var624 = factory.Code();
                                            if (CallChecker.beforeDeref(npe_invocation_var624, CodeFactory.class, 377, 18367, 18380)) {
                                                return npe_invocation_var624.createInvocation(npe_invocation_var621.createSuperAccess(), element.getReference(), npe_invocation_var623.createVariableRead(npe_invocation_var622.get(0).getReference(), false));
                                            }else
                                                throw new AbnormalExecutionError();

                                        }else
                                            throw new AbnormalExecutionError();

                                    }else
                                        throw new AbnormalExecutionError();

                                }else
                                    throw new AbnormalExecutionError();

                            }else
                                throw new AbnormalExecutionError();

                        }else
                            throw new AbnormalExecutionError();

                    }else
                        throw new AbnormalExecutionError();

                }else
                    throw new AbnormalExecutionError();

            }else
                throw new AbnormalExecutionError();

        }else
            throw new AbnormalExecutionError();

    }

    private CtInvocation<?> createSetterInvocation(CtTypeReference<?> type, CtMethod<?> setter, CtInvocation<?> getter) {
        if (CallChecker.beforeDeref(factory, Factory.class, 391, 19016, 19022)) {
            if (CallChecker.beforeDeref(otherRead, CtVariableAccess.class, 391, 19048, 19056)) {
                final CtVariableAccess<Object> npe_invocation_var625 = otherRead.clone();
                if (CallChecker.beforeDeref(npe_invocation_var625, CtVariableAccess.class, 391, 19048, 19064)) {
                    if (CallChecker.beforeDeref(setter, CtMethod.class, 391, 19085, 19090)) {
                        final CodeFactory npe_invocation_var626 = factory.Code();
                        if (CallChecker.beforeDeref(npe_invocation_var626, CodeFactory.class, 391, 19016, 19029)) {
                            return npe_invocation_var626.createInvocation(npe_invocation_var625.addTypeCast(type), setter.getReference(), getter);
                        }else
                            throw new AbnormalExecutionError();

                    }else
                        throw new AbnormalExecutionError();

                }else
                    throw new AbnormalExecutionError();

            }else
                throw new AbnormalExecutionError();

        }else
            throw new AbnormalExecutionError();

    }

    private CtInvocation<?> createGetterInvocation(CtParameter<?> element, CtMethod<?> getter) {
        if (CallChecker.beforeDeref(factory, Factory.class, 401, 19375, 19381)) {
            if (CallChecker.beforeDeref(factory, Factory.class, 401, 19407, 19413)) {
                if (CallChecker.beforeDeref(element, CtParameter.class, 401, 19441, 19447)) {
                    final CodeFactory npe_invocation_var627 = factory.Code();
                    if (CallChecker.beforeDeref(npe_invocation_var627, CodeFactory.class, 401, 19407, 19420)) {
                        if (CallChecker.beforeDeref(getter, CtMethod.class, 401, 19473, 19478)) {
                            final CodeFactory npe_invocation_var628 = factory.Code();
                            if (CallChecker.beforeDeref(npe_invocation_var628, CodeFactory.class, 401, 19375, 19388)) {
                                return npe_invocation_var628.createInvocation(npe_invocation_var627.createVariableRead(element.getReference(), false), getter.getReference());
                            }else
                                throw new AbnormalExecutionError();

                        }else
                            throw new AbnormalExecutionError();

                    }else
                        throw new AbnormalExecutionError();

                }else
                    throw new AbnormalExecutionError();

            }else
                throw new AbnormalExecutionError();

        }else
            throw new AbnormalExecutionError();

    }

    private <T> CtMethod<?> getSetterOf(final CtField<T> ctField) {
        for (CtMethod<?> ctMethod : ctField.getDeclaringType().getMethods()) {
            if (CallChecker.beforeDeref(ctMethod, CtMethod.class, 410, 19748, 19755)) {
                final String npe_invocation_var629 = ctMethod.getSimpleName();
                if (CallChecker.beforeDeref(npe_invocation_var629, String.class, 410, 19748, 19771)) {
                    if (CallChecker.beforeDeref(ctMethod, CtMethod.class, 410, 19794, 19801)) {
                        final String npe_invocation_var630 = ctMethod.getSimpleName();
                        if (CallChecker.beforeDeref(npe_invocation_var630, String.class, 410, 19794, 19817)) {
                            if (CallChecker.beforeDeref(ctField, CtField.class, 410, 19842, 19848)) {
                                final String npe_invocation_var631 = ctField.getSimpleName();
                                if (CallChecker.beforeDeref(npe_invocation_var631, String.class, 410, 19842, 19864)) {
                                    if (CallChecker.beforeDeref(npe_invocation_var630.toLowerCase(), String.class, 410, 19794, 19831)) {
                                        if ((npe_invocation_var629.startsWith("set")) && (npe_invocation_var630.toLowerCase().contains(npe_invocation_var631.toLowerCase()))) {
                                            if (CallChecker.beforeDeref(ctMethod, CtMethod.class, 411, 19894, 19901)) {
                                                final List<?> npe_invocation_var632 = ctMethod.getParameters();
                                                if (CallChecker.beforeDeref(npe_invocation_var632, List.class, 411, 19894, 19917)) {
                                                    if ((npe_invocation_var632.size()) != 1) {
                                                        continue;
                                                    }
                                                }
                                            }
                                            if (CallChecker.beforeDeref(ctMethod, CtMethod.class, 414, 19970, 19977)) {
                                                final List<?> npe_invocation_var633 = ctMethod.getParameters();
                                                if (CallChecker.beforeDeref(npe_invocation_var633, List.class, 414, 19970, 19993)) {
                                                    if (CallChecker.beforeDeref(npe_invocation_var633.get(0), CtParameter.class, 414, 19970, 20000)) {
                                                        if (CallChecker.beforeDeref(ctField, CtField.class, 414, 20019, 20025)) {
                                                            final CtTypeReference<?> npe_invocation_var634 = npe_invocation_var633.get(0).getType();
                                                            if (CallChecker.beforeDeref(npe_invocation_var634, CtTypeReference.class, 414, 19970, 20010)) {
                                                                if (!(npe_invocation_var634.equals(ctField.getType()))) {
                                                                    continue;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            return ctMethod;
                                        }
                                    }else
                                        throw new AbnormalExecutionError();

                                }else
                                    throw new AbnormalExecutionError();

                            }else
                                throw new AbnormalExecutionError();

                        }else
                            throw new AbnormalExecutionError();

                    }else
                        throw new AbnormalExecutionError();

                }else
                    throw new AbnormalExecutionError();

            }else
                throw new AbnormalExecutionError();

        }
        if (CallChecker.beforeDeref(factory, Factory.class, 420, 20160, 20166)) {
            final TypeFactory npe_invocation_var635 = factory.Type();
            if (CallChecker.beforeDeref(npe_invocation_var635, TypeFactory.class, 420, 20160, 20173)) {
                if (CallChecker.beforeDeref(SETTER_TEMPLATE_MATCHER_CLASS, CtClass.class, 420, 20106, 20134)) {
                    final CtMethod<Object> npe_invocation_var636 = SETTER_TEMPLATE_MATCHER_CLASS.getMethod("setElement", npe_invocation_var635.BOOLEAN_PRIMITIVE);
                    if (CallChecker.beforeDeref(npe_invocation_var636, CtMethod.class, 420, 20106, 20192)) {
                        npe_invocation_var636.getBody();
                    }
                }
            }
        }
        final List<CtMethod> matchers = ctField.getDeclaringType().getElements(new TypeFilter<CtMethod>(CtMethod.class) {
            @Override
            public boolean matches(CtMethod element) {
                final CtBlock body = element.getBody();
                if (CallChecker.beforeDeref(body, CtBlock.class, 425, 20442, 20445)) {
                    final List<CtStatement> npe_invocation_var637 = body.getStatements();
                    if (CallChecker.beforeDeref(npe_invocation_var637, List.class, 425, 20442, 20461)) {
                        if ((npe_invocation_var637.size()) != 2) {
                            return false;
                        }
                    }else
                        throw new AbnormalExecutionError();

                }else
                    throw new AbnormalExecutionError();

                if (CallChecker.beforeDeref(body, CtBlock.class, 428, 20517, 20520)) {
                    if ((body.getStatement(0)) instanceof CtAssignment) {
                        final CtExpression assigned = ((CtAssignment) (body.getStatement(0))).getAssigned();
                        if (!(assigned instanceof CtFieldAccess)) {
                            return false;
                        }
                        if (CallChecker.beforeDeref(assigned, CtExpression.class, 433, 20766, 20773)) {
                            final CtFieldReference npe_invocation_var638 = ((CtFieldAccess) (assigned)).getVariable();
                            if (CallChecker.beforeDeref(npe_invocation_var638, CtFieldReference.class, 433, 20749, 20788)) {
                                if (CallChecker.beforeDeref(ctField, CtField.class, 433, 20813, 20819)) {
                                    final String npe_invocation_var639 = npe_invocation_var638.getSimpleName();
                                    if (CallChecker.beforeDeref(npe_invocation_var639, String.class, 433, 20749, 20804)) {
                                        if (!(npe_invocation_var639.equals(ctField.getSimpleName()))) {
                                            return false;
                                        }
                                    }else
                                        throw new AbnormalExecutionError();

                                }else
                                    throw new AbnormalExecutionError();

                            }else
                                throw new AbnormalExecutionError();

                        }else
                            throw new AbnormalExecutionError();

                    }else {
                        return false;
                    }
                }else
                    throw new AbnormalExecutionError();

                return true;
            }
        });
        if (CallChecker.beforeDeref(matchers, List.class, 442, 20958, 20965)) {
            if ((matchers.size()) != 1) {
                throw new SpoonException("Get more than one setter. Please make an more ingenious method to get setter method.");
            }
        }else
            throw new AbnormalExecutionError();

        if (CallChecker.beforeDeref(matchers, List.class, 445, 21118, 21125)) {
            return matchers.get(0);
        }else
            throw new AbnormalExecutionError();

    }

    private <T> CtMethod<?> getGetterOf(CtField<T> ctField) {
        for (CtMethod<?> ctMethod : ctField.getDeclaringType().getMethods()) {
            if (CallChecker.beforeDeref(ctMethod, CtMethod.class, 454, 21385, 21392)) {
                final String npe_invocation_var640 = ctMethod.getSimpleName();
                if (CallChecker.beforeDeref(npe_invocation_var640, String.class, 454, 21385, 21408)) {
                    if (CallChecker.beforeDeref(ctMethod, CtMethod.class, 454, 21431, 21438)) {
                        final String npe_invocation_var641 = ctMethod.getSimpleName();
                        if (CallChecker.beforeDeref(npe_invocation_var641, String.class, 454, 21431, 21454)) {
                            if (CallChecker.beforeDeref(ctMethod, CtMethod.class, 455, 21487, 21494)) {
                                final String npe_invocation_var642 = ctMethod.getSimpleName();
                                if (CallChecker.beforeDeref(npe_invocation_var642, String.class, 455, 21487, 21510)) {
                                    if (CallChecker.beforeDeref(ctField, CtField.class, 455, 21535, 21541)) {
                                        final String npe_invocation_var643 = ctField.getSimpleName();
                                        if (CallChecker.beforeDeref(npe_invocation_var643, String.class, 455, 21535, 21557)) {
                                            if (CallChecker.beforeDeref(npe_invocation_var642.toLowerCase(), String.class, 455, 21487, 21524)) {
                                                if (((npe_invocation_var640.startsWith("get")) || (npe_invocation_var641.startsWith("is"))) && (npe_invocation_var642.toLowerCase().contains(npe_invocation_var643.toLowerCase()))) {
                                                    if (CallChecker.beforeDeref(ctMethod, CtMethod.class, 456, 21588, 21595)) {
                                                        if (CallChecker.beforeDeref(ctField, CtField.class, 456, 21614, 21620)) {
                                                            final CtTypeReference<?> npe_invocation_var644 = ctMethod.getType();
                                                            if (CallChecker.beforeDeref(npe_invocation_var644, CtTypeReference.class, 456, 21588, 21605)) {
                                                                if (!(npe_invocation_var644.equals(ctField.getType()))) {
                                                                    continue;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    if (CallChecker.beforeDeref(ctMethod, CtMethod.class, 459, 21671, 21678)) {
                                                        final List<?> npe_invocation_var645 = ctMethod.getParameters();
                                                        if (CallChecker.beforeDeref(npe_invocation_var645, List.class, 459, 21671, 21694)) {
                                                            if ((npe_invocation_var645.size()) != 0) {
                                                                continue;
                                                            }
                                                        }
                                                    }
                                                    return ctMethod;
                                                }
                                            }else
                                                throw new AbnormalExecutionError();

                                        }else
                                            throw new AbnormalExecutionError();

                                    }else
                                        throw new AbnormalExecutionError();

                                }else
                                    throw new AbnormalExecutionError();

                            }else
                                throw new AbnormalExecutionError();

                        }else
                            throw new AbnormalExecutionError();

                    }else
                        throw new AbnormalExecutionError();

                }else
                    throw new AbnormalExecutionError();

            }else
                throw new AbnormalExecutionError();

        }
        final CtBlock<?> templateRoot = GETTER_TEMPLATE_MATCHER_CLASS.getMethod("getElement").getBody();
        if (CallChecker.beforeDeref(templateRoot, CtBlock.class, 467, 21918, 21929)) {
            if (CallChecker.beforeDeref(factory, Factory.class, 467, 21970, 21976)) {
                if (CallChecker.beforeDeref(ctField, CtField.class, 467, 22004, 22010)) {
                    final CodeFactory npe_invocation_var646 = factory.Code();
                    if (CallChecker.beforeDeref(npe_invocation_var646, CodeFactory.class, 467, 21970, 21983)) {
                        final CtReturn npe_invocation_var647 = ((CtReturn) (templateRoot.getStatement(0)));
                        if (CallChecker.beforeDeref(npe_invocation_var647, CtReturn.class, 467, 21918, 21945)) {
                            npe_invocation_var647.setReturnedExpression(npe_invocation_var646.createVariableRead(ctField.getReference(), true));
                        }
                    }
                }
            }
        }
        List<CtMethod> matchers = CallChecker.init(List.class);
        if (CallChecker.beforeDeref(ctField, CtField.class, 468, 22066, 22072)) {
            final CtType<?> npe_invocation_var649 = ctField.getDeclaringType();
            if (CallChecker.beforeDeref(npe_invocation_var649, CtType.class, 468, 22066, 22091)) {
                matchers = npe_invocation_var649.getElements(new TypeFilter<CtMethod>(CtMethod.class) {
                    @Override
                    public boolean matches(CtMethod element) {
                        if (CallChecker.beforeDeref(element, CtMethod.class, 471, 22224, 22230)) {
                            final CtBlock npe_invocation_var648 = element.getBody();
                            if (CallChecker.beforeDeref(npe_invocation_var648, CtBlock.class, 471, 22224, 22240)) {
                                if (CallChecker.beforeDeref(templateRoot, CtBlock.class, 471, 22260, 22271)) {
                                    if (CallChecker.beforeDeref(npe_invocation_var648.toString(), String.class, 471, 22224, 22251)) {
                                        return npe_invocation_var648.toString().equals(templateRoot.toString());
                                    }else
                                        throw new AbnormalExecutionError();

                                }else
                                    throw new AbnormalExecutionError();

                            }else
                                throw new AbnormalExecutionError();

                        }else
                            throw new AbnormalExecutionError();

                    }
                });
            }else
                throw new AbnormalExecutionError();

        }else
            throw new AbnormalExecutionError();

        if (CallChecker.beforeDeref(matchers, List.class, 474, 22309, 22316)) {
            if ((matchers.size()) != 1) {
                throw new SpoonException("Get more than one getter. Please make an more ingenious method to get getter method.");
            }
        }else
            throw new AbnormalExecutionError();

        if (CallChecker.beforeDeref(matchers, List.class, 477, 22469, 22476)) {
            return matchers.get(0);
        }else
            throw new AbnormalExecutionError();

    }

    private boolean isSubTypeOfCtElement(CtTypeReference<?> type) {
        if (CallChecker.beforeDeref(type, CtTypeReference.class, 484, 22633, 22636)) {
            if (CallChecker.beforeDeref(factory, Factory.class, 484, 22668, 22674)) {
                final TypeFactory npe_invocation_var650 = factory.Type();
                if (CallChecker.beforeDeref(npe_invocation_var650, TypeFactory.class, 484, 22668, 22681)) {
                    if (CallChecker.beforeDeref(type, CtTypeReference.class, 484, 22656, 22659)) {
                        if ((!(type.isPrimitive())) && (!(type.equals(npe_invocation_var650.STRING)))) {
                            if (CallChecker.beforeDeref(factory, Factory.class, 485, 22720, 22726)) {
                                final TypeFactory npe_invocation_var651 = factory.Type();
                                if (CallChecker.beforeDeref(npe_invocation_var651, TypeFactory.class, 485, 22720, 22733)) {
                                    if (CallChecker.beforeDeref(type, CtTypeReference.class, 485, 22703, 22706)) {
                                        if (type.isSubtypeOf(npe_invocation_var651.createReference(CtElement.class))) {
                                            return true;
                                        }
                                    }else
                                        throw new AbnormalExecutionError();

                                }else
                                    throw new AbnormalExecutionError();

                            }else
                                throw new AbnormalExecutionError();

                            if (CallChecker.beforeDeref(type, CtTypeReference.class, 488, 22807, 22810)) {
                                if (CallChecker.beforeDeref(LIST_REFERENCE, CtTypeReference.class, 488, 22838, 22851)) {
                                    final String npe_invocation_var652 = type.getQualifiedName();
                                    if (CallChecker.beforeDeref(npe_invocation_var652, String.class, 488, 22807, 22829)) {
                                        if (CallChecker.beforeDeref(type, CtTypeReference.class, 488, 22876, 22879)) {
                                            if (CallChecker.beforeDeref(COLLECTION_REFERENCE, CtTypeReference.class, 488, 22907, 22926)) {
                                                final String npe_invocation_var653 = type.getQualifiedName();
                                                if (CallChecker.beforeDeref(npe_invocation_var653, String.class, 488, 22876, 22898)) {
                                                    if (CallChecker.beforeDeref(type, CtTypeReference.class, 488, 22951, 22954)) {
                                                        if (CallChecker.beforeDeref(SET_REFERENCE, CtTypeReference.class, 488, 22982, 22994)) {
                                                            final String npe_invocation_var654 = type.getQualifiedName();
                                                            if (CallChecker.beforeDeref(npe_invocation_var654, String.class, 488, 22951, 22973)) {
                                                                if (((npe_invocation_var652.equals(LIST_REFERENCE.getQualifiedName())) || (npe_invocation_var653.equals(COLLECTION_REFERENCE.getQualifiedName()))) || (npe_invocation_var654.equals(SET_REFERENCE.getQualifiedName()))) {
                                                                    if (CallChecker.beforeDeref(type, CtTypeReference.class, 489, 23029, 23032)) {
                                                                        final List<?> npe_invocation_var655 = type.getActualTypeArguments();
                                                                        if (CallChecker.beforeDeref(npe_invocation_var655, List.class, 489, 23029, 23057)) {
                                                                            if (CallChecker.beforeDeref(npe_invocation_var655.get(0), CtTypeReference.class, 489, 23029, 23064)) {
                                                                                if (npe_invocation_var655.get(0).isSubtypeOf(CTELEMENT_REFERENCE)) {
                                                                                    return true;
                                                                                }
                                                                            }else
                                                                                throw new AbnormalExecutionError();

                                                                        }else
                                                                            throw new AbnormalExecutionError();

                                                                    }else
                                                                        throw new AbnormalExecutionError();

                                                                }
                                                            }else
                                                                throw new AbnormalExecutionError();

                                                        }else
                                                            throw new AbnormalExecutionError();

                                                    }else
                                                        throw new AbnormalExecutionError();

                                                }else
                                                    throw new AbnormalExecutionError();

                                            }else
                                                throw new AbnormalExecutionError();

                                        }else
                                            throw new AbnormalExecutionError();

                                    }else
                                        throw new AbnormalExecutionError();

                                }else
                                    throw new AbnormalExecutionError();

                            }else
                                throw new AbnormalExecutionError();

                        }
                    }else
                        throw new AbnormalExecutionError();

                }else
                    throw new AbnormalExecutionError();

            }else
                throw new AbnormalExecutionError();

        }else
            throw new AbnormalExecutionError();

        return false;
    }

    private boolean isConstantOrStatic(CtField<?> ctField) {
        if (CallChecker.beforeDeref(ctField, CtField.class, 498, 23238, 23244)) {
            if (CallChecker.beforeDeref(ctField, CtField.class, 498, 23293, 23299)) {
                return (ctField.getModifiers().contains(ModifierKind.FINAL)) || (ctField.getModifiers().contains(ModifierKind.STATIC));
            }else
                throw new AbnormalExecutionError();

        }else
            throw new AbnormalExecutionError();

    }
}.scan(npe_invocation_var657.get(CtInheritanceScanner.class))-->new CtScanner() {
    private final List<String> excludesAST = Arrays.asList("spoon.support.reflect.declaration.CtTypeInformationImpl", "spoon.support.reflect.code.CtAbstractInvocationImpl", "spoon.support.reflect.declaration.CtTypedElementImpl", "spoon.support.reflect.declaration.CtVariableImpl", "spoon.support.reflect.reference.CtActualTypeContainerImpl", "spoon.support.reflect.code.CtCFlowBreakImpl", "spoon.support.reflect.declaration.CtCodeSnippetImpl", "spoon.support.reflect.declaration.CtFormalTypeDeclarerImpl", "spoon.support.reflect.declaration.CtGenericElementImpl", "spoon.support.reflect.reference.CtGenericElementReferenceImpl", "spoon.support.reflect.declaration.CtModifiableImpl", "spoon.support.reflect.declaration.CtMultiTypedElementImpl", "spoon.support.reflect.declaration.CtTypeMemberImpl");

    private final List<String> excludesFields = Arrays.asList("factory", "elementValues", "target", "metadata");

    private final CtTypeReference<List> LIST_REFERENCE = factory.Type().createReference(List.class);

    private final CtTypeReference<Collection> COLLECTION_REFERENCE = factory.Type().createReference(Collection.class);

    private final CtTypeReference<Set> SET_REFERENCE = factory.Type().createReference(Set.class);

    private final CtTypeReference<CtElement> CTELEMENT_REFERENCE = factory.Type().createReference(CtElement.class);

    private final CtClass<?> GETTER_TEMPLATE_MATCHER_CLASS = factory.Class().get(((CloneVisitorGenerator.GENERATING_CLONE_PACKAGE) + ".GetterTemplateMatcher"));

    private final CtClass<?> SETTER_TEMPLATE_MATCHER_CLASS = factory.Class().get(((CloneVisitorGenerator.GENERATING_CLONE_PACKAGE) + ".SetterTemplateMatcher"));

    @Override
    public <T> void visitCtMethod(CtMethod<T> element) {
        if (CallChecker.beforeDeref(element, CtMethod.class, 212, 11613, 11619)) {
            final String npe_invocation_var588 = element.getSimpleName();
            if (CallChecker.beforeDeref(npe_invocation_var588, String.class, 212, 11613, 11635)) {
                if (CallChecker.beforeDeref(element, CtMethod.class, 212, 11663, 11669)) {
                    final String npe_invocation_var589 = element.getSimpleName();
                    if (CallChecker.beforeDeref(npe_invocation_var589, String.class, 212, 11663, 11685)) {
                        if ((!(npe_invocation_var588.startsWith("visitCt"))) && (!(npe_invocation_var589.startsWith("scanCt")))) {
                            return ;
                        }
                    }
                }
            }
        }
        if (CallChecker.beforeDeref(element, CtMethod.class, 215, 11763, 11769)) {
            if (CallChecker.beforeDeref("scanCtVisitable", String.class, 215, 11738, 11754)) {
                if ("scanCtVisitable".equals(element.getSimpleName())) {
                    return ;
                }
            }
        }
        final String qualifiedNameOfImplClass = ("spoon.support" + (element.getParameters().get(0).getType().getQualifiedName().substring(5))) + "Impl";
        if (CallChecker.beforeDeref(excludesAST, List.class, 219, 11963, 11973)) {
            if (excludesAST.contains(qualifiedNameOfImplClass)) {
                return ;
            }
        }
        final CtType<?> declaration = factory.Class().get(qualifiedNameOfImplClass);
        if (declaration == null) {
            if (CallChecker.beforeDeref(element, CtMethod.class, 224, 12255, 12261)) {
                throw new SpoonException(((qualifiedNameOfImplClass + " doesn't have declaration in the source path for ") + (element.getSignature())));
            }else
                throw new AbnormalExecutionError();

        }
        CtMethod<T> clone = CallChecker.init(CtMethod.class);
        if (CallChecker.beforeDeref(element, CtMethod.class, 227, 12311, 12317)) {
            clone = element.clone();
        }
        if (CallChecker.beforeDeref(clone, CtMethod.class, 228, 12332, 12336)) {
            final CtBlock<T> npe_invocation_var590 = clone.getBody();
            if (CallChecker.beforeDeref(npe_invocation_var590, CtBlock.class, 228, 12332, 12346)) {
                final List<CtStatement> npe_invocation_var591 = npe_invocation_var590.getStatements();
                if (CallChecker.beforeDeref(npe_invocation_var591, List.class, 228, 12332, 12362)) {
                    npe_invocation_var591.clear();
                }
            }
        }
        for (CtField<?> ctField : declaration.getFields()) {
            if (CallChecker.beforeDeref(ctField, CtField.class, 230, 12463, 12469)) {
                if (CallChecker.beforeDeref(excludesFields, List.class, 230, 12439, 12452)) {
                    if (excludesFields.contains(ctField.getSimpleName())) {
                        continue;
                    }
                }
            }
            if (isConstantOrStatic(ctField)) {
                continue;
            }
            if (CallChecker.beforeDeref(ctField, CtField.class, 236, 12607, 12613)) {
                if (isSubTypeOfCtElement(ctField.getType())) {
                    continue;
                }
            }
            final CtMethod<?> setterOfField = getSetterOf(ctField);
            final CtInvocation<?> setterInvocation = createSetterInvocation(element.getParameters().get(0).getType(), setterOfField, createGetterInvocation(element.getParameters().get(0), getGetterOf(ctField)));
            final List<CtMethod<?>> methodsToAvoid = getCtMethodThrowUnsupportedOperation(setterOfField);
            if (CallChecker.beforeDeref(methodsToAvoid, List.class, 244, 13046, 13059)) {
                if ((methodsToAvoid.size()) > 0) {
                    if (CallChecker.beforeDeref(clone, CtMethod.class, 245, 13081, 13085)) {
                        final CtBlock<T> npe_invocation_var592 = clone.getBody();
                        if (CallChecker.beforeDeref(npe_invocation_var592, CtBlock.class, 245, 13081, 13095)) {
                            npe_invocation_var592.addStatement(createProtectionToException(setterInvocation, methodsToAvoid));
                        }
                    }
                }else {
                    if (CallChecker.beforeDeref(clone, CtMethod.class, 247, 13194, 13198)) {
                        final CtBlock<T> npe_invocation_var593 = clone.getBody();
                        if (CallChecker.beforeDeref(npe_invocation_var593, CtBlock.class, 247, 13194, 13208)) {
                            npe_invocation_var593.addStatement(setterInvocation);
                        }
                    }
                }
            }
        }
        if (CallChecker.beforeDeref(clone, CtMethod.class, 250, 13263, 13267)) {
            final CtBlock<T> npe_invocation_var594 = clone.getBody();
            if (CallChecker.beforeDeref(npe_invocation_var594, CtBlock.class, 250, 13263, 13277)) {
                final List<CtStatement> npe_invocation_var595 = npe_invocation_var594.getStatements();
                if (CallChecker.beforeDeref(npe_invocation_var595, List.class, 250, 13263, 13293)) {
                    if ((npe_invocation_var595.size()) > 0) {
                        if (CallChecker.beforeDeref(clone, CtMethod.class, 251, 13314, 13318)) {
                            final CtBlock<T> npe_invocation_var596 = clone.getBody();
                            if (CallChecker.beforeDeref(npe_invocation_var596, CtBlock.class, 251, 13314, 13328)) {
                                npe_invocation_var596.insertEnd(createSuperInvocation(element));
                            }
                        }
                        final CtComment comment = factory.Core().createComment();
                        if (CallChecker.beforeDeref(comment, CtComment.class, 255, 13478, 13484)) {
                            comment.setCommentType(INLINE);
                        }
                        if (CallChecker.beforeDeref(comment, CtComment.class, 256, 13537, 13543)) {
                            comment.setContent(("auto-generated, see " + (CloneVisitorGenerator.class.getName())));
                        }
                        if (CallChecker.beforeDeref(clone, CtMethod.class, 257, 13626, 13630)) {
                            clone.addComment(comment);
                        }
                        if (CallChecker.beforeDeref(targetBuilder, CtClass.class, 259, 13659, 13671)) {
                            targetBuilder.addMethod(clone);
                        }
                    }
                }
            }
        }
    }

    private CtIf createProtectionToException(CtInvocation<?> setterInvocation, List<CtMethod<?>> methodsAvoid) {
        final CtIf anIf = factory.Core().createIf();
        if (CallChecker.beforeDeref(factory, Factory.class, 268, 13990, 13996)) {
            final CoreFactory npe_invocation_var597 = factory.Core();
            if (CallChecker.beforeDeref(npe_invocation_var597, CoreFactory.class, 268, 13990, 14003)) {
                final CtUnaryOperator<Object> npe_invocation_var598 = npe_invocation_var597.createUnaryOperator();
                if (CallChecker.beforeDeref(npe_invocation_var598, CtUnaryOperator.class, 268, 13990, 14025)) {
                    final CtUnaryOperator npe_invocation_var599 = npe_invocation_var598.setOperand(createBinaryConditions(methodsAvoid));
                    if (CallChecker.beforeDeref(npe_invocation_var599, CtUnaryOperator.class, 268, 13990, 14074)) {
                        if (CallChecker.beforeDeref(anIf, CtIf.class, 268, 13972, 13975)) {
                            anIf.setCondition(npe_invocation_var599.setKind(UnaryOperatorKind.NOT));
                        }
                    }
                }
            }
        }
        if (CallChecker.beforeDeref(factory, Factory.class, 269, 14135, 14141)) {
            final CodeFactory npe_invocation_var600 = factory.Code();
            if (CallChecker.beforeDeref(npe_invocation_var600, CodeFactory.class, 269, 14135, 14148)) {
                if (CallChecker.beforeDeref(anIf, CtIf.class, 269, 14113, 14116)) {
                    anIf.setThenStatement(npe_invocation_var600.createCtBlock(setterInvocation));
                }
            }
        }
        return anIf;
    }

    private CtExpression<Object> createBinaryConditions(List<CtMethod<?>> methodsAvoid) {
        CtExpression<Object> left = null;
        CtExpression<Object> right = CallChecker.init(CtExpression.class);
        for (int i = 0; i < (methodsAvoid.size()); i++) {
            final CtInterface<?> ctInterface = getInterfaceOf(methodsAvoid.get(i).getDeclaringType());
            if (i == 0) {
                if (CallChecker.beforeDeref(factory, Factory.class, 284, 14668, 14674)) {
                    if (CallChecker.beforeDeref(factory, Factory.class, 285, 14726, 14732)) {
                        if (CallChecker.beforeDeref(ctInterface, CtInterface.class, 285, 14758, 14768)) {
                            final CodeFactory npe_invocation_var601 = factory.Code();
                            if (CallChecker.beforeDeref(npe_invocation_var601, CodeFactory.class, 285, 14726, 14739)) {
                                final CodeFactory npe_invocation_var602 = factory.Code();
                                if (CallChecker.beforeDeref(npe_invocation_var602, CodeFactory.class, 284, 14668, 14681)) {
                                    left = npe_invocation_var602.createBinaryOperator(otherRead, npe_invocation_var601.createTypeAccess(ctInterface.getReference()), BinaryOperatorKind.INSTANCEOF);
                                }
                            }
                        }
                    }
                }
            }else {
                if (CallChecker.beforeDeref(factory, Factory.class, 288, 14858, 14864)) {
                    if (CallChecker.beforeDeref(factory, Factory.class, 289, 14916, 14922)) {
                        if (CallChecker.beforeDeref(ctInterface, CtInterface.class, 289, 14948, 14958)) {
                            final CodeFactory npe_invocation_var603 = factory.Code();
                            if (CallChecker.beforeDeref(npe_invocation_var603, CodeFactory.class, 289, 14916, 14929)) {
                                final CodeFactory npe_invocation_var604 = factory.Code();
                                if (CallChecker.beforeDeref(npe_invocation_var604, CodeFactory.class, 288, 14858, 14871)) {
                                    right = npe_invocation_var604.createBinaryOperator(otherRead, npe_invocation_var603.createTypeAccess(ctInterface.getReference()), BinaryOperatorKind.INSTANCEOF);
                                }
                            }
                        }
                    }
                }
                if (CallChecker.beforeDeref(factory, Factory.class, 292, 15034, 15040)) {
                    final CodeFactory npe_invocation_var605 = factory.Code();
                    if (CallChecker.beforeDeref(npe_invocation_var605, CodeFactory.class, 292, 15034, 15047)) {
                        left = npe_invocation_var605.createBinaryOperator(left, right, BinaryOperatorKind.OR);
                    }
                }
            }
        }
        return left;
    }

    private List<CtMethod<?>> getCtMethodThrowUnsupportedOperation(CtMethod<?> method) {
        final List<CtMethod<?>> avoid = new ArrayList<>();
        final CtInterface<?> ctInterface = getInterfaceOf(method.getDeclaringType());
        if (ctInterface == null) {
            return avoid;
        }
        final CtMethod<?> declarationMethod = getMethodByCtMethod(ctInterface, method);
        for (CtMethod<?> ctMethod : Query.getElements(factory, new OverridingMethodFilter(declarationMethod))) {
            if (!(avoidThrowUnsupportedOperationException(ctMethod))) {
                if (CallChecker.beforeDeref(avoid, List.class, 310, 15837, 15841)) {
                    avoid.add(ctMethod);
                }
            }
        }
        return avoid;
    }

    private boolean avoidThrowUnsupportedOperationException(CtMethod<?> candidate) {
        if (CallChecker.beforeDeref(candidate, CtMethod.class, 320, 16077, 16085)) {
            final CtBlock<?> npe_invocation_var606 = candidate.getBody();
            if (CallChecker.beforeDeref(npe_invocation_var606, CtBlock.class, 320, 16077, 16095)) {
                final List<CtStatement> npe_invocation_var607 = npe_invocation_var606.getStatements();
                if (CallChecker.beforeDeref(npe_invocation_var607, List.class, 320, 16077, 16111)) {
                    if ((npe_invocation_var607.size()) != 1) {
                        return true;
                    }
                }else
                    throw new AbnormalExecutionError();

            }else
                throw new AbnormalExecutionError();

        }else
            throw new AbnormalExecutionError();

        if (CallChecker.beforeDeref(candidate, CtMethod.class, 323, 16162, 16170)) {
            final CtBlock<?> npe_invocation_var608 = candidate.getBody();
            if (CallChecker.beforeDeref(npe_invocation_var608, CtBlock.class, 323, 16162, 16180)) {
                if (!((npe_invocation_var608.getStatement(0)) instanceof CtThrow)) {
                    return true;
                }
            }else
                throw new AbnormalExecutionError();

        }else
            throw new AbnormalExecutionError();

        CtThrow ctThrow = CallChecker.init(CtThrow.class);
        if (CallChecker.beforeDeref(candidate, CtMethod.class, 326, 16267, 16275)) {
            final CtBlock<?> npe_invocation_var609 = candidate.getBody();
            if (CallChecker.beforeDeref(npe_invocation_var609, CtBlock.class, 326, 16267, 16285)) {
                ctThrow = npe_invocation_var609.getStatement(0);
            }
        }
        if (CallChecker.beforeDeref(ctThrow, CtThrow.class, 327, 16314, 16320)) {
            if (!((ctThrow.getThrownExpression()) instanceof CtConstructorCall)) {
                return true;
            }
        }else
            throw new AbnormalExecutionError();

        final CtConstructorCall<? extends Throwable> thrownExpression = ((CtConstructorCall<? extends Throwable>) (ctThrow.getThrownExpression()));
        if (CallChecker.beforeDeref(thrownExpression, CtConstructorCall.class, 331, 16550, 16565)) {
            if (CallChecker.beforeDeref(factory, Factory.class, 331, 16584, 16590)) {
                final TypeFactory npe_invocation_var610 = factory.Type();
                if (CallChecker.beforeDeref(npe_invocation_var610, TypeFactory.class, 331, 16584, 16597)) {
                    final CtTypeReference<? extends Throwable> npe_invocation_var611 = thrownExpression.getType();
                    if (CallChecker.beforeDeref(npe_invocation_var611, CtTypeReference.class, 331, 16550, 16575)) {
                        if (!(npe_invocation_var611.equals(npe_invocation_var610.createReference(UnsupportedOperationException.class)))) {
                            return true;
                        }
                    }else
                        throw new AbnormalExecutionError();

                }else
                    throw new AbnormalExecutionError();

            }else
                throw new AbnormalExecutionError();

        }else
            throw new AbnormalExecutionError();

        return false;
    }

    private CtMethod<?> getMethodByCtMethod(CtType<?> ctType, CtMethod<?> method) {
        for (CtMethod<?> ctMethod : ctType.getAllMethods()) {
            if (CallChecker.beforeDeref(method, CtMethod.class, 342, 16914, 16919)) {
                if (CallChecker.beforeDeref(ctMethod, CtMethod.class, 342, 16944, 16951)) {
                    final String npe_invocation_var612 = method.getSimpleName();
                    if (CallChecker.beforeDeref(npe_invocation_var612, String.class, 342, 16914, 16935)) {
                        if (!(npe_invocation_var612.equals(ctMethod.getSimpleName()))) {
                            continue;
                        }
                    }
                }
            }
            boolean cont = CallChecker.init(boolean.class);
            if (CallChecker.beforeDeref(method, CtMethod.class, 345, 17016, 17021)) {
                final List<?> npe_invocation_var613 = method.getParameters();
                if (CallChecker.beforeDeref(npe_invocation_var613, List.class, 345, 17016, 17037)) {
                    if (CallChecker.beforeDeref(ctMethod, CtMethod.class, 345, 17049, 17056)) {
                        final List<?> npe_invocation_var614 = ctMethod.getParameters();
                        if (CallChecker.beforeDeref(npe_invocation_var614, List.class, 345, 17049, 17072)) {
                            cont = (npe_invocation_var613.size()) == (npe_invocation_var614.size());
                        }
                    }
                }
            }
            for (int i = 0; cont && (i < (method.getParameters().size())); i++) {
                if (CallChecker.beforeDeref(method, CtMethod.class, 347, 17164, 17169)) {
                    final List<?> npe_invocation_var615 = method.getParameters();
                    if (CallChecker.beforeDeref(npe_invocation_var615, List.class, 347, 17164, 17185)) {
                        if (CallChecker.beforeDeref(npe_invocation_var615.get(i), CtParameter.class, 347, 17164, 17192)) {
                            if (CallChecker.beforeDeref(ctMethod, CtMethod.class, 347, 17211, 17218)) {
                                final List<?> npe_invocation_var616 = ctMethod.getParameters();
                                if (CallChecker.beforeDeref(npe_invocation_var616, List.class, 347, 17211, 17234)) {
                                    if (CallChecker.beforeDeref(npe_invocation_var616.get(i), CtParameter.class, 347, 17211, 17241)) {
                                        final CtTypeReference<?> npe_invocation_var617 = npe_invocation_var615.get(i).getType();
                                        if (CallChecker.beforeDeref(npe_invocation_var617, CtTypeReference.class, 347, 17164, 17202)) {
                                            if (!(npe_invocation_var617.equals(npe_invocation_var616.get(i).getType()))) {
                                                cont = false;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (cont) {
                return ctMethod;
            }
        }
        if (CallChecker.beforeDeref(method, CtMethod.class, 355, 17398, 17403)) {
            if (CallChecker.beforeDeref(ctType, CtType.class, 355, 17451, 17456)) {
                throw new AssertionError(((("Can't find method " + (method.getSignature())) + " in the given interface ") + (ctType.getQualifiedName())));
            }else
                throw new AbnormalExecutionError();

        }else
            throw new AbnormalExecutionError();

    }

    private CtInterface<?> getInterfaceOf(CtType<?> declaringType) {
        final CtTypeReference<?>[] interfaces = declaringType.getSuperInterfaces().toArray(new CtTypeReference[declaringType.getSuperInterfaces().size()]);
        for (CtTypeReference<?> anInterface : interfaces) {
            if (CallChecker.beforeDeref(anInterface, CtTypeReference.class, 364, 17831, 17841)) {
                if (CallChecker.beforeDeref(declaringType, CtType.class, 364, 17866, 17878)) {
                    if (CallChecker.beforeDeref(declaringType, CtType.class, 364, 17909, 17921)) {
                        final String npe_invocation_var618 = declaringType.getSimpleName();
                        if (CallChecker.beforeDeref(npe_invocation_var618, String.class, 364, 17909, 17937)) {
                            final String npe_invocation_var619 = declaringType.getSimpleName();
                            if (CallChecker.beforeDeref(npe_invocation_var619, String.class, 364, 17866, 17894)) {
                                final String npe_invocation_var620 = anInterface.getSimpleName();
                                if (CallChecker.beforeDeref(npe_invocation_var620, String.class, 364, 17831, 17857)) {
                                    if (npe_invocation_var620.equals(npe_invocation_var619.substring(0, ((npe_invocation_var618.length()) - 4)))) {
                                        if (CallChecker.beforeDeref(anInterface, CtTypeReference.class, 365, 17987, 17997)) {
                                            return ((CtInterface<?>) (anInterface.getDeclaration()));
                                        }else
                                            throw new AbnormalExecutionError();

                                    }
                                }else
                                    throw new AbnormalExecutionError();

                            }else
                                throw new AbnormalExecutionError();

                        }else
                            throw new AbnormalExecutionError();

                    }else
                        throw new AbnormalExecutionError();

                }else
                    throw new AbnormalExecutionError();

            }else
                throw new AbnormalExecutionError();

        }
        if (CallChecker.beforeDeref(declaringType, CtType.class, 368, 18117, 18129)) {
            throw new AssertionError(("You should have the interface for the implementation " + (declaringType.getQualifiedName())));
        }else
            throw new AbnormalExecutionError();

    }

    private <T> CtInvocation<T> createSuperInvocation(CtMethod<T> element) {
        if (CallChecker.beforeDeref(factory, Factory.class, 377, 18367, 18373)) {
            if (CallChecker.beforeDeref(factory, Factory.class, 378, 18406, 18412)) {
                final CoreFactory npe_invocation_var621 = factory.Core();
                if (CallChecker.beforeDeref(npe_invocation_var621, CoreFactory.class, 378, 18406, 18419)) {
                    if (CallChecker.beforeDeref(element, CtMethod.class, 378, 18442, 18448)) {
                        if (CallChecker.beforeDeref(factory, Factory.class, 378, 18466, 18472)) {
                            if (CallChecker.beforeDeref(element, CtMethod.class, 378, 18500, 18506)) {
                                final List<?> npe_invocation_var622 = element.getParameters();
                                if (CallChecker.beforeDeref(npe_invocation_var622, List.class, 378, 18500, 18522)) {
                                    if (CallChecker.beforeDeref(npe_invocation_var622.get(0), CtParameter.class, 378, 18500, 18529)) {
                                        final CodeFactory npe_invocation_var623 = factory.Code();
                                        if (CallChecker.beforeDeref(npe_invocation_var623, CodeFactory.class, 378, 18466, 18479)) {
                                            final CodeFactory npe_invocation_var624 = factory.Code();
                                            if (CallChecker.beforeDeref(npe_invocation_var624, CodeFactory.class, 377, 18367, 18380)) {
                                                return npe_invocation_var624.createInvocation(npe_invocation_var621.createSuperAccess(), element.getReference(), npe_invocation_var623.createVariableRead(npe_invocation_var622.get(0).getReference(), false));
                                            }else
                                                throw new AbnormalExecutionError();

                                        }else
                                            throw new AbnormalExecutionError();

                                    }else
                                        throw new AbnormalExecutionError();

                                }else
                                    throw new AbnormalExecutionError();

                            }else
                                throw new AbnormalExecutionError();

                        }else
                            throw new AbnormalExecutionError();

                    }else
                        throw new AbnormalExecutionError();

                }else
                    throw new AbnormalExecutionError();

            }else
                throw new AbnormalExecutionError();

        }else
            throw new AbnormalExecutionError();

    }

    private CtInvocation<?> createSetterInvocation(CtTypeReference<?> type, CtMethod<?> setter, CtInvocation<?> getter) {
        if (CallChecker.beforeDeref(factory, Factory.class, 391, 19016, 19022)) {
            if (CallChecker.beforeDeref(otherRead, CtVariableAccess.class, 391, 19048, 19056)) {
                final CtVariableAccess<Object> npe_invocation_var625 = otherRead.clone();
                if (CallChecker.beforeDeref(npe_invocation_var625, CtVariableAccess.class, 391, 19048, 19064)) {
                    if (CallChecker.beforeDeref(setter, CtMethod.class, 391, 19085, 19090)) {
                        final CodeFactory npe_invocation_var626 = factory.Code();
                        if (CallChecker.beforeDeref(npe_invocation_var626, CodeFactory.class, 391, 19016, 19029)) {
                            return npe_invocation_var626.createInvocation(npe_invocation_var625.addTypeCast(type), setter.getReference(), getter);
                        }else
                            throw new AbnormalExecutionError();

                    }else
                        throw new AbnormalExecutionError();

                }else
                    throw new AbnormalExecutionError();

            }else
                throw new AbnormalExecutionError();

        }else
            throw new AbnormalExecutionError();

    }

    private CtInvocation<?> createGetterInvocation(CtParameter<?> element, CtMethod<?> getter) {
        if (CallChecker.beforeDeref(factory, Factory.class, 401, 19375, 19381)) {
            if (CallChecker.beforeDeref(factory, Factory.class, 401, 19407, 19413)) {
                if (CallChecker.beforeDeref(element, CtParameter.class, 401, 19441, 19447)) {
                    final CodeFactory npe_invocation_var627 = factory.Code();
                    if (CallChecker.beforeDeref(npe_invocation_var627, CodeFactory.class, 401, 19407, 19420)) {
                        if (CallChecker.beforeDeref(getter, CtMethod.class, 401, 19473, 19478)) {
                            final CodeFactory npe_invocation_var628 = factory.Code();
                            if (CallChecker.beforeDeref(npe_invocation_var628, CodeFactory.class, 401, 19375, 19388)) {
                                return npe_invocation_var628.createInvocation(npe_invocation_var627.createVariableRead(element.getReference(), false), getter.getReference());
                            }else
                                throw new AbnormalExecutionError();

                        }else
                            throw new AbnormalExecutionError();

                    }else
                        throw new AbnormalExecutionError();

                }else
                    throw new AbnormalExecutionError();

            }else
                throw new AbnormalExecutionError();

        }else
            throw new AbnormalExecutionError();

    }

    private <T> CtMethod<?> getSetterOf(final CtField<T> ctField) {
        for (CtMethod<?> ctMethod : ctField.getDeclaringType().getMethods()) {
            if (CallChecker.beforeDeref(ctMethod, CtMethod.class, 410, 19748, 19755)) {
                final String npe_invocation_var629 = ctMethod.getSimpleName();
                if (CallChecker.beforeDeref(npe_invocation_var629, String.class, 410, 19748, 19771)) {
                    if (CallChecker.beforeDeref(ctMethod, CtMethod.class, 410, 19794, 19801)) {
                        final String npe_invocation_var630 = ctMethod.getSimpleName();
                        if (CallChecker.beforeDeref(npe_invocation_var630, String.class, 410, 19794, 19817)) {
                            if (CallChecker.beforeDeref(ctField, CtField.class, 410, 19842, 19848)) {
                                final String npe_invocation_var631 = ctField.getSimpleName();
                                if (CallChecker.beforeDeref(npe_invocation_var631, String.class, 410, 19842, 19864)) {
                                    if (CallChecker.beforeDeref(npe_invocation_var630.toLowerCase(), String.class, 410, 19794, 19831)) {
                                        if ((npe_invocation_var629.startsWith("set")) && (npe_invocation_var630.toLowerCase().contains(npe_invocation_var631.toLowerCase()))) {
                                            if (CallChecker.beforeDeref(ctMethod, CtMethod.class, 411, 19894, 19901)) {
                                                final List<?> npe_invocation_var632 = ctMethod.getParameters();
                                                if (CallChecker.beforeDeref(npe_invocation_var632, List.class, 411, 19894, 19917)) {
                                                    if ((npe_invocation_var632.size()) != 1) {
                                                        continue;
                                                    }
                                                }
                                            }
                                            if (CallChecker.beforeDeref(ctMethod, CtMethod.class, 414, 19970, 19977)) {
                                                final List<?> npe_invocation_var633 = ctMethod.getParameters();
                                                if (CallChecker.beforeDeref(npe_invocation_var633, List.class, 414, 19970, 19993)) {
                                                    if (CallChecker.beforeDeref(npe_invocation_var633.get(0), CtParameter.class, 414, 19970, 20000)) {
                                                        if (CallChecker.beforeDeref(ctField, CtField.class, 414, 20019, 20025)) {
                                                            final CtTypeReference<?> npe_invocation_var634 = npe_invocation_var633.get(0).getType();
                                                            if (CallChecker.beforeDeref(npe_invocation_var634, CtTypeReference.class, 414, 19970, 20010)) {
                                                                if (!(npe_invocation_var634.equals(ctField.getType()))) {
                                                                    continue;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            return ctMethod;
                                        }
                                    }else
                                        throw new AbnormalExecutionError();

                                }else
                                    throw new AbnormalExecutionError();

                            }else
                                throw new AbnormalExecutionError();

                        }else
                            throw new AbnormalExecutionError();

                    }else
                        throw new AbnormalExecutionError();

                }else
                    throw new AbnormalExecutionError();

            }else
                throw new AbnormalExecutionError();

        }
        if (CallChecker.beforeDeref(factory, Factory.class, 420, 20160, 20166)) {
            final TypeFactory npe_invocation_var635 = factory.Type();
            if (CallChecker.beforeDeref(npe_invocation_var635, TypeFactory.class, 420, 20160, 20173)) {
                if (CallChecker.beforeDeref(SETTER_TEMPLATE_MATCHER_CLASS, CtClass.class, 420, 20106, 20134)) {
                    final CtMethod<Object> npe_invocation_var636 = SETTER_TEMPLATE_MATCHER_CLASS.getMethod("setElement", npe_invocation_var635.BOOLEAN_PRIMITIVE);
                    if (CallChecker.beforeDeref(npe_invocation_var636, CtMethod.class, 420, 20106, 20192)) {
                        npe_invocation_var636.getBody();
                    }
                }
            }
        }
        final List<CtMethod> matchers = ctField.getDeclaringType().getElements(new TypeFilter<CtMethod>(CtMethod.class) {
            @Override
            public boolean matches(CtMethod element) {
                final CtBlock body = element.getBody();
                if (CallChecker.beforeDeref(body, CtBlock.class, 425, 20442, 20445)) {
                    final List<CtStatement> npe_invocation_var637 = body.getStatements();
                    if (CallChecker.beforeDeref(npe_invocation_var637, List.class, 425, 20442, 20461)) {
                        if ((npe_invocation_var637.size()) != 2) {
                            return false;
                        }
                    }else
                        throw new AbnormalExecutionError();

                }else
                    throw new AbnormalExecutionError();

                if (CallChecker.beforeDeref(body, CtBlock.class, 428, 20517, 20520)) {
                    if ((body.getStatement(0)) instanceof CtAssignment) {
                        final CtExpression assigned = ((CtAssignment) (body.getStatement(0))).getAssigned();
                        if (!(assigned instanceof CtFieldAccess)) {
                            return false;
                        }
                        if (CallChecker.beforeDeref(assigned, CtExpression.class, 433, 20766, 20773)) {
                            final CtFieldReference npe_invocation_var638 = ((CtFieldAccess) (assigned)).getVariable();
                            if (CallChecker.beforeDeref(npe_invocation_var638, CtFieldReference.class, 433, 20749, 20788)) {
                                if (CallChecker.beforeDeref(ctField, CtField.class, 433, 20813, 20819)) {
                                    final String npe_invocation_var639 = npe_invocation_var638.getSimpleName();
                                    if (CallChecker.beforeDeref(npe_invocation_var639, String.class, 433, 20749, 20804)) {
                                        if (!(npe_invocation_var639.equals(ctField.getSimpleName()))) {
                                            return false;
                                        }
                                    }else
                                        throw new AbnormalExecutionError();

                                }else
                                    throw new AbnormalExecutionError();

                            }else
                                throw new AbnormalExecutionError();

                        }else
                            throw new AbnormalExecutionError();

                    }else {
                        return false;
                    }
                }else
                    throw new AbnormalExecutionError();

                return true;
            }
        });
        if (CallChecker.beforeDeref(matchers, List.class, 442, 20958, 20965)) {
            if ((matchers.size()) != 1) {
                throw new SpoonException("Get more than one setter. Please make an more ingenious method to get setter method.");
            }
        }else
            throw new AbnormalExecutionError();

        if (CallChecker.beforeDeref(matchers, List.class, 445, 21118, 21125)) {
            return matchers.get(0);
        }else
            throw new AbnormalExecutionError();

    }

    private <T> CtMethod<?> getGetterOf(CtField<T> ctField) {
        for (CtMethod<?> ctMethod : ctField.getDeclaringType().getMethods()) {
            if (CallChecker.beforeDeref(ctMethod, CtMethod.class, 454, 21385, 21392)) {
                final String npe_invocation_var640 = ctMethod.getSimpleName();
                if (CallChecker.beforeDeref(npe_invocation_var640, String.class, 454, 21385, 21408)) {
                    if (CallChecker.beforeDeref(ctMethod, CtMethod.class, 454, 21431, 21438)) {
                        final String npe_invocation_var641 = ctMethod.getSimpleName();
                        if (CallChecker.beforeDeref(npe_invocation_var641, String.class, 454, 21431, 21454)) {
                            if (CallChecker.beforeDeref(ctMethod, CtMethod.class, 455, 21487, 21494)) {
                                final String npe_invocation_var642 = ctMethod.getSimpleName();
                                if (CallChecker.beforeDeref(npe_invocation_var642, String.class, 455, 21487, 21510)) {
                                    if (CallChecker.beforeDeref(ctField, CtField.class, 455, 21535, 21541)) {
                                        final String npe_invocation_var643 = ctField.getSimpleName();
                                        if (CallChecker.beforeDeref(npe_invocation_var643, String.class, 455, 21535, 21557)) {
                                            if (CallChecker.beforeDeref(npe_invocation_var642.toLowerCase(), String.class, 455, 21487, 21524)) {
                                                if (((npe_invocation_var640.startsWith("get")) || (npe_invocation_var641.startsWith("is"))) && (npe_invocation_var642.toLowerCase().contains(npe_invocation_var643.toLowerCase()))) {
                                                    if (CallChecker.beforeDeref(ctMethod, CtMethod.class, 456, 21588, 21595)) {
                                                        if (CallChecker.beforeDeref(ctField, CtField.class, 456, 21614, 21620)) {
                                                            final CtTypeReference<?> npe_invocation_var644 = ctMethod.getType();
                                                            if (CallChecker.beforeDeref(npe_invocation_var644, CtTypeReference.class, 456, 21588, 21605)) {
                                                                if (!(npe_invocation_var644.equals(ctField.getType()))) {
                                                                    continue;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    if (CallChecker.beforeDeref(ctMethod, CtMethod.class, 459, 21671, 21678)) {
                                                        final List<?> npe_invocation_var645 = ctMethod.getParameters();
                                                        if (CallChecker.beforeDeref(npe_invocation_var645, List.class, 459, 21671, 21694)) {
                                                            if ((npe_invocation_var645.size()) != 0) {
                                                                continue;
                                                            }
                                                        }
                                                    }
                                                    return ctMethod;
                                                }
                                            }else
                                                throw new AbnormalExecutionError();

                                        }else
                                            throw new AbnormalExecutionError();

                                    }else
                                        throw new AbnormalExecutionError();

                                }else
                                    throw new AbnormalExecutionError();

                            }else
                                throw new AbnormalExecutionError();

                        }else
                            throw new AbnormalExecutionError();

                    }else
                        throw new AbnormalExecutionError();

                }else
                    throw new AbnormalExecutionError();

            }else
                throw new AbnormalExecutionError();

        }
        final CtBlock<?> templateRoot = GETTER_TEMPLATE_MATCHER_CLASS.getMethod("getElement").getBody();
        if (CallChecker.beforeDeref(templateRoot, CtBlock.class, 467, 21918, 21929)) {
            if (CallChecker.beforeDeref(factory, Factory.class, 467, 21970, 21976)) {
                if (CallChecker.beforeDeref(ctField, CtField.class, 467, 22004, 22010)) {
                    final CodeFactory npe_invocation_var646 = factory.Code();
                    if (CallChecker.beforeDeref(npe_invocation_var646, CodeFactory.class, 467, 21970, 21983)) {
                        final CtReturn npe_invocation_var647 = ((CtReturn) (templateRoot.getStatement(0)));
                        if (CallChecker.beforeDeref(npe_invocation_var647, CtReturn.class, 467, 21918, 21945)) {
                            npe_invocation_var647.setReturnedExpression(npe_invocation_var646.createVariableRead(ctField.getReference(), true));
                        }
                    }
                }
            }
        }
        List<CtMethod> matchers = CallChecker.init(List.class);
        if (CallChecker.beforeDeref(ctField, CtField.class, 468, 22066, 22072)) {
            final CtType<?> npe_invocation_var649 = ctField.getDeclaringType();
            if (CallChecker.beforeDeref(npe_invocation_var649, CtType.class, 468, 22066, 22091)) {
                matchers = npe_invocation_var649.getElements(new TypeFilter<CtMethod>(CtMethod.class) {
                    @Override
                    public boolean matches(CtMethod element) {
                        if (CallChecker.beforeDeref(element, CtMethod.class, 471, 22224, 22230)) {
                            final CtBlock npe_invocation_var648 = element.getBody();
                            if (CallChecker.beforeDeref(npe_invocation_var648, CtBlock.class, 471, 22224, 22240)) {
                                if (CallChecker.beforeDeref(templateRoot, CtBlock.class, 471, 22260, 22271)) {
                                    if (CallChecker.beforeDeref(npe_invocation_var648.toString(), String.class, 471, 22224, 22251)) {
                                        return npe_invocation_var648.toString().equals(templateRoot.toString());
                                    }else
                                        throw new AbnormalExecutionError();

                                }else
                                    throw new AbnormalExecutionError();

                            }else
                                throw new AbnormalExecutionError();

                        }else
                            throw new AbnormalExecutionError();

                    }
                });
            }else
                throw new AbnormalExecutionError();

        }else
            throw new AbnormalExecutionError();

        if (CallChecker.beforeDeref(matchers, List.class, 474, 22309, 22316)) {
            if ((matchers.size()) != 1) {
                throw new SpoonException("Get more than one getter. Please make an more ingenious method to get getter method.");
            }
        }else
            throw new AbnormalExecutionError();

        if (CallChecker.beforeDeref(matchers, List.class, 477, 22469, 22476)) {
            return matchers.get(0);
        }else
            throw new AbnormalExecutionError();

    }

    private boolean isSubTypeOfCtElement(CtTypeReference<?> type) {
        if (CallChecker.beforeDeref(type, CtTypeReference.class, 484, 22633, 22636)) {
            if (CallChecker.beforeDeref(factory, Factory.class, 484, 22668, 22674)) {
                final TypeFactory npe_invocation_var650 = factory.Type();
                if (CallChecker.beforeDeref(npe_invocation_var650, TypeFactory.class, 484, 22668, 22681)) {
                    if (CallChecker.beforeDeref(type, CtTypeReference.class, 484, 22656, 22659)) {
                        if ((!(type.isPrimitive())) && (!(type.equals(npe_invocation_var650.STRING)))) {
                            if (CallChecker.beforeDeref(factory, Factory.class, 485, 22720, 22726)) {
                                final TypeFactory npe_invocation_var651 = factory.Type();
                                if (CallChecker.beforeDeref(npe_invocation_var651, TypeFactory.class, 485, 22720, 22733)) {
                                    if (CallChecker.beforeDeref(type, CtTypeReference.class, 485, 22703, 22706)) {
                                        if (type.isSubtypeOf(npe_invocation_var651.createReference(CtElement.class))) {
                                            return true;
                                        }
                                    }else
                                        throw new AbnormalExecutionError();

                                }else
                                    throw new AbnormalExecutionError();

                            }else
                                throw new AbnormalExecutionError();

                            if (CallChecker.beforeDeref(type, CtTypeReference.class, 488, 22807, 22810)) {
                                if (CallChecker.beforeDeref(LIST_REFERENCE, CtTypeReference.class, 488, 22838, 22851)) {
                                    final String npe_invocation_var652 = type.getQualifiedName();
                                    if (CallChecker.beforeDeref(npe_invocation_var652, String.class, 488, 22807, 22829)) {
                                        if (CallChecker.beforeDeref(type, CtTypeReference.class, 488, 22876, 22879)) {
                                            if (CallChecker.beforeDeref(COLLECTION_REFERENCE, CtTypeReference.class, 488, 22907, 22926)) {
                                                final String npe_invocation_var653 = type.getQualifiedName();
                                                if (CallChecker.beforeDeref(npe_invocation_var653, String.class, 488, 22876, 22898)) {
                                                    if (CallChecker.beforeDeref(type, CtTypeReference.class, 488, 22951, 22954)) {
                                                        if (CallChecker.beforeDeref(SET_REFERENCE, CtTypeReference.class, 488, 22982, 22994)) {
                                                            final String npe_invocation_var654 = type.getQualifiedName();
                                                            if (CallChecker.beforeDeref(npe_invocation_var654, String.class, 488, 22951, 22973)) {
                                                                if (((npe_invocation_var652.equals(LIST_REFERENCE.getQualifiedName())) || (npe_invocation_var653.equals(COLLECTION_REFERENCE.getQualifiedName()))) || (npe_invocation_var654.equals(SET_REFERENCE.getQualifiedName()))) {
                                                                    if (CallChecker.beforeDeref(type, CtTypeReference.class, 489, 23029, 23032)) {
                                                                        final List<?> npe_invocation_var655 = type.getActualTypeArguments();
                                                                        if (CallChecker.beforeDeref(npe_invocation_var655, List.class, 489, 23029, 23057)) {
                                                                            if (CallChecker.beforeDeref(npe_invocation_var655.get(0), CtTypeReference.class, 489, 23029, 23064)) {
                                                                                if (npe_invocation_var655.get(0).isSubtypeOf(CTELEMENT_REFERENCE)) {
                                                                                    return true;
                                                                                }
                                                                            }else
                                                                                throw new AbnormalExecutionError();

                                                                        }else
                                                                            throw new AbnormalExecutionError();

                                                                    }else
                                                                        throw new AbnormalExecutionError();

                                                                }
                                                            }else
                                                                throw new AbnormalExecutionError();

                                                        }else
                                                            throw new AbnormalExecutionError();

                                                    }else
                                                        throw new AbnormalExecutionError();

                                                }else
                                                    throw new AbnormalExecutionError();

                                            }else
                                                throw new AbnormalExecutionError();

                                        }else
                                            throw new AbnormalExecutionError();

                                    }else
                                        throw new AbnormalExecutionError();

                                }else
                                    throw new AbnormalExecutionError();

                            }else
                                throw new AbnormalExecutionError();

                        }
                    }else
                        throw new AbnormalExecutionError();

                }else
                    throw new AbnormalExecutionError();

            }else
                throw new AbnormalExecutionError();

        }else
            throw new AbnormalExecutionError();

        return false;
    }

    private boolean isConstantOrStatic(CtField<?> ctField) {
        if (CallChecker.beforeDeref(ctField, CtField.class, 498, 23238, 23244)) {
            if (CallChecker.beforeDeref(ctField, CtField.class, 498, 23293, 23299)) {
                return (ctField.getModifiers().contains(ModifierKind.FINAL)) || (ctField.getModifiers().contains(ModifierKind.STATIC));
            }else
                throw new AbnormalExecutionError();

        }else
            throw new AbnormalExecutionError();

    }
}.scan(npe_invocation_var657.get(CtInheritanceScanner.class))
java.lang.ClassCastException: spoon.support.reflect.code.CtVariableWriteImpl cannot be cast to spoon.reflect.code.CtStatement
	at spoon.support.reflect.code.CtForImpl.setForUpdate(CtForImpl.java:137)
	at spoon.support.visitor.replace.ReplacementVisitor$CtForForUpdateReplaceListener.set(ReplacementVisitor.java:1023)
	at spoon.support.visitor.replace.ReplacementVisitor.replaceInListIfExist(ReplacementVisitor.java:129)
	at spoon.support.visitor.replace.ReplacementVisitor.visitCtFor(ReplacementVisitor.java:1033)
	at spoon.support.reflect.code.CtForImpl.accept(CtForImpl.java:50)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.replace.ReplacementVisitor.replace(ReplacementVisitor.java:34)
	at spoon.support.reflect.declaration.CtElementImpl.replace(CtElementImpl.java:421)
	at fr.inria.spirals.npefix.transformer.processors.ProcessorUtility.removeUnaryOperator(ProcessorUtility.java:100)
	at fr.inria.spirals.npefix.transformer.processors.BeforeDerefAdder.process(BeforeDerefAdder.java:186)
	at fr.inria.spirals.npefix.transformer.processors.BeforeDerefAdder.process(BeforeDerefAdder.java:60)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:81)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:141)
	at spoon.reflect.visitor.CtScanner.visitCtBlock(CtScanner.java:291)
	at spoon.support.reflect.code.CtBlockImpl.accept(CtBlockImpl.java:48)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.visitCtMethod(CtScanner.java:549)
	at spoon.support.reflect.declaration.CtMethodImpl.accept(CtMethodImpl.java:70)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:141)
	at spoon.reflect.visitor.CtScanner.visitCtClass(CtScanner.java:327)
	at spoon.support.reflect.declaration.CtClassImpl.accept(CtClassImpl.java:68)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.support.QueueProcessingManager.process(QueueProcessingManager.java:119)
	at fr.inria.spirals.npefix.main.all.Launcher.instrument(Launcher.java:105)
	at fr.inria.spirals.npefix.main.run.Main.run(Main.java:61)
	at fr.inria.spirals.npefix.main.run.Main.main(Main.java:48)
if (jdtCompiler.getEnvironment().getNoClasspath()) {
    treeBuilderCompiler.lookupEnvironment.mayTolerateMissingType = true;
}-->jdtCompiler.getEnvironment()
java.lang.NullPointerException
	at fr.inria.spirals.npefix.transformer.processors.BeforeDerefAdder.process(BeforeDerefAdder.java:175)
	at fr.inria.spirals.npefix.transformer.processors.BeforeDerefAdder.process(BeforeDerefAdder.java:60)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:81)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.visitCtInvocation(CtScanner.java:494)
	at spoon.support.reflect.code.CtInvocationImpl.accept(CtInvocationImpl.java:56)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.visitCtIf(CtScanner.java:473)
	at spoon.support.reflect.code.CtIfImpl.accept(CtIfImpl.java:46)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:141)
	at spoon.reflect.visitor.CtScanner.visitCtBlock(CtScanner.java:291)
	at spoon.support.reflect.code.CtBlockImpl.accept(CtBlockImpl.java:48)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.visitCtMethod(CtScanner.java:549)
	at spoon.support.reflect.declaration.CtMethodImpl.accept(CtMethodImpl.java:70)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:141)
	at spoon.reflect.visitor.CtScanner.visitCtClass(CtScanner.java:327)
	at spoon.support.reflect.declaration.CtClassImpl.accept(CtClassImpl.java:68)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.support.QueueProcessingManager.process(QueueProcessingManager.java:119)
	at fr.inria.spirals.npefix.main.all.Launcher.instrument(Launcher.java:105)
	at fr.inria.spirals.npefix.main.run.Main.run(Main.java:61)
	at fr.inria.spirals.npefix.main.run.Main.main(Main.java:48)
if (jdtCompiler.getEnvironment().getNoClasspath()) {
    treeBuilderCompiler.lookupEnvironment.mayTolerateMissingType = true;
}-->jdtCompiler.getEnvironment().getNoClasspath()
java.lang.NullPointerException
	at fr.inria.spirals.npefix.transformer.processors.BeforeDerefAdder.process(BeforeDerefAdder.java:175)
	at fr.inria.spirals.npefix.transformer.processors.BeforeDerefAdder.process(BeforeDerefAdder.java:60)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:81)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.visitCtIf(CtScanner.java:473)
	at spoon.support.reflect.code.CtIfImpl.accept(CtIfImpl.java:46)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:141)
	at spoon.reflect.visitor.CtScanner.visitCtBlock(CtScanner.java:291)
	at spoon.support.reflect.code.CtBlockImpl.accept(CtBlockImpl.java:48)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.visitCtMethod(CtScanner.java:549)
	at spoon.support.reflect.declaration.CtMethodImpl.accept(CtMethodImpl.java:70)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:157)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:141)
	at spoon.reflect.visitor.CtScanner.visitCtClass(CtScanner.java:327)
	at spoon.support.reflect.declaration.CtClassImpl.accept(CtClassImpl.java:68)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.support.QueueProcessingManager.process(QueueProcessingManager.java:119)
	at fr.inria.spirals.npefix.main.all.Launcher.instrument(Launcher.java:105)
	at fr.inria.spirals.npefix.main.run.Main.run(Main.java:61)
	at fr.inria.spirals.npefix.main.run.Main.main(Main.java:48)
BeforeDeref --> 11479 (failed:4) in 2255ms
target--> 13023 (failed:0) in 7333ms
TryRegister # Try: 154 in 287ms
Assign --> 2280 (failed: 0) in 1408ms
VarInit --> 1033 in 971ms
MethodEncapsulation # Method: 5028 in 2617ms
ConstructorEncapsulation # Constructor: 365 in 595ms
null
null
null
null
null
null
null
null
null
null
null
null
null
null
null
null
null
null
VariableFor in 528ms
spoon.compiler.ModelBuildingException: The method getType() is undefined for the type capture#133-of ? at /tmp/NPEFix_Bears_INRIA-spoon_239865488-239871875/CloneVisitorGenerator.java:842
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.report(JDTBasedSpoonCompiler.java:581)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.reportProblems(JDTBasedSpoonCompiler.java:562)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.compile(JDTBasedSpoonCompiler.java:157)
	at fr.inria.spirals.npefix.main.all.Launcher.instrument(Launcher.java:109)
	at fr.inria.spirals.npefix.main.run.Main.run(Main.java:61)
	at fr.inria.spirals.npefix.main.run.Main.main(Main.java:48)
Exception in thread "main" spoon.compiler.ModelBuildingException: The method getType() is undefined for the type capture#133-of ? at /tmp/NPEFix_Bears_INRIA-spoon_239865488-239871875/CloneVisitorGenerator.java:842
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.report(JDTBasedSpoonCompiler.java:581)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.reportProblems(JDTBasedSpoonCompiler.java:562)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.compile(JDTBasedSpoonCompiler.java:157)
	at fr.inria.spirals.npefix.main.all.Launcher.instrument(Launcher.java:109)
	at fr.inria.spirals.npefix.main.run.Main.run(Main.java:61)
	at fr.inria.spirals.npefix.main.run.Main.main(Main.java:48)
Command exited with non-zero status 1
174.38user 2.42system 1:13.58elapsed 240%CPU (0avgtext+0avgdata 2260188maxresident)k
24816inputs+33352outputs (1major+601741minor)pagefaults 0swaps


Node: grisou-22.nancy.grid5000.fr



Date: Thu Dec 27 02:40:29 EST 2018

